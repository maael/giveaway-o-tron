(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value2) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key] = value2;
  var __spreadValues = (a3, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a3, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a3, prop, b2[prop]);
      }
    return a3;
  };
  var __spreadProps = (a3, b2) => __defProps(a3, __getOwnPropDescs(b2));
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __require = /* @__PURE__ */ ((x3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x3, {
    get: (a3, b2) => (typeof require !== "undefined" ? require : a3)[b2]
  }) : x3)(function(x3) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __reExport = (target, module2, desc) => {
    if (module2 && typeof module2 === "object" || typeof module2 === "function") {
      for (let key of __getOwnPropNames(module2))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module2) => {
    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n3) {
            return test2[n3];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from = Object(arguments[s3]);
          for (var key in from) {
            if (hasOwnProperty2.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from, symbols[i3])) {
                to[symbols[i3]] = from[symbols[i3]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn5(format3) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format3, args);
            }
          }
          function error(format3) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format3, args);
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component11(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component11.prototype.isReactComponent = {};
          Component11.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component11.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component11.prototype, methodName, {
                get: function() {
                  warn5("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component11.prototype;
          function PureComponent15(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent15.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent15;
          _assign(pureComponentPrototype, Component11.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef3() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init4 = lazyComponent._init;
                  try {
                    return getComponentName(init4(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function createElement11(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps3 = type.defaultProps;
              for (propName in defaultProps3) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps3[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement8(element2, config, children) {
            if (!!(element2 === null || element2 === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element2 + ".");
              }
            }
            var propName;
            var props = _assign({}, element2.props);
            var key = element2.key;
            var ref = element2.ref;
            var self2 = element2._self;
            var source = element2._source;
            var owner = element2._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps3;
              if (element2.type && element2.type.defaultProps) {
                defaultProps3 = element2.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps3 !== void 0) {
                    props[propName] = defaultProps3[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element2.type, key, ref, self2, source, owner, props);
          }
          function isValidElement5(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR2 = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element2, index2) {
            if (typeof element2 === "object" && element2 !== null && element2.key != null) {
              return escape("" + element2.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR2 + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement5(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR2 : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn5("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func2, context2) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func2.call(context2, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray3(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild2(children) {
            if (!isValidElement5(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext2(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2,
                _calculateChangedBits: context2._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn5("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps3;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps3;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps3 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef6(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType2(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext2(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState7(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init4) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init4);
          }
          function useRef5(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect8(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback6(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle2(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value2, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value2, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === "string") {
                var sampleLines = sample2.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component12) {
            var prototype = Component12.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init4 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init4(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element2) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element2, parentType) {
            if (!element2._store || element2._store.validated || element2.key != null) {
              return;
            }
            element2._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element2 && element2._owner && element2._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element2._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element2);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element2.props, "prop", name, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key = keys[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element2 = createElement11.apply(this, arguments);
            if (element2 == null) {
              return element2;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element2);
            } else {
              validatePropTypes(element2);
            }
            return element2;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn5("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn5("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element2, props, children) {
            var newElement = cloneElement8.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              new Map([[frozenObject, null]]);
              new Set([frozenObject]);
            } catch (e3) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children6 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray3,
            only: onlyChild2
          };
          exports.Children = Children6;
          exports.Component = Component11;
          exports.PureComponent = PureComponent15;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext2;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef3;
          exports.forwardRef = forwardRef6;
          exports.isValidElement = isValidElement5;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.useCallback = useCallback6;
          exports.useContext = useContext2;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect8;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo2;
          exports.useReducer = useReducer;
          exports.useRef = useRef5;
          exports.useState = useState7;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate2 = Date;
            var initialTime = localDate2.now();
            exports.unstable_now = function() {
              return localDate2.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e3) {
                  setTimeout(_flushCallback, 0);
                  throw e3;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i3) {
            var index2 = i3;
            while (true) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index2 = i3;
            var length2 = heap.length;
            while (index2 < length2) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b2) {
            var diff = a3.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a3.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options2) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options2 === "object" && options2 !== null) {
              var delay = options2.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React54 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React54.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn5(format3) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format3, args);
            }
          }
          function error(format3) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format3, args);
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React54) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment3 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM3 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value2) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag) {
            if (value2 === null || typeof value2 === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value2;
                case OVERLOADED_BOOLEAN:
                  return value2 === false;
                case NUMERIC:
                  return isNaN(value2);
                case POSITIVE_NUMERIC:
                  return isNaN(value2) || value2 < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref3) {
            var name = _ref3[0], attributeName = _ref3[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value2 = node.getAttribute(attributeName);
                    if (value2 === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value2;
                    }
                    if (value2 === "" + expected) {
                      return expected;
                    }
                    return value2;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value2 = node.getAttribute(name);
              if (value2 === "" + expected) {
                return expected;
              }
              return value2;
            }
          }
          function setValueForProperty(node, name, value2, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag)) {
              value2 = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value2 === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value2);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value2 === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value2;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value2 === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value2 === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value2;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match2 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === "string") {
                var sampleLines = sample2.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component11) {
            var prototype = Component11.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init4 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init4(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init4 = lazyComponent._init;
                  try {
                    return getComponentName(init4(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString2(value2) {
            return "" + value2;
          }
          function getToStringValue(value2) {
            switch (typeof value2) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value2;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value2 = "";
            if (!node) {
              return value2;
            }
            if (isCheckable(node)) {
              value2 = node.checked ? "true" : "false";
            } else {
              value2 = node.value;
            }
            return value2;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value2) {
                currentValue = "" + value2;
                set3.call(this, value2);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value2) {
                currentValue = "" + value2;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element2, props) {
            var node = element2;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element2, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element2;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element2, props) {
            var node = element2;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element2, props) {
            var node = element2;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element2, props);
            var value2 = getToStringValue(props.value);
            var type = props.type;
            if (value2 != null) {
              if (type === "number") {
                if (value2 === 0 && node.value === "" || node.value != value2) {
                  node.value = toString2(value2);
                }
              } else if (node.value !== toString2(value2)) {
                node.value = toString2(value2);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value2);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element2, props, isHydrating2) {
            var node = element2;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element2, props) {
            var node = element2;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value2) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value2 == null) {
                node.defaultValue = toString2(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString2(value2)) {
                node.defaultValue = toString2(value2);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React54.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element2, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React54.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element2, props) {
            if (props.value != null) {
              element2.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element2, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var isArray3 = Array.isArray(props[propName]);
                if (props.multiple && !isArray3) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray3) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options3 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options3.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options3[_i].value);
                if (options3[_i].selected !== selected) {
                  options3[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options3[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options3.length; _i2++) {
                if (options3[_i2].value === _selectedValue) {
                  options3[_i2].selected = true;
                  if (setDefaultSelected) {
                    options3[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options3[_i2].disabled) {
                  defaultSelected = options3[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element2, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element2, props) {
            var node = element2;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element2, props) {
            var node = element2;
            node.multiple = !!props.multiple;
            var value2 = props.value;
            if (value2 != null) {
              updateOptions(node, !!props.multiple, value2, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element2, props) {
            var node = element2;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value2 = props.value;
            if (value2 != null) {
              updateOptions(node, !!props.multiple, value2, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element2, props) {
            var node = element2;
            var value2 = props.value;
            if (value2 != null) {
              updateOptions(node, !!props.multiple, value2, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element2, props) {
            var node = element2;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element2, props) {
            var node = element2;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element2, props) {
            var node = element2;
            var value2 = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value2 != null) {
              var newValue = toString2(value2);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element2, props) {
            var node = element2;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element2, props) {
            updateWrapper$1(element2, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func2) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func2(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func2;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes2 = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes2.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value2, isCustomProperty) {
            var isEmpty = value2 == null || typeof value2 === "boolean" || value2 === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value2 === "number" && value2 !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value2 + "px";
            }
            return ("" + value2).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value2) {
              if (warnedStyleValues.hasOwnProperty(value2) && warnedStyleValues[value2]) {
                return;
              }
              warnedStyleValues[value2] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value2.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value2) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value2) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value2) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value2)) {
                warnStyleValueWithSemicolon(name, value2);
              }
              if (typeof value2 === "number") {
                if (isNaN(value2)) {
                  warnStyleValueIsNaN(name, value2);
                } else if (!isFinite(value2)) {
                  warnStyleValueIsInfinity(name, value2);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value2) {
            return value2 == null || typeof value2 === "boolean" || value2 === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value2, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value2 !== null && value2 !== void 0 && typeof value2 !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value2);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value2 === "number" && isNaN(value2)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value2 === "boolean" && shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
                if (value2) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value2, name, name, value2, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value2, name, name, value2, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value2 === "false" || value2 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value2, name, value2 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value2);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a3, b2, c3, d3) {
            return fn(a3, b2, c3, d3);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a3, b2) {
            if (isBatchingEventUpdates) {
              return fn(a3, b2);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a3, b2);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a3, b2, c3, d3) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a3, b2, c3, d3);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM3) {
            try {
              var options2 = {};
              Object.defineProperty(options2, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options2, options2);
              window.removeEventListener("test", options2, options2);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func2, context2, a3, b2, c3, d3, e3, f3) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func2.apply(context2, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func2, context2, a3, b2, c3, d3, e3, f3) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func2.apply(context2, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func2, context2, a3, b2, c3, d3, e3, f3) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func2, context2, a3, b2, c3, d3, e3, f3) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value2) {
            key._reactInternals = value2;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a3.return !== b2.return) {
                a3 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a3.alternate === b2)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a3.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (root3.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map4) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map4.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes3 = {};
            prefixes3[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes3["Webkit" + styleProp] = "webkit" + eventName;
            prefixes3["Moz" + styleProp] = "moz" + eventName;
            return prefixes3;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM3) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3 += 2) {
              var topEvent = eventTypes[i3];
              var event = eventTypes[i3 + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3++) {
              eventPriorities.set(eventTypes[i3], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root3.expiredLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index3 = 31 - clz32(lanes);
            return index3 < 0 ? NoLanes : 1 << index3;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b2) {
            return (a3 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a3, b2) {
            return a3 | b2;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b2) {
            return a3 !== NoLane && a3 < b2 ? a3 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root3.suspendedLanes &= higherPriorityLanes;
            root3.pingedLanes &= higherPriorityLanes;
            var eventTimes = root3.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root3) {
            root3.expiredLanes |= InputDiscreteLanes & root3.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root3, updateLane) {
            root3.mutableReadLanes |= updateLane & root3.pendingLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = 0;
            root3.pingedLanes = 0;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log2 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log2(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (root3.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize3 = Interface[_propName];
                if (normalize3) {
                  this[_propName] = normalize3(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM3 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM3 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM3 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM3 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars2 = nativeEvent.data;
                if (chars2 === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars2;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars2 = getData();
                reset();
                isComposing = false;
                return chars2;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars2;
            if (canUseTextInputEvent) {
              chars2 = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars2 = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars2) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars2;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM3) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element2 = document.createElement("div");
              element2.setAttribute(eventName, "return;");
              isSupported = typeof element2[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM3) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x3, y2) {
            return x3 === y2 && (x3 !== 0 || 1 / x3 === 1 / y2) || x3 !== x3 && y2 !== y2;
          }
          var objectIs2 = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual2(objA, objB) {
            if (objectIs2(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              if (!hasOwnProperty$2.call(objB, keysA[i3]) || !objectIs2(objA[keysA[i3]], objB[keysA[i3]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length2 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length2 += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range4 = doc.createRange();
              range4.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range4);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range4.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range4);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element2 = getActiveElement();
            while (element2 instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element2)) {
                win = element2.contentWindow;
              } else {
                return element2;
              }
              element2 = getActiveElement(win.document);
            }
            return element2;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM3 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM3 && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement11(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement11(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value2) {
            return value2 !== null && typeof value2 === "object" && value2.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value2, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value2;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component11, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component11)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context2 = {};
              for (var key in contextTypes) {
                context2[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context2, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context2);
              }
              return context2;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context2, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context2, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component11 = node.type;
                    if (isContextProvider(Component11)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now2 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options3) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options3);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i3 < _queue.length; i3++) {
                      var callback = _queue[i3];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i3 + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array = [];
              set3.forEach(function(value2) {
                array.push(value2);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn5("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn5("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn5("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component11, baseProps) {
            if (Component11 && Component11.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps3 = Component11.defaultProps;
              for (var propName in defaultProps3) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps3[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT2 = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context2 = providerFiber.type._context;
            {
              push(valueCursor, context2._currentValue, providerFiber);
              context2._currentValue = nextValue;
              {
                if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context2._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context2 = providerFiber.type._context;
            {
              context2._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context2, newValue, oldValue) {
            if (objectIs2(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT2;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT2) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context2, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context2, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context2)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT2) {
                lastContextWithAllBitsObserved = context2;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT2;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context: context2,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context2._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context2) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context2);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray2 = Array.isArray;
          var emptyRefsObject = new React54.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context2 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context2 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context2);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context2);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element2) {
            var mixedRef = element2.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element2._owner && element2._self && element2._owner.stateNode !== element2._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element2._owner) {
                var owner = element2._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value2) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value2 === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value2;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element2._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element2, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element2.type || isCompatibleFamilyForHotReloading(current2, element2)) {
                  var existing = useFiber(current2, element2.props);
                  existing.ref = coerceRef(returnFiber, current2, element2);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element2._source;
                    existing._debugOwner = element2._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element2, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element2);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment3) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element2, lanes) {
              var key = element2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment3: {
                      if (element2.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element2.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element2._source;
                          existing._debugOwner = element2._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element2.type || isCompatibleFamilyForHotReloading(child, element2)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element2.props);
                        _existing3.ref = coerceRef(returnFiber, child, element2);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element2._source;
                          _existing3._debugOwner = element2._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element2.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element2.props.children, returnFiber.mode, lanes, element2.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element2, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element2);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject2 = typeof newChild === "object" && newChild !== null;
              if (isObject2) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject2) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (!(c3 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context2 = requiredContext(contextStackCursor$1.current);
            return context2;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context2 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context2, fiber.type);
            if (context2 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs2(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component11, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component11(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component11(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init4) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init4 !== void 0) {
              initialState = init4(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init4) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs2(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init4) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs2(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root3, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root3.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root3 = getWorkInProgressRoot();
            if (!(root3 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root3, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs2(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs2(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root3, lane);
                }
                markRootEntangled(root3, root3.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root3, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs2(prevGetSnapshot, getSnapshot) || !objectIs2(prevSource, source) || !objectIs2(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root3, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value2, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value2) {
            var _mountState = mountState(value2), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value2);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value2]);
            return prevValue;
          }
          function updateDeferredValue(value2) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value2);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value2]);
            return prevValue;
          }
          function rerenderDeferredValue(value2) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value2);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value2]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs2(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context2, observedBits) {
                warnInvalidContextAccess();
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context2, observedBits) {
                warnInvalidContextAccess();
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context2, observedBits) {
                warnInvalidContextAccess();
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init4) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init4);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$12 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$12();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$12();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$12();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$12() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component11.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component11));
                }
              }
            }
            var render2 = Component11.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component11, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component11.type;
              if (isSimpleFunctionComponent(type) && Component11.compare === null && Component11.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component11.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component11.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component11.compare;
              compare = compare !== null ? compare : shallowEqual2;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component11, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init4 = lazyComponent._init;
                  try {
                    outerMemoType = init4(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component11, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component11.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component11));
                }
              }
            }
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component11, true);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component11, nextProps, context2, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component11, nextProps, context2, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component11, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component11.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component11));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component11)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component11, nextProps);
              mountClassInstance(workInProgress2, Component11, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component11, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component11, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component11, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component11, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component11, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component11.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component11, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root3 = workInProgress2.stateNode;
            if (root3.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root3.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i3 = 0; i3 < mutableSourceEagerHydrationData.length; i3 += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i3];
                    var version = mutableSourceEagerHydrationData[i3 + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init4 = lazyComponent._init;
            var Component11 = init4(payload);
            workInProgress2.type = Component11;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component11);
            var resolvedProps = resolveDefaultProps(Component11, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component11);
                  workInProgress2.type = Component11 = resolveFunctionForHotReloading(Component11);
                }
                child = updateFunctionComponent(null, workInProgress2, Component11, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component11 = resolveClassForHotReloading(Component11);
                }
                child = updateClassComponent(null, workInProgress2, Component11, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component11 = resolveForwardRefForHotReloading(Component11);
                }
                child = updateForwardRef(null, workInProgress2, Component11, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component11.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component11));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component11, resolveDefaultProps(Component11.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component11 !== null && typeof Component11 === "object" && Component11.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component11 + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component11, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component11)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component11, nextProps);
            mountClassInstance(workInProgress2, Component11, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component11, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component11, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component11, false);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value2;
            {
              if (Component11.prototype && typeof Component11.prototype.render === "function") {
                var componentName = getComponentName(Component11) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value2 = renderWithHooks(null, workInProgress2, Component11, props, context2, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
                var _componentName = getComponentName(Component11) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component11) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component11)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value2.state !== null && value2.state !== void 0 ? value2.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component11.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component11, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value2);
              mountClassInstance(workInProgress2, Component11, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component11, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value2 = renderWithHooks(null, workInProgress2, Component11, props, context2, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value2, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component11);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component11) {
            {
              if (Component11) {
                if (Component11.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component11.displayName || Component11.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component11.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component11) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component11.contextType === "object" && Component11.contextType !== null) {
                var _componentName4 = getComponentName(Component11) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isArray3 = Array.isArray(childSlot);
              var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
              if (isArray3 || isIterable) {
                var type = isArray3 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context2 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context2, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context2, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context2 = workInProgress2.type;
            {
              if (context2._context === void 0) {
                if (context2 !== context2.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context2 = context2._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context2, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component11 = workInProgress2.type;
                    if (isContextProvider(Component11)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment3:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment3:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component11 = workInProgress2.type;
                if (isContextProvider(Component11)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now2();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component11 = workInProgress2.type;
                if (isContextProvider(Component11)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value2, source) {
            return {
              value: value2,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root3, returnFiber, sourceFiber, value2, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value2 !== null && typeof value2 === "object" && typeof value2.then === "function") {
              var wakeable = value2;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value2 = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value2 = createCapturedValue(value2, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value2;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value2;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
            var node = root3;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root3) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root3) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root2 = finishedWork.stateNode;
                  if (_root2.hydrate) {
                    _root2.hydrate = false;
                    commitHydratedContainer(_root2.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root3 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root3, lane, eventTime);
            if (root3 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root3, lane);
                performSyncWorkOnRoot(root3);
              } else {
                ensureRootIsScheduled(root3, eventTime);
                schedulePendingInteractions(root3, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root3]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root3);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, lane);
            }
            mostRecentlyUpdatedRoot = root3;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root3.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root3, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root3.hydrate) {
                  root3.hydrate = false;
                  clearContainer(root3.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root3, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now2());
                throw fatalError;
              }
              var finishedWork = root3.current.alternate;
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
            ensureRootIsScheduled(root3, now2());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root3);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3);
                break;
              }
              case RootCompleted: {
                commitRoot(root3);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root3, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
              }
            } else {
              lanes = getNextLanes(root3, NoLanes);
              exitStatus = renderRootSync(root3, lanes);
            }
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root3);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root3, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now2());
              throw fatalError;
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3);
            ensureRootIsScheduled(root3, now2());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now2());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a3, b2, c3, d3) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a3, b2, c3, d3));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a3) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a3);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a3));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            workInProgress = createWorkInProgress(root3.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root3) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root3.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root3, lanes);
              startWorkOnPendingInteractions(root3, lanes);
            }
            var prevInteractions = pushInteractions(root3);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
              startWorkOnPendingInteractions(root3, lanes);
            }
            var prevInteractions = pushInteractions(root3);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root3) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root3, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (!(finishedWork !== root3.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root3.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) {
                rootsWithPendingDiscreteUpdates.delete(root3);
              }
            }
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root3);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root3.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i3 = 0; i3 < expirationTimes.length; i3++) {
                    scheduleInteractions(root3, expirationTimes[i3], root3.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root3, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root3, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now2());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root3, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root3, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root3, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root3, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i3 = 0; i3 < unmountEffects.length; i3 += 2) {
              var _effect = unmountEffects[i3];
              var fiber = unmountEffects[i3 + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root3.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root3, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                    schedulePendingInteractions(root3, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root3, lane) {
            return lane * 1e3 + root3.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root3, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root3.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root3, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root3, lane) {
            scheduleInteractions(root3, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root3, lanes) {
            var interactions = new Set();
            root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root3.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root3, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root3, committedLanes) {
            var remainingLanesAfterCommit = root3.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root3.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root3, committedLanes);
                subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root3.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element2) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element2.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element2) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element2, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component11) {
            var prototype = Component11.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component11) {
            if (typeof Component11 === "function") {
              return shouldConstruct$1(Component11) ? ClassComponent : FunctionComponent;
            } else if (Component11 !== void 0 && Component11 !== null) {
              var $$typeof = Component11.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element2, mode, lanes) {
            var owner = null;
            {
              owner = element2._owner;
            }
            var type = element2.type;
            var key = element2.key;
            var pendingProps = element2.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element2._source;
              fiber._debugOwner = element2._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment3, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component11 = fiber.type;
              if (isContextProvider(Component11)) {
                return processChildContext(fiber, Component11, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element2, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element2);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context2 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context2;
            } else {
              container.pendingContext = context2;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element: element2
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index3) {
              var key = path2[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index3 + 1 === path2.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn5("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn5("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index3, value2) {
              if (index3 >= path2.length) {
                return value2;
              }
              var key = path2[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value2);
              return updated;
            };
            var copyWithSet = function(obj, path2, value2) {
              return copyWithSetImpl(obj, path2, 0, value2);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path2, value2) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path2) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path2, value2) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options3) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options3);
          }
          function ReactDOMBlockingRoot(container, tag, options3) {
            this._internalRoot = createRootImpl(container, tag, options3);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            var container = root3.containerInfo;
            updateContainer(null, root3, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options3) {
            var hydrate2 = options3 != null && options3.hydrate === true;
            var hydrationCallbacks = options3 != null && options3.hydrationOptions || null;
            var mutableSources = options3 != null && options3.hydrationOptions != null && options3.hydrationOptions.mutableSources || null;
            var root3 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root3.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return root3;
          }
          function createLegacyRoot(container, options3) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn5("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root3 = container._reactRootContainer;
            var fiberRoot;
            if (!root3) {
              root3 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root3._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root3._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode2(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element2, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, true, callback);
          }
          function render(element2, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element2, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn5('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM3 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol4 = window.location.protocol;
                if (/^(https?|file):$/.test(protocol4)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol4 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode2;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment3 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment2(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment3;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment2;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module2) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i3 = 0; i3 < keys.length; ++i3) {
            var key = keys[i3];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e3) {
              }
            }
          }
        }
        return targetComponent;
      }
      module2.exports = hoistNonReactStatics;
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = Function.call.bind(Object.prototype.hasOwnProperty);
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location2 + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module2) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var checkPropTypes = require_checkPropTypes();
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement5, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x3, y2) {
          if (x3 === y2) {
            return x3 !== 0 || 1 / x3 === 1 / y2;
          } else {
            return x3 !== x3 && y2 !== y2;
          }
        }
        function PropTypeError(message) {
          this.message = message;
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error = typeChecker(propValue, i3, componentName, location2, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement5(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value2) {
              var type = getPreciseType(value2);
              if (type === "symbol") {
                return String(value2);
              }
              return value2;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              if (checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret) == null) {
                return null;
              }
            }
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (!checker) {
                continue;
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (!checker) {
                return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement5(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol2(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol2(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value2) {
          var type = getPreciseType(value2);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module2) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/path-to-regexp/node_modules/isarray/index.js
  var require_isarray = __commonJS({
    "node_modules/path-to-regexp/node_modules/isarray/index.js"(exports, module2) {
      module2.exports = Array.isArray || function(arr) {
        return Object.prototype.toString.call(arr) == "[object Array]";
      };
    }
  });

  // node_modules/path-to-regexp/index.js
  var require_path_to_regexp = __commonJS({
    "node_modules/path-to-regexp/index.js"(exports, module2) {
      var isarray = require_isarray();
      module2.exports = pathToRegexp2;
      module2.exports.parse = parse2;
      module2.exports.compile = compile;
      module2.exports.tokensToFunction = tokensToFunction;
      module2.exports.tokensToRegExp = tokensToRegExp;
      var PATH_REGEXP = new RegExp([
        "(\\\\.)",
        "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
      ].join("|"), "g");
      function parse2(str, options2) {
        var tokens = [];
        var key = 0;
        var index2 = 0;
        var path2 = "";
        var defaultDelimiter = options2 && options2.delimiter || "/";
        var res;
        while ((res = PATH_REGEXP.exec(str)) != null) {
          var m3 = res[0];
          var escaped = res[1];
          var offset = res.index;
          path2 += str.slice(index2, offset);
          index2 = offset + m3.length;
          if (escaped) {
            path2 += escaped[1];
            continue;
          }
          var next = str[index2];
          var prefix2 = res[2];
          var name = res[3];
          var capture = res[4];
          var group = res[5];
          var modifier = res[6];
          var asterisk = res[7];
          if (path2) {
            tokens.push(path2);
            path2 = "";
          }
          var partial = prefix2 != null && next != null && next !== prefix2;
          var repeat = modifier === "+" || modifier === "*";
          var optional = modifier === "?" || modifier === "*";
          var delimiter = res[2] || defaultDelimiter;
          var pattern = capture || group;
          tokens.push({
            name: name || key++,
            prefix: prefix2 || "",
            delimiter,
            optional,
            repeat,
            partial,
            asterisk: !!asterisk,
            pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter) + "]+?"
          });
        }
        if (index2 < str.length) {
          path2 += str.substr(index2);
        }
        if (path2) {
          tokens.push(path2);
        }
        return tokens;
      }
      function compile(str, options2) {
        return tokensToFunction(parse2(str, options2), options2);
      }
      function encodeURIComponentPretty(str) {
        return encodeURI(str).replace(/[\/?#]/g, function(c3) {
          return "%" + c3.charCodeAt(0).toString(16).toUpperCase();
        });
      }
      function encodeAsterisk(str) {
        return encodeURI(str).replace(/[?#]/g, function(c3) {
          return "%" + c3.charCodeAt(0).toString(16).toUpperCase();
        });
      }
      function tokensToFunction(tokens, options2) {
        var matches = new Array(tokens.length);
        for (var i3 = 0; i3 < tokens.length; i3++) {
          if (typeof tokens[i3] === "object") {
            matches[i3] = new RegExp("^(?:" + tokens[i3].pattern + ")$", flags(options2));
          }
        }
        return function(obj, opts) {
          var path2 = "";
          var data = obj || {};
          var options3 = opts || {};
          var encode3 = options3.pretty ? encodeURIComponentPretty : encodeURIComponent;
          for (var i4 = 0; i4 < tokens.length; i4++) {
            var token = tokens[i4];
            if (typeof token === "string") {
              path2 += token;
              continue;
            }
            var value2 = data[token.name];
            var segment;
            if (value2 == null) {
              if (token.optional) {
                if (token.partial) {
                  path2 += token.prefix;
                }
                continue;
              } else {
                throw new TypeError('Expected "' + token.name + '" to be defined');
              }
            }
            if (isarray(value2)) {
              if (!token.repeat) {
                throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value2) + "`");
              }
              if (value2.length === 0) {
                if (token.optional) {
                  continue;
                } else {
                  throw new TypeError('Expected "' + token.name + '" to not be empty');
                }
              }
              for (var j3 = 0; j3 < value2.length; j3++) {
                segment = encode3(value2[j3]);
                if (!matches[i4].test(segment)) {
                  throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + "`");
                }
                path2 += (j3 === 0 ? token.prefix : token.delimiter) + segment;
              }
              continue;
            }
            segment = token.asterisk ? encodeAsterisk(value2) : encode3(value2);
            if (!matches[i4].test(segment)) {
              throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
            }
            path2 += token.prefix + segment;
          }
          return path2;
        };
      }
      function escapeString(str) {
        return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
      }
      function escapeGroup(group) {
        return group.replace(/([=!:$\/()])/g, "\\$1");
      }
      function attachKeys(re3, keys) {
        re3.keys = keys;
        return re3;
      }
      function flags(options2) {
        return options2 && options2.sensitive ? "" : "i";
      }
      function regexpToRegexp(path2, keys) {
        var groups = path2.source.match(/\((?!\?)/g);
        if (groups) {
          for (var i3 = 0; i3 < groups.length; i3++) {
            keys.push({
              name: i3,
              prefix: null,
              delimiter: null,
              optional: false,
              repeat: false,
              partial: false,
              asterisk: false,
              pattern: null
            });
          }
        }
        return attachKeys(path2, keys);
      }
      function arrayToRegexp(path2, keys, options2) {
        var parts2 = [];
        for (var i3 = 0; i3 < path2.length; i3++) {
          parts2.push(pathToRegexp2(path2[i3], keys, options2).source);
        }
        var regexp = new RegExp("(?:" + parts2.join("|") + ")", flags(options2));
        return attachKeys(regexp, keys);
      }
      function stringToRegexp(path2, keys, options2) {
        return tokensToRegExp(parse2(path2, options2), keys, options2);
      }
      function tokensToRegExp(tokens, keys, options2) {
        if (!isarray(keys)) {
          options2 = keys || options2;
          keys = [];
        }
        options2 = options2 || {};
        var strict = options2.strict;
        var end = options2.end !== false;
        var route = "";
        for (var i3 = 0; i3 < tokens.length; i3++) {
          var token = tokens[i3];
          if (typeof token === "string") {
            route += escapeString(token);
          } else {
            var prefix2 = escapeString(token.prefix);
            var capture = "(?:" + token.pattern + ")";
            keys.push(token);
            if (token.repeat) {
              capture += "(?:" + prefix2 + capture + ")*";
            }
            if (token.optional) {
              if (!token.partial) {
                capture = "(?:" + prefix2 + "(" + capture + "))?";
              } else {
                capture = prefix2 + "(" + capture + ")?";
              }
            } else {
              capture = prefix2 + "(" + capture + ")";
            }
            route += capture;
          }
        }
        var delimiter = escapeString(options2.delimiter || "/");
        var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
        if (!strict) {
          route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + "(?:" + delimiter + "(?=$))?";
        }
        if (end) {
          route += "$";
        } else {
          route += strict && endsWithDelimiter ? "" : "(?=" + delimiter + "|$)";
        }
        return attachKeys(new RegExp("^" + route, flags(options2)), keys);
      }
      function pathToRegexp2(path2, keys, options2) {
        if (!isarray(keys)) {
          options2 = keys || options2;
          keys = [];
        }
        options2 = options2 || {};
        if (path2 instanceof RegExp) {
          return regexpToRegexp(path2, keys);
        }
        if (isarray(path2)) {
          return arrayToRegexp(path2, keys, options2);
        }
        return stringToRegexp(path2, keys, options2);
      }
    }
  });

  // (disabled):node_modules/ws/index.js
  var require_ws = __commonJS({
    "(disabled):node_modules/ws/index.js"() {
    }
  });

  // (disabled):node_modules/node-fetch/browser.js
  var require_browser = __commonJS({
    "(disabled):node_modules/node-fetch/browser.js"() {
    }
  });

  // node_modules/tmi.js/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/tmi.js/lib/utils.js"(exports, module2) {
      var actionMessageRegex = /^\u0001ACTION ([^\u0001]+)\u0001$/;
      var justinFanRegex = /^(justinfan)(\d+$)/;
      var unescapeIRCRegex = /\\([sn:r\\])/g;
      var escapeIRCRegex = /([ \n;\r\\])/g;
      var ircEscapedChars = { s: " ", n: "", ":": ";", r: "" };
      var ircUnescapedChars = { " ": "s", "\n": "n", ";": ":", "\r": "r" };
      var urlRegex = new RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$", "i");
      var regexEmoteRegex = /[|\\^$*+?:#]/;
      var _2 = module2.exports = {
        get: (a3, b2) => typeof a3 === "undefined" ? b2 : a3,
        hasOwn: (obj, key) => ({}).hasOwnProperty.call(obj, key),
        promiseDelay: (time2) => new Promise((resolve) => setTimeout(resolve, time2)),
        isFinite: (int) => isFinite(int) && !isNaN(parseFloat(int)),
        toNumber(num, precision) {
          if (num === null) {
            return 0;
          }
          const factor = Math.pow(10, _2.isFinite(precision) ? precision : 0);
          return Math.round(num * factor) / factor;
        },
        isInteger: (int) => !isNaN(_2.toNumber(int, 0)),
        isRegex: (str) => regexEmoteRegex.test(str),
        isURL: (str) => urlRegex.test(str),
        justinfan: () => `justinfan${Math.floor(Math.random() * 8e4 + 1e3)}`,
        isJustinfan: (username) => justinFanRegex.test(username),
        channel(str) {
          const channel = (str ? str : "").toLowerCase();
          return channel[0] === "#" ? channel : "#" + channel;
        },
        username(str) {
          const username = (str ? str : "").toLowerCase();
          return username[0] === "#" ? username.slice(1) : username;
        },
        token: (str) => str ? str.toLowerCase().replace("oauth:", "") : "",
        password(str) {
          const token = _2.token(str);
          return token ? `oauth:${token}` : "";
        },
        actionMessage: (msg) => msg.match(actionMessageRegex),
        replaceAll(str, obj) {
          if (str === null || typeof str === "undefined") {
            return null;
          }
          for (const x3 in obj) {
            str = str.replace(new RegExp(x3, "g"), obj[x3]);
          }
          return str;
        },
        unescapeHtml: (safe) => safe.replace(/\\&amp\\;/g, "&").replace(/\\&lt\\;/g, "<").replace(/\\&gt\\;/g, ">").replace(/\\&quot\\;/g, '"').replace(/\\&#039\\;/g, "'"),
        unescapeIRC(msg) {
          if (!msg || typeof msg !== "string" || !msg.includes("\\")) {
            return msg;
          }
          return msg.replace(unescapeIRCRegex, (m3, p2) => p2 in ircEscapedChars ? ircEscapedChars[p2] : p2);
        },
        escapeIRC(msg) {
          if (!msg || typeof msg !== "string") {
            return msg;
          }
          return msg.replace(escapeIRCRegex, (m3, p2) => p2 in ircUnescapedChars ? `\\${ircUnescapedChars[p2]}` : p2);
        },
        addWord: (line, word) => line.length ? line + " " + word : line + word,
        splitLine(input, length2) {
          let lastSpace = input.substring(0, length2).lastIndexOf(" ");
          if (lastSpace === -1) {
            lastSpace = length2 - 1;
          }
          return [input.substring(0, lastSpace), input.substring(lastSpace + 1)];
        },
        extractNumber(str) {
          const parts2 = str.split(" ");
          for (let i3 = 0; i3 < parts2.length; i3++) {
            if (_2.isInteger(parts2[i3])) {
              return ~~parts2[i3];
            }
          }
          return 0;
        },
        formatDate(date2) {
          let hours2 = date2.getHours();
          let mins = date2.getMinutes();
          hours2 = (hours2 < 10 ? "0" : "") + hours2;
          mins = (mins < 10 ? "0" : "") + mins;
          return `${hours2}:${mins}`;
        },
        inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          const TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        },
        isNode() {
          try {
            return typeof process === "object" && Object.prototype.toString.call(process) === "[object process]";
          } catch (e3) {
          }
          return false;
        }
      };
    }
  });

  // node_modules/tmi.js/lib/api.js
  var require_api = __commonJS({
    "node_modules/tmi.js/lib/api.js"(exports, module2) {
      var fetch2 = require_browser();
      var _2 = require_utils();
      module2.exports = function api(options2, callback) {
        let url2 = options2.url !== void 0 ? options2.url : options2.uri;
        if (!_2.isURL(url2)) {
          url2 = `https://api.twitch.tv/kraken${url2[0] === "/" ? url2 : `/${url2}`}`;
        }
        if (_2.isNode()) {
          const opts = Object.assign({ method: "GET", json: true }, options2);
          if (opts.qs) {
            const qs = new URLSearchParams(opts.qs);
            url2 += `?${qs}`;
          }
          const fetchOptions = {};
          if ("fetchAgent" in this.opts.connection) {
            fetchOptions.agent = this.opts.connection.fetchAgent;
          }
          const fetchPromise = fetch2(url2, __spreadProps(__spreadValues({}, fetchOptions), {
            method: opts.method,
            headers: opts.headers,
            body: opts.body
          }));
          let response = {};
          fetchPromise.then((res) => {
            response = { statusCode: res.status, headers: res.headers };
            return opts.json ? res.json() : res.text();
          }).then((data) => callback(null, response, data), (err) => callback(err, response, null));
        } else {
          const opts = Object.assign({ method: "GET", headers: {} }, options2, { url: url2 });
          const xhr = new XMLHttpRequest();
          xhr.open(opts.method, opts.url, true);
          for (const name in opts.headers) {
            xhr.setRequestHeader(name, opts.headers[name]);
          }
          xhr.responseType = "json";
          xhr.addEventListener("load", (_ev) => {
            if (xhr.readyState === 4) {
              if (xhr.status !== 200) {
                callback(xhr.status, null, null);
              } else {
                callback(null, null, xhr.response);
              }
            }
          });
          xhr.send();
        }
      };
    }
  });

  // node_modules/tmi.js/lib/commands.js
  var require_commands = __commonJS({
    "node_modules/tmi.js/lib/commands.js"(exports, module2) {
      var _2 = require_utils();
      function followersonly(channel, minutes2) {
        channel = _2.channel(channel);
        minutes2 = _2.get(minutes2, 30);
        return this._sendCommand(null, channel, `/followers ${minutes2}`, (resolve, reject) => {
          this.once("_promiseFollowers", (err) => {
            if (!err) {
              resolve([channel, ~~minutes2]);
            } else {
              reject(err);
            }
          });
        });
      }
      function followersonlyoff(channel) {
        channel = _2.channel(channel);
        return this._sendCommand(null, channel, "/followersoff", (resolve, reject) => {
          this.once("_promiseFollowersoff", (err) => {
            if (!err) {
              resolve([channel]);
            } else {
              reject(err);
            }
          });
        });
      }
      function part(channel) {
        channel = _2.channel(channel);
        return this._sendCommand(null, null, `PART ${channel}`, (resolve, reject) => {
          this.once("_promisePart", (err) => {
            if (!err) {
              resolve([channel]);
            } else {
              reject(err);
            }
          });
        });
      }
      function r9kbeta(channel) {
        channel = _2.channel(channel);
        return this._sendCommand(null, channel, "/r9kbeta", (resolve, reject) => {
          this.once("_promiseR9kbeta", (err) => {
            if (!err) {
              resolve([channel]);
            } else {
              reject(err);
            }
          });
        });
      }
      function r9kbetaoff(channel) {
        channel = _2.channel(channel);
        return this._sendCommand(null, channel, "/r9kbetaoff", (resolve, reject) => {
          this.once("_promiseR9kbetaoff", (err) => {
            if (!err) {
              resolve([channel]);
            } else {
              reject(err);
            }
          });
        });
      }
      function slow(channel, seconds2) {
        channel = _2.channel(channel);
        seconds2 = _2.get(seconds2, 300);
        return this._sendCommand(null, channel, `/slow ${seconds2}`, (resolve, reject) => {
          this.once("_promiseSlow", (err) => {
            if (!err) {
              resolve([channel, ~~seconds2]);
            } else {
              reject(err);
            }
          });
        });
      }
      function slowoff(channel) {
        channel = _2.channel(channel);
        return this._sendCommand(null, channel, "/slowoff", (resolve, reject) => {
          this.once("_promiseSlowoff", (err) => {
            if (!err) {
              resolve([channel]);
            } else {
              reject(err);
            }
          });
        });
      }
      module2.exports = {
        action(channel, message) {
          channel = _2.channel(channel);
          message = `ACTION ${message}`;
          return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {
            resolve([channel, message]);
          });
        },
        ban(channel, username, reason) {
          channel = _2.channel(channel);
          username = _2.username(username);
          reason = _2.get(reason, "");
          return this._sendCommand(null, channel, `/ban ${username} ${reason}`, (resolve, reject) => {
            this.once("_promiseBan", (err) => {
              if (!err) {
                resolve([channel, username, reason]);
              } else {
                reject(err);
              }
            });
          });
        },
        clear(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/clear", (resolve, reject) => {
            this.once("_promiseClear", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        color(channel, newColor) {
          newColor = _2.get(newColor, channel);
          return this._sendCommand(null, "#tmijs", `/color ${newColor}`, (resolve, reject) => {
            this.once("_promiseColor", (err) => {
              if (!err) {
                resolve([newColor]);
              } else {
                reject(err);
              }
            });
          });
        },
        commercial(channel, seconds2) {
          channel = _2.channel(channel);
          seconds2 = _2.get(seconds2, 30);
          return this._sendCommand(null, channel, `/commercial ${seconds2}`, (resolve, reject) => {
            this.once("_promiseCommercial", (err) => {
              if (!err) {
                resolve([channel, ~~seconds2]);
              } else {
                reject(err);
              }
            });
          });
        },
        deletemessage(channel, messageUUID) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, `/delete ${messageUUID}`, (resolve, reject) => {
            this.once("_promiseDeletemessage", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        emoteonly(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/emoteonly", (resolve, reject) => {
            this.once("_promiseEmoteonly", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        emoteonlyoff(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/emoteonlyoff", (resolve, reject) => {
            this.once("_promiseEmoteonlyoff", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        followersonly,
        followersmode: followersonly,
        followersonlyoff,
        followersmodeoff: followersonlyoff,
        host(channel, target) {
          channel = _2.channel(channel);
          target = _2.username(target);
          return this._sendCommand(2e3, channel, `/host ${target}`, (resolve, reject) => {
            this.once("_promiseHost", (err, remaining) => {
              if (!err) {
                resolve([channel, target, ~~remaining]);
              } else {
                reject(err);
              }
            });
          });
        },
        join(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(void 0, null, `JOIN ${channel}`, (resolve, reject) => {
            const eventName = "_promiseJoin";
            let hasFulfilled = false;
            const listener = (err, joinedChannel) => {
              if (channel === _2.channel(joinedChannel)) {
                this.removeListener(eventName, listener);
                hasFulfilled = true;
                if (!err) {
                  resolve([channel]);
                } else {
                  reject(err);
                }
              }
            };
            this.on(eventName, listener);
            const delay = this._getPromiseDelay();
            _2.promiseDelay(delay).then(() => {
              if (!hasFulfilled) {
                this.emit(eventName, "No response from Twitch.", channel);
              }
            });
          });
        },
        mod(channel, username) {
          channel = _2.channel(channel);
          username = _2.username(username);
          return this._sendCommand(null, channel, `/mod ${username}`, (resolve, reject) => {
            this.once("_promiseMod", (err) => {
              if (!err) {
                resolve([channel, username]);
              } else {
                reject(err);
              }
            });
          });
        },
        mods(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/mods", (resolve, reject) => {
            this.once("_promiseMods", (err, mods) => {
              if (!err) {
                mods.forEach((username) => {
                  if (!this.moderators[channel]) {
                    this.moderators[channel] = [];
                  }
                  if (!this.moderators[channel].includes(username)) {
                    this.moderators[channel].push(username);
                  }
                });
                resolve(mods);
              } else {
                reject(err);
              }
            });
          });
        },
        part,
        leave: part,
        ping() {
          return this._sendCommand(null, null, "PING", (resolve, _reject) => {
            this.latency = new Date();
            this.pingTimeout = setTimeout(() => {
              if (this.ws !== null) {
                this.wasCloseCalled = false;
                this.log.error("Ping timeout.");
                this.ws.close();
                clearInterval(this.pingLoop);
                clearTimeout(this.pingTimeout);
              }
            }, _2.get(this.opts.connection.timeout, 9999));
            this.once("_promisePing", (latency) => resolve([parseFloat(latency)]));
          });
        },
        r9kbeta,
        r9kmode: r9kbeta,
        r9kbetaoff,
        r9kmodeoff: r9kbetaoff,
        raw(message) {
          return this._sendCommand(null, null, message, (resolve, _reject) => {
            resolve([message]);
          });
        },
        say(channel, message) {
          channel = _2.channel(channel);
          if (message.startsWith(".") && !message.startsWith("..") || message.startsWith("/") || message.startsWith("\\")) {
            if (message.substr(1, 3) === "me ") {
              return this.action(channel, message.substr(4));
            } else {
              return this._sendCommand(null, channel, message, (resolve, _reject) => {
                resolve([channel, message]);
              });
            }
          }
          return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {
            resolve([channel, message]);
          });
        },
        slow,
        slowmode: slow,
        slowoff,
        slowmodeoff: slowoff,
        subscribers(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/subscribers", (resolve, reject) => {
            this.once("_promiseSubscribers", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        subscribersoff(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/subscribersoff", (resolve, reject) => {
            this.once("_promiseSubscribersoff", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        timeout(channel, username, seconds2, reason) {
          channel = _2.channel(channel);
          username = _2.username(username);
          if (seconds2 !== null && !_2.isInteger(seconds2)) {
            reason = seconds2;
            seconds2 = 300;
          }
          seconds2 = _2.get(seconds2, 300);
          reason = _2.get(reason, "");
          return this._sendCommand(null, channel, `/timeout ${username} ${seconds2} ${reason}`, (resolve, reject) => {
            this.once("_promiseTimeout", (err) => {
              if (!err) {
                resolve([channel, username, ~~seconds2, reason]);
              } else {
                reject(err);
              }
            });
          });
        },
        unban(channel, username) {
          channel = _2.channel(channel);
          username = _2.username(username);
          return this._sendCommand(null, channel, `/unban ${username}`, (resolve, reject) => {
            this.once("_promiseUnban", (err) => {
              if (!err) {
                resolve([channel, username]);
              } else {
                reject(err);
              }
            });
          });
        },
        unhost(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(2e3, channel, "/unhost", (resolve, reject) => {
            this.once("_promiseUnhost", (err) => {
              if (!err) {
                resolve([channel]);
              } else {
                reject(err);
              }
            });
          });
        },
        unmod(channel, username) {
          channel = _2.channel(channel);
          username = _2.username(username);
          return this._sendCommand(null, channel, `/unmod ${username}`, (resolve, reject) => {
            this.once("_promiseUnmod", (err) => {
              if (!err) {
                resolve([channel, username]);
              } else {
                reject(err);
              }
            });
          });
        },
        unvip(channel, username) {
          channel = _2.channel(channel);
          username = _2.username(username);
          return this._sendCommand(null, channel, `/unvip ${username}`, (resolve, reject) => {
            this.once("_promiseUnvip", (err) => {
              if (!err) {
                resolve([channel, username]);
              } else {
                reject(err);
              }
            });
          });
        },
        vip(channel, username) {
          channel = _2.channel(channel);
          username = _2.username(username);
          return this._sendCommand(null, channel, `/vip ${username}`, (resolve, reject) => {
            this.once("_promiseVip", (err) => {
              if (!err) {
                resolve([channel, username]);
              } else {
                reject(err);
              }
            });
          });
        },
        vips(channel) {
          channel = _2.channel(channel);
          return this._sendCommand(null, channel, "/vips", (resolve, reject) => {
            this.once("_promiseVips", (err, vips) => {
              if (!err) {
                resolve(vips);
              } else {
                reject(err);
              }
            });
          });
        },
        whisper(username, message) {
          username = _2.username(username);
          if (username === this.getUsername()) {
            return Promise.reject("Cannot send a whisper to the same account.");
          }
          return this._sendCommand(null, "#tmijs", `/w ${username} ${message}`, (_resolve, reject) => {
            this.once("_promiseWhisper", (err) => {
              if (err) {
                reject(err);
              }
            });
          }).catch((err) => {
            if (err && typeof err === "string" && err.indexOf("No response from Twitch.") !== 0) {
              throw err;
            }
            const from = _2.channel(username);
            const userstate = Object.assign({
              "message-type": "whisper",
              "message-id": null,
              "thread-id": null,
              username: this.getUsername()
            }, this.globaluserstate);
            this.emits(["whisper", "message"], [
              [from, userstate, message, true],
              [from, userstate, message, true]
            ]);
            return [username, message];
          });
        }
      };
    }
  });

  // node_modules/tmi.js/lib/events.js
  var require_events = __commonJS({
    "node_modules/tmi.js/lib/events.js"(exports, module2) {
      function EventEmitter2() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || void 0;
      }
      module2.exports = EventEmitter2;
      EventEmitter2.EventEmitter = EventEmitter2;
      EventEmitter2.prototype._events = void 0;
      EventEmitter2.prototype._maxListeners = void 0;
      EventEmitter2.defaultMaxListeners = 10;
      EventEmitter2.prototype.setMaxListeners = function(n3) {
        if (!isNumber3(n3) || n3 < 0 || isNaN(n3)) {
          throw TypeError("n must be a positive number");
        }
        this._maxListeners = n3;
        return this;
      };
      EventEmitter2.prototype.emit = function(type) {
        var er, handler, len, args, i3, listeners;
        if (!this._events) {
          this._events = {};
        }
        if (type === "error") {
          if (!this._events.error || isObject2(this._events.error) && !this._events.error.length) {
            er = arguments[1];
            if (er instanceof Error) {
              throw er;
            }
            throw TypeError('Uncaught, unspecified "error" event.');
          }
        }
        handler = this._events[type];
        if (isUndefined(handler)) {
          return false;
        }
        if (isFunction2(handler)) {
          switch (arguments.length) {
            case 1:
              handler.call(this);
              break;
            case 2:
              handler.call(this, arguments[1]);
              break;
            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
            default:
              args = Array.prototype.slice.call(arguments, 1);
              handler.apply(this, args);
          }
        } else if (isObject2(handler)) {
          args = Array.prototype.slice.call(arguments, 1);
          listeners = handler.slice();
          len = listeners.length;
          for (i3 = 0; i3 < len; i3++) {
            listeners[i3].apply(this, args);
          }
        }
        return true;
      };
      EventEmitter2.prototype.addListener = function(type, listener) {
        var m3;
        if (!isFunction2(listener)) {
          throw TypeError("listener must be a function");
        }
        if (!this._events) {
          this._events = {};
        }
        if (this._events.newListener) {
          this.emit("newListener", type, isFunction2(listener.listener) ? listener.listener : listener);
        }
        if (!this._events[type]) {
          this._events[type] = listener;
        } else if (isObject2(this._events[type])) {
          this._events[type].push(listener);
        } else {
          this._events[type] = [this._events[type], listener];
        }
        if (isObject2(this._events[type]) && !this._events[type].warned) {
          if (!isUndefined(this._maxListeners)) {
            m3 = this._maxListeners;
          } else {
            m3 = EventEmitter2.defaultMaxListeners;
          }
          if (m3 && m3 > 0 && this._events[type].length > m3) {
            this._events[type].warned = true;
            console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
            if (typeof console.trace === "function") {
              console.trace();
            }
          }
        }
        return this;
      };
      EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
      EventEmitter2.prototype.once = function(type, listener) {
        if (!isFunction2(listener)) {
          throw TypeError("listener must be a function");
        }
        var fired = false;
        if (this._events.hasOwnProperty(type) && type.charAt(0) === "_") {
          var count = 1;
          var searchFor = type;
          for (var k3 in this._events) {
            if (this._events.hasOwnProperty(k3) && k3.startsWith(searchFor)) {
              count++;
            }
          }
          type = type + count;
        }
        function g3() {
          if (type.charAt(0) === "_" && !isNaN(type.substr(type.length - 1))) {
            type = type.substring(0, type.length - 1);
          }
          this.removeListener(type, g3);
          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }
        g3.listener = listener;
        this.on(type, g3);
        return this;
      };
      EventEmitter2.prototype.removeListener = function(type, listener) {
        var list, position, length2, i3;
        if (!isFunction2(listener)) {
          throw TypeError("listener must be a function");
        }
        if (!this._events || !this._events[type]) {
          return this;
        }
        list = this._events[type];
        length2 = list.length;
        position = -1;
        if (list === listener || isFunction2(list.listener) && list.listener === listener) {
          delete this._events[type];
          if (this._events.hasOwnProperty(type + "2") && type.charAt(0) === "_") {
            var searchFor = type;
            for (var k3 in this._events) {
              if (this._events.hasOwnProperty(k3) && k3.startsWith(searchFor)) {
                if (!isNaN(parseInt(k3.substr(k3.length - 1)))) {
                  this._events[type + parseInt(k3.substr(k3.length - 1) - 1)] = this._events[k3];
                  delete this._events[k3];
                }
              }
            }
            this._events[type] = this._events[type + "1"];
            delete this._events[type + "1"];
          }
          if (this._events.removeListener) {
            this.emit("removeListener", type, listener);
          }
        } else if (isObject2(list)) {
          for (i3 = length2; i3-- > 0; ) {
            if (list[i3] === listener || list[i3].listener && list[i3].listener === listener) {
              position = i3;
              break;
            }
          }
          if (position < 0) {
            return this;
          }
          if (list.length === 1) {
            list.length = 0;
            delete this._events[type];
          } else {
            list.splice(position, 1);
          }
          if (this._events.removeListener) {
            this.emit("removeListener", type, listener);
          }
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function(type) {
        var key, listeners;
        if (!this._events) {
          return this;
        }
        if (!this._events.removeListener) {
          if (arguments.length === 0) {
            this._events = {};
          } else if (this._events[type]) {
            delete this._events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          for (key in this._events) {
            if (key === "removeListener") {
              continue;
            }
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = {};
          return this;
        }
        listeners = this._events[type];
        if (isFunction2(listeners)) {
          this.removeListener(type, listeners);
        } else if (listeners) {
          while (listeners.length) {
            this.removeListener(type, listeners[listeners.length - 1]);
          }
        }
        delete this._events[type];
        return this;
      };
      EventEmitter2.prototype.listeners = function(type) {
        var ret;
        if (!this._events || !this._events[type]) {
          ret = [];
        } else if (isFunction2(this._events[type])) {
          ret = [this._events[type]];
        } else {
          ret = this._events[type].slice();
        }
        return ret;
      };
      EventEmitter2.prototype.listenerCount = function(type) {
        if (this._events) {
          var evlistener = this._events[type];
          if (isFunction2(evlistener)) {
            return 1;
          } else if (evlistener) {
            return evlistener.length;
          }
        }
        return 0;
      };
      EventEmitter2.listenerCount = function(emitter, type) {
        return emitter.listenerCount(type);
      };
      function isFunction2(arg) {
        return typeof arg === "function";
      }
      function isNumber3(arg) {
        return typeof arg === "number";
      }
      function isObject2(arg) {
        return typeof arg === "object" && arg !== null;
      }
      function isUndefined(arg) {
        return arg === void 0;
      }
    }
  });

  // node_modules/tmi.js/lib/logger.js
  var require_logger = __commonJS({
    "node_modules/tmi.js/lib/logger.js"(exports, module2) {
      var _2 = require_utils();
      var currentLevel = "info";
      var levels = { "trace": 0, "debug": 1, "info": 2, "warn": 3, "error": 4, "fatal": 5 };
      function log2(level) {
        return function(message) {
          if (levels[level] >= levels[currentLevel]) {
            console.log(`[${_2.formatDate(new Date())}] ${level}: ${message}`);
          }
        };
      }
      module2.exports = {
        setLevel(level) {
          currentLevel = level;
        },
        trace: log2("trace"),
        debug: log2("debug"),
        info: log2("info"),
        warn: log2("warn"),
        error: log2("error"),
        fatal: log2("fatal")
      };
    }
  });

  // node_modules/tmi.js/lib/parser.js
  var require_parser = __commonJS({
    "node_modules/tmi.js/lib/parser.js"(exports, module2) {
      var _2 = require_utils();
      var nonspaceRegex = /\S+/g;
      function parseComplexTag(tags, tagKey, splA = ",", splB = "/", splC) {
        const raw = tags[tagKey];
        if (raw === void 0) {
          return tags;
        }
        const tagIsString = typeof raw === "string";
        tags[tagKey + "-raw"] = tagIsString ? raw : null;
        if (raw === true) {
          tags[tagKey] = null;
          return tags;
        }
        tags[tagKey] = {};
        if (tagIsString) {
          const spl = raw.split(splA);
          for (let i3 = 0; i3 < spl.length; i3++) {
            const parts2 = spl[i3].split(splB);
            let val = parts2[1];
            if (splC !== void 0 && val) {
              val = val.split(splC);
            }
            tags[tagKey][parts2[0]] = val || null;
          }
        }
        return tags;
      }
      module2.exports = {
        badges: (tags) => parseComplexTag(tags, "badges"),
        badgeInfo: (tags) => parseComplexTag(tags, "badge-info"),
        emotes: (tags) => parseComplexTag(tags, "emotes", "/", ":", ","),
        emoteRegex(msg, code, id, obj) {
          nonspaceRegex.lastIndex = 0;
          const regex = new RegExp("(\\b|^|\\s)" + _2.unescapeHtml(code) + "(\\b|$|\\s)");
          let match2;
          while ((match2 = nonspaceRegex.exec(msg)) !== null) {
            if (regex.test(match2[0])) {
              obj[id] = obj[id] || [];
              obj[id].push([match2.index, nonspaceRegex.lastIndex - 1]);
            }
          }
        },
        emoteString(msg, code, id, obj) {
          nonspaceRegex.lastIndex = 0;
          let match2;
          while ((match2 = nonspaceRegex.exec(msg)) !== null) {
            if (match2[0] === _2.unescapeHtml(code)) {
              obj[id] = obj[id] || [];
              obj[id].push([match2.index, nonspaceRegex.lastIndex - 1]);
            }
          }
        },
        transformEmotes(emotes) {
          let transformed = "";
          Object.keys(emotes).forEach((id) => {
            transformed = `${transformed + id}:`;
            emotes[id].forEach((index2) => transformed = `${transformed + index2.join("-")},`);
            transformed = `${transformed.slice(0, -1)}/`;
          });
          return transformed.slice(0, -1);
        },
        formTags(tags) {
          const result = [];
          for (const key in tags) {
            const value2 = _2.escapeIRC(tags[key]);
            result.push(`${key}=${value2}`);
          }
          return `@${result.join(";")}`;
        },
        msg(data) {
          const message = {
            raw: data,
            tags: {},
            prefix: null,
            command: null,
            params: []
          };
          let position = 0;
          let nextspace = 0;
          if (data.charCodeAt(0) === 64) {
            nextspace = data.indexOf(" ");
            if (nextspace === -1) {
              return null;
            }
            const rawTags = data.slice(1, nextspace).split(";");
            for (let i3 = 0; i3 < rawTags.length; i3++) {
              const tag = rawTags[i3];
              const pair = tag.split("=");
              message.tags[pair[0]] = tag.substring(tag.indexOf("=") + 1) || true;
            }
            position = nextspace + 1;
          }
          while (data.charCodeAt(position) === 32) {
            position++;
          }
          if (data.charCodeAt(position) === 58) {
            nextspace = data.indexOf(" ", position);
            if (nextspace === -1) {
              return null;
            }
            message.prefix = data.slice(position + 1, nextspace);
            position = nextspace + 1;
            while (data.charCodeAt(position) === 32) {
              position++;
            }
          }
          nextspace = data.indexOf(" ", position);
          if (nextspace === -1) {
            if (data.length > position) {
              message.command = data.slice(position);
              return message;
            }
            return null;
          }
          message.command = data.slice(position, nextspace);
          position = nextspace + 1;
          while (data.charCodeAt(position) === 32) {
            position++;
          }
          while (position < data.length) {
            nextspace = data.indexOf(" ", position);
            if (data.charCodeAt(position) === 58) {
              message.params.push(data.slice(position + 1));
              break;
            }
            if (nextspace !== -1) {
              message.params.push(data.slice(position, nextspace));
              position = nextspace + 1;
              while (data.charCodeAt(position) === 32) {
                position++;
              }
              continue;
            }
            if (nextspace === -1) {
              message.params.push(data.slice(position));
              break;
            }
          }
          return message;
        }
      };
    }
  });

  // node_modules/tmi.js/lib/timer.js
  var require_timer = __commonJS({
    "node_modules/tmi.js/lib/timer.js"(exports, module2) {
      var Queue = class {
        constructor(defaultDelay) {
          this.queue = [];
          this.index = 0;
          this.defaultDelay = defaultDelay === void 0 ? 3e3 : defaultDelay;
        }
        add(fn, delay) {
          this.queue.push({ fn, delay });
        }
        next() {
          const i3 = this.index++;
          const at = this.queue[i3];
          if (!at) {
            return;
          }
          const next = this.queue[this.index];
          at.fn();
          if (next) {
            const delay = next.delay === void 0 ? this.defaultDelay : next.delay;
            setTimeout(() => this.next(), delay);
          }
        }
      };
      module2.exports = Queue;
    }
  });

  // node_modules/tmi.js/lib/client.js
  var require_client = __commonJS({
    "node_modules/tmi.js/lib/client.js"(exports, module2) {
      var _global = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
      var _WebSocket = _global.WebSocket || require_ws();
      var _fetch = _global.fetch || require_browser();
      var api = require_api();
      var commands = require_commands();
      var EventEmitter2 = require_events().EventEmitter;
      var logger2 = require_logger();
      var parse2 = require_parser();
      var Queue = require_timer();
      var _2 = require_utils();
      var _apiWarned = false;
      var client = function client2(opts) {
        if (this instanceof client2 === false) {
          return new client2(opts);
        }
        this.opts = _2.get(opts, {});
        this.opts.channels = this.opts.channels || [];
        this.opts.connection = this.opts.connection || {};
        this.opts.identity = this.opts.identity || {};
        this.opts.options = this.opts.options || {};
        this.clientId = _2.get(this.opts.options.clientId, null);
        this._globalDefaultChannel = _2.channel(_2.get(this.opts.options.globalDefaultChannel, "#tmijs"));
        this._skipMembership = _2.get(this.opts.options.skipMembership, false);
        this._skipUpdatingEmotesets = _2.get(this.opts.options.skipUpdatingEmotesets, false);
        this._updateEmotesetsTimer = null;
        this._updateEmotesetsTimerDelay = _2.get(this.opts.options.updateEmotesetsTimer, 6e4);
        this.maxReconnectAttempts = _2.get(this.opts.connection.maxReconnectAttempts, Infinity);
        this.maxReconnectInterval = _2.get(this.opts.connection.maxReconnectInterval, 3e4);
        this.reconnect = _2.get(this.opts.connection.reconnect, true);
        this.reconnectDecay = _2.get(this.opts.connection.reconnectDecay, 1.5);
        this.reconnectInterval = _2.get(this.opts.connection.reconnectInterval, 1e3);
        this.reconnecting = false;
        this.reconnections = 0;
        this.reconnectTimer = this.reconnectInterval;
        this.secure = _2.get(this.opts.connection.secure, !this.opts.connection.server && !this.opts.connection.port);
        this.emotes = "";
        this.emotesets = {};
        this.channels = [];
        this.currentLatency = 0;
        this.globaluserstate = {};
        this.lastJoined = "";
        this.latency = new Date();
        this.moderators = {};
        this.pingLoop = null;
        this.pingTimeout = null;
        this.reason = "";
        this.username = "";
        this.userstate = {};
        this.wasCloseCalled = false;
        this.ws = null;
        let level = "error";
        if (this.opts.options.debug) {
          level = "info";
        }
        this.log = this.opts.logger || logger2;
        try {
          logger2.setLevel(level);
        } catch (err) {
        }
        this.opts.channels.forEach((part, index2, theArray) => theArray[index2] = _2.channel(part));
        EventEmitter2.call(this);
        this.setMaxListeners(0);
      };
      _2.inherits(client, EventEmitter2);
      for (const methodName in commands) {
        client.prototype[methodName] = commands[methodName];
      }
      client.prototype.emits = function emits(types, values) {
        for (let i3 = 0; i3 < types.length; i3++) {
          const val = i3 < values.length ? values[i3] : values[values.length - 1];
          this.emit.apply(this, [types[i3]].concat(val));
        }
      };
      client.prototype.api = function(...args) {
        if (!_apiWarned) {
          this.log.warn("Client.prototype.api is deprecated and will be removed for version 2.0.0");
          _apiWarned = true;
        }
        api(...args);
      };
      client.prototype.handleMessage = function handleMessage(message) {
        if (!message) {
          return;
        }
        if (this.listenerCount("raw_message")) {
          this.emit("raw_message", JSON.parse(JSON.stringify(message)), message);
        }
        const channel = _2.channel(_2.get(message.params[0], null));
        let msg = _2.get(message.params[1], null);
        const msgid = _2.get(message.tags["msg-id"], null);
        const tags = message.tags = parse2.badges(parse2.badgeInfo(parse2.emotes(message.tags)));
        for (const key in tags) {
          if (key === "emote-sets" || key === "ban-duration" || key === "bits") {
            continue;
          }
          let value2 = tags[key];
          if (typeof value2 === "boolean") {
            value2 = null;
          } else if (value2 === "1") {
            value2 = true;
          } else if (value2 === "0") {
            value2 = false;
          } else if (typeof value2 === "string") {
            value2 = _2.unescapeIRC(value2);
          }
          tags[key] = value2;
        }
        if (message.prefix === null) {
          switch (message.command) {
            case "PING":
              this.emit("ping");
              if (this._isConnected()) {
                this.ws.send("PONG");
              }
              break;
            case "PONG": {
              const currDate = new Date();
              this.currentLatency = (currDate.getTime() - this.latency.getTime()) / 1e3;
              this.emits(["pong", "_promisePing"], [[this.currentLatency]]);
              clearTimeout(this.pingTimeout);
              break;
            }
            default:
              this.log.warn(`Could not parse message with no prefix:
${JSON.stringify(message, null, 4)}`);
              break;
          }
        } else if (message.prefix === "tmi.twitch.tv") {
          switch (message.command) {
            case "002":
            case "003":
            case "004":
            case "372":
            case "375":
            case "CAP":
              break;
            case "001":
              this.username = message.params[0];
              break;
            case "376": {
              this.log.info("Connected to server.");
              this.userstate[this._globalDefaultChannel] = {};
              this.emits(["connected", "_promiseConnect"], [[this.server, this.port], [null]]);
              this.reconnections = 0;
              this.reconnectTimer = this.reconnectInterval;
              this.pingLoop = setInterval(() => {
                if (this._isConnected()) {
                  this.ws.send("PING");
                }
                this.latency = new Date();
                this.pingTimeout = setTimeout(() => {
                  if (this.ws !== null) {
                    this.wasCloseCalled = false;
                    this.log.error("Ping timeout.");
                    this.ws.close();
                    clearInterval(this.pingLoop);
                    clearTimeout(this.pingTimeout);
                    clearTimeout(this._updateEmotesetsTimer);
                  }
                }, _2.get(this.opts.connection.timeout, 9999));
              }, 6e4);
              let joinInterval = _2.get(this.opts.options.joinInterval, 2e3);
              if (joinInterval < 300) {
                joinInterval = 300;
              }
              const joinQueue = new Queue(joinInterval);
              const joinChannels = [...new Set([...this.opts.channels, ...this.channels])];
              this.channels = [];
              for (let i3 = 0; i3 < joinChannels.length; i3++) {
                const channel2 = joinChannels[i3];
                joinQueue.add(() => {
                  if (this._isConnected()) {
                    this.join(channel2).catch((err) => this.log.error(err));
                  }
                });
              }
              joinQueue.next();
              break;
            }
            case "NOTICE": {
              const nullArr = [null];
              const noticeArr = [channel, msgid, msg];
              const msgidArr = [msgid];
              const channelTrueArr = [channel, true];
              const channelFalseArr = [channel, false];
              const noticeAndNull = [noticeArr, nullArr];
              const noticeAndMsgid = [noticeArr, msgidArr];
              const basicLog = `[${channel}] ${msg}`;
              switch (msgid) {
                case "subs_on":
                  this.log.info(`[${channel}] This room is now in subscribers-only mode.`);
                  this.emits(["subscriber", "subscribers", "_promiseSubscribers"], [channelTrueArr, channelTrueArr, nullArr]);
                  break;
                case "subs_off":
                  this.log.info(`[${channel}] This room is no longer in subscribers-only mode.`);
                  this.emits(["subscriber", "subscribers", "_promiseSubscribersoff"], [channelFalseArr, channelFalseArr, nullArr]);
                  break;
                case "emote_only_on":
                  this.log.info(`[${channel}] This room is now in emote-only mode.`);
                  this.emits(["emoteonly", "_promiseEmoteonly"], [channelTrueArr, nullArr]);
                  break;
                case "emote_only_off":
                  this.log.info(`[${channel}] This room is no longer in emote-only mode.`);
                  this.emits(["emoteonly", "_promiseEmoteonlyoff"], [channelFalseArr, nullArr]);
                  break;
                case "slow_on":
                case "slow_off":
                  break;
                case "followers_on_zero":
                case "followers_on":
                case "followers_off":
                  break;
                case "r9k_on":
                  this.log.info(`[${channel}] This room is now in r9k mode.`);
                  this.emits(["r9kmode", "r9kbeta", "_promiseR9kbeta"], [channelTrueArr, channelTrueArr, nullArr]);
                  break;
                case "r9k_off":
                  this.log.info(`[${channel}] This room is no longer in r9k mode.`);
                  this.emits(["r9kmode", "r9kbeta", "_promiseR9kbetaoff"], [channelFalseArr, channelFalseArr, nullArr]);
                  break;
                case "room_mods": {
                  const listSplit = msg.split(": ");
                  const mods = (listSplit.length > 1 ? listSplit[1] : "").toLowerCase().split(", ").filter((n3) => n3);
                  this.emits(["_promiseMods", "mods"], [[null, mods], [channel, mods]]);
                  break;
                }
                case "no_mods":
                  this.emits(["_promiseMods", "mods"], [[null, []], [channel, []]]);
                  break;
                case "vips_success": {
                  if (msg.endsWith(".")) {
                    msg = msg.slice(0, -1);
                  }
                  const listSplit = msg.split(": ");
                  const vips = (listSplit.length > 1 ? listSplit[1] : "").toLowerCase().split(", ").filter((n3) => n3);
                  this.emits(["_promiseVips", "vips"], [[null, vips], [channel, vips]]);
                  break;
                }
                case "no_vips":
                  this.emits(["_promiseVips", "vips"], [[null, []], [channel, []]]);
                  break;
                case "already_banned":
                case "bad_ban_admin":
                case "bad_ban_anon":
                case "bad_ban_broadcaster":
                case "bad_ban_global_mod":
                case "bad_ban_mod":
                case "bad_ban_self":
                case "bad_ban_staff":
                case "usage_ban":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseBan"], noticeAndMsgid);
                  break;
                case "ban_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseBan"], noticeAndNull);
                  break;
                case "usage_clear":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseClear"], noticeAndMsgid);
                  break;
                case "usage_mods":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseMods"], [noticeArr, [msgid, []]]);
                  break;
                case "mod_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseMod"], noticeAndNull);
                  break;
                case "usage_vips":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseVips"], [noticeArr, [msgid, []]]);
                  break;
                case "usage_vip":
                case "bad_vip_grantee_banned":
                case "bad_vip_grantee_already_vip":
                case "bad_vip_max_vips_reached":
                case "bad_vip_achievement_incomplete":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseVip"], [noticeArr, [msgid, []]]);
                  break;
                case "vip_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseVip"], noticeAndNull);
                  break;
                case "usage_mod":
                case "bad_mod_banned":
                case "bad_mod_mod":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseMod"], noticeAndMsgid);
                  break;
                case "unmod_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnmod"], noticeAndNull);
                  break;
                case "unvip_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnvip"], noticeAndNull);
                  break;
                case "usage_unmod":
                case "bad_unmod_mod":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnmod"], noticeAndMsgid);
                  break;
                case "usage_unvip":
                case "bad_unvip_grantee_not_vip":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnvip"], noticeAndMsgid);
                  break;
                case "color_changed":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseColor"], noticeAndNull);
                  break;
                case "usage_color":
                case "turbo_only_color":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseColor"], noticeAndMsgid);
                  break;
                case "commercial_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseCommercial"], noticeAndNull);
                  break;
                case "usage_commercial":
                case "bad_commercial_error":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseCommercial"], noticeAndMsgid);
                  break;
                case "hosts_remaining": {
                  this.log.info(basicLog);
                  const remainingHost = !isNaN(msg[0]) ? parseInt(msg[0]) : 0;
                  this.emits(["notice", "_promiseHost"], [noticeArr, [null, ~~remainingHost]]);
                  break;
                }
                case "bad_host_hosting":
                case "bad_host_rate_exceeded":
                case "bad_host_error":
                case "usage_host":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseHost"], [noticeArr, [msgid, null]]);
                  break;
                case "already_r9k_on":
                case "usage_r9k_on":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseR9kbeta"], noticeAndMsgid);
                  break;
                case "already_r9k_off":
                case "usage_r9k_off":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseR9kbetaoff"], noticeAndMsgid);
                  break;
                case "timeout_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseTimeout"], noticeAndNull);
                  break;
                case "delete_message_success":
                  this.log.info(`[${channel} ${msg}]`);
                  this.emits(["notice", "_promiseDeletemessage"], noticeAndNull);
                  break;
                case "already_subs_off":
                case "usage_subs_off":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseSubscribersoff"], noticeAndMsgid);
                  break;
                case "already_subs_on":
                case "usage_subs_on":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseSubscribers"], noticeAndMsgid);
                  break;
                case "already_emote_only_off":
                case "usage_emote_only_off":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseEmoteonlyoff"], noticeAndMsgid);
                  break;
                case "already_emote_only_on":
                case "usage_emote_only_on":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseEmoteonly"], noticeAndMsgid);
                  break;
                case "usage_slow_on":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseSlow"], noticeAndMsgid);
                  break;
                case "usage_slow_off":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseSlowoff"], noticeAndMsgid);
                  break;
                case "usage_timeout":
                case "bad_timeout_admin":
                case "bad_timeout_anon":
                case "bad_timeout_broadcaster":
                case "bad_timeout_duration":
                case "bad_timeout_global_mod":
                case "bad_timeout_mod":
                case "bad_timeout_self":
                case "bad_timeout_staff":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseTimeout"], noticeAndMsgid);
                  break;
                case "untimeout_success":
                case "unban_success":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnban"], noticeAndNull);
                  break;
                case "usage_unban":
                case "bad_unban_no_ban":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnban"], noticeAndMsgid);
                  break;
                case "usage_delete":
                case "bad_delete_message_error":
                case "bad_delete_message_broadcaster":
                case "bad_delete_message_mod":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseDeletemessage"], noticeAndMsgid);
                  break;
                case "usage_unhost":
                case "not_hosting":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseUnhost"], noticeAndMsgid);
                  break;
                case "whisper_invalid_login":
                case "whisper_invalid_self":
                case "whisper_limit_per_min":
                case "whisper_limit_per_sec":
                case "whisper_restricted":
                case "whisper_restricted_recipient":
                  this.log.info(basicLog);
                  this.emits(["notice", "_promiseWhisper"], noticeAndMsgid);
                  break;
                case "no_permission":
                case "msg_banned":
                case "msg_room_not_found":
                case "msg_channel_suspended":
                case "tos_ban":
                case "invalid_user":
                  this.log.info(basicLog);
                  this.emits([
                    "notice",
                    "_promiseBan",
                    "_promiseClear",
                    "_promiseUnban",
                    "_promiseTimeout",
                    "_promiseDeletemessage",
                    "_promiseMods",
                    "_promiseMod",
                    "_promiseUnmod",
                    "_promiseVips",
                    "_promiseVip",
                    "_promiseUnvip",
                    "_promiseCommercial",
                    "_promiseHost",
                    "_promiseUnhost",
                    "_promiseJoin",
                    "_promisePart",
                    "_promiseR9kbeta",
                    "_promiseR9kbetaoff",
                    "_promiseSlow",
                    "_promiseSlowoff",
                    "_promiseFollowers",
                    "_promiseFollowersoff",
                    "_promiseSubscribers",
                    "_promiseSubscribersoff",
                    "_promiseEmoteonly",
                    "_promiseEmoteonlyoff",
                    "_promiseWhisper"
                  ], [noticeArr, [msgid, channel]]);
                  break;
                case "msg_rejected":
                case "msg_rejected_mandatory":
                  this.log.info(basicLog);
                  this.emit("automod", channel, msgid, msg);
                  break;
                case "unrecognized_cmd":
                  this.log.info(basicLog);
                  this.emit("notice", channel, msgid, msg);
                  break;
                case "cmds_available":
                case "host_target_went_offline":
                case "msg_censored_broadcaster":
                case "msg_duplicate":
                case "msg_emoteonly":
                case "msg_verified_email":
                case "msg_ratelimit":
                case "msg_subsonly":
                case "msg_timedout":
                case "msg_bad_characters":
                case "msg_channel_blocked":
                case "msg_facebook":
                case "msg_followersonly":
                case "msg_followersonly_followed":
                case "msg_followersonly_zero":
                case "msg_slowmode":
                case "msg_suspended":
                case "no_help":
                case "usage_disconnect":
                case "usage_help":
                case "usage_me":
                case "unavailable_command":
                  this.log.info(basicLog);
                  this.emit("notice", channel, msgid, msg);
                  break;
                case "host_on":
                case "host_off":
                  break;
                default:
                  if (msg.includes("Login unsuccessful") || msg.includes("Login authentication failed")) {
                    this.wasCloseCalled = false;
                    this.reconnect = false;
                    this.reason = msg;
                    this.log.error(this.reason);
                    this.ws.close();
                  } else if (msg.includes("Error logging in") || msg.includes("Improperly formatted auth")) {
                    this.wasCloseCalled = false;
                    this.reconnect = false;
                    this.reason = msg;
                    this.log.error(this.reason);
                    this.ws.close();
                  } else if (msg.includes("Invalid NICK")) {
                    this.wasCloseCalled = false;
                    this.reconnect = false;
                    this.reason = "Invalid NICK.";
                    this.log.error(this.reason);
                    this.ws.close();
                  } else {
                    this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:
${JSON.stringify(message, null, 4)}`);
                    this.emit("notice", channel, msgid, msg);
                  }
                  break;
              }
              break;
            }
            case "USERNOTICE": {
              const username = tags["display-name"] || tags["login"];
              const plan = tags["msg-param-sub-plan"] || "";
              const planName = _2.unescapeIRC(_2.get(tags["msg-param-sub-plan-name"], "")) || null;
              const prime = plan.includes("Prime");
              const methods = { prime, plan, planName };
              const streakMonths = ~~(tags["msg-param-streak-months"] || 0);
              const recipient = tags["msg-param-recipient-display-name"] || tags["msg-param-recipient-user-name"];
              const giftSubCount = ~~tags["msg-param-mass-gift-count"];
              tags["message-type"] = msgid;
              switch (msgid) {
                case "resub":
                  this.emits(["resub", "subanniversary"], [
                    [channel, username, streakMonths, msg, tags, methods]
                  ]);
                  break;
                case "sub":
                  this.emits(["subscription", "sub"], [
                    [channel, username, methods, msg, tags]
                  ]);
                  break;
                case "subgift":
                  this.emit("subgift", channel, username, streakMonths, recipient, methods, tags);
                  break;
                case "anonsubgift":
                  this.emit("anonsubgift", channel, streakMonths, recipient, methods, tags);
                  break;
                case "submysterygift":
                  this.emit("submysterygift", channel, username, giftSubCount, methods, tags);
                  break;
                case "anonsubmysterygift":
                  this.emit("anonsubmysterygift", channel, giftSubCount, methods, tags);
                  break;
                case "primepaidupgrade":
                  this.emit("primepaidupgrade", channel, username, methods, tags);
                  break;
                case "giftpaidupgrade": {
                  const sender = tags["msg-param-sender-name"] || tags["msg-param-sender-login"];
                  this.emit("giftpaidupgrade", channel, username, sender, tags);
                  break;
                }
                case "anongiftpaidupgrade":
                  this.emit("anongiftpaidupgrade", channel, username, tags);
                  break;
                case "raid": {
                  const username2 = tags["msg-param-displayName"] || tags["msg-param-login"];
                  const viewers = +tags["msg-param-viewerCount"];
                  this.emit("raided", channel, username2, viewers, tags);
                  break;
                }
                case "ritual": {
                  const ritualName = tags["msg-param-ritual-name"];
                  switch (ritualName) {
                    case "new_chatter":
                      this.emit("newchatter", channel, username, tags, msg);
                      break;
                    default:
                      this.emit("ritual", ritualName, channel, username, tags, msg);
                      break;
                  }
                  break;
                }
                default:
                  this.emit("usernotice", msgid, channel, tags, msg);
                  break;
              }
              break;
            }
            case "HOSTTARGET": {
              const msgSplit = msg.split(" ");
              const viewers = ~~msgSplit[1] || 0;
              if (msgSplit[0] === "-") {
                this.log.info(`[${channel}] Exited host mode.`);
                this.emits(["unhost", "_promiseUnhost"], [[channel, viewers], [null]]);
              } else {
                this.log.info(`[${channel}] Now hosting ${msgSplit[0]} for ${viewers} viewer(s).`);
                this.emit("hosting", channel, msgSplit[0], viewers);
              }
              break;
            }
            case "CLEARCHAT":
              if (message.params.length > 1) {
                const duration = _2.get(message.tags["ban-duration"], null);
                if (duration === null) {
                  this.log.info(`[${channel}] ${msg} has been banned.`);
                  this.emit("ban", channel, msg, null, message.tags);
                } else {
                  this.log.info(`[${channel}] ${msg} has been timed out for ${duration} seconds.`);
                  this.emit("timeout", channel, msg, null, ~~duration, message.tags);
                }
              } else {
                this.log.info(`[${channel}] Chat was cleared by a moderator.`);
                this.emits(["clearchat", "_promiseClear"], [[channel], [null]]);
              }
              break;
            case "CLEARMSG":
              if (message.params.length > 1) {
                const deletedMessage = msg;
                const username = tags["login"];
                tags["message-type"] = "messagedeleted";
                this.log.info(`[${channel}] ${username}'s message has been deleted.`);
                this.emit("messagedeleted", channel, username, deletedMessage, tags);
              }
              break;
            case "RECONNECT":
              this.log.info("Received RECONNECT request from Twitch..");
              this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer / 1e3)} seconds..`);
              this.disconnect().catch((err) => this.log.error(err));
              setTimeout(() => this.connect().catch((err) => this.log.error(err)), this.reconnectTimer);
              break;
            case "USERSTATE":
              message.tags.username = this.username;
              if (message.tags["user-type"] === "mod") {
                if (!this.moderators[channel]) {
                  this.moderators[channel] = [];
                }
                if (!this.moderators[channel].includes(this.username)) {
                  this.moderators[channel].push(this.username);
                }
              }
              if (!_2.isJustinfan(this.getUsername()) && !this.userstate[channel]) {
                this.userstate[channel] = tags;
                this.lastJoined = channel;
                this.channels.push(channel);
                this.log.info(`Joined ${channel}`);
                this.emit("join", channel, _2.username(this.getUsername()), true);
              }
              if (message.tags["emote-sets"] !== this.emotes) {
                this._updateEmoteset(message.tags["emote-sets"]);
              }
              this.userstate[channel] = tags;
              break;
            case "GLOBALUSERSTATE":
              this.globaluserstate = tags;
              this.emit("globaluserstate", tags);
              if (typeof message.tags["emote-sets"] !== "undefined") {
                this._updateEmoteset(message.tags["emote-sets"]);
              }
              break;
            case "ROOMSTATE":
              if (_2.channel(this.lastJoined) === channel) {
                this.emit("_promiseJoin", null, channel);
              }
              message.tags.channel = channel;
              this.emit("roomstate", channel, message.tags);
              if (!_2.hasOwn(message.tags, "subs-only")) {
                if (_2.hasOwn(message.tags, "slow")) {
                  if (typeof message.tags.slow === "boolean" && !message.tags.slow) {
                    const disabled = [channel, false, 0];
                    this.log.info(`[${channel}] This room is no longer in slow mode.`);
                    this.emits(["slow", "slowmode", "_promiseSlowoff"], [disabled, disabled, [null]]);
                  } else {
                    const seconds2 = ~~message.tags.slow;
                    const enabled = [channel, true, seconds2];
                    this.log.info(`[${channel}] This room is now in slow mode.`);
                    this.emits(["slow", "slowmode", "_promiseSlow"], [enabled, enabled, [null]]);
                  }
                }
                if (_2.hasOwn(message.tags, "followers-only")) {
                  if (message.tags["followers-only"] === "-1") {
                    const disabled = [channel, false, 0];
                    this.log.info(`[${channel}] This room is no longer in followers-only mode.`);
                    this.emits(["followersonly", "followersmode", "_promiseFollowersoff"], [disabled, disabled, [null]]);
                  } else {
                    const minutes2 = ~~message.tags["followers-only"];
                    const enabled = [channel, true, minutes2];
                    this.log.info(`[${channel}] This room is now in follower-only mode.`);
                    this.emits(["followersonly", "followersmode", "_promiseFollowers"], [enabled, enabled, [null]]);
                  }
                }
              }
              break;
            case "SERVERCHANGE":
              break;
            default:
              this.log.warn(`Could not parse message from tmi.twitch.tv:
${JSON.stringify(message, null, 4)}`);
              break;
          }
        } else if (message.prefix === "jtv") {
          switch (message.command) {
            case "MODE":
              if (msg === "+o") {
                if (!this.moderators[channel]) {
                  this.moderators[channel] = [];
                }
                if (!this.moderators[channel].includes(message.params[2])) {
                  this.moderators[channel].push(message.params[2]);
                }
                this.emit("mod", channel, message.params[2]);
              } else if (msg === "-o") {
                if (!this.moderators[channel]) {
                  this.moderators[channel] = [];
                }
                this.moderators[channel].filter((value2) => value2 !== message.params[2]);
                this.emit("unmod", channel, message.params[2]);
              }
              break;
            default:
              this.log.warn(`Could not parse message from jtv:
${JSON.stringify(message, null, 4)}`);
              break;
          }
        } else {
          switch (message.command) {
            case "353":
              this.emit("names", message.params[2], message.params[3].split(" "));
              break;
            case "366":
              break;
            case "JOIN": {
              const nick = message.prefix.split("!")[0];
              if (_2.isJustinfan(this.getUsername()) && this.username === nick) {
                this.lastJoined = channel;
                this.channels.push(channel);
                this.log.info(`Joined ${channel}`);
                this.emit("join", channel, nick, true);
              }
              if (this.username !== nick) {
                this.emit("join", channel, nick, false);
              }
              break;
            }
            case "PART": {
              let isSelf = false;
              const nick = message.prefix.split("!")[0];
              if (this.username === nick) {
                isSelf = true;
                if (this.userstate[channel]) {
                  delete this.userstate[channel];
                }
                let index2 = this.channels.indexOf(channel);
                if (index2 !== -1) {
                  this.channels.splice(index2, 1);
                }
                index2 = this.opts.channels.indexOf(channel);
                if (index2 !== -1) {
                  this.opts.channels.splice(index2, 1);
                }
                this.log.info(`Left ${channel}`);
                this.emit("_promisePart", null);
              }
              this.emit("part", channel, nick, isSelf);
              break;
            }
            case "WHISPER": {
              const nick = message.prefix.split("!")[0];
              this.log.info(`[WHISPER] <${nick}>: ${msg}`);
              if (!_2.hasOwn(message.tags, "username")) {
                message.tags.username = nick;
              }
              message.tags["message-type"] = "whisper";
              const from = _2.channel(message.tags.username);
              this.emits(["whisper", "message"], [
                [from, message.tags, msg, false]
              ]);
              break;
            }
            case "PRIVMSG":
              message.tags.username = message.prefix.split("!")[0];
              if (message.tags.username === "jtv") {
                const name = _2.username(msg.split(" ")[0]);
                const autohost = msg.includes("auto");
                if (msg.includes("hosting you for")) {
                  const count = _2.extractNumber(msg);
                  this.emit("hosted", channel, name, count, autohost);
                } else if (msg.includes("hosting you")) {
                  this.emit("hosted", channel, name, 0, autohost);
                }
              } else {
                const messagesLogLevel = _2.get(this.opts.options.messagesLogLevel, "info");
                const actionMessage = _2.actionMessage(msg);
                message.tags["message-type"] = actionMessage ? "action" : "chat";
                msg = actionMessage ? actionMessage[1] : msg;
                if (_2.hasOwn(message.tags, "bits")) {
                  this.emit("cheer", channel, message.tags, msg);
                } else {
                  if (_2.hasOwn(message.tags, "msg-id")) {
                    if (message.tags["msg-id"] === "highlighted-message") {
                      const rewardtype = message.tags["msg-id"];
                      this.emit("redeem", channel, message.tags.username, rewardtype, message.tags, msg);
                    } else if (message.tags["msg-id"] === "skip-subs-mode-message") {
                      const rewardtype = message.tags["msg-id"];
                      this.emit("redeem", channel, message.tags.username, rewardtype, message.tags, msg);
                    }
                  } else if (_2.hasOwn(message.tags, "custom-reward-id")) {
                    const rewardtype = message.tags["custom-reward-id"];
                    this.emit("redeem", channel, message.tags.username, rewardtype, message.tags, msg);
                  }
                  if (actionMessage) {
                    this.log[messagesLogLevel](`[${channel}] *<${message.tags.username}>: ${msg}`);
                    this.emits(["action", "message"], [
                      [channel, message.tags, msg, false]
                    ]);
                  } else {
                    this.log[messagesLogLevel](`[${channel}] <${message.tags.username}>: ${msg}`);
                    this.emits(["chat", "message"], [
                      [channel, message.tags, msg, false]
                    ]);
                  }
                }
              }
              break;
            default:
              this.log.warn(`Could not parse message:
${JSON.stringify(message, null, 4)}`);
              break;
          }
        }
      };
      client.prototype.connect = function connect() {
        return new Promise((resolve, reject) => {
          this.server = _2.get(this.opts.connection.server, "irc-ws.chat.twitch.tv");
          this.port = _2.get(this.opts.connection.port, 80);
          if (this.secure) {
            this.port = 443;
          }
          if (this.port === 443) {
            this.secure = true;
          }
          this.reconnectTimer = this.reconnectTimer * this.reconnectDecay;
          if (this.reconnectTimer >= this.maxReconnectInterval) {
            this.reconnectTimer = this.maxReconnectInterval;
          }
          this._openConnection();
          this.once("_promiseConnect", (err) => {
            if (!err) {
              resolve([this.server, ~~this.port]);
            } else {
              reject(err);
            }
          });
        });
      };
      client.prototype._openConnection = function _openConnection() {
        const url2 = `${this.secure ? "wss" : "ws"}://${this.server}:${this.port}/`;
        const connectionOptions = {};
        if ("agent" in this.opts.connection) {
          connectionOptions.agent = this.opts.connection.agent;
        }
        this.ws = new _WebSocket(url2, "irc", connectionOptions);
        this.ws.onmessage = this._onMessage.bind(this);
        this.ws.onerror = this._onError.bind(this);
        this.ws.onclose = this._onClose.bind(this);
        this.ws.onopen = this._onOpen.bind(this);
      };
      client.prototype._onOpen = function _onOpen() {
        if (!this._isConnected()) {
          return;
        }
        this.log.info(`Connecting to ${this.server} on port ${this.port}..`);
        this.emit("connecting", this.server, ~~this.port);
        this.username = _2.get(this.opts.identity.username, _2.justinfan());
        this._getToken().then((token) => {
          const password = _2.password(token);
          this.log.info("Sending authentication to server..");
          this.emit("logon");
          let caps = "twitch.tv/tags twitch.tv/commands";
          if (!this._skipMembership) {
            caps += " twitch.tv/membership";
          }
          this.ws.send("CAP REQ :" + caps);
          if (password) {
            this.ws.send(`PASS ${password}`);
          } else if (_2.isJustinfan(this.username)) {
            this.ws.send("PASS SCHMOOPIIE");
          }
          this.ws.send(`NICK ${this.username}`);
        }).catch((err) => {
          this.emits(["_promiseConnect", "disconnected"], [[err], ["Could not get a token."]]);
        });
      };
      client.prototype._getToken = function _getToken() {
        const passwordOption = this.opts.identity.password;
        let password;
        if (typeof passwordOption === "function") {
          password = passwordOption();
          if (password instanceof Promise) {
            return password;
          }
          return Promise.resolve(password);
        }
        return Promise.resolve(passwordOption);
      };
      client.prototype._onMessage = function _onMessage(event) {
        const parts2 = event.data.trim().split("\r\n");
        parts2.forEach((str) => {
          const msg = parse2.msg(str);
          if (msg) {
            this.handleMessage(msg);
          }
        });
      };
      client.prototype._onError = function _onError() {
        this.moderators = {};
        this.userstate = {};
        this.globaluserstate = {};
        clearInterval(this.pingLoop);
        clearTimeout(this.pingTimeout);
        clearTimeout(this._updateEmotesetsTimer);
        this.reason = this.ws === null ? "Connection closed." : "Unable to connect.";
        this.emits(["_promiseConnect", "disconnected"], [[this.reason]]);
        if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {
          this.emit("maxreconnect");
          this.log.error("Maximum reconnection attempts reached.");
        }
        if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {
          this.reconnecting = true;
          this.reconnections = this.reconnections + 1;
          this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer / 1e3)} seconds..`);
          this.emit("reconnect");
          setTimeout(() => {
            this.reconnecting = false;
            this.connect().catch((err) => this.log.error(err));
          }, this.reconnectTimer);
        }
        this.ws = null;
      };
      client.prototype._onClose = function _onClose() {
        this.moderators = {};
        this.userstate = {};
        this.globaluserstate = {};
        clearInterval(this.pingLoop);
        clearTimeout(this.pingTimeout);
        clearTimeout(this._updateEmotesetsTimer);
        if (this.wasCloseCalled) {
          this.wasCloseCalled = false;
          this.reason = "Connection closed.";
          this.log.info(this.reason);
          this.emits(["_promiseConnect", "_promiseDisconnect", "disconnected"], [[this.reason], [null], [this.reason]]);
        } else {
          this.emits(["_promiseConnect", "disconnected"], [[this.reason]]);
          if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {
            this.emit("maxreconnect");
            this.log.error("Maximum reconnection attempts reached.");
          }
          if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {
            this.reconnecting = true;
            this.reconnections = this.reconnections + 1;
            this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer / 1e3)} seconds..`);
            this.emit("reconnect");
            setTimeout(() => {
              this.reconnecting = false;
              this.connect().catch((err) => this.log.error(err));
            }, this.reconnectTimer);
          }
        }
        this.ws = null;
      };
      client.prototype._getPromiseDelay = function _getPromiseDelay() {
        if (this.currentLatency <= 600) {
          return 600;
        } else {
          return this.currentLatency + 100;
        }
      };
      client.prototype._sendCommand = function _sendCommand(delay, channel, command, fn) {
        return new Promise((resolve, reject) => {
          if (!this._isConnected()) {
            return reject("Not connected to server.");
          } else if (delay === null || typeof delay === "number") {
            if (delay === null) {
              delay = this._getPromiseDelay();
            }
            _2.promiseDelay(delay).then(() => reject("No response from Twitch."));
          }
          if (channel !== null) {
            const chan = _2.channel(channel);
            this.log.info(`[${chan}] Executing command: ${command}`);
            this.ws.send(`PRIVMSG ${chan} :${command}`);
          } else {
            this.log.info(`Executing command: ${command}`);
            this.ws.send(command);
          }
          if (typeof fn === "function") {
            fn(resolve, reject);
          } else {
            resolve();
          }
        });
      };
      client.prototype._sendMessage = function _sendMessage(delay, channel, message, fn) {
        return new Promise((resolve, reject) => {
          if (!this._isConnected()) {
            return reject("Not connected to server.");
          } else if (_2.isJustinfan(this.getUsername())) {
            return reject("Cannot send anonymous messages.");
          }
          const chan = _2.channel(channel);
          if (!this.userstate[chan]) {
            this.userstate[chan] = {};
          }
          if (message.length >= 500) {
            const msg = _2.splitLine(message, 500);
            message = msg[0];
            setTimeout(() => {
              this._sendMessage(delay, channel, msg[1], () => {
              });
            }, 350);
          }
          this.ws.send(`PRIVMSG ${chan} :${message}`);
          const emotes = {};
          Object.keys(this.emotesets).forEach((id) => this.emotesets[id].forEach((emote) => {
            const emoteFunc = _2.isRegex(emote.code) ? parse2.emoteRegex : parse2.emoteString;
            return emoteFunc(message, emote.code, emote.id, emotes);
          }));
          const userstate = Object.assign(this.userstate[chan], parse2.emotes({ emotes: parse2.transformEmotes(emotes) || null }));
          const messagesLogLevel = _2.get(this.opts.options.messagesLogLevel, "info");
          const actionMessage = _2.actionMessage(message);
          if (actionMessage) {
            userstate["message-type"] = "action";
            this.log[messagesLogLevel](`[${chan}] *<${this.getUsername()}>: ${actionMessage[1]}`);
            this.emits(["action", "message"], [
              [chan, userstate, actionMessage[1], true]
            ]);
          } else {
            userstate["message-type"] = "chat";
            this.log[messagesLogLevel](`[${chan}] <${this.getUsername()}>: ${message}`);
            this.emits(["chat", "message"], [
              [chan, userstate, message, true]
            ]);
          }
          if (typeof fn === "function") {
            fn(resolve, reject);
          } else {
            resolve();
          }
        });
      };
      client.prototype._updateEmoteset = function _updateEmoteset(sets) {
        let setsChanges = sets !== void 0;
        if (setsChanges) {
          if (sets === this.emotes) {
            setsChanges = false;
          } else {
            this.emotes = sets;
          }
        }
        if (this._skipUpdatingEmotesets) {
          if (setsChanges) {
            this.emit("emotesets", sets, {});
          }
          return;
        }
        const setEmotesetTimer = () => {
          if (this._updateEmotesetsTimerDelay > 0) {
            clearTimeout(this._updateEmotesetsTimer);
            this._updateEmotesetsTimer = setTimeout(() => this._updateEmoteset(sets), this._updateEmotesetsTimerDelay);
          }
        };
        this._getToken().then((token) => {
          const url2 = `https://api.twitch.tv/kraken/chat/emoticon_images?emotesets=${sets}`;
          const fetchOptions = {};
          if ("fetchAgent" in this.opts.connection) {
            fetchOptions.agent = this.opts.connection.fetchAgent;
          }
          return _fetch(url2, __spreadProps(__spreadValues({}, fetchOptions), {
            headers: {
              "Accept": "application/vnd.twitchtv.v5+json",
              "Authorization": `OAuth ${_2.token(token)}`,
              "Client-ID": this.clientId
            }
          }));
        }).then((res) => res.json()).then((data) => {
          this.emotesets = data.emoticon_sets || {};
          this.emit("emotesets", sets, this.emotesets);
          setEmotesetTimer();
        }).catch(() => setEmotesetTimer());
      };
      client.prototype.getUsername = function getUsername() {
        return this.username;
      };
      client.prototype.getOptions = function getOptions() {
        return this.opts;
      };
      client.prototype.getChannels = function getChannels() {
        return this.channels;
      };
      client.prototype.isMod = function isMod(channel, username) {
        const chan = _2.channel(channel);
        if (!this.moderators[chan]) {
          this.moderators[chan] = [];
        }
        return this.moderators[chan].includes(_2.username(username));
      };
      client.prototype.readyState = function readyState() {
        if (this.ws === null) {
          return "CLOSED";
        }
        return ["CONNECTING", "OPEN", "CLOSING", "CLOSED"][this.ws.readyState];
      };
      client.prototype._isConnected = function _isConnected() {
        return this.ws !== null && this.ws.readyState === 1;
      };
      client.prototype.disconnect = function disconnect() {
        return new Promise((resolve, reject) => {
          if (this.ws !== null && this.ws.readyState !== 3) {
            this.wasCloseCalled = true;
            this.log.info("Disconnecting from server..");
            this.ws.close();
            this.once("_promiseDisconnect", () => resolve([this.server, ~~this.port]));
          } else {
            this.log.error("Cannot disconnect from server. Socket is not opened or connection is already closing.");
            reject("Cannot disconnect from server. Socket is not opened or connection is already closing.");
          }
        });
      };
      client.prototype.off = client.prototype.removeListener;
      if (typeof module2 !== "undefined" && module2.exports) {
        module2.exports = client;
      }
      if (typeof window !== "undefined") {
        window.tmi = {
          client,
          Client: client
        };
      }
    }
  });

  // node_modules/tmi.js/index.js
  var require_tmi = __commonJS({
    "node_modules/tmi.js/index.js"(exports, module2) {
      var client = require_client();
      module2.exports = {
        client,
        Client: client
      };
    }
  });

  // node_modules/howler/dist/howler.js
  var require_howler = __commonJS({
    "node_modules/howler/dist/howler.js"(exports) {
      (function() {
        "use strict";
        var HowlerGlobal2 = function() {
          this.init();
        };
        HowlerGlobal2.prototype = {
          init: function() {
            var self2 = this || Howler2;
            self2._counter = 1e3;
            self2._html5AudioPool = [];
            self2.html5PoolSize = 10;
            self2._codecs = {};
            self2._howls = [];
            self2._muted = false;
            self2._volume = 1;
            self2._canPlayEvent = "canplaythrough";
            self2._navigator = typeof window !== "undefined" && window.navigator ? window.navigator : null;
            self2.masterGain = null;
            self2.noAudio = false;
            self2.usingWebAudio = true;
            self2.autoSuspend = true;
            self2.ctx = null;
            self2.autoUnlock = true;
            self2._setup();
            return self2;
          },
          volume: function(vol) {
            var self2 = this || Howler2;
            vol = parseFloat(vol);
            if (!self2.ctx) {
              setupAudioContext();
            }
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
              self2._volume = vol;
              if (self2._muted) {
                return self2;
              }
              if (self2.usingWebAudio) {
                self2.masterGain.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
              }
              for (var i3 = 0; i3 < self2._howls.length; i3++) {
                if (!self2._howls[i3]._webAudio) {
                  var ids = self2._howls[i3]._getSoundIds();
                  for (var j3 = 0; j3 < ids.length; j3++) {
                    var sound = self2._howls[i3]._soundById(ids[j3]);
                    if (sound && sound._node) {
                      sound._node.volume = sound._volume * vol;
                    }
                  }
                }
              }
              return self2;
            }
            return self2._volume;
          },
          mute: function(muted) {
            var self2 = this || Howler2;
            if (!self2.ctx) {
              setupAudioContext();
            }
            self2._muted = muted;
            if (self2.usingWebAudio) {
              self2.masterGain.gain.setValueAtTime(muted ? 0 : self2._volume, Howler2.ctx.currentTime);
            }
            for (var i3 = 0; i3 < self2._howls.length; i3++) {
              if (!self2._howls[i3]._webAudio) {
                var ids = self2._howls[i3]._getSoundIds();
                for (var j3 = 0; j3 < ids.length; j3++) {
                  var sound = self2._howls[i3]._soundById(ids[j3]);
                  if (sound && sound._node) {
                    sound._node.muted = muted ? true : sound._muted;
                  }
                }
              }
            }
            return self2;
          },
          stop: function() {
            var self2 = this || Howler2;
            for (var i3 = 0; i3 < self2._howls.length; i3++) {
              self2._howls[i3].stop();
            }
            return self2;
          },
          unload: function() {
            var self2 = this || Howler2;
            for (var i3 = self2._howls.length - 1; i3 >= 0; i3--) {
              self2._howls[i3].unload();
            }
            if (self2.usingWebAudio && self2.ctx && typeof self2.ctx.close !== "undefined") {
              self2.ctx.close();
              self2.ctx = null;
              setupAudioContext();
            }
            return self2;
          },
          codecs: function(ext) {
            return (this || Howler2)._codecs[ext.replace(/^x-/, "")];
          },
          _setup: function() {
            var self2 = this || Howler2;
            self2.state = self2.ctx ? self2.ctx.state || "suspended" : "suspended";
            self2._autoSuspend();
            if (!self2.usingWebAudio) {
              if (typeof Audio !== "undefined") {
                try {
                  var test = new Audio();
                  if (typeof test.oncanplaythrough === "undefined") {
                    self2._canPlayEvent = "canplay";
                  }
                } catch (e3) {
                  self2.noAudio = true;
                }
              } else {
                self2.noAudio = true;
              }
            }
            try {
              var test = new Audio();
              if (test.muted) {
                self2.noAudio = true;
              }
            } catch (e3) {
            }
            if (!self2.noAudio) {
              self2._setupCodecs();
            }
            return self2;
          },
          _setupCodecs: function() {
            var self2 = this || Howler2;
            var audioTest = null;
            try {
              audioTest = typeof Audio !== "undefined" ? new Audio() : null;
            } catch (err) {
              return self2;
            }
            if (!audioTest || typeof audioTest.canPlayType !== "function") {
              return self2;
            }
            var mpegTest = audioTest.canPlayType("audio/mpeg;").replace(/^no$/, "");
            var ua = self2._navigator ? self2._navigator.userAgent : "";
            var checkOpera = ua.match(/OPR\/([0-6].)/g);
            var isOldOpera = checkOpera && parseInt(checkOpera[0].split("/")[1], 10) < 33;
            var checkSafari = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
            var safariVersion = ua.match(/Version\/(.*?) /);
            var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;
            self2._codecs = {
              mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType("audio/mp3;").replace(/^no$/, ""))),
              mpeg: !!mpegTest,
              opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
              ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType("audio/wav")).replace(/^no$/, ""),
              aac: !!audioTest.canPlayType("audio/aac;").replace(/^no$/, ""),
              caf: !!audioTest.canPlayType("audio/x-caf;").replace(/^no$/, ""),
              m4a: !!(audioTest.canPlayType("audio/x-m4a;") || audioTest.canPlayType("audio/m4a;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              m4b: !!(audioTest.canPlayType("audio/x-m4b;") || audioTest.canPlayType("audio/m4b;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              mp4: !!(audioTest.canPlayType("audio/x-mp4;") || audioTest.canPlayType("audio/mp4;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
              flac: !!(audioTest.canPlayType("audio/x-flac;") || audioTest.canPlayType("audio/flac;")).replace(/^no$/, "")
            };
            return self2;
          },
          _unlockAudio: function() {
            var self2 = this || Howler2;
            if (self2._audioUnlocked || !self2.ctx) {
              return;
            }
            self2._audioUnlocked = false;
            self2.autoUnlock = false;
            if (!self2._mobileUnloaded && self2.ctx.sampleRate !== 44100) {
              self2._mobileUnloaded = true;
              self2.unload();
            }
            self2._scratchBuffer = self2.ctx.createBuffer(1, 1, 22050);
            var unlock = function(e3) {
              while (self2._html5AudioPool.length < self2.html5PoolSize) {
                try {
                  var audioNode = new Audio();
                  audioNode._unlocked = true;
                  self2._releaseHtml5Audio(audioNode);
                } catch (e4) {
                  self2.noAudio = true;
                  break;
                }
              }
              for (var i3 = 0; i3 < self2._howls.length; i3++) {
                if (!self2._howls[i3]._webAudio) {
                  var ids = self2._howls[i3]._getSoundIds();
                  for (var j3 = 0; j3 < ids.length; j3++) {
                    var sound = self2._howls[i3]._soundById(ids[j3]);
                    if (sound && sound._node && !sound._node._unlocked) {
                      sound._node._unlocked = true;
                      sound._node.load();
                    }
                  }
                }
              }
              self2._autoResume();
              var source = self2.ctx.createBufferSource();
              source.buffer = self2._scratchBuffer;
              source.connect(self2.ctx.destination);
              if (typeof source.start === "undefined") {
                source.noteOn(0);
              } else {
                source.start(0);
              }
              if (typeof self2.ctx.resume === "function") {
                self2.ctx.resume();
              }
              source.onended = function() {
                source.disconnect(0);
                self2._audioUnlocked = true;
                document.removeEventListener("touchstart", unlock, true);
                document.removeEventListener("touchend", unlock, true);
                document.removeEventListener("click", unlock, true);
                document.removeEventListener("keydown", unlock, true);
                for (var i4 = 0; i4 < self2._howls.length; i4++) {
                  self2._howls[i4]._emit("unlock");
                }
              };
            };
            document.addEventListener("touchstart", unlock, true);
            document.addEventListener("touchend", unlock, true);
            document.addEventListener("click", unlock, true);
            document.addEventListener("keydown", unlock, true);
            return self2;
          },
          _obtainHtml5Audio: function() {
            var self2 = this || Howler2;
            if (self2._html5AudioPool.length) {
              return self2._html5AudioPool.pop();
            }
            var testPlay = new Audio().play();
            if (testPlay && typeof Promise !== "undefined" && (testPlay instanceof Promise || typeof testPlay.then === "function")) {
              testPlay.catch(function() {
                console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
              });
            }
            return new Audio();
          },
          _releaseHtml5Audio: function(audio) {
            var self2 = this || Howler2;
            if (audio._unlocked) {
              self2._html5AudioPool.push(audio);
            }
            return self2;
          },
          _autoSuspend: function() {
            var self2 = this;
            if (!self2.autoSuspend || !self2.ctx || typeof self2.ctx.suspend === "undefined" || !Howler2.usingWebAudio) {
              return;
            }
            for (var i3 = 0; i3 < self2._howls.length; i3++) {
              if (self2._howls[i3]._webAudio) {
                for (var j3 = 0; j3 < self2._howls[i3]._sounds.length; j3++) {
                  if (!self2._howls[i3]._sounds[j3]._paused) {
                    return self2;
                  }
                }
              }
            }
            if (self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
            }
            self2._suspendTimer = setTimeout(function() {
              if (!self2.autoSuspend) {
                return;
              }
              self2._suspendTimer = null;
              self2.state = "suspending";
              var handleSuspension = function() {
                self2.state = "suspended";
                if (self2._resumeAfterSuspend) {
                  delete self2._resumeAfterSuspend;
                  self2._autoResume();
                }
              };
              self2.ctx.suspend().then(handleSuspension, handleSuspension);
            }, 3e4);
            return self2;
          },
          _autoResume: function() {
            var self2 = this;
            if (!self2.ctx || typeof self2.ctx.resume === "undefined" || !Howler2.usingWebAudio) {
              return;
            }
            if (self2.state === "running" && self2.ctx.state !== "interrupted" && self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
              self2._suspendTimer = null;
            } else if (self2.state === "suspended" || self2.state === "running" && self2.ctx.state === "interrupted") {
              self2.ctx.resume().then(function() {
                self2.state = "running";
                for (var i3 = 0; i3 < self2._howls.length; i3++) {
                  self2._howls[i3]._emit("resume");
                }
              });
              if (self2._suspendTimer) {
                clearTimeout(self2._suspendTimer);
                self2._suspendTimer = null;
              }
            } else if (self2.state === "suspending") {
              self2._resumeAfterSuspend = true;
            }
            return self2;
          }
        };
        var Howler2 = new HowlerGlobal2();
        var Howl3 = function(o2) {
          var self2 = this;
          if (!o2.src || o2.src.length === 0) {
            console.error("An array of source files must be passed with any new Howl.");
            return;
          }
          self2.init(o2);
        };
        Howl3.prototype = {
          init: function(o2) {
            var self2 = this;
            if (!Howler2.ctx) {
              setupAudioContext();
            }
            self2._autoplay = o2.autoplay || false;
            self2._format = typeof o2.format !== "string" ? o2.format : [o2.format];
            self2._html5 = o2.html5 || false;
            self2._muted = o2.mute || false;
            self2._loop = o2.loop || false;
            self2._pool = o2.pool || 5;
            self2._preload = typeof o2.preload === "boolean" || o2.preload === "metadata" ? o2.preload : true;
            self2._rate = o2.rate || 1;
            self2._sprite = o2.sprite || {};
            self2._src = typeof o2.src !== "string" ? o2.src : [o2.src];
            self2._volume = o2.volume !== void 0 ? o2.volume : 1;
            self2._xhr = {
              method: o2.xhr && o2.xhr.method ? o2.xhr.method : "GET",
              headers: o2.xhr && o2.xhr.headers ? o2.xhr.headers : null,
              withCredentials: o2.xhr && o2.xhr.withCredentials ? o2.xhr.withCredentials : false
            };
            self2._duration = 0;
            self2._state = "unloaded";
            self2._sounds = [];
            self2._endTimers = {};
            self2._queue = [];
            self2._playLock = false;
            self2._onend = o2.onend ? [{ fn: o2.onend }] : [];
            self2._onfade = o2.onfade ? [{ fn: o2.onfade }] : [];
            self2._onload = o2.onload ? [{ fn: o2.onload }] : [];
            self2._onloaderror = o2.onloaderror ? [{ fn: o2.onloaderror }] : [];
            self2._onplayerror = o2.onplayerror ? [{ fn: o2.onplayerror }] : [];
            self2._onpause = o2.onpause ? [{ fn: o2.onpause }] : [];
            self2._onplay = o2.onplay ? [{ fn: o2.onplay }] : [];
            self2._onstop = o2.onstop ? [{ fn: o2.onstop }] : [];
            self2._onmute = o2.onmute ? [{ fn: o2.onmute }] : [];
            self2._onvolume = o2.onvolume ? [{ fn: o2.onvolume }] : [];
            self2._onrate = o2.onrate ? [{ fn: o2.onrate }] : [];
            self2._onseek = o2.onseek ? [{ fn: o2.onseek }] : [];
            self2._onunlock = o2.onunlock ? [{ fn: o2.onunlock }] : [];
            self2._onresume = [];
            self2._webAudio = Howler2.usingWebAudio && !self2._html5;
            if (typeof Howler2.ctx !== "undefined" && Howler2.ctx && Howler2.autoUnlock) {
              Howler2._unlockAudio();
            }
            Howler2._howls.push(self2);
            if (self2._autoplay) {
              self2._queue.push({
                event: "play",
                action: function() {
                  self2.play();
                }
              });
            }
            if (self2._preload && self2._preload !== "none") {
              self2.load();
            }
            return self2;
          },
          load: function() {
            var self2 = this;
            var url2 = null;
            if (Howler2.noAudio) {
              self2._emit("loaderror", null, "No audio support.");
              return;
            }
            if (typeof self2._src === "string") {
              self2._src = [self2._src];
            }
            for (var i3 = 0; i3 < self2._src.length; i3++) {
              var ext, str;
              if (self2._format && self2._format[i3]) {
                ext = self2._format[i3];
              } else {
                str = self2._src[i3];
                if (typeof str !== "string") {
                  self2._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                  continue;
                }
                ext = /^data:audio\/([^;,]+);/i.exec(str);
                if (!ext) {
                  ext = /\.([^.]+)$/.exec(str.split("?", 1)[0]);
                }
                if (ext) {
                  ext = ext[1].toLowerCase();
                }
              }
              if (!ext) {
                console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
              }
              if (ext && Howler2.codecs(ext)) {
                url2 = self2._src[i3];
                break;
              }
            }
            if (!url2) {
              self2._emit("loaderror", null, "No codec support for selected audio sources.");
              return;
            }
            self2._src = url2;
            self2._state = "loading";
            if (window.location.protocol === "https:" && url2.slice(0, 5) === "http:") {
              self2._html5 = true;
              self2._webAudio = false;
            }
            new Sound2(self2);
            if (self2._webAudio) {
              loadBuffer(self2);
            }
            return self2;
          },
          play: function(sprite, internal) {
            var self2 = this;
            var id = null;
            if (typeof sprite === "number") {
              id = sprite;
              sprite = null;
            } else if (typeof sprite === "string" && self2._state === "loaded" && !self2._sprite[sprite]) {
              return null;
            } else if (typeof sprite === "undefined") {
              sprite = "__default";
              if (!self2._playLock) {
                var num = 0;
                for (var i3 = 0; i3 < self2._sounds.length; i3++) {
                  if (self2._sounds[i3]._paused && !self2._sounds[i3]._ended) {
                    num++;
                    id = self2._sounds[i3]._id;
                  }
                }
                if (num === 1) {
                  sprite = null;
                } else {
                  id = null;
                }
              }
            }
            var sound = id ? self2._soundById(id) : self2._inactiveSound();
            if (!sound) {
              return null;
            }
            if (id && !sprite) {
              sprite = sound._sprite || "__default";
            }
            if (self2._state !== "loaded") {
              sound._sprite = sprite;
              sound._ended = false;
              var soundId = sound._id;
              self2._queue.push({
                event: "play",
                action: function() {
                  self2.play(soundId);
                }
              });
              return soundId;
            }
            if (id && !sound._paused) {
              if (!internal) {
                self2._loadQueue("play");
              }
              return sound._id;
            }
            if (self2._webAudio) {
              Howler2._autoResume();
            }
            var seek = Math.max(0, sound._seek > 0 ? sound._seek : self2._sprite[sprite][0] / 1e3);
            var duration = Math.max(0, (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3 - seek);
            var timeout = duration * 1e3 / Math.abs(sound._rate);
            var start = self2._sprite[sprite][0] / 1e3;
            var stop = (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3;
            sound._sprite = sprite;
            sound._ended = false;
            var setParams = function() {
              sound._paused = false;
              sound._seek = seek;
              sound._start = start;
              sound._stop = stop;
              sound._loop = !!(sound._loop || self2._sprite[sprite][2]);
            };
            if (seek >= stop) {
              self2._ended(sound);
              return;
            }
            var node = sound._node;
            if (self2._webAudio) {
              var playWebAudio = function() {
                self2._playLock = false;
                setParams();
                self2._refreshBuffer(sound);
                var vol = sound._muted || self2._muted ? 0 : sound._volume;
                node.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
                sound._playStart = Howler2.ctx.currentTime;
                if (typeof node.bufferSource.start === "undefined") {
                  sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
                } else {
                  sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
                }
                if (timeout !== Infinity) {
                  self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                }
                if (!internal) {
                  setTimeout(function() {
                    self2._emit("play", sound._id);
                    self2._loadQueue();
                  }, 0);
                }
              };
              if (Howler2.state === "running" && Howler2.ctx.state !== "interrupted") {
                playWebAudio();
              } else {
                self2._playLock = true;
                self2.once("resume", playWebAudio);
                self2._clearTimer(sound._id);
              }
            } else {
              var playHtml5 = function() {
                node.currentTime = seek;
                node.muted = sound._muted || self2._muted || Howler2._muted || node.muted;
                node.volume = sound._volume * Howler2.volume();
                node.playbackRate = sound._rate;
                try {
                  var play = node.play();
                  if (play && typeof Promise !== "undefined" && (play instanceof Promise || typeof play.then === "function")) {
                    self2._playLock = true;
                    setParams();
                    play.then(function() {
                      self2._playLock = false;
                      node._unlocked = true;
                      if (!internal) {
                        self2._emit("play", sound._id);
                      } else {
                        self2._loadQueue();
                      }
                    }).catch(function() {
                      self2._playLock = false;
                      self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                      sound._ended = true;
                      sound._paused = true;
                    });
                  } else if (!internal) {
                    self2._playLock = false;
                    setParams();
                    self2._emit("play", sound._id);
                  }
                  node.playbackRate = sound._rate;
                  if (node.paused) {
                    self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                    return;
                  }
                  if (sprite !== "__default" || sound._loop) {
                    self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                  } else {
                    self2._endTimers[sound._id] = function() {
                      self2._ended(sound);
                      node.removeEventListener("ended", self2._endTimers[sound._id], false);
                    };
                    node.addEventListener("ended", self2._endTimers[sound._id], false);
                  }
                } catch (err) {
                  self2._emit("playerror", sound._id, err);
                }
              };
              if (node.src === "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA") {
                node.src = self2._src;
                node.load();
              }
              var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler2._navigator.isCocoonJS;
              if (node.readyState >= 3 || loadedNoReadyState) {
                playHtml5();
              } else {
                self2._playLock = true;
                self2._state = "loading";
                var listener = function() {
                  self2._state = "loaded";
                  playHtml5();
                  node.removeEventListener(Howler2._canPlayEvent, listener, false);
                };
                node.addEventListener(Howler2._canPlayEvent, listener, false);
                self2._clearTimer(sound._id);
              }
            }
            return sound._id;
          },
          pause: function(id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "pause",
                action: function() {
                  self2.pause(id);
                }
              });
              return self2;
            }
            var ids = self2._getSoundIds(id);
            for (var i3 = 0; i3 < ids.length; i3++) {
              self2._clearTimer(ids[i3]);
              var sound = self2._soundById(ids[i3]);
              if (sound && !sound._paused) {
                sound._seek = self2.seek(ids[i3]);
                sound._rateSeek = 0;
                sound._paused = true;
                self2._stopFade(ids[i3]);
                if (sound._node) {
                  if (self2._webAudio) {
                    if (!sound._node.bufferSource) {
                      continue;
                    }
                    if (typeof sound._node.bufferSource.stop === "undefined") {
                      sound._node.bufferSource.noteOff(0);
                    } else {
                      sound._node.bufferSource.stop(0);
                    }
                    self2._cleanBuffer(sound._node);
                  } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                    sound._node.pause();
                  }
                }
              }
              if (!arguments[1]) {
                self2._emit("pause", sound ? sound._id : null);
              }
            }
            return self2;
          },
          stop: function(id, internal) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "stop",
                action: function() {
                  self2.stop(id);
                }
              });
              return self2;
            }
            var ids = self2._getSoundIds(id);
            for (var i3 = 0; i3 < ids.length; i3++) {
              self2._clearTimer(ids[i3]);
              var sound = self2._soundById(ids[i3]);
              if (sound) {
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                sound._paused = true;
                sound._ended = true;
                self2._stopFade(ids[i3]);
                if (sound._node) {
                  if (self2._webAudio) {
                    if (sound._node.bufferSource) {
                      if (typeof sound._node.bufferSource.stop === "undefined") {
                        sound._node.bufferSource.noteOff(0);
                      } else {
                        sound._node.bufferSource.stop(0);
                      }
                      self2._cleanBuffer(sound._node);
                    }
                  } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                    sound._node.currentTime = sound._start || 0;
                    sound._node.pause();
                    if (sound._node.duration === Infinity) {
                      self2._clearSound(sound._node);
                    }
                  }
                }
                if (!internal) {
                  self2._emit("stop", sound._id);
                }
              }
            }
            return self2;
          },
          mute: function(muted, id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "mute",
                action: function() {
                  self2.mute(muted, id);
                }
              });
              return self2;
            }
            if (typeof id === "undefined") {
              if (typeof muted === "boolean") {
                self2._muted = muted;
              } else {
                return self2._muted;
              }
            }
            var ids = self2._getSoundIds(id);
            for (var i3 = 0; i3 < ids.length; i3++) {
              var sound = self2._soundById(ids[i3]);
              if (sound) {
                sound._muted = muted;
                if (sound._interval) {
                  self2._stopFade(sound._id);
                }
                if (self2._webAudio && sound._node) {
                  sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler2.ctx.currentTime);
                } else if (sound._node) {
                  sound._node.muted = Howler2._muted ? true : muted;
                }
                self2._emit("mute", sound._id);
              }
            }
            return self2;
          },
          volume: function() {
            var self2 = this;
            var args = arguments;
            var vol, id;
            if (args.length === 0) {
              return self2._volume;
            } else if (args.length === 1 || args.length === 2 && typeof args[1] === "undefined") {
              var ids = self2._getSoundIds();
              var index2 = ids.indexOf(args[0]);
              if (index2 >= 0) {
                id = parseInt(args[0], 10);
              } else {
                vol = parseFloat(args[0]);
              }
            } else if (args.length >= 2) {
              vol = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
              if (self2._state !== "loaded" || self2._playLock) {
                self2._queue.push({
                  event: "volume",
                  action: function() {
                    self2.volume.apply(self2, args);
                  }
                });
                return self2;
              }
              if (typeof id === "undefined") {
                self2._volume = vol;
              }
              id = self2._getSoundIds(id);
              for (var i3 = 0; i3 < id.length; i3++) {
                sound = self2._soundById(id[i3]);
                if (sound) {
                  sound._volume = vol;
                  if (!args[2]) {
                    self2._stopFade(id[i3]);
                  }
                  if (self2._webAudio && sound._node && !sound._muted) {
                    sound._node.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
                  } else if (sound._node && !sound._muted) {
                    sound._node.volume = vol * Howler2.volume();
                  }
                  self2._emit("volume", sound._id);
                }
              }
            } else {
              sound = id ? self2._soundById(id) : self2._sounds[0];
              return sound ? sound._volume : 0;
            }
            return self2;
          },
          fade: function(from, to, len, id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "fade",
                action: function() {
                  self2.fade(from, to, len, id);
                }
              });
              return self2;
            }
            from = Math.min(Math.max(0, parseFloat(from)), 1);
            to = Math.min(Math.max(0, parseFloat(to)), 1);
            len = parseFloat(len);
            self2.volume(from, id);
            var ids = self2._getSoundIds(id);
            for (var i3 = 0; i3 < ids.length; i3++) {
              var sound = self2._soundById(ids[i3]);
              if (sound) {
                if (!id) {
                  self2._stopFade(ids[i3]);
                }
                if (self2._webAudio && !sound._muted) {
                  var currentTime = Howler2.ctx.currentTime;
                  var end = currentTime + len / 1e3;
                  sound._volume = from;
                  sound._node.gain.setValueAtTime(from, currentTime);
                  sound._node.gain.linearRampToValueAtTime(to, end);
                }
                self2._startFadeInterval(sound, from, to, len, ids[i3], typeof id === "undefined");
              }
            }
            return self2;
          },
          _startFadeInterval: function(sound, from, to, len, id, isGroup) {
            var self2 = this;
            var vol = from;
            var diff = to - from;
            var steps = Math.abs(diff / 0.01);
            var stepLen = Math.max(4, steps > 0 ? len / steps : len);
            var lastTick = Date.now();
            sound._fadeTo = to;
            sound._interval = setInterval(function() {
              var tick = (Date.now() - lastTick) / len;
              lastTick = Date.now();
              vol += diff * tick;
              vol = Math.round(vol * 100) / 100;
              if (diff < 0) {
                vol = Math.max(to, vol);
              } else {
                vol = Math.min(to, vol);
              }
              if (self2._webAudio) {
                sound._volume = vol;
              } else {
                self2.volume(vol, sound._id, true);
              }
              if (isGroup) {
                self2._volume = vol;
              }
              if (to < from && vol <= to || to > from && vol >= to) {
                clearInterval(sound._interval);
                sound._interval = null;
                sound._fadeTo = null;
                self2.volume(to, sound._id);
                self2._emit("fade", sound._id);
              }
            }, stepLen);
          },
          _stopFade: function(id) {
            var self2 = this;
            var sound = self2._soundById(id);
            if (sound && sound._interval) {
              if (self2._webAudio) {
                sound._node.gain.cancelScheduledValues(Howler2.ctx.currentTime);
              }
              clearInterval(sound._interval);
              sound._interval = null;
              self2.volume(sound._fadeTo, id);
              sound._fadeTo = null;
              self2._emit("fade", id);
            }
            return self2;
          },
          loop: function() {
            var self2 = this;
            var args = arguments;
            var loop, id, sound;
            if (args.length === 0) {
              return self2._loop;
            } else if (args.length === 1) {
              if (typeof args[0] === "boolean") {
                loop = args[0];
                self2._loop = loop;
              } else {
                sound = self2._soundById(parseInt(args[0], 10));
                return sound ? sound._loop : false;
              }
            } else if (args.length === 2) {
              loop = args[0];
              id = parseInt(args[1], 10);
            }
            var ids = self2._getSoundIds(id);
            for (var i3 = 0; i3 < ids.length; i3++) {
              sound = self2._soundById(ids[i3]);
              if (sound) {
                sound._loop = loop;
                if (self2._webAudio && sound._node && sound._node.bufferSource) {
                  sound._node.bufferSource.loop = loop;
                  if (loop) {
                    sound._node.bufferSource.loopStart = sound._start || 0;
                    sound._node.bufferSource.loopEnd = sound._stop;
                    if (self2.playing(ids[i3])) {
                      self2.pause(ids[i3], true);
                      self2.play(ids[i3], true);
                    }
                  }
                }
              }
            }
            return self2;
          },
          rate: function() {
            var self2 = this;
            var args = arguments;
            var rate, id;
            if (args.length === 0) {
              id = self2._sounds[0]._id;
            } else if (args.length === 1) {
              var ids = self2._getSoundIds();
              var index2 = ids.indexOf(args[0]);
              if (index2 >= 0) {
                id = parseInt(args[0], 10);
              } else {
                rate = parseFloat(args[0]);
              }
            } else if (args.length === 2) {
              rate = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof rate === "number") {
              if (self2._state !== "loaded" || self2._playLock) {
                self2._queue.push({
                  event: "rate",
                  action: function() {
                    self2.rate.apply(self2, args);
                  }
                });
                return self2;
              }
              if (typeof id === "undefined") {
                self2._rate = rate;
              }
              id = self2._getSoundIds(id);
              for (var i3 = 0; i3 < id.length; i3++) {
                sound = self2._soundById(id[i3]);
                if (sound) {
                  if (self2.playing(id[i3])) {
                    sound._rateSeek = self2.seek(id[i3]);
                    sound._playStart = self2._webAudio ? Howler2.ctx.currentTime : sound._playStart;
                  }
                  sound._rate = rate;
                  if (self2._webAudio && sound._node && sound._node.bufferSource) {
                    sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler2.ctx.currentTime);
                  } else if (sound._node) {
                    sound._node.playbackRate = rate;
                  }
                  var seek = self2.seek(id[i3]);
                  var duration = (self2._sprite[sound._sprite][0] + self2._sprite[sound._sprite][1]) / 1e3 - seek;
                  var timeout = duration * 1e3 / Math.abs(sound._rate);
                  if (self2._endTimers[id[i3]] || !sound._paused) {
                    self2._clearTimer(id[i3]);
                    self2._endTimers[id[i3]] = setTimeout(self2._ended.bind(self2, sound), timeout);
                  }
                  self2._emit("rate", sound._id);
                }
              }
            } else {
              sound = self2._soundById(id);
              return sound ? sound._rate : self2._rate;
            }
            return self2;
          },
          seek: function() {
            var self2 = this;
            var args = arguments;
            var seek, id;
            if (args.length === 0) {
              if (self2._sounds.length) {
                id = self2._sounds[0]._id;
              }
            } else if (args.length === 1) {
              var ids = self2._getSoundIds();
              var index2 = ids.indexOf(args[0]);
              if (index2 >= 0) {
                id = parseInt(args[0], 10);
              } else if (self2._sounds.length) {
                id = self2._sounds[0]._id;
                seek = parseFloat(args[0]);
              }
            } else if (args.length === 2) {
              seek = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            if (typeof id === "undefined") {
              return 0;
            }
            if (typeof seek === "number" && (self2._state !== "loaded" || self2._playLock)) {
              self2._queue.push({
                event: "seek",
                action: function() {
                  self2.seek.apply(self2, args);
                }
              });
              return self2;
            }
            var sound = self2._soundById(id);
            if (sound) {
              if (typeof seek === "number" && seek >= 0) {
                var playing = self2.playing(id);
                if (playing) {
                  self2.pause(id, true);
                }
                sound._seek = seek;
                sound._ended = false;
                self2._clearTimer(id);
                if (!self2._webAudio && sound._node && !isNaN(sound._node.duration)) {
                  sound._node.currentTime = seek;
                }
                var seekAndEmit = function() {
                  if (playing) {
                    self2.play(id, true);
                  }
                  self2._emit("seek", id);
                };
                if (playing && !self2._webAudio) {
                  var emitSeek = function() {
                    if (!self2._playLock) {
                      seekAndEmit();
                    } else {
                      setTimeout(emitSeek, 0);
                    }
                  };
                  setTimeout(emitSeek, 0);
                } else {
                  seekAndEmit();
                }
              } else {
                if (self2._webAudio) {
                  var realTime = self2.playing(id) ? Howler2.ctx.currentTime - sound._playStart : 0;
                  var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
                  return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
                } else {
                  return sound._node.currentTime;
                }
              }
            }
            return self2;
          },
          playing: function(id) {
            var self2 = this;
            if (typeof id === "number") {
              var sound = self2._soundById(id);
              return sound ? !sound._paused : false;
            }
            for (var i3 = 0; i3 < self2._sounds.length; i3++) {
              if (!self2._sounds[i3]._paused) {
                return true;
              }
            }
            return false;
          },
          duration: function(id) {
            var self2 = this;
            var duration = self2._duration;
            var sound = self2._soundById(id);
            if (sound) {
              duration = self2._sprite[sound._sprite][1] / 1e3;
            }
            return duration;
          },
          state: function() {
            return this._state;
          },
          unload: function() {
            var self2 = this;
            var sounds = self2._sounds;
            for (var i3 = 0; i3 < sounds.length; i3++) {
              if (!sounds[i3]._paused) {
                self2.stop(sounds[i3]._id);
              }
              if (!self2._webAudio) {
                self2._clearSound(sounds[i3]._node);
                sounds[i3]._node.removeEventListener("error", sounds[i3]._errorFn, false);
                sounds[i3]._node.removeEventListener(Howler2._canPlayEvent, sounds[i3]._loadFn, false);
                sounds[i3]._node.removeEventListener("ended", sounds[i3]._endFn, false);
                Howler2._releaseHtml5Audio(sounds[i3]._node);
              }
              delete sounds[i3]._node;
              self2._clearTimer(sounds[i3]._id);
            }
            var index2 = Howler2._howls.indexOf(self2);
            if (index2 >= 0) {
              Howler2._howls.splice(index2, 1);
            }
            var remCache = true;
            for (i3 = 0; i3 < Howler2._howls.length; i3++) {
              if (Howler2._howls[i3]._src === self2._src || self2._src.indexOf(Howler2._howls[i3]._src) >= 0) {
                remCache = false;
                break;
              }
            }
            if (cache3 && remCache) {
              delete cache3[self2._src];
            }
            Howler2.noAudio = false;
            self2._state = "unloaded";
            self2._sounds = [];
            self2 = null;
            return null;
          },
          on: function(event, fn, id, once) {
            var self2 = this;
            var events = self2["_on" + event];
            if (typeof fn === "function") {
              events.push(once ? { id, fn, once } : { id, fn });
            }
            return self2;
          },
          off: function(event, fn, id) {
            var self2 = this;
            var events = self2["_on" + event];
            var i3 = 0;
            if (typeof fn === "number") {
              id = fn;
              fn = null;
            }
            if (fn || id) {
              for (i3 = 0; i3 < events.length; i3++) {
                var isId = id === events[i3].id;
                if (fn === events[i3].fn && isId || !fn && isId) {
                  events.splice(i3, 1);
                  break;
                }
              }
            } else if (event) {
              self2["_on" + event] = [];
            } else {
              var keys = Object.keys(self2);
              for (i3 = 0; i3 < keys.length; i3++) {
                if (keys[i3].indexOf("_on") === 0 && Array.isArray(self2[keys[i3]])) {
                  self2[keys[i3]] = [];
                }
              }
            }
            return self2;
          },
          once: function(event, fn, id) {
            var self2 = this;
            self2.on(event, fn, id, 1);
            return self2;
          },
          _emit: function(event, id, msg) {
            var self2 = this;
            var events = self2["_on" + event];
            for (var i3 = events.length - 1; i3 >= 0; i3--) {
              if (!events[i3].id || events[i3].id === id || event === "load") {
                setTimeout(function(fn) {
                  fn.call(this, id, msg);
                }.bind(self2, events[i3].fn), 0);
                if (events[i3].once) {
                  self2.off(event, events[i3].fn, events[i3].id);
                }
              }
            }
            self2._loadQueue(event);
            return self2;
          },
          _loadQueue: function(event) {
            var self2 = this;
            if (self2._queue.length > 0) {
              var task = self2._queue[0];
              if (task.event === event) {
                self2._queue.shift();
                self2._loadQueue();
              }
              if (!event) {
                task.action();
              }
            }
            return self2;
          },
          _ended: function(sound) {
            var self2 = this;
            var sprite = sound._sprite;
            if (!self2._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
              setTimeout(self2._ended.bind(self2, sound), 100);
              return self2;
            }
            var loop = !!(sound._loop || self2._sprite[sprite][2]);
            self2._emit("end", sound._id);
            if (!self2._webAudio && loop) {
              self2.stop(sound._id, true).play(sound._id);
            }
            if (self2._webAudio && loop) {
              self2._emit("play", sound._id);
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              sound._playStart = Howler2.ctx.currentTime;
              var timeout = (sound._stop - sound._start) * 1e3 / Math.abs(sound._rate);
              self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
            }
            if (self2._webAudio && !loop) {
              sound._paused = true;
              sound._ended = true;
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              self2._clearTimer(sound._id);
              self2._cleanBuffer(sound._node);
              Howler2._autoSuspend();
            }
            if (!self2._webAudio && !loop) {
              self2.stop(sound._id, true);
            }
            return self2;
          },
          _clearTimer: function(id) {
            var self2 = this;
            if (self2._endTimers[id]) {
              if (typeof self2._endTimers[id] !== "function") {
                clearTimeout(self2._endTimers[id]);
              } else {
                var sound = self2._soundById(id);
                if (sound && sound._node) {
                  sound._node.removeEventListener("ended", self2._endTimers[id], false);
                }
              }
              delete self2._endTimers[id];
            }
            return self2;
          },
          _soundById: function(id) {
            var self2 = this;
            for (var i3 = 0; i3 < self2._sounds.length; i3++) {
              if (id === self2._sounds[i3]._id) {
                return self2._sounds[i3];
              }
            }
            return null;
          },
          _inactiveSound: function() {
            var self2 = this;
            self2._drain();
            for (var i3 = 0; i3 < self2._sounds.length; i3++) {
              if (self2._sounds[i3]._ended) {
                return self2._sounds[i3].reset();
              }
            }
            return new Sound2(self2);
          },
          _drain: function() {
            var self2 = this;
            var limit = self2._pool;
            var cnt = 0;
            var i3 = 0;
            if (self2._sounds.length < limit) {
              return;
            }
            for (i3 = 0; i3 < self2._sounds.length; i3++) {
              if (self2._sounds[i3]._ended) {
                cnt++;
              }
            }
            for (i3 = self2._sounds.length - 1; i3 >= 0; i3--) {
              if (cnt <= limit) {
                return;
              }
              if (self2._sounds[i3]._ended) {
                if (self2._webAudio && self2._sounds[i3]._node) {
                  self2._sounds[i3]._node.disconnect(0);
                }
                self2._sounds.splice(i3, 1);
                cnt--;
              }
            }
          },
          _getSoundIds: function(id) {
            var self2 = this;
            if (typeof id === "undefined") {
              var ids = [];
              for (var i3 = 0; i3 < self2._sounds.length; i3++) {
                ids.push(self2._sounds[i3]._id);
              }
              return ids;
            } else {
              return [id];
            }
          },
          _refreshBuffer: function(sound) {
            var self2 = this;
            sound._node.bufferSource = Howler2.ctx.createBufferSource();
            sound._node.bufferSource.buffer = cache3[self2._src];
            if (sound._panner) {
              sound._node.bufferSource.connect(sound._panner);
            } else {
              sound._node.bufferSource.connect(sound._node);
            }
            sound._node.bufferSource.loop = sound._loop;
            if (sound._loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop || 0;
            }
            sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler2.ctx.currentTime);
            return self2;
          },
          _cleanBuffer: function(node) {
            var self2 = this;
            var isIOS = Howler2._navigator && Howler2._navigator.vendor.indexOf("Apple") >= 0;
            if (Howler2._scratchBuffer && node.bufferSource) {
              node.bufferSource.onended = null;
              node.bufferSource.disconnect(0);
              if (isIOS) {
                try {
                  node.bufferSource.buffer = Howler2._scratchBuffer;
                } catch (e3) {
                }
              }
            }
            node.bufferSource = null;
            return self2;
          },
          _clearSound: function(node) {
            var checkIE = /MSIE |Trident\//.test(Howler2._navigator && Howler2._navigator.userAgent);
            if (!checkIE) {
              node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
          }
        };
        var Sound2 = function(howl) {
          this._parent = howl;
          this.init();
        };
        Sound2.prototype = {
          init: function() {
            var self2 = this;
            var parent = self2._parent;
            self2._muted = parent._muted;
            self2._loop = parent._loop;
            self2._volume = parent._volume;
            self2._rate = parent._rate;
            self2._seek = 0;
            self2._paused = true;
            self2._ended = true;
            self2._sprite = "__default";
            self2._id = ++Howler2._counter;
            parent._sounds.push(self2);
            self2.create();
            return self2;
          },
          create: function() {
            var self2 = this;
            var parent = self2._parent;
            var volume = Howler2._muted || self2._muted || self2._parent._muted ? 0 : self2._volume;
            if (parent._webAudio) {
              self2._node = typeof Howler2.ctx.createGain === "undefined" ? Howler2.ctx.createGainNode() : Howler2.ctx.createGain();
              self2._node.gain.setValueAtTime(volume, Howler2.ctx.currentTime);
              self2._node.paused = true;
              self2._node.connect(Howler2.masterGain);
            } else if (!Howler2.noAudio) {
              self2._node = Howler2._obtainHtml5Audio();
              self2._errorFn = self2._errorListener.bind(self2);
              self2._node.addEventListener("error", self2._errorFn, false);
              self2._loadFn = self2._loadListener.bind(self2);
              self2._node.addEventListener(Howler2._canPlayEvent, self2._loadFn, false);
              self2._endFn = self2._endListener.bind(self2);
              self2._node.addEventListener("ended", self2._endFn, false);
              self2._node.src = parent._src;
              self2._node.preload = parent._preload === true ? "auto" : parent._preload;
              self2._node.volume = volume * Howler2.volume();
              self2._node.load();
            }
            return self2;
          },
          reset: function() {
            var self2 = this;
            var parent = self2._parent;
            self2._muted = parent._muted;
            self2._loop = parent._loop;
            self2._volume = parent._volume;
            self2._rate = parent._rate;
            self2._seek = 0;
            self2._rateSeek = 0;
            self2._paused = true;
            self2._ended = true;
            self2._sprite = "__default";
            self2._id = ++Howler2._counter;
            return self2;
          },
          _errorListener: function() {
            var self2 = this;
            self2._parent._emit("loaderror", self2._id, self2._node.error ? self2._node.error.code : 0);
            self2._node.removeEventListener("error", self2._errorFn, false);
          },
          _loadListener: function() {
            var self2 = this;
            var parent = self2._parent;
            parent._duration = Math.ceil(self2._node.duration * 10) / 10;
            if (Object.keys(parent._sprite).length === 0) {
              parent._sprite = { __default: [0, parent._duration * 1e3] };
            }
            if (parent._state !== "loaded") {
              parent._state = "loaded";
              parent._emit("load");
              parent._loadQueue();
            }
            self2._node.removeEventListener(Howler2._canPlayEvent, self2._loadFn, false);
          },
          _endListener: function() {
            var self2 = this;
            var parent = self2._parent;
            if (parent._duration === Infinity) {
              parent._duration = Math.ceil(self2._node.duration * 10) / 10;
              if (parent._sprite.__default[1] === Infinity) {
                parent._sprite.__default[1] = parent._duration * 1e3;
              }
              parent._ended(self2);
            }
            self2._node.removeEventListener("ended", self2._endFn, false);
          }
        };
        var cache3 = {};
        var loadBuffer = function(self2) {
          var url2 = self2._src;
          if (cache3[url2]) {
            self2._duration = cache3[url2].duration;
            loadSound(self2);
            return;
          }
          if (/^data:[^;]+;base64,/.test(url2)) {
            var data = atob(url2.split(",")[1]);
            var dataView = new Uint8Array(data.length);
            for (var i3 = 0; i3 < data.length; ++i3) {
              dataView[i3] = data.charCodeAt(i3);
            }
            decodeAudioData(dataView.buffer, self2);
          } else {
            var xhr = new XMLHttpRequest();
            xhr.open(self2._xhr.method, url2, true);
            xhr.withCredentials = self2._xhr.withCredentials;
            xhr.responseType = "arraybuffer";
            if (self2._xhr.headers) {
              Object.keys(self2._xhr.headers).forEach(function(key) {
                xhr.setRequestHeader(key, self2._xhr.headers[key]);
              });
            }
            xhr.onload = function() {
              var code = (xhr.status + "")[0];
              if (code !== "0" && code !== "2" && code !== "3") {
                self2._emit("loaderror", null, "Failed loading audio file with status: " + xhr.status + ".");
                return;
              }
              decodeAudioData(xhr.response, self2);
            };
            xhr.onerror = function() {
              if (self2._webAudio) {
                self2._html5 = true;
                self2._webAudio = false;
                self2._sounds = [];
                delete cache3[url2];
                self2.load();
              }
            };
            safeXhrSend(xhr);
          }
        };
        var safeXhrSend = function(xhr) {
          try {
            xhr.send();
          } catch (e3) {
            xhr.onerror();
          }
        };
        var decodeAudioData = function(arraybuffer, self2) {
          var error = function() {
            self2._emit("loaderror", null, "Decoding audio data failed.");
          };
          var success = function(buffer) {
            if (buffer && self2._sounds.length > 0) {
              cache3[self2._src] = buffer;
              loadSound(self2, buffer);
            } else {
              error();
            }
          };
          if (typeof Promise !== "undefined" && Howler2.ctx.decodeAudioData.length === 1) {
            Howler2.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
          } else {
            Howler2.ctx.decodeAudioData(arraybuffer, success, error);
          }
        };
        var loadSound = function(self2, buffer) {
          if (buffer && !self2._duration) {
            self2._duration = buffer.duration;
          }
          if (Object.keys(self2._sprite).length === 0) {
            self2._sprite = { __default: [0, self2._duration * 1e3] };
          }
          if (self2._state !== "loaded") {
            self2._state = "loaded";
            self2._emit("load");
            self2._loadQueue();
          }
        };
        var setupAudioContext = function() {
          if (!Howler2.usingWebAudio) {
            return;
          }
          try {
            if (typeof AudioContext !== "undefined") {
              Howler2.ctx = new AudioContext();
            } else if (typeof webkitAudioContext !== "undefined") {
              Howler2.ctx = new webkitAudioContext();
            } else {
              Howler2.usingWebAudio = false;
            }
          } catch (e3) {
            Howler2.usingWebAudio = false;
          }
          if (!Howler2.ctx) {
            Howler2.usingWebAudio = false;
          }
          var iOS = /iP(hone|od|ad)/.test(Howler2._navigator && Howler2._navigator.platform);
          var appVersion = Howler2._navigator && Howler2._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
          var version = appVersion ? parseInt(appVersion[1], 10) : null;
          if (iOS && version && version < 9) {
            var safari = /safari/.test(Howler2._navigator && Howler2._navigator.userAgent.toLowerCase());
            if (Howler2._navigator && !safari) {
              Howler2.usingWebAudio = false;
            }
          }
          if (Howler2.usingWebAudio) {
            Howler2.masterGain = typeof Howler2.ctx.createGain === "undefined" ? Howler2.ctx.createGainNode() : Howler2.ctx.createGain();
            Howler2.masterGain.gain.setValueAtTime(Howler2._muted ? 0 : Howler2._volume, Howler2.ctx.currentTime);
            Howler2.masterGain.connect(Howler2.ctx.destination);
          }
          Howler2._setup();
        };
        if (typeof define === "function" && define.amd) {
          define([], function() {
            return {
              Howler: Howler2,
              Howl: Howl3
            };
          });
        }
        if (typeof exports !== "undefined") {
          exports.Howler = Howler2;
          exports.Howl = Howl3;
        }
        if (typeof global !== "undefined") {
          global.HowlerGlobal = HowlerGlobal2;
          global.Howler = Howler2;
          global.Howl = Howl3;
          global.Sound = Sound2;
        } else if (typeof window !== "undefined") {
          window.HowlerGlobal = HowlerGlobal2;
          window.Howler = Howler2;
          window.Howl = Howl3;
          window.Sound = Sound2;
        }
      })();
      (function() {
        "use strict";
        HowlerGlobal.prototype._pos = [0, 0, 0];
        HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
        HowlerGlobal.prototype.stereo = function(pan) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          for (var i3 = self2._howls.length - 1; i3 >= 0; i3--) {
            self2._howls[i3].stereo(pan);
          }
          return self2;
        };
        HowlerGlobal.prototype.pos = function(x3, y2, z) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          y2 = typeof y2 !== "number" ? self2._pos[1] : y2;
          z = typeof z !== "number" ? self2._pos[2] : z;
          if (typeof x3 === "number") {
            self2._pos = [x3, y2, z];
            if (typeof self2.ctx.listener.positionX !== "undefined") {
              self2.ctx.listener.positionX.setTargetAtTime(self2._pos[0], Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.positionY.setTargetAtTime(self2._pos[1], Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.positionZ.setTargetAtTime(self2._pos[2], Howler.ctx.currentTime, 0.1);
            } else {
              self2.ctx.listener.setPosition(self2._pos[0], self2._pos[1], self2._pos[2]);
            }
          } else {
            return self2._pos;
          }
          return self2;
        };
        HowlerGlobal.prototype.orientation = function(x3, y2, z, xUp, yUp, zUp) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          var or = self2._orientation;
          y2 = typeof y2 !== "number" ? or[1] : y2;
          z = typeof z !== "number" ? or[2] : z;
          xUp = typeof xUp !== "number" ? or[3] : xUp;
          yUp = typeof yUp !== "number" ? or[4] : yUp;
          zUp = typeof zUp !== "number" ? or[5] : zUp;
          if (typeof x3 === "number") {
            self2._orientation = [x3, y2, z, xUp, yUp, zUp];
            if (typeof self2.ctx.listener.forwardX !== "undefined") {
              self2.ctx.listener.forwardX.setTargetAtTime(x3, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.forwardY.setTargetAtTime(y2, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
            } else {
              self2.ctx.listener.setOrientation(x3, y2, z, xUp, yUp, zUp);
            }
          } else {
            return or;
          }
          return self2;
        };
        Howl.prototype.init = function(_super) {
          return function(o2) {
            var self2 = this;
            self2._orientation = o2.orientation || [1, 0, 0];
            self2._stereo = o2.stereo || null;
            self2._pos = o2.pos || null;
            self2._pannerAttr = {
              coneInnerAngle: typeof o2.coneInnerAngle !== "undefined" ? o2.coneInnerAngle : 360,
              coneOuterAngle: typeof o2.coneOuterAngle !== "undefined" ? o2.coneOuterAngle : 360,
              coneOuterGain: typeof o2.coneOuterGain !== "undefined" ? o2.coneOuterGain : 0,
              distanceModel: typeof o2.distanceModel !== "undefined" ? o2.distanceModel : "inverse",
              maxDistance: typeof o2.maxDistance !== "undefined" ? o2.maxDistance : 1e4,
              panningModel: typeof o2.panningModel !== "undefined" ? o2.panningModel : "HRTF",
              refDistance: typeof o2.refDistance !== "undefined" ? o2.refDistance : 1,
              rolloffFactor: typeof o2.rolloffFactor !== "undefined" ? o2.rolloffFactor : 1
            };
            self2._onstereo = o2.onstereo ? [{ fn: o2.onstereo }] : [];
            self2._onpos = o2.onpos ? [{ fn: o2.onpos }] : [];
            self2._onorientation = o2.onorientation ? [{ fn: o2.onorientation }] : [];
            return _super.call(this, o2);
          };
        }(Howl.prototype.init);
        Howl.prototype.stereo = function(pan, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "stereo",
              action: function() {
                self2.stereo(pan, id);
              }
            });
            return self2;
          }
          var pannerType = typeof Howler.ctx.createStereoPanner === "undefined" ? "spatial" : "stereo";
          if (typeof id === "undefined") {
            if (typeof pan === "number") {
              self2._stereo = pan;
              self2._pos = [pan, 0, 0];
            } else {
              return self2._stereo;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i3 = 0; i3 < ids.length; i3++) {
            var sound = self2._soundById(ids[i3]);
            if (sound) {
              if (typeof pan === "number") {
                sound._stereo = pan;
                sound._pos = [pan, 0, 0];
                if (sound._node) {
                  sound._pannerAttr.panningModel = "equalpower";
                  if (!sound._panner || !sound._panner.pan) {
                    setupPanner(sound, pannerType);
                  }
                  if (pannerType === "spatial") {
                    if (typeof sound._panner.positionX !== "undefined") {
                      sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                      sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                      sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
                    } else {
                      sound._panner.setPosition(pan, 0, 0);
                    }
                  } else {
                    sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
                  }
                }
                self2._emit("stereo", sound._id);
              } else {
                return sound._stereo;
              }
            }
          }
          return self2;
        };
        Howl.prototype.pos = function(x3, y2, z, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "pos",
              action: function() {
                self2.pos(x3, y2, z, id);
              }
            });
            return self2;
          }
          y2 = typeof y2 !== "number" ? 0 : y2;
          z = typeof z !== "number" ? -0.5 : z;
          if (typeof id === "undefined") {
            if (typeof x3 === "number") {
              self2._pos = [x3, y2, z];
            } else {
              return self2._pos;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i3 = 0; i3 < ids.length; i3++) {
            var sound = self2._soundById(ids[i3]);
            if (sound) {
              if (typeof x3 === "number") {
                sound._pos = [x3, y2, z];
                if (sound._node) {
                  if (!sound._panner || sound._panner.pan) {
                    setupPanner(sound, "spatial");
                  }
                  if (typeof sound._panner.positionX !== "undefined") {
                    sound._panner.positionX.setValueAtTime(x3, Howler.ctx.currentTime);
                    sound._panner.positionY.setValueAtTime(y2, Howler.ctx.currentTime);
                    sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setPosition(x3, y2, z);
                  }
                }
                self2._emit("pos", sound._id);
              } else {
                return sound._pos;
              }
            }
          }
          return self2;
        };
        Howl.prototype.orientation = function(x3, y2, z, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "orientation",
              action: function() {
                self2.orientation(x3, y2, z, id);
              }
            });
            return self2;
          }
          y2 = typeof y2 !== "number" ? self2._orientation[1] : y2;
          z = typeof z !== "number" ? self2._orientation[2] : z;
          if (typeof id === "undefined") {
            if (typeof x3 === "number") {
              self2._orientation = [x3, y2, z];
            } else {
              return self2._orientation;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i3 = 0; i3 < ids.length; i3++) {
            var sound = self2._soundById(ids[i3]);
            if (sound) {
              if (typeof x3 === "number") {
                sound._orientation = [x3, y2, z];
                if (sound._node) {
                  if (!sound._panner) {
                    if (!sound._pos) {
                      sound._pos = self2._pos || [0, 0, -0.5];
                    }
                    setupPanner(sound, "spatial");
                  }
                  if (typeof sound._panner.orientationX !== "undefined") {
                    sound._panner.orientationX.setValueAtTime(x3, Howler.ctx.currentTime);
                    sound._panner.orientationY.setValueAtTime(y2, Howler.ctx.currentTime);
                    sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setOrientation(x3, y2, z);
                  }
                }
                self2._emit("orientation", sound._id);
              } else {
                return sound._orientation;
              }
            }
          }
          return self2;
        };
        Howl.prototype.pannerAttr = function() {
          var self2 = this;
          var args = arguments;
          var o2, id, sound;
          if (!self2._webAudio) {
            return self2;
          }
          if (args.length === 0) {
            return self2._pannerAttr;
          } else if (args.length === 1) {
            if (typeof args[0] === "object") {
              o2 = args[0];
              if (typeof id === "undefined") {
                if (!o2.pannerAttr) {
                  o2.pannerAttr = {
                    coneInnerAngle: o2.coneInnerAngle,
                    coneOuterAngle: o2.coneOuterAngle,
                    coneOuterGain: o2.coneOuterGain,
                    distanceModel: o2.distanceModel,
                    maxDistance: o2.maxDistance,
                    refDistance: o2.refDistance,
                    rolloffFactor: o2.rolloffFactor,
                    panningModel: o2.panningModel
                  };
                }
                self2._pannerAttr = {
                  coneInnerAngle: typeof o2.pannerAttr.coneInnerAngle !== "undefined" ? o2.pannerAttr.coneInnerAngle : self2._coneInnerAngle,
                  coneOuterAngle: typeof o2.pannerAttr.coneOuterAngle !== "undefined" ? o2.pannerAttr.coneOuterAngle : self2._coneOuterAngle,
                  coneOuterGain: typeof o2.pannerAttr.coneOuterGain !== "undefined" ? o2.pannerAttr.coneOuterGain : self2._coneOuterGain,
                  distanceModel: typeof o2.pannerAttr.distanceModel !== "undefined" ? o2.pannerAttr.distanceModel : self2._distanceModel,
                  maxDistance: typeof o2.pannerAttr.maxDistance !== "undefined" ? o2.pannerAttr.maxDistance : self2._maxDistance,
                  refDistance: typeof o2.pannerAttr.refDistance !== "undefined" ? o2.pannerAttr.refDistance : self2._refDistance,
                  rolloffFactor: typeof o2.pannerAttr.rolloffFactor !== "undefined" ? o2.pannerAttr.rolloffFactor : self2._rolloffFactor,
                  panningModel: typeof o2.pannerAttr.panningModel !== "undefined" ? o2.pannerAttr.panningModel : self2._panningModel
                };
              }
            } else {
              sound = self2._soundById(parseInt(args[0], 10));
              return sound ? sound._pannerAttr : self2._pannerAttr;
            }
          } else if (args.length === 2) {
            o2 = args[0];
            id = parseInt(args[1], 10);
          }
          var ids = self2._getSoundIds(id);
          for (var i3 = 0; i3 < ids.length; i3++) {
            sound = self2._soundById(ids[i3]);
            if (sound) {
              var pa = sound._pannerAttr;
              pa = {
                coneInnerAngle: typeof o2.coneInnerAngle !== "undefined" ? o2.coneInnerAngle : pa.coneInnerAngle,
                coneOuterAngle: typeof o2.coneOuterAngle !== "undefined" ? o2.coneOuterAngle : pa.coneOuterAngle,
                coneOuterGain: typeof o2.coneOuterGain !== "undefined" ? o2.coneOuterGain : pa.coneOuterGain,
                distanceModel: typeof o2.distanceModel !== "undefined" ? o2.distanceModel : pa.distanceModel,
                maxDistance: typeof o2.maxDistance !== "undefined" ? o2.maxDistance : pa.maxDistance,
                refDistance: typeof o2.refDistance !== "undefined" ? o2.refDistance : pa.refDistance,
                rolloffFactor: typeof o2.rolloffFactor !== "undefined" ? o2.rolloffFactor : pa.rolloffFactor,
                panningModel: typeof o2.panningModel !== "undefined" ? o2.panningModel : pa.panningModel
              };
              var panner = sound._panner;
              if (panner) {
                panner.coneInnerAngle = pa.coneInnerAngle;
                panner.coneOuterAngle = pa.coneOuterAngle;
                panner.coneOuterGain = pa.coneOuterGain;
                panner.distanceModel = pa.distanceModel;
                panner.maxDistance = pa.maxDistance;
                panner.refDistance = pa.refDistance;
                panner.rolloffFactor = pa.rolloffFactor;
                panner.panningModel = pa.panningModel;
              } else {
                if (!sound._pos) {
                  sound._pos = self2._pos || [0, 0, -0.5];
                }
                setupPanner(sound, "spatial");
              }
            }
          }
          return self2;
        };
        Sound.prototype.init = function(_super) {
          return function() {
            var self2 = this;
            var parent = self2._parent;
            self2._orientation = parent._orientation;
            self2._stereo = parent._stereo;
            self2._pos = parent._pos;
            self2._pannerAttr = parent._pannerAttr;
            _super.call(this);
            if (self2._stereo) {
              parent.stereo(self2._stereo);
            } else if (self2._pos) {
              parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
            }
          };
        }(Sound.prototype.init);
        Sound.prototype.reset = function(_super) {
          return function() {
            var self2 = this;
            var parent = self2._parent;
            self2._orientation = parent._orientation;
            self2._stereo = parent._stereo;
            self2._pos = parent._pos;
            self2._pannerAttr = parent._pannerAttr;
            if (self2._stereo) {
              parent.stereo(self2._stereo);
            } else if (self2._pos) {
              parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
            } else if (self2._panner) {
              self2._panner.disconnect(0);
              self2._panner = void 0;
              parent._refreshBuffer(self2);
            }
            return _super.call(this);
          };
        }(Sound.prototype.reset);
        var setupPanner = function(sound, type) {
          type = type || "spatial";
          if (type === "spatial") {
            sound._panner = Howler.ctx.createPanner();
            sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
            sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
            sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
            sound._panner.distanceModel = sound._pannerAttr.distanceModel;
            sound._panner.maxDistance = sound._pannerAttr.maxDistance;
            sound._panner.refDistance = sound._pannerAttr.refDistance;
            sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
            sound._panner.panningModel = sound._pannerAttr.panningModel;
            if (typeof sound._panner.positionX !== "undefined") {
              sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
            } else {
              sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
            }
            if (typeof sound._panner.orientationX !== "undefined") {
              sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
              sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
              sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
            }
          } else {
            sound._panner = Howler.ctx.createStereoPanner();
            sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
          }
          sound._panner.connect(sound._node);
          if (!sound._paused) {
            sound._parent.pause(sound._id, true).play(sound._id, true);
          }
        };
      })();
    }
  });

  // node_modules/react-range/lib/types.js
  var require_types = __commonJS({
    "node_modules/react-range/lib/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Direction = void 0;
      var Direction;
      (function(Direction2) {
        Direction2["Right"] = "to right";
        Direction2["Left"] = "to left";
        Direction2["Down"] = "to bottom";
        Direction2["Up"] = "to top";
      })(Direction = exports.Direction || (exports.Direction = {}));
    }
  });

  // node_modules/react-range/lib/utils.js
  var require_utils2 = __commonJS({
    "node_modules/react-range/lib/utils.js"(exports) {
      "use strict";
      var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i3 = 0, l2 = from.length, ar; i3 < l2; i3++) {
            if (ar || !(i3 in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i3);
              ar[i3] = from[i3];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useThumbOverlap = exports.assertUnreachable = exports.voidFn = exports.getTrackBackground = exports.replaceAt = exports.schd = exports.translate = exports.getClosestThumbIndex = exports.translateThumbs = exports.getPaddingAndBorder = exports.getMargin = exports.checkInitialOverlap = exports.checkValuesAgainstBoundaries = exports.checkBoundaries = exports.isVertical = exports.relativeValue = exports.normalizeValue = exports.isStepDivisible = exports.isTouchEvent = exports.getStepDecimals = void 0;
      var react_1 = require_react();
      var types_1 = require_types();
      var getStepDecimals = function(step) {
        var decimals = step.toString().split(".")[1];
        return decimals ? decimals.length : 0;
      };
      exports.getStepDecimals = getStepDecimals;
      function isTouchEvent(event) {
        return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;
      }
      exports.isTouchEvent = isTouchEvent;
      function isStepDivisible(min2, max2, step) {
        var res = (max2 - min2) / step;
        var precision = 8;
        var roundedRes = Number(res.toFixed(precision));
        return parseInt(roundedRes.toString(), 10) === roundedRes;
      }
      exports.isStepDivisible = isStepDivisible;
      function normalizeValue(value2, index2, min2, max2, step, allowOverlap, values) {
        var BIG_NUM = 1e11;
        value2 = Math.round(value2 * BIG_NUM) / BIG_NUM;
        if (!allowOverlap) {
          var prev2 = values[index2 - 1];
          var next = values[index2 + 1];
          if (prev2 && prev2 > value2)
            return prev2;
          if (next && next < value2)
            return next;
        }
        if (value2 > max2)
          return max2;
        if (value2 < min2)
          return min2;
        var remainder = Math.floor(value2 * BIG_NUM - min2 * BIG_NUM) % Math.floor(step * BIG_NUM);
        var closestLowerNum = Math.floor(value2 * BIG_NUM - Math.abs(remainder));
        var rounded = remainder === 0 ? value2 : closestLowerNum / BIG_NUM;
        var res = Math.abs(remainder / BIG_NUM) < step / 2 ? rounded : rounded + step;
        var decimalPlaces = (0, exports.getStepDecimals)(step);
        return parseFloat(res.toFixed(decimalPlaces));
      }
      exports.normalizeValue = normalizeValue;
      function relativeValue(value2, min2, max2) {
        return (value2 - min2) / (max2 - min2);
      }
      exports.relativeValue = relativeValue;
      function isVertical(direction) {
        return direction === types_1.Direction.Up || direction === types_1.Direction.Down;
      }
      exports.isVertical = isVertical;
      function checkBoundaries(value2, min2, max2) {
        if (min2 >= max2) {
          throw new RangeError("min (".concat(min2, ") is equal/bigger than max (").concat(max2, ")"));
        }
        if (value2 < min2) {
          throw new RangeError("value (".concat(value2, ") is smaller than min (").concat(min2, ")"));
        }
        if (value2 > max2) {
          throw new RangeError("value (".concat(value2, ") is bigger than max (").concat(max2, ")"));
        }
      }
      exports.checkBoundaries = checkBoundaries;
      function checkValuesAgainstBoundaries(value2, min2, max2) {
        if (value2 < min2) {
          return min2;
        }
        if (value2 > max2) {
          return max2;
        } else {
          return value2;
        }
      }
      exports.checkValuesAgainstBoundaries = checkValuesAgainstBoundaries;
      function checkInitialOverlap(values) {
        if (values.length < 2)
          return;
        if (!values.slice(1).every(function(item, i3) {
          return values[i3] <= item;
        })) {
          throw new RangeError("values={[".concat(values, "]} needs to be sorted when allowOverlap={false}"));
        }
      }
      exports.checkInitialOverlap = checkInitialOverlap;
      function getMargin(element2) {
        var style = window.getComputedStyle(element2);
        return {
          top: parseInt(style["margin-top"], 10),
          bottom: parseInt(style["margin-bottom"], 10),
          left: parseInt(style["margin-left"], 10),
          right: parseInt(style["margin-right"], 10)
        };
      }
      exports.getMargin = getMargin;
      function getPaddingAndBorder(element2) {
        var style = window.getComputedStyle(element2);
        return {
          top: parseInt(style["padding-top"], 10) + parseInt(style["border-top-width"], 10),
          bottom: parseInt(style["padding-bottom"], 10) + parseInt(style["border-bottom-width"], 10),
          left: parseInt(style["padding-left"], 10) + parseInt(style["border-left-width"], 10),
          right: parseInt(style["padding-right"], 10) + parseInt(style["border-right-width"], 10)
        };
      }
      exports.getPaddingAndBorder = getPaddingAndBorder;
      function translateThumbs(elements, offsets, rtl) {
        var inverter = rtl ? -1 : 1;
        elements.forEach(function(element2, index2) {
          return translate(element2, inverter * offsets[index2].x, offsets[index2].y);
        });
      }
      exports.translateThumbs = translateThumbs;
      function getClosestThumbIndex(thumbs, clientX, clientY, direction) {
        var thumbIndex = 0;
        var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);
        for (var i3 = 1; i3 < thumbs.length; i3++) {
          var thumbDistance = getThumbDistance(thumbs[i3], clientX, clientY, direction);
          if (thumbDistance < minThumbDistance) {
            minThumbDistance = thumbDistance;
            thumbIndex = i3;
          }
        }
        return thumbIndex;
      }
      exports.getClosestThumbIndex = getClosestThumbIndex;
      function translate(element2, x3, y2) {
        element2.style.transform = "translate(".concat(x3, "px, ").concat(y2, "px)");
      }
      exports.translate = translate;
      var schd = function(fn) {
        var lastArgs = [];
        var frameId = null;
        var wrapperFn = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          if (frameId) {
            return;
          }
          frameId = requestAnimationFrame(function() {
            frameId = null;
            fn.apply(void 0, lastArgs);
          });
        };
        return wrapperFn;
      };
      exports.schd = schd;
      function replaceAt(values, index2, value2) {
        var ret = values.slice(0);
        ret[index2] = value2;
        return ret;
      }
      exports.replaceAt = replaceAt;
      function getTrackBackground2(_a) {
        var values = _a.values, colors2 = _a.colors, min2 = _a.min, max2 = _a.max, _b = _a.direction, direction = _b === void 0 ? types_1.Direction.Right : _b, _c = _a.rtl, rtl = _c === void 0 ? false : _c;
        if (rtl && direction === types_1.Direction.Right) {
          direction = types_1.Direction.Left;
        } else if (rtl && types_1.Direction.Left) {
          direction = types_1.Direction.Right;
        }
        var progress = values.slice(0).sort(function(a3, b2) {
          return a3 - b2;
        }).map(function(value2) {
          return (value2 - min2) / (max2 - min2) * 100;
        });
        var middle = progress.reduce(function(acc, point4, index2) {
          return "".concat(acc, ", ").concat(colors2[index2], " ").concat(point4, "%, ").concat(colors2[index2 + 1], " ").concat(point4, "%");
        }, "");
        return "linear-gradient(".concat(direction, ", ").concat(colors2[0], " 0%").concat(middle, ", ").concat(colors2[colors2.length - 1], " 100%)");
      }
      exports.getTrackBackground = getTrackBackground2;
      function voidFn() {
      }
      exports.voidFn = voidFn;
      function assertUnreachable(x3) {
        throw new Error("Didn't expect to get here");
      }
      exports.assertUnreachable = assertUnreachable;
      var getThumbWidth = function(thumbEl, value2, separator, decimalPlaces, valueToLabel) {
        if (valueToLabel === void 0) {
          valueToLabel = function(value3) {
            return value3;
          };
        }
        var width = Math.ceil(__spreadArray([thumbEl], Array.from(thumbEl.children), true).reduce(function(width2, el) {
          var elWidth = Math.ceil(el.getBoundingClientRect().width);
          if (el.innerText && el.innerText.includes(separator) && el.childElementCount === 0) {
            var elClone = el.cloneNode(true);
            elClone.innerHTML = valueToLabel(value2.toFixed(decimalPlaces));
            elClone.style.visibility = "hidden";
            document.body.appendChild(elClone);
            elWidth = Math.ceil(elClone.getBoundingClientRect().width);
            document.body.removeChild(elClone);
          }
          return elWidth > width2 ? elWidth : width2;
        }, thumbEl.getBoundingClientRect().width));
        return width;
      };
      var getOverlaps = function(index2, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {
        if (valueToLabel === void 0) {
          valueToLabel = function(value2) {
            return value2;
          };
        }
        var overlaps = [];
        var buildOverlaps = function(thumbIndex) {
          var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);
          var thumbX = offsets[thumbIndex].x;
          offsets.forEach(function(_a, siblingIndex) {
            var siblingX = _a.x;
            var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);
            if (thumbIndex !== siblingIndex && (thumbX >= siblingX && thumbX <= siblingX + siblingWidth || thumbX + thumbXWidth >= siblingX && thumbX + thumbXWidth <= siblingX + siblingWidth)) {
              if (!overlaps.includes(siblingIndex)) {
                overlaps.push(thumbIndex);
                overlaps.push(siblingIndex);
                overlaps = __spreadArray(__spreadArray([], overlaps, true), [thumbIndex, siblingIndex], false);
                buildOverlaps(siblingIndex);
              }
            }
          });
        };
        buildOverlaps(index2);
        return Array.from(new Set(overlaps.sort()));
      };
      var useThumbOverlap = function(rangeRef, values, index2, step, separator, valueToLabel) {
        if (step === void 0) {
          step = 0.1;
        }
        if (separator === void 0) {
          separator = " - ";
        }
        if (valueToLabel === void 0) {
          valueToLabel = function(value2) {
            return value2;
          };
        }
        var decimalPlaces = (0, exports.getStepDecimals)(step);
        var _a = (0, react_1.useState)({}), labelStyle = _a[0], setLabelStyle = _a[1];
        var _b = (0, react_1.useState)(valueToLabel(values[index2].toFixed(decimalPlaces))), labelValue = _b[0], setLabelValue = _b[1];
        (0, react_1.useEffect)(function() {
          if (rangeRef) {
            var thumbs = rangeRef.getThumbs();
            if (thumbs.length < 1)
              return;
            var newStyle = {};
            var offsets_1 = rangeRef.getOffsets();
            var overlaps = getOverlaps(index2, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel);
            var labelValue_1 = valueToLabel(values[index2].toFixed(decimalPlaces));
            if (overlaps.length) {
              var offsetsX = overlaps.reduce(function(a3, c3, i3, s3) {
                return a3.length ? __spreadArray(__spreadArray([], a3, true), [offsets_1[s3[i3]].x], false) : [offsets_1[s3[i3]].x];
              }, []);
              if (Math.min.apply(Math, offsetsX) === offsets_1[index2].x) {
                var labelValues_1 = [];
                overlaps.forEach(function(thumb) {
                  labelValues_1.push(values[thumb].toFixed(decimalPlaces));
                });
                labelValue_1 = Array.from(new Set(labelValues_1.sort(function(a3, b2) {
                  return parseFloat(a3) - parseFloat(b2);
                }))).map(valueToLabel).join(separator);
                var first = Math.min.apply(Math, offsetsX);
                var last = Math.max.apply(Math, offsetsX);
                var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;
                newStyle.left = "".concat(Math.abs(first - (last + lastWidth)) / 2, "px");
                newStyle.transform = "translate(-50%, 0)";
              } else {
                newStyle.visibility = "hidden";
              }
            }
            setLabelValue(labelValue_1);
            setLabelStyle(newStyle);
          }
        }, [rangeRef, values]);
        return [labelValue, labelStyle];
      };
      exports.useThumbOverlap = useThumbOverlap;
      function getThumbDistance(thumbEl, clientX, clientY, direction) {
        var _a = thumbEl.getBoundingClientRect(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;
        return isVertical(direction) ? Math.abs(clientY - (top + height / 2)) : Math.abs(clientX - (left + width / 2));
      }
    }
  });

  // node_modules/react-range/lib/Range.js
  var require_Range = __commonJS({
    "node_modules/react-range/lib/Range.js"(exports) {
      "use strict";
      var __extends2 = exports && exports.__extends || function() {
        var extendStatics2 = function(d3, b2) {
          extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
            d4.__proto__ = b3;
          } || function(d4, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d4[p2] = b3[p2];
          };
          return extendStatics2(d3, b2);
        };
        return function(d3, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics2(d3, b2);
          function __() {
            this.constructor = d3;
          }
          d3.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        var desc = Object.getOwnPropertyDescriptor(m3, k3);
        if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m3[k3];
          } };
        }
        Object.defineProperty(o2, k22, desc);
      } : function(o2, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o2[k22] = m3[k3];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3))
              __createBinding(result, mod, k3);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i3 = 0, l2 = from.length, ar; i3 < l2; i3++) {
            if (ar || !(i3 in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i3);
              ar[i3] = from[i3];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var React54 = __importStar(require_react());
      var utils_1 = require_utils2();
      var types_1 = require_types();
      var INCREASE_KEYS = ["ArrowRight", "ArrowUp", "k", "PageUp"];
      var DECREASE_KEYS = ["ArrowLeft", "ArrowDown", "j", "PageDown"];
      var Range2 = function(_super) {
        __extends2(Range3, _super);
        function Range3(props) {
          var _this = _super.call(this, props) || this;
          _this.trackRef = React54.createRef();
          _this.thumbRefs = [];
          _this.state = {
            draggedTrackPos: [-1, -1],
            draggedThumbIndex: -1,
            thumbZIndexes: new Array(_this.props.values.length).fill(0).map(function(t2, i3) {
              return i3;
            }),
            isChanged: false,
            markOffsets: []
          };
          _this.getOffsets = function() {
            var _a = _this.props, direction = _a.direction, values = _a.values, min2 = _a.min, max2 = _a.max;
            var trackElement = _this.trackRef.current;
            var trackRect = trackElement.getBoundingClientRect();
            var trackPadding = (0, utils_1.getPaddingAndBorder)(trackElement);
            return _this.getThumbs().map(function(thumb, index2) {
              var thumbOffsets = { x: 0, y: 0 };
              var thumbRect = thumb.getBoundingClientRect();
              var thumbMargins = (0, utils_1.getMargin)(thumb);
              switch (direction) {
                case types_1.Direction.Right:
                  thumbOffsets.x = (thumbMargins.left + trackPadding.left) * -1;
                  thumbOffsets.y = ((thumbRect.height - trackRect.height) / 2 + trackPadding.top) * -1;
                  thumbOffsets.x += trackRect.width * (0, utils_1.relativeValue)(values[index2], min2, max2) - thumbRect.width / 2;
                  return thumbOffsets;
                case types_1.Direction.Left:
                  thumbOffsets.x = (thumbMargins.right + trackPadding.right) * -1;
                  thumbOffsets.y = ((thumbRect.height - trackRect.height) / 2 + trackPadding.top) * -1;
                  thumbOffsets.x += trackRect.width - trackRect.width * (0, utils_1.relativeValue)(values[index2], min2, max2) - thumbRect.width / 2;
                  return thumbOffsets;
                case types_1.Direction.Up:
                  thumbOffsets.x = ((thumbRect.width - trackRect.width) / 2 + thumbMargins.left + trackPadding.left) * -1;
                  thumbOffsets.y = -trackPadding.left;
                  thumbOffsets.y += trackRect.height - trackRect.height * (0, utils_1.relativeValue)(values[index2], min2, max2) - thumbRect.height / 2;
                  return thumbOffsets;
                case types_1.Direction.Down:
                  thumbOffsets.x = ((thumbRect.width - trackRect.width) / 2 + thumbMargins.left + trackPadding.left) * -1;
                  thumbOffsets.y = -trackPadding.left;
                  thumbOffsets.y += trackRect.height * (0, utils_1.relativeValue)(values[index2], min2, max2) - thumbRect.height / 2;
                  return thumbOffsets;
                default:
                  return (0, utils_1.assertUnreachable)(direction);
              }
            });
          };
          _this.getThumbs = function() {
            if (_this.trackRef && _this.trackRef.current) {
              return Array.from(_this.trackRef.current.children).filter(function(el) {
                return el.hasAttribute("aria-valuenow");
              });
            }
            console.warn("No thumbs found in the track container. Did you forget to pass & spread the `props` param in renderTrack?");
            return [];
          };
          _this.getTargetIndex = function(e3) {
            return _this.getThumbs().findIndex(function(child) {
              return child === e3.target || child.contains(e3.target);
            });
          };
          _this.addTouchEvents = function(e3) {
            document.addEventListener("touchmove", _this.schdOnTouchMove, {
              passive: false
            });
            document.addEventListener("touchend", _this.schdOnEnd, {
              passive: false
            });
            document.addEventListener("touchcancel", _this.schdOnEnd, {
              passive: false
            });
          };
          _this.addMouseEvents = function(e3) {
            document.addEventListener("mousemove", _this.schdOnMouseMove);
            document.addEventListener("mouseup", _this.schdOnEnd);
          };
          _this.onMouseDownTrack = function(e3) {
            var _a;
            if (e3.button !== 0)
              return;
            e3.persist();
            e3.preventDefault();
            _this.addMouseEvents(e3.nativeEvent);
            if (_this.props.values.length > 1 && _this.props.draggableTrack) {
              if (_this.thumbRefs.some(function(thumbRef) {
                var _a2;
                return (_a2 = thumbRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(e3.target);
              }))
                return;
              _this.setState({
                draggedTrackPos: [e3.clientX, e3.clientY]
              }, function() {
                return _this.onMove(e3.clientX, e3.clientY);
              });
            } else {
              var draggedThumbIndex = (0, utils_1.getClosestThumbIndex)(_this.thumbRefs.map(function(t2) {
                return t2.current;
              }), e3.clientX, e3.clientY, _this.props.direction);
              (_a = _this.thumbRefs[draggedThumbIndex].current) === null || _a === void 0 ? void 0 : _a.focus();
              _this.setState({
                draggedThumbIndex
              }, function() {
                return _this.onMove(e3.clientX, e3.clientY);
              });
            }
          };
          _this.onResize = function() {
            (0, utils_1.translateThumbs)(_this.getThumbs(), _this.getOffsets(), _this.props.rtl);
            _this.calculateMarkOffsets();
          };
          _this.onTouchStartTrack = function(e3) {
            var _a;
            e3.persist();
            _this.addTouchEvents(e3.nativeEvent);
            if (_this.props.values.length > 1 && _this.props.draggableTrack) {
              if (_this.thumbRefs.some(function(thumbRef) {
                var _a2;
                return (_a2 = thumbRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(e3.target);
              }))
                return;
              _this.setState({
                draggedTrackPos: [e3.touches[0].clientX, e3.touches[0].clientY]
              }, function() {
                return _this.onMove(e3.touches[0].clientX, e3.touches[0].clientY);
              });
            } else {
              var draggedThumbIndex = (0, utils_1.getClosestThumbIndex)(_this.thumbRefs.map(function(t2) {
                return t2.current;
              }), e3.touches[0].clientX, e3.touches[0].clientY, _this.props.direction);
              (_a = _this.thumbRefs[draggedThumbIndex].current) === null || _a === void 0 ? void 0 : _a.focus();
              _this.setState({
                draggedThumbIndex
              }, function() {
                return _this.onMove(e3.touches[0].clientX, e3.touches[0].clientY);
              });
            }
          };
          _this.onMouseOrTouchStart = function(e3) {
            if (_this.props.disabled)
              return;
            var isTouch3 = (0, utils_1.isTouchEvent)(e3);
            if (!isTouch3 && e3.button !== 0)
              return;
            var index2 = _this.getTargetIndex(e3);
            if (index2 === -1)
              return;
            if (isTouch3) {
              _this.addTouchEvents(e3);
            } else {
              _this.addMouseEvents(e3);
            }
            _this.setState({
              draggedThumbIndex: index2,
              thumbZIndexes: _this.state.thumbZIndexes.map(function(t2, i3) {
                if (i3 === index2) {
                  return Math.max.apply(Math, _this.state.thumbZIndexes);
                }
                return t2 <= _this.state.thumbZIndexes[index2] ? t2 : t2 - 1;
              })
            });
          };
          _this.onMouseMove = function(e3) {
            e3.preventDefault();
            _this.onMove(e3.clientX, e3.clientY);
          };
          _this.onTouchMove = function(e3) {
            e3.preventDefault();
            _this.onMove(e3.touches[0].clientX, e3.touches[0].clientY);
          };
          _this.onKeyDown = function(e3) {
            var _a = _this.props, values = _a.values, onChange2 = _a.onChange, step = _a.step, rtl = _a.rtl, direction = _a.direction;
            var isChanged = _this.state.isChanged;
            var index2 = _this.getTargetIndex(e3.nativeEvent);
            var inverter = rtl || direction === types_1.Direction.Left || direction === types_1.Direction.Down ? -1 : 1;
            if (index2 === -1)
              return;
            if (INCREASE_KEYS.includes(e3.key)) {
              e3.preventDefault();
              _this.setState({
                draggedThumbIndex: index2,
                isChanged: true
              });
              onChange2((0, utils_1.replaceAt)(values, index2, _this.normalizeValue(values[index2] + inverter * (e3.key === "PageUp" ? step * 10 : step), index2)));
            } else if (DECREASE_KEYS.includes(e3.key)) {
              e3.preventDefault();
              _this.setState({
                draggedThumbIndex: index2,
                isChanged: true
              });
              onChange2((0, utils_1.replaceAt)(values, index2, _this.normalizeValue(values[index2] - inverter * (e3.key === "PageDown" ? step * 10 : step), index2)));
            } else if (e3.key === "Tab") {
              _this.setState({ draggedThumbIndex: -1 }, function() {
                if (isChanged) {
                  _this.fireOnFinalChange();
                }
              });
            } else {
              if (isChanged) {
                _this.fireOnFinalChange();
              }
            }
          };
          _this.onKeyUp = function(e3) {
            var isChanged = _this.state.isChanged;
            _this.setState({
              draggedThumbIndex: -1
            }, function() {
              if (isChanged) {
                _this.fireOnFinalChange();
              }
            });
          };
          _this.onMove = function(clientX, clientY) {
            var _a = _this.state, draggedThumbIndex = _a.draggedThumbIndex, draggedTrackPos = _a.draggedTrackPos;
            var _b = _this.props, direction = _b.direction, min2 = _b.min, max2 = _b.max, onChange2 = _b.onChange, values = _b.values, step = _b.step, rtl = _b.rtl;
            if (draggedThumbIndex === -1 && draggedTrackPos[0] === -1 && draggedTrackPos[1] === -1)
              return null;
            var trackElement = _this.trackRef.current;
            if (!trackElement)
              return null;
            var trackRect = trackElement.getBoundingClientRect();
            var trackLength = (0, utils_1.isVertical)(direction) ? trackRect.height : trackRect.width;
            if (draggedTrackPos[0] !== -1 && draggedTrackPos[1] !== -1) {
              var dX = clientX - draggedTrackPos[0];
              var dY = clientY - draggedTrackPos[1];
              var deltaValue = 0;
              switch (direction) {
                case types_1.Direction.Right:
                case types_1.Direction.Left:
                  deltaValue = dX / trackLength * (max2 - min2);
                  break;
                case types_1.Direction.Down:
                case types_1.Direction.Up:
                  deltaValue = dY / trackLength * (max2 - min2);
                  break;
                default:
                  (0, utils_1.assertUnreachable)(direction);
              }
              if (rtl) {
                deltaValue *= -1;
              }
              if (Math.abs(deltaValue) >= step / 2) {
                for (var i3 = 0; i3 < _this.thumbRefs.length; i3++) {
                  if (values[i3] === max2 && Math.sign(deltaValue) === 1 || values[i3] === min2 && Math.sign(deltaValue) === -1)
                    return;
                  var thumbValue = values[i3] + deltaValue;
                  if (thumbValue > max2)
                    deltaValue = max2 - values[i3];
                  else if (thumbValue < min2)
                    deltaValue = min2 - values[i3];
                }
                var newValues = values.slice(0);
                for (var i3 = 0; i3 < _this.thumbRefs.length; i3++) {
                  newValues = (0, utils_1.replaceAt)(newValues, i3, _this.normalizeValue(values[i3] + deltaValue, i3));
                }
                _this.setState({
                  draggedTrackPos: [clientX, clientY]
                });
                onChange2(newValues);
              }
            } else {
              var newValue = 0;
              switch (direction) {
                case types_1.Direction.Right:
                  newValue = (clientX - trackRect.left) / trackLength * (max2 - min2) + min2;
                  break;
                case types_1.Direction.Left:
                  newValue = (trackLength - (clientX - trackRect.left)) / trackLength * (max2 - min2) + min2;
                  break;
                case types_1.Direction.Down:
                  newValue = (clientY - trackRect.top) / trackLength * (max2 - min2) + min2;
                  break;
                case types_1.Direction.Up:
                  newValue = (trackLength - (clientY - trackRect.top)) / trackLength * (max2 - min2) + min2;
                  break;
                default:
                  (0, utils_1.assertUnreachable)(direction);
              }
              if (rtl) {
                newValue = max2 + min2 - newValue;
              }
              if (Math.abs(values[draggedThumbIndex] - newValue) >= step / 2) {
                onChange2((0, utils_1.replaceAt)(values, draggedThumbIndex, _this.normalizeValue(newValue, draggedThumbIndex)));
              }
            }
          };
          _this.normalizeValue = function(value2, index2) {
            var _a = _this.props, min2 = _a.min, max2 = _a.max, step = _a.step, allowOverlap = _a.allowOverlap, values = _a.values;
            return (0, utils_1.normalizeValue)(value2, index2, min2, max2, step, allowOverlap, values);
          };
          _this.onEnd = function(e3) {
            e3.preventDefault();
            document.removeEventListener("mousemove", _this.schdOnMouseMove);
            document.removeEventListener("touchmove", _this.schdOnTouchMove);
            document.removeEventListener("mouseup", _this.schdOnEnd);
            document.removeEventListener("touchend", _this.schdOnEnd);
            document.removeEventListener("touchcancel", _this.schdOnEnd);
            if (_this.state.draggedThumbIndex === -1 && _this.state.draggedTrackPos[0] === -1 && _this.state.draggedTrackPos[1] === -1)
              return null;
            _this.setState({ draggedThumbIndex: -1, draggedTrackPos: [-1, -1] }, function() {
              _this.fireOnFinalChange();
            });
          };
          _this.fireOnFinalChange = function() {
            _this.setState({ isChanged: false });
            var _a = _this.props, onFinalChange = _a.onFinalChange, values = _a.values;
            if (onFinalChange) {
              onFinalChange(values);
            }
          };
          _this.updateMarkRefs = function(props2) {
            if (!props2.renderMark) {
              _this.numOfMarks = void 0;
              _this.markRefs = void 0;
              return;
            }
            _this.numOfMarks = (props2.max - props2.min) / _this.props.step;
            _this.markRefs = [];
            for (var i3 = 0; i3 < _this.numOfMarks + 1; i3++) {
              _this.markRefs[i3] = React54.createRef();
            }
          };
          _this.calculateMarkOffsets = function() {
            if (!_this.props.renderMark || !_this.trackRef || !_this.numOfMarks || !_this.markRefs || _this.trackRef.current === null)
              return;
            var elStyles = window.getComputedStyle(_this.trackRef.current);
            var trackWidth = parseInt(elStyles.width, 10);
            var trackHeight = parseInt(elStyles.height, 10);
            var paddingLeft = parseInt(elStyles.paddingLeft, 10);
            var paddingTop = parseInt(elStyles.paddingTop, 10);
            var res = [];
            for (var i3 = 0; i3 < _this.numOfMarks + 1; i3++) {
              var markHeight = 9999;
              var markWidth = 9999;
              if (_this.markRefs[i3].current) {
                var markRect = _this.markRefs[i3].current.getBoundingClientRect();
                markHeight = markRect.height;
                markWidth = markRect.width;
              }
              if (_this.props.direction === types_1.Direction.Left || _this.props.direction === types_1.Direction.Right) {
                res.push([
                  Math.round(trackWidth / _this.numOfMarks * i3 + paddingLeft - markWidth / 2),
                  -Math.round((markHeight - trackHeight) / 2)
                ]);
              } else {
                res.push([
                  Math.round(trackHeight / _this.numOfMarks * i3 + paddingTop - markHeight / 2),
                  -Math.round((markWidth - trackWidth) / 2)
                ]);
              }
            }
            _this.setState({ markOffsets: res });
          };
          if (props.step === 0) {
            throw new Error('"step" property should be a positive number');
          }
          _this.schdOnMouseMove = (0, utils_1.schd)(_this.onMouseMove);
          _this.schdOnTouchMove = (0, utils_1.schd)(_this.onTouchMove);
          _this.schdOnEnd = (0, utils_1.schd)(_this.onEnd);
          _this.thumbRefs = props.values.map(function() {
            return React54.createRef();
          });
          _this.updateMarkRefs(props);
          return _this;
        }
        Range3.prototype.componentDidMount = function() {
          var _this = this;
          var _a = this.props, values = _a.values, min2 = _a.min, step = _a.step;
          this.resizeObserver = window.ResizeObserver ? new window.ResizeObserver(this.onResize) : {
            observe: function() {
              return window.addEventListener("resize", _this.onResize);
            },
            unobserve: function() {
              return window.removeEventListener("resize", _this.onResize);
            }
          };
          document.addEventListener("touchstart", this.onMouseOrTouchStart, {
            passive: false
          });
          document.addEventListener("mousedown", this.onMouseOrTouchStart, {
            passive: false
          });
          !this.props.allowOverlap && (0, utils_1.checkInitialOverlap)(this.props.values);
          this.props.values.forEach(function(value2) {
            return (0, utils_1.checkBoundaries)(value2, _this.props.min, _this.props.max);
          });
          this.resizeObserver.observe(this.trackRef.current);
          (0, utils_1.translateThumbs)(this.getThumbs(), this.getOffsets(), this.props.rtl);
          this.calculateMarkOffsets();
          values.forEach(function(value2) {
            if (!(0, utils_1.isStepDivisible)(min2, value2, step)) {
              console.warn("The `values` property is in conflict with the current `step`, `min`, and `max` properties. Please provide values that are accessible using the min, max, and step values.");
            }
          });
        };
        Range3.prototype.componentDidUpdate = function(prevProps, prevState) {
          var _a = this.props, max2 = _a.max, min2 = _a.min, step = _a.step, values = _a.values, rtl = _a.rtl;
          if (prevProps.max !== max2 || prevProps.min !== min2 || prevProps.step !== step) {
            this.updateMarkRefs(this.props);
          }
          (0, utils_1.translateThumbs)(this.getThumbs(), this.getOffsets(), rtl);
          if (prevProps.max !== max2 || prevProps.min !== min2 || prevProps.step !== step || prevState.markOffsets.length !== this.state.markOffsets.length) {
            this.calculateMarkOffsets();
            values.forEach(function(value2) {
              if (!(0, utils_1.isStepDivisible)(min2, value2, step)) {
                console.warn("The `values` property is in conflict with the current `step`, `min`, and `max` properties. Please provide values that are accessible using the min, max, and step values.");
              }
            });
          }
        };
        Range3.prototype.componentWillUnmount = function() {
          var options2 = {
            passive: false
          };
          document.removeEventListener("mousedown", this.onMouseOrTouchStart, options2);
          document.removeEventListener("mousemove", this.schdOnMouseMove);
          document.removeEventListener("touchmove", this.schdOnTouchMove);
          document.removeEventListener("touchstart", this.onMouseOrTouchStart);
          document.removeEventListener("mouseup", this.schdOnEnd);
          document.removeEventListener("touchend", this.schdOnEnd);
          this.resizeObserver.unobserve(this.trackRef.current);
        };
        Range3.prototype.render = function() {
          var _this = this;
          var _a = this.props, renderTrack = _a.renderTrack, renderThumb = _a.renderThumb, _b = _a.renderMark, renderMark = _b === void 0 ? function() {
            return null;
          } : _b, values = _a.values, min2 = _a.min, max2 = _a.max, allowOverlap = _a.allowOverlap, disabled = _a.disabled;
          var _c = this.state, draggedThumbIndex = _c.draggedThumbIndex, thumbZIndexes = _c.thumbZIndexes, markOffsets = _c.markOffsets;
          return renderTrack({
            props: {
              style: {
                transform: "scale(1)",
                cursor: draggedThumbIndex > -1 ? "grabbing" : this.props.draggableTrack ? (0, utils_1.isVertical)(this.props.direction) ? "ns-resize" : "ew-resize" : values.length === 1 && !disabled ? "pointer" : "inherit"
              },
              onMouseDown: disabled ? utils_1.voidFn : this.onMouseDownTrack,
              onTouchStart: disabled ? utils_1.voidFn : this.onTouchStartTrack,
              ref: this.trackRef
            },
            isDragged: this.state.draggedThumbIndex > -1,
            disabled,
            children: __spreadArray(__spreadArray([], markOffsets.map(function(offset, index2, arr) {
              return renderMark({
                props: {
                  style: _this.props.direction === types_1.Direction.Left || _this.props.direction === types_1.Direction.Right ? {
                    position: "absolute",
                    left: "".concat(offset[0], "px"),
                    marginTop: "".concat(offset[1], "px")
                  } : {
                    position: "absolute",
                    top: "".concat(offset[0], "px"),
                    marginLeft: "".concat(offset[1], "px")
                  },
                  key: "mark".concat(index2),
                  ref: _this.markRefs[index2]
                },
                index: index2
              });
            }), true), values.map(function(value2, index2) {
              var isDragged = _this.state.draggedThumbIndex === index2;
              return renderThumb({
                index: index2,
                value: value2,
                isDragged,
                props: {
                  style: {
                    position: "absolute",
                    zIndex: thumbZIndexes[index2],
                    cursor: disabled ? "inherit" : isDragged ? "grabbing" : "grab",
                    userSelect: "none",
                    touchAction: "none",
                    WebkitUserSelect: "none",
                    MozUserSelect: "none",
                    msUserSelect: "none"
                  },
                  key: index2,
                  tabIndex: disabled ? void 0 : 0,
                  "aria-valuemax": allowOverlap ? max2 : values[index2 + 1] || max2,
                  "aria-valuemin": allowOverlap ? min2 : values[index2 - 1] || min2,
                  "aria-valuenow": value2,
                  draggable: false,
                  ref: _this.thumbRefs[index2],
                  role: "slider",
                  onKeyDown: disabled ? utils_1.voidFn : _this.onKeyDown,
                  onKeyUp: disabled ? utils_1.voidFn : _this.onKeyUp
                }
              });
            }), true)
          });
        };
        Range3.defaultProps = {
          step: 1,
          direction: types_1.Direction.Right,
          rtl: false,
          disabled: false,
          allowOverlap: false,
          draggableTrack: false,
          min: 0,
          max: 100
        };
        return Range3;
      }(React54.Component);
      exports.default = Range2;
    }
  });

  // node_modules/react-range/lib/index.js
  var require_lib = __commonJS({
    "node_modules/react-range/lib/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.checkValuesAgainstBoundaries = exports.relativeValue = exports.useThumbOverlap = exports.Direction = exports.getTrackBackground = exports.Range = void 0;
      var Range_1 = __importDefault(require_Range());
      exports.Range = Range_1.default;
      var utils_1 = require_utils2();
      Object.defineProperty(exports, "getTrackBackground", { enumerable: true, get: function() {
        return utils_1.getTrackBackground;
      } });
      Object.defineProperty(exports, "useThumbOverlap", { enumerable: true, get: function() {
        return utils_1.useThumbOverlap;
      } });
      Object.defineProperty(exports, "relativeValue", { enumerable: true, get: function() {
        return utils_1.relativeValue;
      } });
      Object.defineProperty(exports, "checkValuesAgainstBoundaries", { enumerable: true, get: function() {
        return utils_1.checkValuesAgainstBoundaries;
      } });
      var types_1 = require_types();
      Object.defineProperty(exports, "Direction", { enumerable: true, get: function() {
        return types_1.Direction;
      } });
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        function classNames23() {
          var classes = [];
          for (var i3 = 0; i3 < arguments.length; i3++) {
            var arg = arguments[i3];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames23.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString === Object.prototype.toString) {
                for (var key in arg) {
                  if (hasOwn.call(arg, key) && arg[key]) {
                    classes.push(key);
                  }
                }
              } else {
                classes.push(arg.toString());
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames23.default = classNames23;
          module2.exports = classNames23;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames23;
          });
        } else {
          window.classNames = classNames23;
        }
      })();
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports, module2) {
      function isObject2(value2) {
        var type = typeof value2;
        return value2 != null && (type == "object" || type == "function");
      }
      module2.exports = isObject2;
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports, module2) {
      var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal2;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
      module2.exports = root2;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports, module2) {
      var root2 = require_root();
      var Symbol4 = root2.Symbol;
      module2.exports = Symbol4;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports, module2) {
      var Symbol4 = require_Symbol();
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      var nativeObjectToString2 = objectProto2.toString;
      var symToStringTag2 = Symbol4 ? Symbol4.toStringTag : void 0;
      function getRawTag2(value2) {
        var isOwn = hasOwnProperty2.call(value2, symToStringTag2), tag = value2[symToStringTag2];
        try {
          value2[symToStringTag2] = void 0;
          var unmasked = true;
        } catch (e3) {
        }
        var result = nativeObjectToString2.call(value2);
        if (unmasked) {
          if (isOwn) {
            value2[symToStringTag2] = tag;
          } else {
            delete value2[symToStringTag2];
          }
        }
        return result;
      }
      module2.exports = getRawTag2;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports, module2) {
      var objectProto2 = Object.prototype;
      var nativeObjectToString2 = objectProto2.toString;
      function objectToString3(value2) {
        return nativeObjectToString2.call(value2);
      }
      module2.exports = objectToString3;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports, module2) {
      var Symbol4 = require_Symbol();
      var getRawTag2 = require_getRawTag();
      var objectToString3 = require_objectToString();
      var nullTag2 = "[object Null]";
      var undefinedTag2 = "[object Undefined]";
      var symToStringTag2 = Symbol4 ? Symbol4.toStringTag : void 0;
      function baseGetTag2(value2) {
        if (value2 == null) {
          return value2 === void 0 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag2 && symToStringTag2 in Object(value2) ? getRawTag2(value2) : objectToString3(value2);
      }
      module2.exports = baseGetTag2;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObject2 = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction2(value2) {
        if (!isObject2(value2)) {
          return false;
        }
        var tag = baseGetTag2(value2);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module2.exports = isFunction2;
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports, module2) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports, module2) {
      function eq(value2, other) {
        return value2 === other || value2 !== value2 && other !== other;
      }
      module2.exports = eq;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports, module2) {
      var eq = require_eq();
      function assocIndexOf(array, key) {
        var length2 = array.length;
        while (length2--) {
          if (eq(array[length2][0], key)) {
            return length2;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports, module2) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      module2.exports = listCacheGet;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module2.exports = listCacheHas;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value2) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value2]);
        } else {
          data[index2][1] = value2;
        }
        return this;
      }
      module2.exports = listCacheSet;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports, module2) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module2.exports = ListCache;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports, module2) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module2.exports = stackClear;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports, module2) {
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module2.exports = stackDelete;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports, module2) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module2.exports = stackGet;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports, module2) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module2.exports = stackHas;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports, module2) {
      var root2 = require_root();
      var coreJsData = root2["__core-js_shared__"];
      module2.exports = coreJsData;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports, module2) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func2) {
        return !!maskSrcKey && maskSrcKey in func2;
      }
      module2.exports = isMasked;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports, module2) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func2) {
        if (func2 != null) {
          try {
            return funcToString.call(func2);
          } catch (e3) {
          }
          try {
            return func2 + "";
          } catch (e3) {
          }
        }
        return "";
      }
      module2.exports = toSource;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports, module2) {
      var isFunction2 = require_isFunction();
      var isMasked = require_isMasked();
      var isObject2 = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto2 = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative(value2) {
        if (!isObject2(value2) || isMasked(value2)) {
          return false;
        }
        var pattern = isFunction2(value2) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value2));
      }
      module2.exports = baseIsNative;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports, module2) {
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      module2.exports = getValue;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports, module2) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key) {
        var value2 = getValue(object, key);
        return baseIsNative(value2) ? value2 : void 0;
      }
      module2.exports = getNative;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports, module2) {
      var getNative = require_getNative();
      var root2 = require_root();
      var Map2 = getNative(root2, "Map");
      module2.exports = Map2;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports, module2) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module2.exports = nativeCreate;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports, module2) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports, module2) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = hashDelete;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      module2.exports = hashGet;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports, module2) {
      var nativeCreate = require_nativeCreate();
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      module2.exports = hashHas;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value2) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED : value2;
        return this;
      }
      module2.exports = hashSet;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports, module2) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module2.exports = Hash;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports, module2) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module2.exports = mapCacheClear;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports, module2) {
      function isKeyable(value2) {
        var type = typeof value2;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
      }
      module2.exports = isKeyable;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports, module2) {
      var isKeyable = require_isKeyable();
      function getMapData(map4, key) {
        var data = map4.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports, module2) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = mapCacheDelete;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports, module2) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module2.exports = mapCacheGet;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports, module2) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module2.exports = mapCacheHas;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports, module2) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value2) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value2);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports, module2) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module2.exports = MapCache;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports, module2) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value2) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value2]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value2);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports, module2) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module2.exports = Stack;
    }
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "node_modules/lodash/_setCacheAdd.js"(exports, module2) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value2) {
        this.__data__.set(value2, HASH_UNDEFINED);
        return this;
      }
      module2.exports = setCacheAdd;
    }
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "node_modules/lodash/_setCacheHas.js"(exports, module2) {
      function setCacheHas(value2) {
        return this.__data__.has(value2);
      }
      module2.exports = setCacheHas;
    }
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "node_modules/lodash/_SetCache.js"(exports, module2) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index2 = -1, length2 = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index2 < length2) {
          this.add(values[index2]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module2.exports = SetCache;
    }
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "node_modules/lodash/_arraySome.js"(exports, module2) {
      function arraySome(array, predicate) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arraySome;
    }
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "node_modules/lodash/_cacheHas.js"(exports, module2) {
      function cacheHas(cache3, key) {
        return cache3.has(key);
      }
      module2.exports = cacheHas;
    }
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "node_modules/lodash/_equalArrays.js"(exports, module2) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalArrays;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports, module2) {
      var root2 = require_root();
      var Uint8Array2 = root2.Uint8Array;
      module2.exports = Uint8Array2;
    }
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "node_modules/lodash/_mapToArray.js"(exports, module2) {
      function mapToArray(map4) {
        var index2 = -1, result = Array(map4.size);
        map4.forEach(function(value2, key) {
          result[++index2] = [key, value2];
        });
        return result;
      }
      module2.exports = mapToArray;
    }
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "node_modules/lodash/_setToArray.js"(exports, module2) {
      function setToArray(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value2) {
          result[++index2] = value2;
        });
        return result;
      }
      module2.exports = setToArray;
    }
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "node_modules/lodash/_equalByTag.js"(exports, module2) {
      var Symbol4 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag2 = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag2 = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol4 ? Symbol4.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag2:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module2.exports = equalByTag;
    }
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "node_modules/lodash/_arrayPush.js"(exports, module2) {
      function arrayPush(array, values) {
        var index2 = -1, length2 = values.length, offset = array.length;
        while (++index2 < length2) {
          array[offset + index2] = values[index2];
        }
        return array;
      }
      module2.exports = arrayPush;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports, module2) {
      var isArray2 = Array.isArray;
      module2.exports = isArray2;
    }
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "node_modules/lodash/_baseGetAllKeys.js"(exports, module2) {
      var arrayPush = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      module2.exports = baseGetAllKeys;
    }
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "node_modules/lodash/_arrayFilter.js"(exports, module2) {
      function arrayFilter(array, predicate) {
        var index2 = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length2) {
          var value2 = array[index2];
          if (predicate(value2, index2, array)) {
            result[resIndex++] = value2;
          }
        }
        return result;
      }
      module2.exports = arrayFilter;
    }
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "node_modules/lodash/stubArray.js"(exports, module2) {
      function stubArray() {
        return [];
      }
      module2.exports = stubArray;
    }
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/lodash/_getSymbols.js"(exports, module2) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto2 = Object.prototype;
      var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module2.exports = getSymbols;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports, module2) {
      function baseTimes(n3, iteratee) {
        var index2 = -1, result = Array(n3);
        while (++index2 < n3) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      module2.exports = baseTimes;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports, module2) {
      function isObjectLike2(value2) {
        return value2 != null && typeof value2 == "object";
      }
      module2.exports = isObjectLike2;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == argsTag;
      }
      module2.exports = baseIsArguments;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports, module2) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike2 = require_isObjectLike();
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value2) {
        return isObjectLike2(value2) && hasOwnProperty2.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
      };
      module2.exports = isArguments;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports, module2) {
      function stubFalse() {
        return false;
      }
      module2.exports = stubFalse;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports, module2) {
      var root2 = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module2.exports = isBuffer;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value2, length2) {
        var type = typeof value2;
        length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
      }
      module2.exports = isIndex;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value2) {
        return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
      }
      module2.exports = isLength;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike2 = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag2 = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag2] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value2) {
        return isObjectLike2(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag2(value2)];
      }
      module2.exports = baseIsTypedArray;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports, module2) {
      function baseUnary(func2) {
        return function(value2) {
          return func2(value2);
        };
      }
      module2.exports = baseUnary;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e3) {
        }
      }();
      module2.exports = nodeUtil;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports, module2) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module2.exports = isTypedArray;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports, module2) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      function arrayLikeKeys(value2, inherited) {
        var isArr = isArray2(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result.length;
        for (var key in value2) {
          if ((inherited || hasOwnProperty2.call(value2, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length2)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = arrayLikeKeys;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports, module2) {
      var objectProto2 = Object.prototype;
      function isPrototype(value2) {
        var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
        return value2 === proto;
      }
      module2.exports = isPrototype;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports, module2) {
      function overArg(func2, transform) {
        return function(arg) {
          return func2(transform(arg));
        };
      }
      module2.exports = overArg;
    }
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "node_modules/lodash/_nativeKeys.js"(exports, module2) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module2.exports = nativeKeys;
    }
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "node_modules/lodash/_baseKeys.js"(exports, module2) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeys;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports, module2) {
      var isFunction2 = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value2) {
        return value2 != null && isLength(value2.length) && !isFunction2(value2);
      }
      module2.exports = isArrayLike;
    }
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "node_modules/lodash/keys.js"(exports, module2) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module2.exports = keys;
    }
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "node_modules/lodash/_getAllKeys.js"(exports, module2) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module2.exports = getAllKeys;
    }
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "node_modules/lodash/_equalObjects.js"(exports, module2) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalObjects;
    }
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "node_modules/lodash/_DataView.js"(exports, module2) {
      var getNative = require_getNative();
      var root2 = require_root();
      var DataView2 = getNative(root2, "DataView");
      module2.exports = DataView2;
    }
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "node_modules/lodash/_Promise.js"(exports, module2) {
      var getNative = require_getNative();
      var root2 = require_root();
      var Promise2 = getNative(root2, "Promise");
      module2.exports = Promise2;
    }
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "node_modules/lodash/_Set.js"(exports, module2) {
      var getNative = require_getNative();
      var root2 = require_root();
      var Set2 = getNative(root2, "Set");
      module2.exports = Set2;
    }
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "node_modules/lodash/_WeakMap.js"(exports, module2) {
      var getNative = require_getNative();
      var root2 = require_root();
      var WeakMap2 = getNative(root2, "WeakMap");
      module2.exports = WeakMap2;
    }
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "node_modules/lodash/_getTag.js"(exports, module2) {
      var DataView2 = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag2 = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag2 = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag2;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag2 || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value2) {
          var result = baseGetTag2(value2), Ctor = result == objectTag ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag2;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module2.exports = getTag;
    }
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "node_modules/lodash/_baseIsEqualDeep.js"(exports, module2) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto2 = Object.prototype;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      module2.exports = baseIsEqualDeep;
    }
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "node_modules/lodash/_baseIsEqual.js"(exports, module2) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike2 = require_isObjectLike();
      function baseIsEqual(value2, other, bitmask, customizer, stack) {
        if (value2 === other) {
          return true;
        }
        if (value2 == null || other == null || !isObjectLike2(value2) && !isObjectLike2(other)) {
          return value2 !== value2 && other !== other;
        }
        return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual, stack);
      }
      module2.exports = baseIsEqual;
    }
  });

  // node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "node_modules/lodash/_baseIsMatch.js"(exports, module2) {
      var Stack = require_Stack();
      var baseIsEqual = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseIsMatch(object, source, matchData, customizer) {
        var index2 = matchData.length, length2 = index2, noCustomizer = !customizer;
        if (object == null) {
          return !length2;
        }
        object = Object(object);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index2 < length2) {
          data = matchData[index2];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module2.exports = baseIsMatch;
    }
  });

  // node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "node_modules/lodash/_isStrictComparable.js"(exports, module2) {
      var isObject2 = require_isObject();
      function isStrictComparable(value2) {
        return value2 === value2 && !isObject2(value2);
      }
      module2.exports = isStrictComparable;
    }
  });

  // node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "node_modules/lodash/_getMatchData.js"(exports, module2) {
      var isStrictComparable = require_isStrictComparable();
      var keys = require_keys();
      function getMatchData(object) {
        var result = keys(object), length2 = result.length;
        while (length2--) {
          var key = result[length2], value2 = object[key];
          result[length2] = [key, value2, isStrictComparable(value2)];
        }
        return result;
      }
      module2.exports = getMatchData;
    }
  });

  // node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "node_modules/lodash/_matchesStrictComparable.js"(exports, module2) {
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      module2.exports = matchesStrictComparable;
    }
  });

  // node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "node_modules/lodash/_baseMatches.js"(exports, module2) {
      var baseIsMatch = require_baseIsMatch();
      var getMatchData = require_getMatchData();
      var matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      module2.exports = baseMatches;
    }
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/lodash/isSymbol.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var symbolTag2 = "[object Symbol]";
      function isSymbol2(value2) {
        return typeof value2 == "symbol" || isObjectLike2(value2) && baseGetTag2(value2) == symbolTag2;
      }
      module2.exports = isSymbol2;
    }
  });

  // node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "node_modules/lodash/_isKey.js"(exports, module2) {
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value2, object) {
        if (isArray2(value2)) {
          return false;
        }
        var type = typeof value2;
        if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol2(value2)) {
          return true;
        }
        return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
      }
      module2.exports = isKey;
    }
  });

  // node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "node_modules/lodash/memoize.js"(exports, module2) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT2 = "Expected a function";
      function memoize3(func2, resolver) {
        if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT2);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache3 = memoized.cache;
          if (cache3.has(key)) {
            return cache3.get(key);
          }
          var result = func2.apply(this, args);
          memoized.cache = cache3.set(key, result) || cache3;
          return result;
        };
        memoized.cache = new (memoize3.Cache || MapCache)();
        return memoized;
      }
      memoize3.Cache = MapCache;
      module2.exports = memoize3;
    }
  });

  // node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "node_modules/lodash/_memoizeCapped.js"(exports, module2) {
      var memoize3 = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func2) {
        var result = memoize3(func2, function(key) {
          if (cache3.size === MAX_MEMOIZE_SIZE) {
            cache3.clear();
          }
          return key;
        });
        var cache3 = result.cache;
        return result;
      }
      module2.exports = memoizeCapped;
    }
  });

  // node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "node_modules/lodash/_stringToPath.js"(exports, module2) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName, function(match2, number5, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number5 || match2);
        });
        return result;
      });
      module2.exports = stringToPath;
    }
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "node_modules/lodash/_arrayMap.js"(exports, module2) {
      function arrayMap(array, iteratee) {
        var index2 = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
        while (++index2 < length2) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      module2.exports = arrayMap;
    }
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "node_modules/lodash/_baseToString.js"(exports, module2) {
      var Symbol4 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol4 ? Symbol4.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value2) {
        if (typeof value2 == "string") {
          return value2;
        }
        if (isArray2(value2)) {
          return arrayMap(value2, baseToString) + "";
        }
        if (isSymbol2(value2)) {
          return symbolToString ? symbolToString.call(value2) : "";
        }
        var result = value2 + "";
        return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
      }
      module2.exports = baseToString;
    }
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "node_modules/lodash/toString.js"(exports, module2) {
      var baseToString = require_baseToString();
      function toString2(value2) {
        return value2 == null ? "" : baseToString(value2);
      }
      module2.exports = toString2;
    }
  });

  // node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "node_modules/lodash/_castPath.js"(exports, module2) {
      var isArray2 = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString2 = require_toString();
      function castPath(value2, object) {
        if (isArray2(value2)) {
          return value2;
        }
        return isKey(value2, object) ? [value2] : stringToPath(toString2(value2));
      }
      module2.exports = castPath;
    }
  });

  // node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "node_modules/lodash/_toKey.js"(exports, module2) {
      var isSymbol2 = require_isSymbol();
      var INFINITY = 1 / 0;
      function toKey(value2) {
        if (typeof value2 == "string" || isSymbol2(value2)) {
          return value2;
        }
        var result = value2 + "";
        return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
      }
      module2.exports = toKey;
    }
  });

  // node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "node_modules/lodash/_baseGet.js"(exports, module2) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object, path2) {
        path2 = castPath(path2, object);
        var index2 = 0, length2 = path2.length;
        while (object != null && index2 < length2) {
          object = object[toKey(path2[index2++])];
        }
        return index2 && index2 == length2 ? object : void 0;
      }
      module2.exports = baseGet;
    }
  });

  // node_modules/lodash/get.js
  var require_get = __commonJS({
    "node_modules/lodash/get.js"(exports, module2) {
      var baseGet = require_baseGet();
      function get2(object, path2, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path2);
        return result === void 0 ? defaultValue : result;
      }
      module2.exports = get2;
    }
  });

  // node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "node_modules/lodash/_baseHasIn.js"(exports, module2) {
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      module2.exports = baseHasIn;
    }
  });

  // node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "node_modules/lodash/_hasPath.js"(exports, module2) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object, path2, hasFunc) {
        path2 = castPath(path2, object);
        var index2 = -1, length2 = path2.length, result = false;
        while (++index2 < length2) {
          var key = toKey(path2[index2]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index2 != length2) {
          return result;
        }
        length2 = object == null ? 0 : object.length;
        return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray2(object) || isArguments(object));
      }
      module2.exports = hasPath;
    }
  });

  // node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "node_modules/lodash/hasIn.js"(exports, module2) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object, path2) {
        return object != null && hasPath(object, path2, baseHasIn);
      }
      module2.exports = hasIn;
    }
  });

  // node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "node_modules/lodash/_baseMatchesProperty.js"(exports, module2) {
      var baseIsEqual = require_baseIsEqual();
      var get2 = require_get();
      var hasIn = require_hasIn();
      var isKey = require_isKey();
      var isStrictComparable = require_isStrictComparable();
      var matchesStrictComparable = require_matchesStrictComparable();
      var toKey = require_toKey();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path2, srcValue) {
        if (isKey(path2) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path2), srcValue);
        }
        return function(object) {
          var objValue = get2(object, path2);
          return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      module2.exports = baseMatchesProperty;
    }
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "node_modules/lodash/identity.js"(exports, module2) {
      function identity7(value2) {
        return value2;
      }
      module2.exports = identity7;
    }
  });

  // node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "node_modules/lodash/_baseProperty.js"(exports, module2) {
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      module2.exports = baseProperty;
    }
  });

  // node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "node_modules/lodash/_basePropertyDeep.js"(exports, module2) {
      var baseGet = require_baseGet();
      function basePropertyDeep(path2) {
        return function(object) {
          return baseGet(object, path2);
        };
      }
      module2.exports = basePropertyDeep;
    }
  });

  // node_modules/lodash/property.js
  var require_property = __commonJS({
    "node_modules/lodash/property.js"(exports, module2) {
      var baseProperty = require_baseProperty();
      var basePropertyDeep = require_basePropertyDeep();
      var isKey = require_isKey();
      var toKey = require_toKey();
      function property(path2) {
        return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
      }
      module2.exports = property;
    }
  });

  // node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "node_modules/lodash/_baseIteratee.js"(exports, module2) {
      var baseMatches = require_baseMatches();
      var baseMatchesProperty = require_baseMatchesProperty();
      var identity7 = require_identity();
      var isArray2 = require_isArray();
      var property = require_property();
      function baseIteratee(value2) {
        if (typeof value2 == "function") {
          return value2;
        }
        if (value2 == null) {
          return identity7;
        }
        if (typeof value2 == "object") {
          return isArray2(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
        }
        return property(value2);
      }
      module2.exports = baseIteratee;
    }
  });

  // node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS({
    "node_modules/lodash/_baseFindIndex.js"(exports, module2) {
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length2 = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length2) {
          if (predicate(array[index2], index2, array)) {
            return index2;
          }
        }
        return -1;
      }
      module2.exports = baseFindIndex;
    }
  });

  // node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS({
    "node_modules/lodash/_baseIsNaN.js"(exports, module2) {
      function baseIsNaN(value2) {
        return value2 !== value2;
      }
      module2.exports = baseIsNaN;
    }
  });

  // node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS({
    "node_modules/lodash/_strictIndexOf.js"(exports, module2) {
      function strictIndexOf(array, value2, fromIndex) {
        var index2 = fromIndex - 1, length2 = array.length;
        while (++index2 < length2) {
          if (array[index2] === value2) {
            return index2;
          }
        }
        return -1;
      }
      module2.exports = strictIndexOf;
    }
  });

  // node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS({
    "node_modules/lodash/_baseIndexOf.js"(exports, module2) {
      var baseFindIndex = require_baseFindIndex();
      var baseIsNaN = require_baseIsNaN();
      var strictIndexOf = require_strictIndexOf();
      function baseIndexOf(array, value2, fromIndex) {
        return value2 === value2 ? strictIndexOf(array, value2, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      module2.exports = baseIndexOf;
    }
  });

  // node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS({
    "node_modules/lodash/_arrayIncludes.js"(exports, module2) {
      var baseIndexOf = require_baseIndexOf();
      function arrayIncludes(array, value2) {
        var length2 = array == null ? 0 : array.length;
        return !!length2 && baseIndexOf(array, value2, 0) > -1;
      }
      module2.exports = arrayIncludes;
    }
  });

  // node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS({
    "node_modules/lodash/_arrayIncludesWith.js"(exports, module2) {
      function arrayIncludesWith(array, value2, comparator) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (comparator(value2, array[index2])) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arrayIncludesWith;
    }
  });

  // node_modules/lodash/noop.js
  var require_noop = __commonJS({
    "node_modules/lodash/noop.js"(exports, module2) {
      function noop4() {
      }
      module2.exports = noop4;
    }
  });

  // node_modules/lodash/_createSet.js
  var require_createSet = __commonJS({
    "node_modules/lodash/_createSet.js"(exports, module2) {
      var Set2 = require_Set();
      var noop4 = require_noop();
      var setToArray = require_setToArray();
      var INFINITY = 1 / 0;
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values) {
        return new Set2(values);
      };
      module2.exports = createSet;
    }
  });

  // node_modules/lodash/_baseUniq.js
  var require_baseUniq = __commonJS({
    "node_modules/lodash/_baseUniq.js"(exports, module2) {
      var SetCache = require_SetCache();
      var arrayIncludes = require_arrayIncludes();
      var arrayIncludesWith = require_arrayIncludesWith();
      var cacheHas = require_cacheHas();
      var createSet = require_createSet();
      var setToArray = require_setToArray();
      var LARGE_ARRAY_SIZE = 200;
      function baseUniq(array, iteratee, comparator) {
        var index2 = -1, includes = arrayIncludes, length2 = array.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length2 >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee ? null : createSet(array);
          if (set2) {
            return setToArray(set2);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index2 < length2) {
            var value2 = array[index2], computed = iteratee ? iteratee(value2) : value2;
            value2 = comparator || value2 !== 0 ? value2 : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value2);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value2);
            }
          }
        return result;
      }
      module2.exports = baseUniq;
    }
  });

  // node_modules/lodash/uniqBy.js
  var require_uniqBy = __commonJS({
    "node_modules/lodash/uniqBy.js"(exports, module2) {
      var baseIteratee = require_baseIteratee();
      var baseUniq = require_baseUniq();
      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
      }
      module2.exports = uniqBy;
    }
  });

  // node_modules/lodash/_baseSlice.js
  var require_baseSlice = __commonJS({
    "node_modules/lodash/_baseSlice.js"(exports, module2) {
      function baseSlice(array, start, end) {
        var index2 = -1, length2 = array.length;
        if (start < 0) {
          start = -start > length2 ? 0 : length2 + start;
        }
        end = end > length2 ? length2 : end;
        if (end < 0) {
          end += length2;
        }
        length2 = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length2);
        while (++index2 < length2) {
          result[index2] = array[index2 + start];
        }
        return result;
      }
      module2.exports = baseSlice;
    }
  });

  // node_modules/lodash/_castSlice.js
  var require_castSlice = __commonJS({
    "node_modules/lodash/_castSlice.js"(exports, module2) {
      var baseSlice = require_baseSlice();
      function castSlice(array, start, end) {
        var length2 = array.length;
        end = end === void 0 ? length2 : end;
        return !start && end >= length2 ? array : baseSlice(array, start, end);
      }
      module2.exports = castSlice;
    }
  });

  // node_modules/lodash/_hasUnicode.js
  var require_hasUnicode = __commonJS({
    "node_modules/lodash/_hasUnicode.js"(exports, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsZWJ = "\\u200d";
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      function hasUnicode(string2) {
        return reHasUnicode.test(string2);
      }
      module2.exports = hasUnicode;
    }
  });

  // node_modules/lodash/_asciiToArray.js
  var require_asciiToArray = __commonJS({
    "node_modules/lodash/_asciiToArray.js"(exports, module2) {
      function asciiToArray(string2) {
        return string2.split("");
      }
      module2.exports = asciiToArray;
    }
  });

  // node_modules/lodash/_unicodeToArray.js
  var require_unicodeToArray = __commonJS({
    "node_modules/lodash/_unicodeToArray.js"(exports, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsAstral = "[" + rsAstralRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsZWJ = "\\u200d";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      function unicodeToArray(string2) {
        return string2.match(reUnicode) || [];
      }
      module2.exports = unicodeToArray;
    }
  });

  // node_modules/lodash/_stringToArray.js
  var require_stringToArray = __commonJS({
    "node_modules/lodash/_stringToArray.js"(exports, module2) {
      var asciiToArray = require_asciiToArray();
      var hasUnicode = require_hasUnicode();
      var unicodeToArray = require_unicodeToArray();
      function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
      }
      module2.exports = stringToArray;
    }
  });

  // node_modules/lodash/_createCaseFirst.js
  var require_createCaseFirst = __commonJS({
    "node_modules/lodash/_createCaseFirst.js"(exports, module2) {
      var castSlice = require_castSlice();
      var hasUnicode = require_hasUnicode();
      var stringToArray = require_stringToArray();
      var toString2 = require_toString();
      function createCaseFirst(methodName) {
        return function(string2) {
          string2 = toString2(string2);
          var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0;
          var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      module2.exports = createCaseFirst;
    }
  });

  // node_modules/lodash/upperFirst.js
  var require_upperFirst = __commonJS({
    "node_modules/lodash/upperFirst.js"(exports, module2) {
      var createCaseFirst = require_createCaseFirst();
      var upperFirst = createCaseFirst("toUpperCase");
      module2.exports = upperFirst;
    }
  });

  // node_modules/lodash/isNumber.js
  var require_isNumber = __commonJS({
    "node_modules/lodash/isNumber.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var numberTag = "[object Number]";
      function isNumber3(value2) {
        return typeof value2 == "number" || isObjectLike2(value2) && baseGetTag2(value2) == numberTag;
      }
      module2.exports = isNumber3;
    }
  });

  // node_modules/lodash/isNaN.js
  var require_isNaN = __commonJS({
    "node_modules/lodash/isNaN.js"(exports, module2) {
      var isNumber3 = require_isNumber();
      function isNaN3(value2) {
        return isNumber3(value2) && value2 != +value2;
      }
      module2.exports = isNaN3;
    }
  });

  // node_modules/lodash/isString.js
  var require_isString = __commonJS({
    "node_modules/lodash/isString.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isArray2 = require_isArray();
      var isObjectLike2 = require_isObjectLike();
      var stringTag = "[object String]";
      function isString2(value2) {
        return typeof value2 == "string" || !isArray2(value2) && isObjectLike2(value2) && baseGetTag2(value2) == stringTag;
      }
      module2.exports = isString2;
    }
  });

  // node_modules/lodash/isNil.js
  var require_isNil = __commonJS({
    "node_modules/lodash/isNil.js"(exports, module2) {
      function isNil(value2) {
        return value2 == null;
      }
      module2.exports = isNil;
    }
  });

  // node_modules/fast-equals/dist/fast-equals.js
  var require_fast_equals = __commonJS({
    "node_modules/fast-equals/dist/fast-equals.js"(exports, module2) {
      (function(global9, factory) {
        typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global9 = typeof globalThis !== "undefined" ? globalThis : global9 || self, factory(global9["fast-equals"] = {}));
      })(exports, function(exports2) {
        "use strict";
        var HAS_WEAKSET_SUPPORT = typeof WeakSet === "function";
        var keys = Object.keys;
        function sameValueZeroEqual(a3, b2) {
          return a3 === b2 || a3 !== a3 && b2 !== b2;
        }
        function isPlainObject2(value2) {
          return value2.constructor === Object || value2.constructor == null;
        }
        function isPromiseLike(value2) {
          return !!value2 && typeof value2.then === "function";
        }
        function isReactElement(value2) {
          return !!(value2 && value2.$$typeof);
        }
        function getNewCacheFallback() {
          var values = [];
          return {
            add: function(value2) {
              values.push(value2);
            },
            has: function(value2) {
              return values.indexOf(value2) !== -1;
            }
          };
        }
        var getNewCache = function(canUseWeakMap) {
          if (canUseWeakMap) {
            return function _getNewCache() {
              return new WeakSet();
            };
          }
          return getNewCacheFallback;
        }(HAS_WEAKSET_SUPPORT);
        function createCircularEqualCreator(isEqual2) {
          return function createCircularEqual(comparator) {
            var _comparator = isEqual2 || comparator;
            return function circularEqual(a3, b2, cache3) {
              if (cache3 === void 0) {
                cache3 = getNewCache();
              }
              var isCacheableA = !!a3 && typeof a3 === "object";
              var isCacheableB = !!b2 && typeof b2 === "object";
              if (isCacheableA || isCacheableB) {
                var hasA = isCacheableA && cache3.has(a3);
                var hasB = isCacheableB && cache3.has(b2);
                if (hasA || hasB) {
                  return hasA && hasB;
                }
                if (isCacheableA) {
                  cache3.add(a3);
                }
                if (isCacheableB) {
                  cache3.add(b2);
                }
              }
              return _comparator(a3, b2, cache3);
            };
          };
        }
        function areArraysEqual(a3, b2, isEqual2, meta) {
          var index2 = a3.length;
          if (b2.length !== index2) {
            return false;
          }
          while (index2-- > 0) {
            if (!isEqual2(a3[index2], b2[index2], meta)) {
              return false;
            }
          }
          return true;
        }
        function areMapsEqual(a3, b2, isEqual2, meta) {
          var isValueEqual = a3.size === b2.size;
          if (isValueEqual && a3.size) {
            var matchedIndices_1 = {};
            a3.forEach(function(aValue, aKey) {
              if (isValueEqual) {
                var hasMatch_1 = false;
                var matchIndex_1 = 0;
                b2.forEach(function(bValue, bKey) {
                  if (!hasMatch_1 && !matchedIndices_1[matchIndex_1]) {
                    hasMatch_1 = isEqual2(aKey, bKey, meta) && isEqual2(aValue, bValue, meta);
                    if (hasMatch_1) {
                      matchedIndices_1[matchIndex_1] = true;
                    }
                  }
                  matchIndex_1++;
                });
                isValueEqual = hasMatch_1;
              }
            });
          }
          return isValueEqual;
        }
        var OWNER = "_owner";
        var hasOwnProperty2 = Function.prototype.bind.call(Function.prototype.call, Object.prototype.hasOwnProperty);
        function areObjectsEqual(a3, b2, isEqual2, meta) {
          var keysA = keys(a3);
          var index2 = keysA.length;
          if (keys(b2).length !== index2) {
            return false;
          }
          if (index2) {
            var key = void 0;
            while (index2-- > 0) {
              key = keysA[index2];
              if (key === OWNER) {
                var reactElementA = isReactElement(a3);
                var reactElementB = isReactElement(b2);
                if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {
                  return false;
                }
              }
              if (!hasOwnProperty2(b2, key) || !isEqual2(a3[key], b2[key], meta)) {
                return false;
              }
            }
          }
          return true;
        }
        function areRegExpsEqual(a3, b2) {
          return a3.source === b2.source && a3.global === b2.global && a3.ignoreCase === b2.ignoreCase && a3.multiline === b2.multiline && a3.unicode === b2.unicode && a3.sticky === b2.sticky && a3.lastIndex === b2.lastIndex;
        }
        function areSetsEqual(a3, b2, isEqual2, meta) {
          var isValueEqual = a3.size === b2.size;
          if (isValueEqual && a3.size) {
            var matchedIndices_2 = {};
            a3.forEach(function(aValue) {
              if (isValueEqual) {
                var hasMatch_2 = false;
                var matchIndex_2 = 0;
                b2.forEach(function(bValue) {
                  if (!hasMatch_2 && !matchedIndices_2[matchIndex_2]) {
                    hasMatch_2 = isEqual2(aValue, bValue, meta);
                    if (hasMatch_2) {
                      matchedIndices_2[matchIndex_2] = true;
                    }
                  }
                  matchIndex_2++;
                });
                isValueEqual = hasMatch_2;
              }
            });
          }
          return isValueEqual;
        }
        var HAS_MAP_SUPPORT = typeof Map === "function";
        var HAS_SET_SUPPORT = typeof Set === "function";
        function createComparator(createIsEqual) {
          var isEqual2 = typeof createIsEqual === "function" ? createIsEqual(comparator) : comparator;
          function comparator(a3, b2, meta) {
            if (a3 === b2) {
              return true;
            }
            if (a3 && b2 && typeof a3 === "object" && typeof b2 === "object") {
              if (isPlainObject2(a3) && isPlainObject2(b2)) {
                return areObjectsEqual(a3, b2, isEqual2, meta);
              }
              var aShape = Array.isArray(a3);
              var bShape = Array.isArray(b2);
              if (aShape || bShape) {
                return aShape === bShape && areArraysEqual(a3, b2, isEqual2, meta);
              }
              aShape = a3 instanceof Date;
              bShape = b2 instanceof Date;
              if (aShape || bShape) {
                return aShape === bShape && sameValueZeroEqual(a3.getTime(), b2.getTime());
              }
              aShape = a3 instanceof RegExp;
              bShape = b2 instanceof RegExp;
              if (aShape || bShape) {
                return aShape === bShape && areRegExpsEqual(a3, b2);
              }
              if (isPromiseLike(a3) || isPromiseLike(b2)) {
                return a3 === b2;
              }
              if (HAS_MAP_SUPPORT) {
                aShape = a3 instanceof Map;
                bShape = b2 instanceof Map;
                if (aShape || bShape) {
                  return aShape === bShape && areMapsEqual(a3, b2, isEqual2, meta);
                }
              }
              if (HAS_SET_SUPPORT) {
                aShape = a3 instanceof Set;
                bShape = b2 instanceof Set;
                if (aShape || bShape) {
                  return aShape === bShape && areSetsEqual(a3, b2, isEqual2, meta);
                }
              }
              return areObjectsEqual(a3, b2, isEqual2, meta);
            }
            return a3 !== a3 && b2 !== b2;
          }
          return comparator;
        }
        var deepEqual2 = createComparator();
        var shallowEqual2 = createComparator(function() {
          return sameValueZeroEqual;
        });
        var circularDeepEqual = createComparator(createCircularEqualCreator());
        var circularShallowEqual = createComparator(createCircularEqualCreator(sameValueZeroEqual));
        exports2.circularDeepEqual = circularDeepEqual;
        exports2.circularShallowEqual = circularShallowEqual;
        exports2.createCustomEqual = createComparator;
        exports2.deepEqual = deepEqual2;
        exports2.sameValueZeroEqual = sameValueZeroEqual;
        exports2.shallowEqual = shallowEqual2;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module2) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/react-smooth/node_modules/dom-helpers/class/hasClass.js
  var require_hasClass = __commonJS({
    "node_modules/react-smooth/node_modules/dom-helpers/class/hasClass.js"(exports, module2) {
      "use strict";
      exports.__esModule = true;
      exports.default = hasClass;
      function hasClass(element2, className) {
        if (element2.classList)
          return !!className && element2.classList.contains(className);
        else
          return (" " + (element2.className.baseVal || element2.className) + " ").indexOf(" " + className + " ") !== -1;
      }
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-smooth/node_modules/dom-helpers/class/addClass.js
  var require_addClass = __commonJS({
    "node_modules/react-smooth/node_modules/dom-helpers/class/addClass.js"(exports, module2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      exports.__esModule = true;
      exports.default = addClass;
      var _hasClass = _interopRequireDefault(require_hasClass());
      function addClass(element2, className) {
        if (element2.classList)
          element2.classList.add(className);
        else if (!(0, _hasClass.default)(element2, className))
          if (typeof element2.className === "string")
            element2.className = element2.className + " " + className;
          else
            element2.setAttribute("class", (element2.className && element2.className.baseVal || "") + " " + className);
      }
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-smooth/node_modules/dom-helpers/class/removeClass.js
  var require_removeClass = __commonJS({
    "node_modules/react-smooth/node_modules/dom-helpers/class/removeClass.js"(exports, module2) {
      "use strict";
      function replaceClassName(origClass, classToRemove) {
        return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
      }
      module2.exports = function removeClass(element2, className) {
        if (element2.classList)
          element2.classList.remove(className);
        else if (typeof element2.className === "string")
          element2.className = replaceClassName(element2.className, className);
        else
          element2.setAttribute("class", replaceClassName(element2.className && element2.className.baseVal || "", className));
      };
    }
  });

  // node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js
  var require_react_lifecycles_compat_cjs = __commonJS({
    "node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function componentWillMount() {
        var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
        if (state !== null && state !== void 0) {
          this.setState(state);
        }
      }
      function componentWillReceiveProps(nextProps) {
        function updater(prevState) {
          var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
          return state !== null && state !== void 0 ? state : null;
        }
        this.setState(updater.bind(this));
      }
      function componentWillUpdate(nextProps, nextState) {
        try {
          var prevProps = this.props;
          var prevState = this.state;
          this.props = nextProps;
          this.state = nextState;
          this.__reactInternalSnapshotFlag = true;
          this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
        } finally {
          this.props = prevProps;
          this.state = prevState;
        }
      }
      componentWillMount.__suppressDeprecationWarning = true;
      componentWillReceiveProps.__suppressDeprecationWarning = true;
      componentWillUpdate.__suppressDeprecationWarning = true;
      function polyfill(Component11) {
        var prototype = Component11.prototype;
        if (!prototype || !prototype.isReactComponent) {
          throw new Error("Can only polyfill class components");
        }
        if (typeof Component11.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
          return Component11;
        }
        var foundWillMountName = null;
        var foundWillReceivePropsName = null;
        var foundWillUpdateName = null;
        if (typeof prototype.componentWillMount === "function") {
          foundWillMountName = "componentWillMount";
        } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
          foundWillMountName = "UNSAFE_componentWillMount";
        }
        if (typeof prototype.componentWillReceiveProps === "function") {
          foundWillReceivePropsName = "componentWillReceiveProps";
        } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
          foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
        }
        if (typeof prototype.componentWillUpdate === "function") {
          foundWillUpdateName = "componentWillUpdate";
        } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
          foundWillUpdateName = "UNSAFE_componentWillUpdate";
        }
        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
          var componentName = Component11.displayName || Component11.name;
          var newApiName = typeof Component11.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
          throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks");
        }
        if (typeof Component11.getDerivedStateFromProps === "function") {
          prototype.componentWillMount = componentWillMount;
          prototype.componentWillReceiveProps = componentWillReceiveProps;
        }
        if (typeof prototype.getSnapshotBeforeUpdate === "function") {
          if (typeof prototype.componentDidUpdate !== "function") {
            throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
          }
          prototype.componentWillUpdate = componentWillUpdate;
          var componentDidUpdate = prototype.componentDidUpdate;
          prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
          };
        }
        return Component11;
      }
      exports.polyfill = polyfill;
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/utils/PropTypes.js
  var require_PropTypes = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/utils/PropTypes.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.classNamesShape = exports.timeoutsShape = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var timeoutsShape = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        enter: _propTypes.default.number,
        exit: _propTypes.default.number,
        appear: _propTypes.default.number
      }).isRequired]) : null;
      exports.timeoutsShape = timeoutsShape;
      var classNamesShape = true ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
        enter: _propTypes.default.string,
        exit: _propTypes.default.string,
        active: _propTypes.default.string
      }), _propTypes.default.shape({
        enter: _propTypes.default.string,
        enterDone: _propTypes.default.string,
        enterActive: _propTypes.default.string,
        exit: _propTypes.default.string,
        exitDone: _propTypes.default.string,
        exitActive: _propTypes.default.string
      })]) : null;
      exports.classNamesShape = classNamesShape;
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/Transition.js
  var require_Transition = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/Transition.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
      var PropTypes7 = _interopRequireWildcard(require_prop_types());
      var _react = _interopRequireDefault(require_react());
      var _reactDom = _interopRequireDefault(require_react_dom());
      var _reactLifecyclesCompat = require_react_lifecycles_compat_cjs();
      var _PropTypes = require_PropTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                if (desc.get || desc.set) {
                  Object.defineProperty(newObj, key, desc);
                } else {
                  newObj[key] = obj[key];
                }
              }
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _objectWithoutPropertiesLoose13(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i3;
        for (i3 = 0; i3 < sourceKeys.length; i3++) {
          key = sourceKeys[i3];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _inheritsLoose2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var UNMOUNTED = "unmounted";
      exports.UNMOUNTED = UNMOUNTED;
      var EXITED = "exited";
      exports.EXITED = EXITED;
      var ENTERING = "entering";
      exports.ENTERING = ENTERING;
      var ENTERED = "entered";
      exports.ENTERED = ENTERED;
      var EXITING = "exiting";
      exports.EXITING = EXITING;
      var Transition2 = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose2(Transition3, _React$Component);
        function Transition3(props, context2) {
          var _this;
          _this = _React$Component.call(this, props, context2) || this;
          var parentGroup = context2.transitionGroup;
          var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
          var initialStatus;
          _this.appearStatus = null;
          if (props.in) {
            if (appear) {
              initialStatus = EXITED;
              _this.appearStatus = ENTERING;
            } else {
              initialStatus = ENTERED;
            }
          } else {
            if (props.unmountOnExit || props.mountOnEnter) {
              initialStatus = UNMOUNTED;
            } else {
              initialStatus = EXITED;
            }
          }
          _this.state = {
            status: initialStatus
          };
          _this.nextCallback = null;
          return _this;
        }
        var _proto = Transition3.prototype;
        _proto.getChildContext = function getChildContext() {
          return {
            transitionGroup: null
          };
        };
        Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref3, prevState) {
          var nextIn = _ref3.in;
          if (nextIn && prevState.status === UNMOUNTED) {
            return {
              status: EXITED
            };
          }
          return null;
        };
        _proto.componentDidMount = function componentDidMount() {
          this.updateStatus(true, this.appearStatus);
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
          var nextStatus = null;
          if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
              if (status !== ENTERING && status !== ENTERED) {
                nextStatus = ENTERING;
              }
            } else {
              if (status === ENTERING || status === ENTERED) {
                nextStatus = EXITING;
              }
            }
          }
          this.updateStatus(false, nextStatus);
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.cancelNextCallback();
        };
        _proto.getTimeouts = function getTimeouts() {
          var timeout = this.props.timeout;
          var exit, enter, appear;
          exit = enter = appear = timeout;
          if (timeout != null && typeof timeout !== "number") {
            exit = timeout.exit;
            enter = timeout.enter;
            appear = timeout.appear !== void 0 ? timeout.appear : enter;
          }
          return {
            exit,
            enter,
            appear
          };
        };
        _proto.updateStatus = function updateStatus(mounting, nextStatus) {
          if (mounting === void 0) {
            mounting = false;
          }
          if (nextStatus !== null) {
            this.cancelNextCallback();
            var node = _reactDom.default.findDOMNode(this);
            if (nextStatus === ENTERING) {
              this.performEnter(node, mounting);
            } else {
              this.performExit(node);
            }
          } else if (this.props.unmountOnExit && this.state.status === EXITED) {
            this.setState({
              status: UNMOUNTED
            });
          }
        };
        _proto.performEnter = function performEnter(node, mounting) {
          var _this2 = this;
          var enter = this.props.enter;
          var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
          var timeouts = this.getTimeouts();
          var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
          if (!mounting && !enter) {
            this.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(node);
            });
            return;
          }
          this.props.onEnter(node, appearing);
          this.safeSetState({
            status: ENTERING
          }, function() {
            _this2.props.onEntering(node, appearing);
            _this2.onTransitionEnd(node, enterTimeout, function() {
              _this2.safeSetState({
                status: ENTERED
              }, function() {
                _this2.props.onEntered(node, appearing);
              });
            });
          });
        };
        _proto.performExit = function performExit(node) {
          var _this3 = this;
          var exit = this.props.exit;
          var timeouts = this.getTimeouts();
          if (!exit) {
            this.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(node);
            });
            return;
          }
          this.props.onExit(node);
          this.safeSetState({
            status: EXITING
          }, function() {
            _this3.props.onExiting(node);
            _this3.onTransitionEnd(node, timeouts.exit, function() {
              _this3.safeSetState({
                status: EXITED
              }, function() {
                _this3.props.onExited(node);
              });
            });
          });
        };
        _proto.cancelNextCallback = function cancelNextCallback() {
          if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
          }
        };
        _proto.safeSetState = function safeSetState(nextState, callback) {
          callback = this.setNextCallback(callback);
          this.setState(nextState, callback);
        };
        _proto.setNextCallback = function setNextCallback(callback) {
          var _this4 = this;
          var active = true;
          this.nextCallback = function(event) {
            if (active) {
              active = false;
              _this4.nextCallback = null;
              callback(event);
            }
          };
          this.nextCallback.cancel = function() {
            active = false;
          };
          return this.nextCallback;
        };
        _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
          this.setNextCallback(handler);
          var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
          if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
          }
          if (this.props.addEndListener) {
            this.props.addEndListener(node, this.nextCallback);
          }
          if (timeout != null) {
            setTimeout(this.nextCallback, timeout);
          }
        };
        _proto.render = function render() {
          var status = this.state.status;
          if (status === UNMOUNTED) {
            return null;
          }
          var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose13(_this$props, ["children"]);
          delete childProps.in;
          delete childProps.mountOnEnter;
          delete childProps.unmountOnExit;
          delete childProps.appear;
          delete childProps.enter;
          delete childProps.exit;
          delete childProps.timeout;
          delete childProps.addEndListener;
          delete childProps.onEnter;
          delete childProps.onEntering;
          delete childProps.onEntered;
          delete childProps.onExit;
          delete childProps.onExiting;
          delete childProps.onExited;
          if (typeof children === "function") {
            return children(status, childProps);
          }
          var child = _react.default.Children.only(children);
          return _react.default.cloneElement(child, childProps);
        };
        return Transition3;
      }(_react.default.Component);
      Transition2.contextTypes = {
        transitionGroup: PropTypes7.object
      };
      Transition2.childContextTypes = {
        transitionGroup: function transitionGroup() {
        }
      };
      Transition2.propTypes = true ? {
        children: PropTypes7.oneOfType([PropTypes7.func.isRequired, PropTypes7.element.isRequired]).isRequired,
        in: PropTypes7.bool,
        mountOnEnter: PropTypes7.bool,
        unmountOnExit: PropTypes7.bool,
        appear: PropTypes7.bool,
        enter: PropTypes7.bool,
        exit: PropTypes7.bool,
        timeout: function timeout(props) {
          var pt = _PropTypes.timeoutsShape;
          if (!props.addEndListener)
            pt = pt.isRequired;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          return pt.apply(void 0, [props].concat(args));
        },
        addEndListener: PropTypes7.func,
        onEnter: PropTypes7.func,
        onEntering: PropTypes7.func,
        onEntered: PropTypes7.func,
        onExit: PropTypes7.func,
        onExiting: PropTypes7.func,
        onExited: PropTypes7.func
      } : {};
      function noop4() {
      }
      Transition2.defaultProps = {
        in: false,
        mountOnEnter: false,
        unmountOnExit: false,
        appear: false,
        enter: true,
        exit: true,
        onEnter: noop4,
        onEntering: noop4,
        onEntered: noop4,
        onExit: noop4,
        onExiting: noop4,
        onExited: noop4
      };
      Transition2.UNMOUNTED = 0;
      Transition2.EXITED = 1;
      Transition2.ENTERING = 2;
      Transition2.ENTERED = 3;
      Transition2.EXITING = 4;
      var _default = (0, _reactLifecyclesCompat.polyfill)(Transition2);
      exports.default = _default;
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/CSSTransition.js
  var require_CSSTransition = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/CSSTransition.js"(exports, module2) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var PropTypes7 = _interopRequireWildcard(require_prop_types());
      var _addClass = _interopRequireDefault(require_addClass());
      var _removeClass = _interopRequireDefault(require_removeClass());
      var _react = _interopRequireDefault(require_react());
      var _Transition = _interopRequireDefault(require_Transition());
      var _PropTypes = require_PropTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                if (desc.get || desc.set) {
                  Object.defineProperty(newObj, key, desc);
                } else {
                  newObj[key] = obj[key];
                }
              }
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _extends23() {
        _extends23 = Object.assign || function(target) {
          for (var i3 = 1; i3 < arguments.length; i3++) {
            var source = arguments[i3];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends23.apply(this, arguments);
      }
      function _inheritsLoose2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var addClass = function addClass2(node, classes) {
        return node && classes && classes.split(" ").forEach(function(c3) {
          return (0, _addClass.default)(node, c3);
        });
      };
      var removeClass = function removeClass2(node, classes) {
        return node && classes && classes.split(" ").forEach(function(c3) {
          return (0, _removeClass.default)(node, c3);
        });
      };
      var CSSTransition = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose2(CSSTransition2, _React$Component);
        function CSSTransition2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
          _this.onEnter = function(node, appearing) {
            var _this$getClassNames = _this.getClassNames(appearing ? "appear" : "enter"), className = _this$getClassNames.className;
            _this.removeClasses(node, "exit");
            addClass(node, className);
            if (_this.props.onEnter) {
              _this.props.onEnter(node, appearing);
            }
          };
          _this.onEntering = function(node, appearing) {
            var _this$getClassNames2 = _this.getClassNames(appearing ? "appear" : "enter"), activeClassName = _this$getClassNames2.activeClassName;
            _this.reflowAndAddClass(node, activeClassName);
            if (_this.props.onEntering) {
              _this.props.onEntering(node, appearing);
            }
          };
          _this.onEntered = function(node, appearing) {
            var appearClassName = _this.getClassNames("appear").doneClassName;
            var enterClassName = _this.getClassNames("enter").doneClassName;
            var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;
            _this.removeClasses(node, appearing ? "appear" : "enter");
            addClass(node, doneClassName);
            if (_this.props.onEntered) {
              _this.props.onEntered(node, appearing);
            }
          };
          _this.onExit = function(node) {
            var _this$getClassNames3 = _this.getClassNames("exit"), className = _this$getClassNames3.className;
            _this.removeClasses(node, "appear");
            _this.removeClasses(node, "enter");
            addClass(node, className);
            if (_this.props.onExit) {
              _this.props.onExit(node);
            }
          };
          _this.onExiting = function(node) {
            var _this$getClassNames4 = _this.getClassNames("exit"), activeClassName = _this$getClassNames4.activeClassName;
            _this.reflowAndAddClass(node, activeClassName);
            if (_this.props.onExiting) {
              _this.props.onExiting(node);
            }
          };
          _this.onExited = function(node) {
            var _this$getClassNames5 = _this.getClassNames("exit"), doneClassName = _this$getClassNames5.doneClassName;
            _this.removeClasses(node, "exit");
            addClass(node, doneClassName);
            if (_this.props.onExited) {
              _this.props.onExited(node);
            }
          };
          _this.getClassNames = function(type) {
            var classNames23 = _this.props.classNames;
            var isStringClassNames = typeof classNames23 === "string";
            var prefix2 = isStringClassNames && classNames23 ? classNames23 + "-" : "";
            var className = isStringClassNames ? prefix2 + type : classNames23[type];
            var activeClassName = isStringClassNames ? className + "-active" : classNames23[type + "Active"];
            var doneClassName = isStringClassNames ? className + "-done" : classNames23[type + "Done"];
            return {
              className,
              activeClassName,
              doneClassName
            };
          };
          return _this;
        }
        var _proto = CSSTransition2.prototype;
        _proto.removeClasses = function removeClasses(node, type) {
          var _this$getClassNames6 = this.getClassNames(type), className = _this$getClassNames6.className, activeClassName = _this$getClassNames6.activeClassName, doneClassName = _this$getClassNames6.doneClassName;
          className && removeClass(node, className);
          activeClassName && removeClass(node, activeClassName);
          doneClassName && removeClass(node, doneClassName);
        };
        _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
          if (className) {
            node && node.scrollTop;
            addClass(node, className);
          }
        };
        _proto.render = function render() {
          var props = _extends23({}, this.props);
          delete props.classNames;
          return _react.default.createElement(_Transition.default, _extends23({}, props, {
            onEnter: this.onEnter,
            onEntered: this.onEntered,
            onEntering: this.onEntering,
            onExit: this.onExit,
            onExiting: this.onExiting,
            onExited: this.onExited
          }));
        };
        return CSSTransition2;
      }(_react.default.Component);
      CSSTransition.defaultProps = {
        classNames: ""
      };
      CSSTransition.propTypes = true ? _extends23({}, _Transition.default.propTypes, {
        classNames: _PropTypes.classNamesShape,
        onEnter: PropTypes7.func,
        onEntering: PropTypes7.func,
        onEntered: PropTypes7.func,
        onExit: PropTypes7.func,
        onExiting: PropTypes7.func,
        onExited: PropTypes7.func
      }) : {};
      var _default = CSSTransition;
      exports.default = _default;
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/utils/ChildMapping.js
  var require_ChildMapping = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/utils/ChildMapping.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.getChildMapping = getChildMapping;
      exports.mergeChildMappings = mergeChildMappings;
      exports.getInitialChildMapping = getInitialChildMapping;
      exports.getNextChildMapping = getNextChildMapping;
      var _react = require_react();
      function getChildMapping(children, mapFn) {
        var mapper = function mapper2(child) {
          return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
        };
        var result = Object.create(null);
        if (children)
          _react.Children.map(children, function(c3) {
            return c3;
          }).forEach(function(child) {
            result[child.key] = mapper(child);
          });
        return result;
      }
      function mergeChildMappings(prev2, next) {
        prev2 = prev2 || {};
        next = next || {};
        function getValueForKey(key) {
          return key in next ? next[key] : prev2[key];
        }
        var nextKeysPending = Object.create(null);
        var pendingKeys = [];
        for (var prevKey in prev2) {
          if (prevKey in next) {
            if (pendingKeys.length) {
              nextKeysPending[prevKey] = pendingKeys;
              pendingKeys = [];
            }
          } else {
            pendingKeys.push(prevKey);
          }
        }
        var i3;
        var childMapping = {};
        for (var nextKey in next) {
          if (nextKeysPending[nextKey]) {
            for (i3 = 0; i3 < nextKeysPending[nextKey].length; i3++) {
              var pendingNextKey = nextKeysPending[nextKey][i3];
              childMapping[nextKeysPending[nextKey][i3]] = getValueForKey(pendingNextKey);
            }
          }
          childMapping[nextKey] = getValueForKey(nextKey);
        }
        for (i3 = 0; i3 < pendingKeys.length; i3++) {
          childMapping[pendingKeys[i3]] = getValueForKey(pendingKeys[i3]);
        }
        return childMapping;
      }
      function getProp(child, prop, props) {
        return props[prop] != null ? props[prop] : child.props[prop];
      }
      function getInitialChildMapping(props, onExited) {
        return getChildMapping(props.children, function(child) {
          return (0, _react.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, "appear", props),
            enter: getProp(child, "enter", props),
            exit: getProp(child, "exit", props)
          });
        });
      }
      function getNextChildMapping(nextProps, prevChildMapping, onExited) {
        var nextChildMapping = getChildMapping(nextProps.children);
        var children = mergeChildMappings(prevChildMapping, nextChildMapping);
        Object.keys(children).forEach(function(key) {
          var child = children[key];
          if (!(0, _react.isValidElement)(child))
            return;
          var hasPrev = key in prevChildMapping;
          var hasNext = key in nextChildMapping;
          var prevChild = prevChildMapping[key];
          var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in;
          if (hasNext && (!hasPrev || isLeaving)) {
            children[key] = (0, _react.cloneElement)(child, {
              onExited: onExited.bind(null, child),
              in: true,
              exit: getProp(child, "exit", nextProps),
              enter: getProp(child, "enter", nextProps)
            });
          } else if (!hasNext && hasPrev && !isLeaving) {
            children[key] = (0, _react.cloneElement)(child, {
              in: false
            });
          } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
            children[key] = (0, _react.cloneElement)(child, {
              onExited: onExited.bind(null, child),
              in: prevChild.props.in,
              exit: getProp(child, "exit", nextProps),
              enter: getProp(child, "enter", nextProps)
            });
          }
        });
        return children;
      }
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/TransitionGroup.js
  var require_TransitionGroup = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/TransitionGroup.js"(exports, module2) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react = _interopRequireDefault(require_react());
      var _reactLifecyclesCompat = require_react_lifecycles_compat_cjs();
      var _ChildMapping = require_ChildMapping();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutPropertiesLoose13(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i3;
        for (i3 = 0; i3 < sourceKeys.length; i3++) {
          key = sourceKeys[i3];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _extends23() {
        _extends23 = Object.assign || function(target) {
          for (var i3 = 1; i3 < arguments.length; i3++) {
            var source = arguments[i3];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends23.apply(this, arguments);
      }
      function _inheritsLoose2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      function _assertThisInitialized20(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      var values = Object.values || function(obj) {
        return Object.keys(obj).map(function(k3) {
          return obj[k3];
        });
      };
      var defaultProps3 = {
        component: "div",
        childFactory: function childFactory(child) {
          return child;
        }
      };
      var TransitionGroup2 = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose2(TransitionGroup3, _React$Component);
        function TransitionGroup3(props, context2) {
          var _this;
          _this = _React$Component.call(this, props, context2) || this;
          var handleExited = _this.handleExited.bind(_assertThisInitialized20(_assertThisInitialized20(_this)));
          _this.state = {
            handleExited,
            firstRender: true
          };
          return _this;
        }
        var _proto = TransitionGroup3.prototype;
        _proto.getChildContext = function getChildContext() {
          return {
            transitionGroup: {
              isMounting: !this.appeared
            }
          };
        };
        _proto.componentDidMount = function componentDidMount() {
          this.appeared = true;
          this.mounted = true;
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.mounted = false;
        };
        TransitionGroup3.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref3) {
          var prevChildMapping = _ref3.children, handleExited = _ref3.handleExited, firstRender = _ref3.firstRender;
          return {
            children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
            firstRender: false
          };
        };
        _proto.handleExited = function handleExited(child, node) {
          var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
          if (child.key in currentChildMapping)
            return;
          if (child.props.onExited) {
            child.props.onExited(node);
          }
          if (this.mounted) {
            this.setState(function(state) {
              var children = _extends23({}, state.children);
              delete children[child.key];
              return {
                children
              };
            });
          }
        };
        _proto.render = function render() {
          var _this$props = this.props, Component11 = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose13(_this$props, ["component", "childFactory"]);
          var children = values(this.state.children).map(childFactory);
          delete props.appear;
          delete props.enter;
          delete props.exit;
          if (Component11 === null) {
            return children;
          }
          return _react.default.createElement(Component11, props, children);
        };
        return TransitionGroup3;
      }(_react.default.Component);
      TransitionGroup2.childContextTypes = {
        transitionGroup: _propTypes.default.object.isRequired
      };
      TransitionGroup2.propTypes = true ? {
        component: _propTypes.default.any,
        children: _propTypes.default.node,
        appear: _propTypes.default.bool,
        enter: _propTypes.default.bool,
        exit: _propTypes.default.bool,
        childFactory: _propTypes.default.func
      } : {};
      TransitionGroup2.defaultProps = defaultProps3;
      var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup2);
      exports.default = _default;
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/ReplaceTransition.js
  var require_ReplaceTransition = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/ReplaceTransition.js"(exports, module2) {
      "use strict";
      exports.__esModule = true;
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react = _interopRequireDefault(require_react());
      var _reactDom = require_react_dom();
      var _TransitionGroup = _interopRequireDefault(require_TransitionGroup());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutPropertiesLoose13(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i3;
        for (i3 = 0; i3 < sourceKeys.length; i3++) {
          key = sourceKeys[i3];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _inheritsLoose2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var ReplaceTransition = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose2(ReplaceTransition2, _React$Component);
        function ReplaceTransition2() {
          var _this;
          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
          _this.handleEnter = function() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return _this.handleLifecycle("onEnter", 0, args);
          };
          _this.handleEntering = function() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }
            return _this.handleLifecycle("onEntering", 0, args);
          };
          _this.handleEntered = function() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }
            return _this.handleLifecycle("onEntered", 0, args);
          };
          _this.handleExit = function() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }
            return _this.handleLifecycle("onExit", 1, args);
          };
          _this.handleExiting = function() {
            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }
            return _this.handleLifecycle("onExiting", 1, args);
          };
          _this.handleExited = function() {
            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }
            return _this.handleLifecycle("onExited", 1, args);
          };
          return _this;
        }
        var _proto = ReplaceTransition2.prototype;
        _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
          var _child$props;
          var children = this.props.children;
          var child = _react.default.Children.toArray(children)[idx];
          if (child.props[handler])
            (_child$props = child.props)[handler].apply(_child$props, originalArgs);
          if (this.props[handler])
            this.props[handler]((0, _reactDom.findDOMNode)(this));
        };
        _proto.render = function render() {
          var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose13(_this$props, ["children", "in"]);
          var _React$Children$toArr = _react.default.Children.toArray(children), first = _React$Children$toArr[0], second2 = _React$Children$toArr[1];
          delete props.onEnter;
          delete props.onEntering;
          delete props.onEntered;
          delete props.onExit;
          delete props.onExiting;
          delete props.onExited;
          return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
            key: "first",
            onEnter: this.handleEnter,
            onEntering: this.handleEntering,
            onEntered: this.handleEntered
          }) : _react.default.cloneElement(second2, {
            key: "second",
            onEnter: this.handleExit,
            onEntering: this.handleExiting,
            onEntered: this.handleExited
          }));
        };
        return ReplaceTransition2;
      }(_react.default.Component);
      ReplaceTransition.propTypes = true ? {
        in: _propTypes.default.bool.isRequired,
        children: function children(props, propName) {
          if (_react.default.Children.count(props[propName]) !== 2)
            return new Error('"' + propName + '" must be exactly two transition components.');
          return null;
        }
      } : {};
      var _default = ReplaceTransition;
      exports.default = _default;
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-smooth/node_modules/react-transition-group/index.js
  var require_react_transition_group = __commonJS({
    "node_modules/react-smooth/node_modules/react-transition-group/index.js"(exports, module2) {
      "use strict";
      var _CSSTransition = _interopRequireDefault(require_CSSTransition());
      var _ReplaceTransition = _interopRequireDefault(require_ReplaceTransition());
      var _TransitionGroup = _interopRequireDefault(require_TransitionGroup());
      var _Transition = _interopRequireDefault(require_Transition());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      module2.exports = {
        Transition: _Transition.default,
        TransitionGroup: _TransitionGroup.default,
        ReplaceTransition: _ReplaceTransition.default,
        CSSTransition: _CSSTransition.default
      };
    }
  });

  // node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS({
    "node_modules/lodash/_isFlattenable.js"(exports, module2) {
      var Symbol4 = require_Symbol();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var spreadableSymbol = Symbol4 ? Symbol4.isConcatSpreadable : void 0;
      function isFlattenable(value2) {
        return isArray2(value2) || isArguments(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
      }
      module2.exports = isFlattenable;
    }
  });

  // node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS({
    "node_modules/lodash/_baseFlatten.js"(exports, module2) {
      var arrayPush = require_arrayPush();
      var isFlattenable = require_isFlattenable();
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index2 = -1, length2 = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index2 < length2) {
          var value2 = array[index2];
          if (depth > 0 && predicate(value2)) {
            if (depth > 1) {
              baseFlatten(value2, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value2);
            }
          } else if (!isStrict) {
            result[result.length] = value2;
          }
        }
        return result;
      }
      module2.exports = baseFlatten;
    }
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "node_modules/lodash/_createBaseFor.js"(exports, module2) {
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
          while (length2--) {
            var key = props[fromRight ? length2 : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module2.exports = createBaseFor;
    }
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "node_modules/lodash/_baseFor.js"(exports, module2) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module2.exports = baseFor;
    }
  });

  // node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "node_modules/lodash/_baseForOwn.js"(exports, module2) {
      var baseFor = require_baseFor();
      var keys = require_keys();
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
      module2.exports = baseForOwn;
    }
  });

  // node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "node_modules/lodash/_createBaseEach.js"(exports, module2) {
      var isArrayLike = require_isArrayLike();
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length2 = collection.length, index2 = fromRight ? length2 : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length2) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      module2.exports = createBaseEach;
    }
  });

  // node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "node_modules/lodash/_baseEach.js"(exports, module2) {
      var baseForOwn = require_baseForOwn();
      var createBaseEach = require_createBaseEach();
      var baseEach = createBaseEach(baseForOwn);
      module2.exports = baseEach;
    }
  });

  // node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS({
    "node_modules/lodash/_baseMap.js"(exports, module2) {
      var baseEach = require_baseEach();
      var isArrayLike = require_isArrayLike();
      function baseMap(collection, iteratee) {
        var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function(value2, key, collection2) {
          result[++index2] = iteratee(value2, key, collection2);
        });
        return result;
      }
      module2.exports = baseMap;
    }
  });

  // node_modules/lodash/_baseSortBy.js
  var require_baseSortBy = __commonJS({
    "node_modules/lodash/_baseSortBy.js"(exports, module2) {
      function baseSortBy(array, comparer) {
        var length2 = array.length;
        array.sort(comparer);
        while (length2--) {
          array[length2] = array[length2].value;
        }
        return array;
      }
      module2.exports = baseSortBy;
    }
  });

  // node_modules/lodash/_compareAscending.js
  var require_compareAscending = __commonJS({
    "node_modules/lodash/_compareAscending.js"(exports, module2) {
      var isSymbol2 = require_isSymbol();
      function compareAscending(value2, other) {
        if (value2 !== other) {
          var valIsDefined = value2 !== void 0, valIsNull = value2 === null, valIsReflexive = value2 === value2, valIsSymbol = isSymbol2(value2);
          var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value2 > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value2 < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      module2.exports = compareAscending;
    }
  });

  // node_modules/lodash/_compareMultiple.js
  var require_compareMultiple = __commonJS({
    "node_modules/lodash/_compareMultiple.js"(exports, module2) {
      var compareAscending = require_compareAscending();
      function compareMultiple(object, other, orders) {
        var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
        while (++index2 < length2) {
          var result = compareAscending(objCriteria[index2], othCriteria[index2]);
          if (result) {
            if (index2 >= ordersLength) {
              return result;
            }
            var order = orders[index2];
            return result * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      module2.exports = compareMultiple;
    }
  });

  // node_modules/lodash/_baseOrderBy.js
  var require_baseOrderBy = __commonJS({
    "node_modules/lodash/_baseOrderBy.js"(exports, module2) {
      var arrayMap = require_arrayMap();
      var baseGet = require_baseGet();
      var baseIteratee = require_baseIteratee();
      var baseMap = require_baseMap();
      var baseSortBy = require_baseSortBy();
      var baseUnary = require_baseUnary();
      var compareMultiple = require_compareMultiple();
      var identity7 = require_identity();
      var isArray2 = require_isArray();
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee) {
            if (isArray2(iteratee)) {
              return function(value2) {
                return baseGet(value2, iteratee.length === 1 ? iteratee[0] : iteratee);
              };
            }
            return iteratee;
          });
        } else {
          iteratees = [identity7];
        }
        var index2 = -1;
        iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
        var result = baseMap(collection, function(value2, key, collection2) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value2);
          });
          return { "criteria": criteria, "index": ++index2, "value": value2 };
        });
        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      module2.exports = baseOrderBy;
    }
  });

  // node_modules/lodash/_apply.js
  var require_apply = __commonJS({
    "node_modules/lodash/_apply.js"(exports, module2) {
      function apply(func2, thisArg, args) {
        switch (args.length) {
          case 0:
            return func2.call(thisArg);
          case 1:
            return func2.call(thisArg, args[0]);
          case 2:
            return func2.call(thisArg, args[0], args[1]);
          case 3:
            return func2.call(thisArg, args[0], args[1], args[2]);
        }
        return func2.apply(thisArg, args);
      }
      module2.exports = apply;
    }
  });

  // node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "node_modules/lodash/_overRest.js"(exports, module2) {
      var apply = require_apply();
      var nativeMax2 = Math.max;
      function overRest(func2, start, transform) {
        start = nativeMax2(start === void 0 ? func2.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length2 = nativeMax2(args.length - start, 0), array = Array(length2);
          while (++index2 < length2) {
            array[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform(array);
          return apply(func2, this, otherArgs);
        };
      }
      module2.exports = overRest;
    }
  });

  // node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "node_modules/lodash/constant.js"(exports, module2) {
      function constant(value2) {
        return function() {
          return value2;
        };
      }
      module2.exports = constant;
    }
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/lodash/_defineProperty.js"(exports, module2) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func2 = getNative(Object, "defineProperty");
          func2({}, "", {});
          return func2;
        } catch (e3) {
        }
      }();
      module2.exports = defineProperty;
    }
  });

  // node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "node_modules/lodash/_baseSetToString.js"(exports, module2) {
      var constant = require_constant();
      var defineProperty = require_defineProperty();
      var identity7 = require_identity();
      var baseSetToString = !defineProperty ? identity7 : function(func2, string2) {
        return defineProperty(func2, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string2),
          "writable": true
        });
      };
      module2.exports = baseSetToString;
    }
  });

  // node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "node_modules/lodash/_shortOut.js"(exports, module2) {
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func2) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func2.apply(void 0, arguments);
        };
      }
      module2.exports = shortOut;
    }
  });

  // node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "node_modules/lodash/_setToString.js"(exports, module2) {
      var baseSetToString = require_baseSetToString();
      var shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      module2.exports = setToString;
    }
  });

  // node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "node_modules/lodash/_baseRest.js"(exports, module2) {
      var identity7 = require_identity();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function baseRest(func2, start) {
        return setToString(overRest(func2, start, identity7), func2 + "");
      }
      module2.exports = baseRest;
    }
  });

  // node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "node_modules/lodash/_isIterateeCall.js"(exports, module2) {
      var eq = require_eq();
      var isArrayLike = require_isArrayLike();
      var isIndex = require_isIndex();
      var isObject2 = require_isObject();
      function isIterateeCall(value2, index2, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
          return eq(object[index2], value2);
        }
        return false;
      }
      module2.exports = isIterateeCall;
    }
  });

  // node_modules/lodash/sortBy.js
  var require_sortBy = __commonJS({
    "node_modules/lodash/sortBy.js"(exports, module2) {
      var baseFlatten = require_baseFlatten();
      var baseOrderBy = require_baseOrderBy();
      var baseRest = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length2 = iteratees.length;
        if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      module2.exports = sortBy;
    }
  });

  // node_modules/lodash/now.js
  var require_now = __commonJS({
    "node_modules/lodash/now.js"(exports, module2) {
      var root2 = require_root();
      var now2 = function() {
        return root2.Date.now();
      };
      module2.exports = now2;
    }
  });

  // node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "node_modules/lodash/_trimmedEndIndex.js"(exports, module2) {
      var reWhitespace2 = /\s/;
      function trimmedEndIndex2(string2) {
        var index2 = string2.length;
        while (index2-- && reWhitespace2.test(string2.charAt(index2))) {
        }
        return index2;
      }
      module2.exports = trimmedEndIndex2;
    }
  });

  // node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "node_modules/lodash/_baseTrim.js"(exports, module2) {
      var trimmedEndIndex2 = require_trimmedEndIndex();
      var reTrimStart2 = /^\s+/;
      function baseTrim2(string2) {
        return string2 ? string2.slice(0, trimmedEndIndex2(string2) + 1).replace(reTrimStart2, "") : string2;
      }
      module2.exports = baseTrim2;
    }
  });

  // node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "node_modules/lodash/toNumber.js"(exports, module2) {
      var baseTrim2 = require_baseTrim();
      var isObject2 = require_isObject();
      var isSymbol2 = require_isSymbol();
      var NAN2 = 0 / 0;
      var reIsBadHex2 = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary2 = /^0b[01]+$/i;
      var reIsOctal2 = /^0o[0-7]+$/i;
      var freeParseInt2 = parseInt;
      function toNumber2(value2) {
        if (typeof value2 == "number") {
          return value2;
        }
        if (isSymbol2(value2)) {
          return NAN2;
        }
        if (isObject2(value2)) {
          var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
          value2 = isObject2(other) ? other + "" : other;
        }
        if (typeof value2 != "string") {
          return value2 === 0 ? value2 : +value2;
        }
        value2 = baseTrim2(value2);
        var isBinary2 = reIsBinary2.test(value2);
        return isBinary2 || reIsOctal2.test(value2) ? freeParseInt2(value2.slice(2), isBinary2 ? 2 : 8) : reIsBadHex2.test(value2) ? NAN2 : +value2;
      }
      module2.exports = toNumber2;
    }
  });

  // node_modules/lodash/debounce.js
  var require_debounce = __commonJS({
    "node_modules/lodash/debounce.js"(exports, module2) {
      var isObject2 = require_isObject();
      var now2 = require_now();
      var toNumber2 = require_toNumber();
      var FUNC_ERROR_TEXT2 = "Expected a function";
      var nativeMax2 = Math.max;
      var nativeMin2 = Math.min;
      function debounce2(func2, wait2, options2) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT2);
        }
        wait2 = toNumber2(wait2) || 0;
        if (isObject2(options2)) {
          leading = !!options2.leading;
          maxing = "maxWait" in options2;
          maxWait = maxing ? nativeMax2(toNumber2(options2.maxWait) || 0, wait2) : maxWait;
          trailing = "trailing" in options2 ? !!options2.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time2;
          result = func2.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout(timerExpired, wait2);
          return leading ? invokeFunc(time2) : result;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait2 - timeSinceLastCall;
          return maxing ? nativeMin2(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait2 || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now2();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush2() {
          return timerId === void 0 ? result : trailingEdge(now2());
        }
        function debounced() {
          var time2 = now2(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait2);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait2);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush2;
        return debounced;
      }
      module2.exports = debounce2;
    }
  });

  // node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/parse.js"(exports, module2) {
      var openParentheses = "(".charCodeAt(0);
      var closeParentheses = ")".charCodeAt(0);
      var singleQuote = "'".charCodeAt(0);
      var doubleQuote = '"'.charCodeAt(0);
      var backslash = "\\".charCodeAt(0);
      var slash = "/".charCodeAt(0);
      var comma = ",".charCodeAt(0);
      var colon = ":".charCodeAt(0);
      var star = "*".charCodeAt(0);
      module2.exports = function(input) {
        var tokens = [];
        var value2 = input;
        var next, quote, prev2, token, escape, escapePos, whitespacePos;
        var pos = 0;
        var code = value2.charCodeAt(pos);
        var max2 = value2.length;
        var stack = [{ nodes: tokens }];
        var balanced = 0;
        var parent;
        var name = "";
        var before = "";
        var after = "";
        while (pos < max2) {
          if (code <= 32) {
            next = pos;
            do {
              next += 1;
              code = value2.charCodeAt(next);
            } while (code <= 32);
            token = value2.slice(pos, next);
            prev2 = tokens[tokens.length - 1];
            if (code === closeParentheses && balanced) {
              after = token;
            } else if (prev2 && prev2.type === "div") {
              prev2.after = token;
            } else if (code === comma || code === colon || code === slash && value2.charCodeAt(next + 1) !== star) {
              before = token;
            } else {
              tokens.push({
                type: "space",
                sourceIndex: pos,
                value: token
              });
            }
            pos = next;
          } else if (code === singleQuote || code === doubleQuote) {
            next = pos;
            quote = code === singleQuote ? "'" : '"';
            token = {
              type: "string",
              sourceIndex: pos,
              quote
            };
            do {
              escape = false;
              next = value2.indexOf(quote, next + 1);
              if (~next) {
                escapePos = next;
                while (value2.charCodeAt(escapePos - 1) === backslash) {
                  escapePos -= 1;
                  escape = !escape;
                }
              } else {
                value2 += quote;
                next = value2.length - 1;
                token.unclosed = true;
              }
            } while (escape);
            token.value = value2.slice(pos + 1, next);
            tokens.push(token);
            pos = next + 1;
            code = value2.charCodeAt(pos);
          } else if (code === slash && value2.charCodeAt(pos + 1) === star) {
            token = {
              type: "comment",
              sourceIndex: pos
            };
            next = value2.indexOf("*/", pos);
            if (next === -1) {
              token.unclosed = true;
              next = value2.length;
            }
            token.value = value2.slice(pos + 2, next);
            tokens.push(token);
            pos = next + 2;
            code = value2.charCodeAt(pos);
          } else if (code === slash || code === comma || code === colon) {
            token = value2[pos];
            tokens.push({
              type: "div",
              sourceIndex: pos - before.length,
              value: token,
              before,
              after: ""
            });
            before = "";
            pos += 1;
            code = value2.charCodeAt(pos);
          } else if (openParentheses === code) {
            next = pos;
            do {
              next += 1;
              code = value2.charCodeAt(next);
            } while (code <= 32);
            token = {
              type: "function",
              sourceIndex: pos - name.length,
              value: name,
              before: value2.slice(pos + 1, next)
            };
            pos = next;
            if (name === "url" && code !== singleQuote && code !== doubleQuote) {
              next -= 1;
              do {
                escape = false;
                next = value2.indexOf(")", next + 1);
                if (~next) {
                  escapePos = next;
                  while (value2.charCodeAt(escapePos - 1) === backslash) {
                    escapePos -= 1;
                    escape = !escape;
                  }
                } else {
                  value2 += ")";
                  next = value2.length - 1;
                  token.unclosed = true;
                }
              } while (escape);
              whitespacePos = next;
              do {
                whitespacePos -= 1;
                code = value2.charCodeAt(whitespacePos);
              } while (code <= 32);
              if (pos !== whitespacePos + 1) {
                token.nodes = [
                  {
                    type: "word",
                    sourceIndex: pos,
                    value: value2.slice(pos, whitespacePos + 1)
                  }
                ];
              } else {
                token.nodes = [];
              }
              if (token.unclosed && whitespacePos + 1 !== next) {
                token.after = "";
                token.nodes.push({
                  type: "space",
                  sourceIndex: whitespacePos + 1,
                  value: value2.slice(whitespacePos + 1, next)
                });
              } else {
                token.after = value2.slice(whitespacePos + 1, next);
              }
              pos = next + 1;
              code = value2.charCodeAt(pos);
              tokens.push(token);
            } else {
              balanced += 1;
              token.after = "";
              tokens.push(token);
              stack.push(token);
              tokens = token.nodes = [];
              parent = token;
            }
            name = "";
          } else if (closeParentheses === code && balanced) {
            pos += 1;
            code = value2.charCodeAt(pos);
            parent.after = after;
            after = "";
            balanced -= 1;
            stack.pop();
            parent = stack[balanced];
            tokens = parent.nodes;
          } else {
            next = pos;
            do {
              if (code === backslash) {
                next += 1;
              }
              next += 1;
              code = value2.charCodeAt(next);
            } while (next < max2 && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === closeParentheses && balanced));
            token = value2.slice(pos, next);
            if (openParentheses === code) {
              name = token;
            } else {
              tokens.push({
                type: "word",
                sourceIndex: pos,
                value: token
              });
            }
            pos = next;
          }
        }
        for (pos = stack.length - 1; pos; pos -= 1) {
          stack[pos].unclosed = true;
        }
        return stack[0].nodes;
      };
    }
  });

  // node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/walk.js
  var require_walk = __commonJS({
    "node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/walk.js"(exports, module2) {
      module2.exports = function walk(nodes, cb, bubble) {
        var i3, max2, node, result;
        for (i3 = 0, max2 = nodes.length; i3 < max2; i3 += 1) {
          node = nodes[i3];
          if (!bubble) {
            result = cb(node, i3, nodes);
          }
          if (result !== false && node.type === "function" && Array.isArray(node.nodes)) {
            walk(node.nodes, cb, bubble);
          }
          if (bubble) {
            cb(node, i3, nodes);
          }
        }
      };
    }
  });

  // node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/stringify.js"(exports, module2) {
      function stringifyNode(node, custom) {
        var type = node.type;
        var value2 = node.value;
        var buf;
        var customResult;
        if (custom && (customResult = custom(node)) !== void 0) {
          return customResult;
        } else if (type === "word" || type === "space") {
          return value2;
        } else if (type === "string") {
          buf = node.quote || "";
          return buf + value2 + (node.unclosed ? "" : buf);
        } else if (type === "comment") {
          return "/*" + value2 + (node.unclosed ? "" : "*/");
        } else if (type === "div") {
          return (node.before || "") + value2 + (node.after || "");
        } else if (Array.isArray(node.nodes)) {
          buf = stringify(node.nodes);
          if (type !== "function") {
            return buf;
          }
          return value2 + "(" + (node.before || "") + buf + (node.after || "") + (node.unclosed ? "" : ")");
        }
        return value2;
      }
      function stringify(nodes, custom) {
        var result, i3;
        if (Array.isArray(nodes)) {
          result = "";
          for (i3 = nodes.length - 1; ~i3; i3 -= 1) {
            result = stringifyNode(nodes[i3], custom) + result;
          }
          return result;
        }
        return stringifyNode(nodes, custom);
      }
      module2.exports = stringify;
    }
  });

  // node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/unit.js
  var require_unit = __commonJS({
    "node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/unit.js"(exports, module2) {
      var minus = "-".charCodeAt(0);
      var plus = "+".charCodeAt(0);
      var dot = ".".charCodeAt(0);
      var exp = "e".charCodeAt(0);
      var EXP = "E".charCodeAt(0);
      module2.exports = function(value2) {
        var pos = 0;
        var length2 = value2.length;
        var dotted = false;
        var sciPos = -1;
        var containsNumber = false;
        var code;
        while (pos < length2) {
          code = value2.charCodeAt(pos);
          if (code >= 48 && code <= 57) {
            containsNumber = true;
          } else if (code === exp || code === EXP) {
            if (sciPos > -1) {
              break;
            }
            sciPos = pos;
          } else if (code === dot) {
            if (dotted) {
              break;
            }
            dotted = true;
          } else if (code === plus || code === minus) {
            if (pos !== 0) {
              break;
            }
          } else {
            break;
          }
          pos += 1;
        }
        if (sciPos + 1 === pos)
          pos--;
        return containsNumber ? {
          number: value2.slice(0, pos),
          unit: value2.slice(pos)
        } : false;
      };
    }
  });

  // node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/reduce-css-calc/node_modules/postcss-value-parser/lib/index.js"(exports, module2) {
      var parse2 = require_parse();
      var walk = require_walk();
      var stringify = require_stringify();
      function ValueParser(value2) {
        if (this instanceof ValueParser) {
          this.nodes = parse2(value2);
          return this;
        }
        return new ValueParser(value2);
      }
      ValueParser.prototype.toString = function() {
        return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
      };
      ValueParser.prototype.walk = function(cb, bubble) {
        walk(this.nodes, cb, bubble);
        return this;
      };
      ValueParser.unit = require_unit();
      ValueParser.walk = walk;
      ValueParser.stringify = stringify;
      module2.exports = ValueParser;
    }
  });

  // node_modules/reduce-css-calc/dist/parser.js
  var require_parser2 = __commonJS({
    "node_modules/reduce-css-calc/dist/parser.js"(exports) {
      var parser = function() {
        function JisonParserError(msg, hash) {
          Object.defineProperty(this, "name", {
            enumerable: false,
            writable: false,
            value: "JisonParserError"
          });
          if (msg == null)
            msg = "???";
          Object.defineProperty(this, "message", {
            enumerable: false,
            writable: true,
            value: msg
          });
          this.hash = hash;
          var stacktrace;
          if (hash && hash.exception instanceof Error) {
            var ex2 = hash.exception;
            this.message = ex2.message || msg;
            stacktrace = ex2.stack;
          }
          if (!stacktrace) {
            if (Error.hasOwnProperty("captureStackTrace")) {
              Error.captureStackTrace(this, this.constructor);
            } else {
              stacktrace = new Error(msg).stack;
            }
          }
          if (stacktrace) {
            Object.defineProperty(this, "stack", {
              enumerable: false,
              writable: false,
              value: stacktrace
            });
          }
        }
        if (typeof Object.setPrototypeOf === "function") {
          Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
        } else {
          JisonParserError.prototype = Object.create(Error.prototype);
        }
        JisonParserError.prototype.constructor = JisonParserError;
        JisonParserError.prototype.name = "JisonParserError";
        function bp(s4) {
          var rv = [];
          var p2 = s4.pop;
          var r = s4.rule;
          for (var i3 = 0, l2 = p2.length; i3 < l2; i3++) {
            rv.push([
              p2[i3],
              r[i3]
            ]);
          }
          return rv;
        }
        function bda(s4) {
          var rv = {};
          var d3 = s4.idx;
          var g3 = s4.goto;
          for (var i3 = 0, l2 = d3.length; i3 < l2; i3++) {
            var j3 = d3[i3];
            rv[j3] = g3[i3];
          }
          return rv;
        }
        function bt(s4) {
          var rv = [];
          var d3 = s4.len;
          var y2 = s4.symbol;
          var t2 = s4.type;
          var a3 = s4.state;
          var m3 = s4.mode;
          var g3 = s4.goto;
          for (var i3 = 0, l2 = d3.length; i3 < l2; i3++) {
            var n3 = d3[i3];
            var q2 = {};
            for (var j3 = 0; j3 < n3; j3++) {
              var z = y2.shift();
              switch (t2.shift()) {
                case 2:
                  q2[z] = [
                    m3.shift(),
                    g3.shift()
                  ];
                  break;
                case 0:
                  q2[z] = a3.shift();
                  break;
                default:
                  q2[z] = [
                    3
                  ];
              }
            }
            rv.push(q2);
          }
          return rv;
        }
        function s3(c4, l2, a3) {
          a3 = a3 || 0;
          for (var i3 = 0; i3 < l2; i3++) {
            this.push(c4);
            c4 += a3;
          }
        }
        function c3(i3, l2) {
          i3 = this.length - i3;
          for (l2 += i3; i3 < l2; i3++) {
            this.push(this[i3]);
          }
        }
        function u3(a3) {
          var rv = [];
          for (var i3 = 0, l2 = a3.length; i3 < l2; i3++) {
            var e3 = a3[i3];
            if (typeof e3 === "function") {
              i3++;
              e3.apply(rv, a3[i3]);
            } else {
              rv.push(e3);
            }
          }
          return rv;
        }
        var parser2 = {
          trace: function no_op_trace() {
          },
          JisonParserError,
          yy: {},
          options: {
            type: "lalr",
            hasPartialLrUpgradeOnConflict: true,
            errorRecoveryTokenDiscardCount: 3
          },
          symbols_: {
            "$accept": 0,
            "$end": 1,
            "ADD": 3,
            "ANGLE": 16,
            "CHS": 22,
            "COMMA": 14,
            "CSS_CPROP": 13,
            "CSS_VAR": 12,
            "DIV": 6,
            "EMS": 20,
            "EOF": 1,
            "EXS": 21,
            "FREQ": 18,
            "LENGTH": 15,
            "LPAREN": 7,
            "MUL": 5,
            "NESTED_CALC": 9,
            "NUMBER": 11,
            "PERCENTAGE": 28,
            "PREFIX": 10,
            "REMS": 23,
            "RES": 19,
            "RPAREN": 8,
            "SUB": 4,
            "TIME": 17,
            "VHS": 24,
            "VMAXS": 27,
            "VMINS": 26,
            "VWS": 25,
            "css_value": 33,
            "css_variable": 32,
            "error": 2,
            "expression": 29,
            "math_expression": 30,
            "value": 31
          },
          terminals_: {
            1: "EOF",
            2: "error",
            3: "ADD",
            4: "SUB",
            5: "MUL",
            6: "DIV",
            7: "LPAREN",
            8: "RPAREN",
            9: "NESTED_CALC",
            10: "PREFIX",
            11: "NUMBER",
            12: "CSS_VAR",
            13: "CSS_CPROP",
            14: "COMMA",
            15: "LENGTH",
            16: "ANGLE",
            17: "TIME",
            18: "FREQ",
            19: "RES",
            20: "EMS",
            21: "EXS",
            22: "CHS",
            23: "REMS",
            24: "VHS",
            25: "VWS",
            26: "VMINS",
            27: "VMAXS",
            28: "PERCENTAGE"
          },
          TERROR: 2,
          EOF: 1,
          originalQuoteName: null,
          originalParseError: null,
          cleanupAfterParse: null,
          constructParseErrorInfo: null,
          yyMergeLocationInfo: null,
          __reentrant_call_depth: 0,
          __error_infos: [],
          __error_recovery_infos: [],
          quoteName: function parser_quoteName(id_str) {
            return '"' + id_str + '"';
          },
          getSymbolName: function parser_getSymbolName(symbol) {
            if (this.terminals_[symbol]) {
              return this.terminals_[symbol];
            }
            var s4 = this.symbols_;
            for (var key in s4) {
              if (s4[key] === symbol) {
                return key;
              }
            }
            return null;
          },
          describeSymbol: function parser_describeSymbol(symbol) {
            if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
              return this.terminal_descriptions_[symbol];
            } else if (symbol === this.EOF) {
              return "end of input";
            }
            var id = this.getSymbolName(symbol);
            if (id) {
              return this.quoteName(id);
            }
            return null;
          },
          collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
            var TERROR = this.TERROR;
            var tokenset = [];
            var check = {};
            if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
              return [
                this.state_descriptions_[state]
              ];
            }
            for (var p2 in this.table[state]) {
              p2 = +p2;
              if (p2 !== TERROR) {
                var d3 = do_not_describe ? p2 : this.describeSymbol(p2);
                if (d3 && !check[d3]) {
                  tokenset.push(d3);
                  check[d3] = true;
                }
              }
            }
            return tokenset;
          },
          productions_: bp({
            pop: u3([
              29,
              s3,
              [30, 10],
              31,
              31,
              32,
              32,
              s3,
              [33, 15]
            ]),
            rule: u3([
              2,
              s3,
              [3, 5],
              4,
              7,
              s3,
              [1, 4],
              2,
              4,
              6,
              s3,
              [1, 14],
              2
            ])
          }),
          performAction: function parser__PerformAction(yystate, yysp, yyvstack) {
            var yy = this.yy;
            var yyparser = yy.parser;
            var yylexer = yy.lexer;
            switch (yystate) {
              case 0:
                this.$ = yyvstack[yysp - 1];
                break;
              case 1:
                this.$ = yyvstack[yysp - 1];
                return yyvstack[yysp - 1];
                break;
              case 2:
              case 3:
              case 4:
              case 5:
                this.$ = { type: "MathExpression", operator: yyvstack[yysp - 1], left: yyvstack[yysp - 2], right: yyvstack[yysp] };
                break;
              case 6:
                this.$ = yyvstack[yysp - 1];
                break;
              case 7:
                this.$ = { type: "Calc", value: yyvstack[yysp - 1] };
                break;
              case 8:
                this.$ = { type: "Calc", value: yyvstack[yysp - 1], prefix: yyvstack[yysp - 5] };
                break;
              case 9:
              case 10:
              case 11:
                this.$ = yyvstack[yysp];
                break;
              case 12:
                this.$ = { type: "Value", value: parseFloat(yyvstack[yysp]) };
                break;
              case 13:
                this.$ = { type: "Value", value: parseFloat(yyvstack[yysp]) * -1 };
                break;
              case 14:
                this.$ = { type: "CssVariable", value: yyvstack[yysp - 1] };
                break;
              case 15:
                this.$ = { type: "CssVariable", value: yyvstack[yysp - 3], fallback: yyvstack[yysp - 1] };
                break;
              case 16:
                this.$ = { type: "LengthValue", value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
                break;
              case 17:
                this.$ = { type: "AngleValue", value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
                break;
              case 18:
                this.$ = { type: "TimeValue", value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
                break;
              case 19:
                this.$ = { type: "FrequencyValue", value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
                break;
              case 20:
                this.$ = { type: "ResolutionValue", value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
                break;
              case 21:
                this.$ = { type: "EmValue", value: parseFloat(yyvstack[yysp]), unit: "em" };
                break;
              case 22:
                this.$ = { type: "ExValue", value: parseFloat(yyvstack[yysp]), unit: "ex" };
                break;
              case 23:
                this.$ = { type: "ChValue", value: parseFloat(yyvstack[yysp]), unit: "ch" };
                break;
              case 24:
                this.$ = { type: "RemValue", value: parseFloat(yyvstack[yysp]), unit: "rem" };
                break;
              case 25:
                this.$ = { type: "VhValue", value: parseFloat(yyvstack[yysp]), unit: "vh" };
                break;
              case 26:
                this.$ = { type: "VwValue", value: parseFloat(yyvstack[yysp]), unit: "vw" };
                break;
              case 27:
                this.$ = { type: "VminValue", value: parseFloat(yyvstack[yysp]), unit: "vmin" };
                break;
              case 28:
                this.$ = { type: "VmaxValue", value: parseFloat(yyvstack[yysp]), unit: "vmax" };
                break;
              case 29:
                this.$ = { type: "PercentageValue", value: parseFloat(yyvstack[yysp]), unit: "%" };
                break;
              case 30:
                var prev2 = yyvstack[yysp];
                prev2.value *= -1;
                this.$ = prev2;
                break;
            }
          },
          table: bt({
            len: u3([
              24,
              1,
              5,
              23,
              1,
              18,
              s3,
              [0, 3],
              1,
              s3,
              [0, 16],
              s3,
              [23, 4],
              c3,
              [28, 3],
              0,
              0,
              16,
              1,
              6,
              6,
              s3,
              [0, 3],
              5,
              1,
              2,
              c3,
              [37, 3],
              c3,
              [20, 3],
              5,
              0,
              0
            ]),
            symbol: u3([
              4,
              7,
              9,
              11,
              12,
              s3,
              [15, 19, 1],
              1,
              1,
              s3,
              [3, 4, 1],
              c3,
              [30, 19],
              c3,
              [29, 4],
              7,
              4,
              10,
              11,
              c3,
              [22, 14],
              c3,
              [19, 3],
              c3,
              [43, 22],
              c3,
              [23, 69],
              c3,
              [139, 4],
              8,
              c3,
              [51, 24],
              4,
              c3,
              [138, 15],
              13,
              c3,
              [186, 5],
              8,
              c3,
              [6, 6],
              c3,
              [5, 5],
              9,
              8,
              14,
              c3,
              [159, 47],
              c3,
              [60, 10]
            ]),
            type: u3([
              s3,
              [2, 19],
              s3,
              [0, 5],
              1,
              s3,
              [2, 24],
              s3,
              [0, 4],
              c3,
              [22, 19],
              c3,
              [43, 42],
              c3,
              [23, 70],
              c3,
              [28, 25],
              c3,
              [45, 25],
              c3,
              [113, 54]
            ]),
            state: u3([
              1,
              2,
              8,
              6,
              7,
              30,
              c3,
              [4, 3],
              33,
              37,
              c3,
              [5, 3],
              38,
              c3,
              [4, 3],
              39,
              c3,
              [4, 3],
              40,
              c3,
              [4, 3],
              42,
              c3,
              [21, 4],
              50,
              c3,
              [5, 3],
              51,
              c3,
              [4, 3]
            ]),
            mode: u3([
              s3,
              [1, 179],
              s3,
              [2, 3],
              c3,
              [5, 5],
              c3,
              [6, 4],
              s3,
              [1, 57]
            ]),
            goto: u3([
              5,
              3,
              4,
              24,
              s3,
              [9, 15, 1],
              s3,
              [25, 5, 1],
              c3,
              [24, 19],
              31,
              35,
              32,
              34,
              c3,
              [18, 14],
              36,
              c3,
              [38, 19],
              c3,
              [19, 57],
              c3,
              [118, 4],
              41,
              c3,
              [24, 19],
              43,
              35,
              c3,
              [16, 14],
              44,
              s3,
              [2, 3],
              28,
              29,
              2,
              s3,
              [3, 3],
              28,
              29,
              3,
              c3,
              [53, 4],
              s3,
              [45, 5, 1],
              c3,
              [100, 42],
              52,
              c3,
              [5, 4],
              53
            ])
          }),
          defaultActions: bda({
            idx: u3([
              6,
              7,
              8,
              s3,
              [10, 16, 1],
              33,
              34,
              39,
              40,
              41,
              45,
              47,
              52,
              53
            ]),
            goto: u3([
              9,
              10,
              11,
              s3,
              [16, 14, 1],
              12,
              1,
              30,
              13,
              s3,
              [4, 4, 1],
              14,
              15,
              8
            ])
          }),
          parseError: function parseError(str, hash, ExceptionClass) {
            if (hash.recoverable) {
              if (typeof this.trace === "function") {
                this.trace(str);
              }
              hash.destroy();
            } else {
              if (typeof this.trace === "function") {
                this.trace(str);
              }
              if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
              }
              throw new ExceptionClass(str, hash);
            }
          },
          parse: function parse2(input) {
            var self2 = this;
            var stack = new Array(128);
            var sstack = new Array(128);
            var vstack = new Array(128);
            var table = this.table;
            var sp = 0;
            var symbol = 0;
            var TERROR = this.TERROR;
            var EOF = this.EOF;
            var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = this.options.errorRecoveryTokenDiscardCount | 0 || 3;
            var NO_ACTION = [0, 54];
            var lexer2;
            if (this.__lexer__) {
              lexer2 = this.__lexer__;
            } else {
              lexer2 = this.__lexer__ = Object.create(this.lexer);
            }
            var sharedState_yy = {
              parseError: void 0,
              quoteName: void 0,
              lexer: void 0,
              parser: void 0,
              pre_parse: void 0,
              post_parse: void 0,
              pre_lex: void 0,
              post_lex: void 0
            };
            var ASSERT;
            if (typeof assert !== "function") {
              ASSERT = function JisonAssert(cond, msg) {
                if (!cond) {
                  throw new Error("assertion failed: " + (msg || "***"));
                }
              };
            } else {
              ASSERT = assert;
            }
            this.yyGetSharedState = function yyGetSharedState() {
              return sharedState_yy;
            };
            function shallow_copy_noclobber(dst, src) {
              for (var k3 in src) {
                if (typeof dst[k3] === "undefined" && Object.prototype.hasOwnProperty.call(src, k3)) {
                  dst[k3] = src[k3];
                }
              }
            }
            shallow_copy_noclobber(sharedState_yy, this.yy);
            sharedState_yy.lexer = lexer2;
            sharedState_yy.parser = this;
            if (typeof sharedState_yy.parseError === "function") {
              this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
                if (!ExceptionClass) {
                  ExceptionClass = this.JisonParserError;
                }
                return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
              };
            } else {
              this.parseError = this.originalParseError;
            }
            if (typeof sharedState_yy.quoteName === "function") {
              this.quoteName = function quoteNameAlt(id_str) {
                return sharedState_yy.quoteName.call(this, id_str);
              };
            } else {
              this.quoteName = this.originalQuoteName;
            }
            this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
              var rv;
              if (invoke_post_methods) {
                var hash;
                if (sharedState_yy.post_parse || this.post_parse) {
                  hash = this.constructParseErrorInfo(null, null, null, false);
                }
                if (sharedState_yy.post_parse) {
                  rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                  if (typeof rv !== "undefined")
                    resultValue = rv;
                }
                if (this.post_parse) {
                  rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                  if (typeof rv !== "undefined")
                    resultValue = rv;
                }
                if (hash && hash.destroy) {
                  hash.destroy();
                }
              }
              if (this.__reentrant_call_depth > 1)
                return resultValue;
              if (lexer2.cleanupAfterLex) {
                lexer2.cleanupAfterLex(do_not_nuke_errorinfos);
              }
              if (sharedState_yy) {
                sharedState_yy.lexer = void 0;
                sharedState_yy.parser = void 0;
                if (lexer2.yy === sharedState_yy) {
                  lexer2.yy = void 0;
                }
              }
              sharedState_yy = void 0;
              this.parseError = this.originalParseError;
              this.quoteName = this.originalQuoteName;
              stack.length = 0;
              sstack.length = 0;
              vstack.length = 0;
              sp = 0;
              if (!do_not_nuke_errorinfos) {
                for (var i3 = this.__error_infos.length - 1; i3 >= 0; i3--) {
                  var el = this.__error_infos[i3];
                  if (el && typeof el.destroy === "function") {
                    el.destroy();
                  }
                }
                this.__error_infos.length = 0;
              }
              return resultValue;
            };
            this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected2, recoverable) {
              var pei = {
                errStr: msg,
                exception: ex,
                text: lexer2.match,
                value: lexer2.yytext,
                token: this.describeSymbol(symbol) || symbol,
                token_id: symbol,
                line: lexer2.yylineno,
                expected: expected2,
                recoverable,
                state,
                action,
                new_state: newState,
                symbol_stack: stack,
                state_stack: sstack,
                value_stack: vstack,
                stack_pointer: sp,
                yy: sharedState_yy,
                lexer: lexer2,
                parser: this,
                destroy: function destructParseErrorInfo() {
                  var rec = !!this.recoverable;
                  for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === "object") {
                      this[key] = void 0;
                    }
                  }
                  this.recoverable = rec;
                }
              };
              this.__error_infos.push(pei);
              return pei;
            };
            function getNonTerminalFromCode(symbol2) {
              var tokenName = self2.getSymbolName(symbol2);
              if (!tokenName) {
                tokenName = symbol2;
              }
              return tokenName;
            }
            function stdLex() {
              var token = lexer2.lex();
              if (typeof token !== "number") {
                token = self2.symbols_[token] || token;
              }
              return token || EOF;
            }
            function fastLex() {
              var token = lexer2.fastLex();
              if (typeof token !== "number") {
                token = self2.symbols_[token] || token;
              }
              return token || EOF;
            }
            var lex = stdLex;
            var state, action, r, t2;
            var yyval = {
              $: true,
              _$: void 0,
              yy: sharedState_yy
            };
            var p2;
            var yyrulelen;
            var this_production;
            var newState;
            var retval = false;
            try {
              this.__reentrant_call_depth++;
              lexer2.setInput(input, sharedState_yy);
              if (typeof lexer2.canIUse === "function") {
                var lexerInfo = lexer2.canIUse();
                if (lexerInfo.fastLex && typeof fastLex === "function") {
                  lex = fastLex;
                }
              }
              vstack[sp] = null;
              sstack[sp] = 0;
              stack[sp] = 0;
              ++sp;
              if (this.pre_parse) {
                this.pre_parse.call(this, sharedState_yy);
              }
              if (sharedState_yy.pre_parse) {
                sharedState_yy.pre_parse.call(this, sharedState_yy);
              }
              newState = sstack[sp - 1];
              for (; ; ) {
                state = newState;
                if (this.defaultActions[state]) {
                  action = 2;
                  newState = this.defaultActions[state];
                } else {
                  if (!symbol) {
                    symbol = lex();
                  }
                  t2 = table[state] && table[state][symbol] || NO_ACTION;
                  newState = t2[1];
                  action = t2[0];
                  if (!action) {
                    var errStr;
                    var errSymbolDescr = this.describeSymbol(symbol) || symbol;
                    var expected = this.collect_expected_token_set(state);
                    if (typeof lexer2.yylineno === "number") {
                      errStr = "Parse error on line " + (lexer2.yylineno + 1) + ": ";
                    } else {
                      errStr = "Parse error: ";
                    }
                    if (typeof lexer2.showPosition === "function") {
                      errStr += "\n" + lexer2.showPosition(79 - 10, 10) + "\n";
                    }
                    if (expected.length) {
                      errStr += "Expecting " + expected.join(", ") + ", got unexpected " + errSymbolDescr;
                    } else {
                      errStr += "Unexpected " + errSymbolDescr;
                    }
                    p2 = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p2.errStr, p2, this.JisonParserError);
                    if (typeof r !== "undefined") {
                      retval = r;
                    }
                    break;
                  }
                }
                switch (action) {
                  default:
                    if (action instanceof Array) {
                      p2 = this.constructParseErrorInfo("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol, null, null, false);
                      r = this.parseError(p2.errStr, p2, this.JisonParserError);
                      if (typeof r !== "undefined") {
                        retval = r;
                      }
                      break;
                    }
                    p2 = this.constructParseErrorInfo("Parsing halted. No viable error recovery approach available due to internal system failure.", null, null, false);
                    r = this.parseError(p2.errStr, p2, this.JisonParserError);
                    if (typeof r !== "undefined") {
                      retval = r;
                    }
                    break;
                  case 1:
                    stack[sp] = symbol;
                    vstack[sp] = lexer2.yytext;
                    sstack[sp] = newState;
                    ++sp;
                    symbol = 0;
                    continue;
                  case 2:
                    this_production = this.productions_[newState - 1];
                    yyrulelen = this_production[1];
                    r = this.performAction.call(yyval, newState, sp - 1, vstack);
                    if (typeof r !== "undefined") {
                      retval = r;
                      break;
                    }
                    sp -= yyrulelen;
                    var ntsymbol = this_production[0];
                    stack[sp] = ntsymbol;
                    vstack[sp] = yyval.$;
                    newState = table[sstack[sp - 1]][ntsymbol];
                    sstack[sp] = newState;
                    ++sp;
                    continue;
                  case 3:
                    if (sp !== -2) {
                      retval = true;
                      sp--;
                      if (typeof vstack[sp] !== "undefined") {
                        retval = vstack[sp];
                      }
                    }
                    break;
                }
                break;
              }
            } catch (ex) {
              if (ex instanceof this.JisonParserError) {
                throw ex;
              } else if (lexer2 && typeof lexer2.JisonLexerError === "function" && ex instanceof lexer2.JisonLexerError) {
                throw ex;
              }
              p2 = this.constructParseErrorInfo("Parsing aborted due to exception.", ex, null, false);
              retval = false;
              r = this.parseError(p2.errStr, p2, this.JisonParserError);
              if (typeof r !== "undefined") {
                retval = r;
              }
            } finally {
              retval = this.cleanupAfterParse(retval, true, true);
              this.__reentrant_call_depth--;
            }
            return retval;
          }
        };
        parser2.originalParseError = parser2.parseError;
        parser2.originalQuoteName = parser2.quoteName;
        var lexer = function() {
          function JisonLexerError(msg, hash) {
            Object.defineProperty(this, "name", {
              enumerable: false,
              writable: false,
              value: "JisonLexerError"
            });
            if (msg == null)
              msg = "???";
            Object.defineProperty(this, "message", {
              enumerable: false,
              writable: true,
              value: msg
            });
            this.hash = hash;
            var stacktrace;
            if (hash && hash.exception instanceof Error) {
              var ex2 = hash.exception;
              this.message = ex2.message || msg;
              stacktrace = ex2.stack;
            }
            if (!stacktrace) {
              if (Error.hasOwnProperty("captureStackTrace")) {
                Error.captureStackTrace(this, this.constructor);
              } else {
                stacktrace = new Error(msg).stack;
              }
            }
            if (stacktrace) {
              Object.defineProperty(this, "stack", {
                enumerable: false,
                writable: false,
                value: stacktrace
              });
            }
          }
          if (typeof Object.setPrototypeOf === "function") {
            Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
          } else {
            JisonLexerError.prototype = Object.create(Error.prototype);
          }
          JisonLexerError.prototype.constructor = JisonLexerError;
          JisonLexerError.prototype.name = "JisonLexerError";
          var lexer2 = {
            EOF: 1,
            ERROR: 2,
            __currentRuleSet__: null,
            __error_infos: [],
            __decompressed: false,
            done: false,
            _backtrack: false,
            _input: "",
            _more: false,
            _signaled_error_token: false,
            conditionStack: [],
            match: "",
            matched: "",
            matches: false,
            yytext: "",
            offset: 0,
            yyleng: 0,
            yylineno: 0,
            yylloc: null,
            constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
              msg = "" + msg;
              if (show_input_position == void 0) {
                show_input_position = !(msg.indexOf("\n") > 0 && msg.indexOf("^") > 0);
              }
              if (this.yylloc && show_input_position) {
                if (typeof this.prettyPrintRange === "function") {
                  var pretty_src = this.prettyPrintRange(this.yylloc);
                  if (!/\n\s*$/.test(msg)) {
                    msg += "\n";
                  }
                  msg += "\n  Erroneous area:\n" + this.prettyPrintRange(this.yylloc);
                } else if (typeof this.showPosition === "function") {
                  var pos_str = this.showPosition();
                  if (pos_str) {
                    if (msg.length && msg[msg.length - 1] !== "\n" && pos_str[0] !== "\n") {
                      msg += "\n" + pos_str;
                    } else {
                      msg += pos_str;
                    }
                  }
                }
              }
              var pei = {
                errStr: msg,
                recoverable: !!recoverable,
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                yy: this.yy,
                lexer: this,
                destroy: function destructLexErrorInfo() {
                  var rec = !!this.recoverable;
                  for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === "object") {
                      this[key] = void 0;
                    }
                  }
                  this.recoverable = rec;
                }
              };
              this.__error_infos.push(pei);
              return pei;
            },
            parseError: function lexer_parseError(str, hash, ExceptionClass) {
              if (!ExceptionClass) {
                ExceptionClass = this.JisonLexerError;
              }
              if (this.yy) {
                if (this.yy.parser && typeof this.yy.parser.parseError === "function") {
                  return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
                } else if (typeof this.yy.parseError === "function") {
                  return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
                }
              }
              throw new ExceptionClass(str, hash);
            },
            yyerror: function yyError(str) {
              var lineno_msg = "";
              if (this.yylloc) {
                lineno_msg = " on line " + (this.yylineno + 1);
              }
              var p2 = this.constructLexErrorInfo("Lexical error" + lineno_msg + ": " + str, this.options.lexerErrorsAreRecoverable);
              var args = Array.prototype.slice.call(arguments, 1);
              if (args.length) {
                p2.extra_error_attributes = args;
              }
              return this.parseError(p2.errStr, p2, this.JisonLexerError) || this.ERROR;
            },
            cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
              this.setInput("", {});
              if (!do_not_nuke_errorinfos) {
                for (var i3 = this.__error_infos.length - 1; i3 >= 0; i3--) {
                  var el = this.__error_infos[i3];
                  if (el && typeof el.destroy === "function") {
                    el.destroy();
                  }
                }
                this.__error_infos.length = 0;
              }
              return this;
            },
            clear: function lexer_clear() {
              this.yytext = "";
              this.yyleng = 0;
              this.match = "";
              this.matches = false;
              this._more = false;
              this._backtrack = false;
              var col = this.yylloc ? this.yylloc.last_column : 0;
              this.yylloc = {
                first_line: this.yylineno + 1,
                first_column: col,
                last_line: this.yylineno + 1,
                last_column: col,
                range: [this.offset, this.offset]
              };
            },
            setInput: function lexer_setInput(input, yy) {
              this.yy = yy || this.yy || {};
              if (!this.__decompressed) {
                var rules = this.rules;
                for (var i3 = 0, len = rules.length; i3 < len; i3++) {
                  var rule_re = rules[i3];
                  if (typeof rule_re === "number") {
                    rules[i3] = rules[rule_re];
                  }
                }
                var conditions = this.conditions;
                for (var k3 in conditions) {
                  var spec = conditions[k3];
                  var rule_ids = spec.rules;
                  var len = rule_ids.length;
                  var rule_regexes = new Array(len + 1);
                  var rule_new_ids = new Array(len + 1);
                  for (var i3 = 0; i3 < len; i3++) {
                    var idx = rule_ids[i3];
                    var rule_re = rules[idx];
                    rule_regexes[i3 + 1] = rule_re;
                    rule_new_ids[i3 + 1] = idx;
                  }
                  spec.rules = rule_new_ids;
                  spec.__rule_regexes = rule_regexes;
                  spec.__rule_count = len;
                }
                this.__decompressed = true;
              }
              this._input = input || "";
              this.clear();
              this._signaled_error_token = false;
              this.done = false;
              this.yylineno = 0;
              this.matched = "";
              this.conditionStack = ["INITIAL"];
              this.__currentRuleSet__ = null;
              this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [0, 0]
              };
              this.offset = 0;
              return this;
            },
            editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
              var rv = callback.call(this, this._input, cpsArg);
              if (typeof rv !== "string") {
                if (rv) {
                  this._input = "" + rv;
                }
              } else {
                this._input = rv;
              }
              return this;
            },
            input: function lexer_input() {
              if (!this._input) {
                return null;
              }
              var ch = this._input[0];
              this.yytext += ch;
              this.yyleng++;
              this.offset++;
              this.match += ch;
              this.matched += ch;
              var slice_len = 1;
              var lines = false;
              if (ch === "\n") {
                lines = true;
              } else if (ch === "\r") {
                lines = true;
                var ch2 = this._input[1];
                if (ch2 === "\n") {
                  slice_len++;
                  ch += ch2;
                  this.yytext += ch2;
                  this.yyleng++;
                  this.offset++;
                  this.match += ch2;
                  this.matched += ch2;
                  this.yylloc.range[1]++;
                }
              }
              if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
                this.yylloc.last_column = 0;
              } else {
                this.yylloc.last_column++;
              }
              this.yylloc.range[1]++;
              this._input = this._input.slice(slice_len);
              return ch;
            },
            unput: function lexer_unput(ch) {
              var len = ch.length;
              var lines = ch.split(/(?:\r\n?|\n)/g);
              this._input = ch + this._input;
              this.yytext = this.yytext.substr(0, this.yytext.length - len);
              this.yyleng = this.yytext.length;
              this.offset -= len;
              this.match = this.match.substr(0, this.match.length - len);
              this.matched = this.matched.substr(0, this.matched.length - len);
              if (lines.length > 1) {
                this.yylineno -= lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                var pre = this.match;
                var pre_lines = pre.split(/(?:\r\n?|\n)/g);
                if (pre_lines.length === 1) {
                  pre = this.matched;
                  pre_lines = pre.split(/(?:\r\n?|\n)/g);
                }
                this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
              } else {
                this.yylloc.last_column -= len;
              }
              this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
              this.done = false;
              return this;
            },
            more: function lexer_more() {
              this._more = true;
              return this;
            },
            reject: function lexer_reject() {
              if (this.options.backtrack_lexer) {
                this._backtrack = true;
              } else {
                var lineno_msg = "";
                if (this.yylloc) {
                  lineno_msg = " on line " + (this.yylineno + 1);
                }
                var p2 = this.constructLexErrorInfo("Lexical error" + lineno_msg + ": You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).", false);
                this._signaled_error_token = this.parseError(p2.errStr, p2, this.JisonLexerError) || this.ERROR;
              }
              return this;
            },
            less: function lexer_less(n3) {
              return this.unput(this.match.slice(n3));
            },
            pastInput: function lexer_pastInput(maxSize, maxLines) {
              var past = this.matched.substring(0, this.matched.length - this.match.length);
              if (maxSize < 0)
                maxSize = past.length;
              else if (!maxSize)
                maxSize = 20;
              if (maxLines < 0)
                maxLines = past.length;
              else if (!maxLines)
                maxLines = 1;
              past = past.substr(-maxSize * 2 - 2);
              var a3 = past.replace(/\r\n|\r/g, "\n").split("\n");
              a3 = a3.slice(-maxLines);
              past = a3.join("\n");
              if (past.length > maxSize) {
                past = "..." + past.substr(-maxSize);
              }
              return past;
            },
            upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
              var next = this.match;
              if (maxSize < 0)
                maxSize = next.length + this._input.length;
              else if (!maxSize)
                maxSize = 20;
              if (maxLines < 0)
                maxLines = maxSize;
              else if (!maxLines)
                maxLines = 1;
              if (next.length < maxSize * 2 + 2) {
                next += this._input.substring(0, maxSize * 2 + 2);
              }
              var a3 = next.replace(/\r\n|\r/g, "\n").split("\n");
              a3 = a3.slice(0, maxLines);
              next = a3.join("\n");
              if (next.length > maxSize) {
                next = next.substring(0, maxSize) + "...";
              }
              return next;
            },
            showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
              var pre = this.pastInput(maxPrefix).replace(/\s/g, " ");
              var c4 = new Array(pre.length + 1).join("-");
              return pre + this.upcomingInput(maxPostfix).replace(/\s/g, " ") + "\n" + c4 + "^";
            },
            deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
              var loc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [0, 0]
              };
              if (actual) {
                loc.first_line = actual.first_line | 0;
                loc.last_line = actual.last_line | 0;
                loc.first_column = actual.first_column | 0;
                loc.last_column = actual.last_column | 0;
                if (actual.range) {
                  loc.range[0] = actual.range[0] | 0;
                  loc.range[1] = actual.range[1] | 0;
                }
              }
              if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
                if (loc.first_line <= 0 && preceding) {
                  loc.first_line = preceding.last_line | 0;
                  loc.first_column = preceding.last_column | 0;
                  if (preceding.range) {
                    loc.range[0] = actual.range[1] | 0;
                  }
                }
                if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
                  loc.last_line = following.first_line | 0;
                  loc.last_column = following.first_column | 0;
                  if (following.range) {
                    loc.range[1] = actual.range[0] | 0;
                  }
                }
                if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
                  loc.first_line = current.first_line | 0;
                  loc.first_column = current.first_column | 0;
                  if (current.range) {
                    loc.range[0] = current.range[0] | 0;
                  }
                }
                if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
                  loc.last_line = current.last_line | 0;
                  loc.last_column = current.last_column | 0;
                  if (current.range) {
                    loc.range[1] = current.range[1] | 0;
                  }
                }
              }
              if (loc.last_line <= 0) {
                if (loc.first_line <= 0) {
                  loc.first_line = this.yylloc.first_line;
                  loc.last_line = this.yylloc.last_line;
                  loc.first_column = this.yylloc.first_column;
                  loc.last_column = this.yylloc.last_column;
                  loc.range[0] = this.yylloc.range[0];
                  loc.range[1] = this.yylloc.range[1];
                } else {
                  loc.last_line = this.yylloc.last_line;
                  loc.last_column = this.yylloc.last_column;
                  loc.range[1] = this.yylloc.range[1];
                }
              }
              if (loc.first_line <= 0) {
                loc.first_line = loc.last_line;
                loc.first_column = 0;
                loc.range[1] = loc.range[0];
              }
              if (loc.first_column < 0) {
                loc.first_column = 0;
              }
              if (loc.last_column < 0) {
                loc.last_column = loc.first_column > 0 ? loc.first_column : 80;
              }
              return loc;
            },
            prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
              loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
              const CONTEXT = 3;
              const CONTEXT_TAIL = 1;
              const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
              var input = this.matched + this._input;
              var lines = input.split("\n");
              var l0 = Math.max(1, context_loc ? context_loc.first_line : loc.first_line - CONTEXT);
              var l1 = Math.max(1, context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL);
              var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
              var ws_prefix = new Array(lineno_display_width).join(" ");
              var nonempty_line_indexes = [];
              var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index2) {
                var lno = index2 + l0;
                var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
                var rv2 = lno_pfx + ": " + line;
                var errpfx = new Array(lineno_display_width + 1).join("^");
                var offset = 2 + 1;
                var len = 0;
                if (lno === loc.first_line) {
                  offset += loc.first_column;
                  len = Math.max(2, (lno === loc.last_line ? loc.last_column : line.length) - loc.first_column + 1);
                } else if (lno === loc.last_line) {
                  len = Math.max(2, loc.last_column + 1);
                } else if (lno > loc.first_line && lno < loc.last_line) {
                  len = Math.max(2, line.length + 1);
                }
                if (len) {
                  var lead = new Array(offset).join(".");
                  var mark = new Array(len).join("^");
                  rv2 += "\n" + errpfx + lead + mark;
                  if (line.trim().length > 0) {
                    nonempty_line_indexes.push(index2);
                  }
                }
                rv2 = rv2.replace(/\t/g, " ");
                return rv2;
              });
              if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
                var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
                var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
                var intermediate_line = new Array(lineno_display_width + 1).join(" ") + "  (...continued...)";
                intermediate_line += "\n" + new Array(lineno_display_width + 1).join("-") + "  (---------------)";
                rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
              }
              return rv.join("\n");
            },
            describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
              var l1 = yylloc.first_line;
              var l2 = yylloc.last_line;
              var c1 = yylloc.first_column;
              var c22 = yylloc.last_column;
              var dl = l2 - l1;
              var dc = c22 - c1;
              var rv;
              if (dl === 0) {
                rv = "line " + l1 + ", ";
                if (dc <= 1) {
                  rv += "column " + c1;
                } else {
                  rv += "columns " + c1 + " .. " + c22;
                }
              } else {
                rv = "lines " + l1 + "(column " + c1 + ") .. " + l2 + "(column " + c22 + ")";
              }
              if (yylloc.range && display_range_too) {
                var r1 = yylloc.range[0];
                var r2 = yylloc.range[1] - 1;
                if (r2 <= r1) {
                  rv += " {String Offset: " + r1 + "}";
                } else {
                  rv += " {String Offset range: " + r1 + " .. " + r2 + "}";
                }
              }
              return rv;
            },
            test_match: function lexer_test_match(match2, indexed_rule) {
              var token, lines, backup, match_str, match_str_len;
              if (this.options.backtrack_lexer) {
                backup = {
                  yylineno: this.yylineno,
                  yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylloc.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column,
                    range: this.yylloc.range.slice(0)
                  },
                  yytext: this.yytext,
                  match: this.match,
                  matches: this.matches,
                  matched: this.matched,
                  yyleng: this.yyleng,
                  offset: this.offset,
                  _more: this._more,
                  _input: this._input,
                  yy: this.yy,
                  conditionStack: this.conditionStack.slice(0),
                  done: this.done
                };
              }
              match_str = match2[0];
              match_str_len = match_str.length;
              lines = match_str.split(/(?:\r\n?|\n)/g);
              if (lines.length > 1) {
                this.yylineno += lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                this.yylloc.last_column = lines[lines.length - 1].length;
              } else {
                this.yylloc.last_column += match_str_len;
              }
              this.yytext += match_str;
              this.match += match_str;
              this.matched += match_str;
              this.matches = match2;
              this.yyleng = this.yytext.length;
              this.yylloc.range[1] += match_str_len;
              this.offset += match_str_len;
              this._more = false;
              this._backtrack = false;
              this._input = this._input.slice(match_str_len);
              token = this.performAction.call(this, this.yy, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
              if (this.done && this._input) {
                this.done = false;
              }
              if (token) {
                return token;
              } else if (this._backtrack) {
                for (var k3 in backup) {
                  this[k3] = backup[k3];
                }
                this.__currentRuleSet__ = null;
                return false;
              } else if (this._signaled_error_token) {
                token = this._signaled_error_token;
                this._signaled_error_token = false;
                return token;
              }
              return false;
            },
            next: function lexer_next() {
              if (this.done) {
                this.clear();
                return this.EOF;
              }
              if (!this._input) {
                this.done = true;
              }
              var token, match2, tempMatch, index2;
              if (!this._more) {
                this.clear();
              }
              var spec = this.__currentRuleSet__;
              if (!spec) {
                spec = this.__currentRuleSet__ = this._currentRules();
                if (!spec || !spec.rules) {
                  var lineno_msg = "";
                  if (this.options.trackPosition) {
                    lineno_msg = " on line " + (this.yylineno + 1);
                  }
                  var p2 = this.constructLexErrorInfo("Internal lexer engine error" + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!', false);
                  return this.parseError(p2.errStr, p2, this.JisonLexerError) || this.ERROR;
                }
              }
              var rule_ids = spec.rules;
              var regexes = spec.__rule_regexes;
              var len = spec.__rule_count;
              for (var i3 = 1; i3 <= len; i3++) {
                tempMatch = this._input.match(regexes[i3]);
                if (tempMatch && (!match2 || tempMatch[0].length > match2[0].length)) {
                  match2 = tempMatch;
                  index2 = i3;
                  if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rule_ids[i3]);
                    if (token !== false) {
                      return token;
                    } else if (this._backtrack) {
                      match2 = void 0;
                      continue;
                    } else {
                      return false;
                    }
                  } else if (!this.options.flex) {
                    break;
                  }
                }
              }
              if (match2) {
                token = this.test_match(match2, rule_ids[index2]);
                if (token !== false) {
                  return token;
                }
                return false;
              }
              if (!this._input) {
                this.done = true;
                this.clear();
                return this.EOF;
              } else {
                var lineno_msg = "";
                if (this.options.trackPosition) {
                  lineno_msg = " on line " + (this.yylineno + 1);
                }
                var p2 = this.constructLexErrorInfo("Lexical error" + lineno_msg + ": Unrecognized text.", this.options.lexerErrorsAreRecoverable);
                var pendingInput = this._input;
                var activeCondition = this.topState();
                var conditionStackDepth = this.conditionStack.length;
                token = this.parseError(p2.errStr, p2, this.JisonLexerError) || this.ERROR;
                if (token === this.ERROR) {
                  if (!this.matches && pendingInput === this._input && activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
                    this.input();
                  }
                }
                return token;
              }
            },
            lex: function lexer_lex() {
              var r;
              if (typeof this.pre_lex === "function") {
                r = this.pre_lex.call(this, 0);
              }
              if (typeof this.options.pre_lex === "function") {
                r = this.options.pre_lex.call(this, r) || r;
              }
              if (this.yy && typeof this.yy.pre_lex === "function") {
                r = this.yy.pre_lex.call(this, r) || r;
              }
              while (!r) {
                r = this.next();
              }
              if (this.yy && typeof this.yy.post_lex === "function") {
                r = this.yy.post_lex.call(this, r) || r;
              }
              if (typeof this.options.post_lex === "function") {
                r = this.options.post_lex.call(this, r) || r;
              }
              if (typeof this.post_lex === "function") {
                r = this.post_lex.call(this, r) || r;
              }
              return r;
            },
            fastLex: function lexer_fastLex() {
              var r;
              while (!r) {
                r = this.next();
              }
              return r;
            },
            canIUse: function lexer_canIUse() {
              var rv = {
                fastLex: !(typeof this.pre_lex === "function" || typeof this.options.pre_lex === "function" || this.yy && typeof this.yy.pre_lex === "function" || this.yy && typeof this.yy.post_lex === "function" || typeof this.options.post_lex === "function" || typeof this.post_lex === "function") && typeof this.fastLex === "function"
              };
              return rv;
            },
            begin: function lexer_begin(condition) {
              return this.pushState(condition);
            },
            pushState: function lexer_pushState(condition) {
              this.conditionStack.push(condition);
              this.__currentRuleSet__ = null;
              return this;
            },
            popState: function lexer_popState() {
              var n3 = this.conditionStack.length - 1;
              if (n3 > 0) {
                this.__currentRuleSet__ = null;
                return this.conditionStack.pop();
              } else {
                return this.conditionStack[0];
              }
            },
            topState: function lexer_topState(n3) {
              n3 = this.conditionStack.length - 1 - Math.abs(n3 || 0);
              if (n3 >= 0) {
                return this.conditionStack[n3];
              } else {
                return "INITIAL";
              }
            },
            _currentRules: function lexer__currentRules() {
              if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
              } else {
                return this.conditions["INITIAL"];
              }
            },
            stateStackSize: function lexer_stateStackSize() {
              return this.conditionStack.length;
            },
            options: {
              trackPosition: true
            },
            JisonLexerError,
            performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
              var yy_ = this;
              var YYSTATE = YY_START;
              switch (yyrulenumber) {
                case 1:
                  break;
                default:
                  return this.simpleCaseActionClusters[yyrulenumber];
              }
            },
            simpleCaseActionClusters: {
              0: 13,
              2: 5,
              3: 6,
              4: 3,
              5: 4,
              6: 15,
              7: 15,
              8: 15,
              9: 15,
              10: 15,
              11: 15,
              12: 16,
              13: 16,
              14: 16,
              15: 16,
              16: 17,
              17: 17,
              18: 18,
              19: 18,
              20: 19,
              21: 19,
              22: 19,
              23: 20,
              24: 21,
              25: 22,
              26: 23,
              27: 25,
              28: 24,
              29: 26,
              30: 27,
              31: 28,
              32: 11,
              33: 9,
              34: 12,
              35: 10,
              36: 7,
              37: 8,
              38: 14,
              39: 1
            },
            rules: [
              /^(?:(--[\d\-A-Za-z]*))/,
              /^(?:\s+)/,
              /^(?:\*)/,
              /^(?:\/)/,
              /^(?:\+)/,
              /^(?:-)/,
              /^(?:(\d+(\.\d*)?|\.\d+)px\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)cm\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)mm\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)in\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)pt\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)pc\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)deg\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)grad\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)rad\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)turn\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)s\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)ms\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)Hz\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)kHz\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)dpi\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)dpcm\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)dppx\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)em\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)ex\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)ch\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)rem\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)vw\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)vh\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)vmin\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)vmax\b)/,
              /^(?:(\d+(\.\d*)?|\.\d+)%)/,
              /^(?:(\d+(\.\d*)?|\.\d+)\b)/,
              /^(?:(calc))/,
              /^(?:(var))/,
              /^(?:([a-z]+))/,
              /^(?:\()/,
              /^(?:\))/,
              /^(?:,)/,
              /^(?:$)/
            ],
            conditions: {
              "INITIAL": {
                rules: [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15,
                  16,
                  17,
                  18,
                  19,
                  20,
                  21,
                  22,
                  23,
                  24,
                  25,
                  26,
                  27,
                  28,
                  29,
                  30,
                  31,
                  32,
                  33,
                  34,
                  35,
                  36,
                  37,
                  38,
                  39
                ],
                inclusive: true
              }
            }
          };
          return lexer2;
        }();
        parser2.lexer = lexer;
        function Parser() {
          this.yy = {};
        }
        Parser.prototype = parser2;
        parser2.Parser = Parser;
        return new Parser();
      }();
      if (typeof __require !== "undefined" && typeof exports !== "undefined") {
        exports.parser = parser;
        exports.Parser = parser.Parser;
        exports.parse = function() {
          return parser.parse.apply(parser, arguments);
        };
      }
    }
  });

  // node_modules/css-unit-converter/index.js
  var require_css_unit_converter = __commonJS({
    "node_modules/css-unit-converter/index.js"(exports, module2) {
      var conversions = {
        "px": {
          "px": 1,
          "cm": 96 / 2.54,
          "mm": 96 / 25.4,
          "in": 96,
          "pt": 96 / 72,
          "pc": 16
        },
        "cm": {
          "px": 2.54 / 96,
          "cm": 1,
          "mm": 0.1,
          "in": 2.54,
          "pt": 2.54 / 72,
          "pc": 2.54 / 6
        },
        "mm": {
          "px": 25.4 / 96,
          "cm": 10,
          "mm": 1,
          "in": 25.4,
          "pt": 25.4 / 72,
          "pc": 25.4 / 6
        },
        "in": {
          "px": 1 / 96,
          "cm": 1 / 2.54,
          "mm": 1 / 25.4,
          "in": 1,
          "pt": 1 / 72,
          "pc": 1 / 6
        },
        "pt": {
          "px": 0.75,
          "cm": 72 / 2.54,
          "mm": 72 / 25.4,
          "in": 72,
          "pt": 1,
          "pc": 12
        },
        "pc": {
          "px": 6 / 96,
          "cm": 6 / 2.54,
          "mm": 6 / 25.4,
          "in": 6,
          "pt": 6 / 72,
          "pc": 1
        },
        "deg": {
          "deg": 1,
          "grad": 0.9,
          "rad": 180 / Math.PI,
          "turn": 360
        },
        "grad": {
          "deg": 400 / 360,
          "grad": 1,
          "rad": 200 / Math.PI,
          "turn": 400
        },
        "rad": {
          "deg": Math.PI / 180,
          "grad": Math.PI / 200,
          "rad": 1,
          "turn": Math.PI * 2
        },
        "turn": {
          "deg": 1 / 360,
          "grad": 1 / 400,
          "rad": 0.5 / Math.PI,
          "turn": 1
        },
        "s": {
          "s": 1,
          "ms": 1 / 1e3
        },
        "ms": {
          "s": 1e3,
          "ms": 1
        },
        "Hz": {
          "Hz": 1,
          "kHz": 1e3
        },
        "kHz": {
          "Hz": 1 / 1e3,
          "kHz": 1
        },
        "dpi": {
          "dpi": 1,
          "dpcm": 1 / 2.54,
          "dppx": 1 / 96
        },
        "dpcm": {
          "dpi": 2.54,
          "dpcm": 1,
          "dppx": 2.54 / 96
        },
        "dppx": {
          "dpi": 96,
          "dpcm": 96 / 2.54,
          "dppx": 1
        }
      };
      module2.exports = function(value2, sourceUnit, targetUnit, precision) {
        if (!conversions.hasOwnProperty(targetUnit))
          throw new Error("Cannot convert to " + targetUnit);
        if (!conversions[targetUnit].hasOwnProperty(sourceUnit))
          throw new Error("Cannot convert from " + sourceUnit + " to " + targetUnit);
        var converted = conversions[targetUnit][sourceUnit] * value2;
        if (precision !== false) {
          precision = Math.pow(10, parseInt(precision) || 5);
          return Math.round(converted * precision) / precision;
        }
        return converted;
      };
    }
  });

  // node_modules/reduce-css-calc/dist/lib/convert.js
  var require_convert = __commonJS({
    "node_modules/reduce-css-calc/dist/lib/convert.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _cssUnitConverter = require_css_unit_converter();
      var _cssUnitConverter2 = _interopRequireDefault(_cssUnitConverter);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function convertNodes(left, right, precision) {
        switch (left.type) {
          case "LengthValue":
          case "AngleValue":
          case "TimeValue":
          case "FrequencyValue":
          case "ResolutionValue":
            return convertAbsoluteLength(left, right, precision);
          default:
            return { left, right };
        }
      }
      function convertAbsoluteLength(left, right, precision) {
        if (right.type === left.type) {
          right = {
            type: left.type,
            value: (0, _cssUnitConverter2.default)(right.value, right.unit, left.unit, precision),
            unit: left.unit
          };
        }
        return { left, right };
      }
      exports.default = convertNodes;
      module2.exports = exports["default"];
    }
  });

  // node_modules/reduce-css-calc/dist/lib/reducer.js
  var require_reducer = __commonJS({
    "node_modules/reduce-css-calc/dist/lib/reducer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.flip = flip;
      var _convert = require_convert();
      var _convert2 = _interopRequireDefault(_convert);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function reduce(node, precision) {
        if (node.type === "MathExpression")
          return reduceMathExpression(node, precision);
        if (node.type === "Calc")
          return reduce(node.value, precision);
        return node;
      }
      function isEqual2(left, right) {
        return left.type === right.type && left.value === right.value;
      }
      function isValueType(type) {
        switch (type) {
          case "LengthValue":
          case "AngleValue":
          case "TimeValue":
          case "FrequencyValue":
          case "ResolutionValue":
          case "EmValue":
          case "ExValue":
          case "ChValue":
          case "RemValue":
          case "VhValue":
          case "VwValue":
          case "VminValue":
          case "VmaxValue":
          case "PercentageValue":
          case "Value":
            return true;
        }
        return false;
      }
      function convertMathExpression(node, precision) {
        var nodes = (0, _convert2.default)(node.left, node.right, precision);
        var left = reduce(nodes.left, precision);
        var right = reduce(nodes.right, precision);
        if (left.type === "MathExpression" && right.type === "MathExpression") {
          if (left.operator === "/" && right.operator === "*" || left.operator === "-" && right.operator === "+" || left.operator === "*" && right.operator === "/" || left.operator === "+" && right.operator === "-") {
            if (isEqual2(left.right, right.right))
              nodes = (0, _convert2.default)(left.left, right.left, precision);
            else if (isEqual2(left.right, right.left))
              nodes = (0, _convert2.default)(left.left, right.right, precision);
            left = reduce(nodes.left, precision);
            right = reduce(nodes.right, precision);
          }
        }
        node.left = left;
        node.right = right;
        return node;
      }
      function flip(operator) {
        return operator === "+" ? "-" : "+";
      }
      function flipValue(node) {
        if (isValueType(node.type))
          node.value = -node.value;
        else if (node.type == "MathExpression") {
          node.left = flipValue(node.left);
          node.right = flipValue(node.right);
        }
        return node;
      }
      function reduceAddSubExpression(node, precision) {
        var _node = node, left = _node.left, right = _node.right, op = _node.operator;
        if (left.type === "CssVariable" || right.type === "CssVariable")
          return node;
        if (right.value === 0)
          return left;
        if (left.value === 0 && op === "+")
          return right;
        if (left.value === 0 && op === "-")
          return flipValue(right);
        if (left.type === right.type && isValueType(left.type)) {
          node = Object.assign({}, left);
          if (op === "+")
            node.value = left.value + right.value;
          else
            node.value = left.value - right.value;
        }
        if (isValueType(left.type) && (right.operator === "+" || right.operator === "-") && right.type === "MathExpression") {
          if (left.type === right.left.type) {
            node = Object.assign({}, node);
            node.left = reduce({
              type: "MathExpression",
              operator: op,
              left,
              right: right.left
            }, precision);
            node.right = right.right;
            node.operator = op === "-" ? flip(right.operator) : right.operator;
            return reduce(node, precision);
          } else if (left.type === right.right.type) {
            node = Object.assign({}, node);
            node.left = reduce({
              type: "MathExpression",
              operator: op === "-" ? flip(right.operator) : right.operator,
              left,
              right: right.right
            }, precision);
            node.right = right.left;
            return reduce(node, precision);
          }
        }
        if (left.type === "MathExpression" && (left.operator === "+" || left.operator === "-") && isValueType(right.type)) {
          if (right.type === left.left.type) {
            node = Object.assign({}, left);
            node.left = reduce({
              type: "MathExpression",
              operator: op,
              left: left.left,
              right
            }, precision);
            return reduce(node, precision);
          } else if (right.type === left.right.type) {
            node = Object.assign({}, left);
            if (left.operator === "-") {
              node.right = reduce({
                type: "MathExpression",
                operator: op === "-" ? "+" : "-",
                left: right,
                right: left.right
              }, precision);
              node.operator = op === "-" ? "-" : "+";
            } else {
              node.right = reduce({
                type: "MathExpression",
                operator: op,
                left: left.right,
                right
              }, precision);
            }
            if (node.right.value < 0) {
              node.right.value *= -1;
              node.operator = node.operator === "-" ? "+" : "-";
            }
            return reduce(node, precision);
          }
        }
        return node;
      }
      function reduceDivisionExpression(node, precision) {
        if (!isValueType(node.right.type))
          return node;
        if (node.right.type !== "Value")
          throw new Error('Cannot divide by "' + node.right.unit + '", number expected');
        if (node.right.value === 0)
          throw new Error("Cannot divide by zero");
        if (node.left.type === "MathExpression") {
          if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {
            node.left.left.value /= node.right.value;
            node.left.right.value /= node.right.value;
            return reduce(node.left, precision);
          }
          return node;
        } else if (isValueType(node.left.type)) {
          node.left.value /= node.right.value;
          return node.left;
        }
        return node;
      }
      function reduceMultiplicationExpression(node) {
        if (node.left.type === "MathExpression" && node.right.type === "Value") {
          if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {
            node.left.left.value *= node.right.value;
            node.left.right.value *= node.right.value;
            return node.left;
          }
        } else if (isValueType(node.left.type) && node.right.type === "Value") {
          node.left.value *= node.right.value;
          return node.left;
        } else if (node.left.type === "Value" && node.right.type === "MathExpression") {
          if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {
            node.right.left.value *= node.left.value;
            node.right.right.value *= node.left.value;
            return node.right;
          }
        } else if (node.left.type === "Value" && isValueType(node.right.type)) {
          node.right.value *= node.left.value;
          return node.right;
        }
        return node;
      }
      function reduceMathExpression(node, precision) {
        node = convertMathExpression(node, precision);
        switch (node.operator) {
          case "+":
          case "-":
            return reduceAddSubExpression(node, precision);
          case "/":
            return reduceDivisionExpression(node, precision);
          case "*":
            return reduceMultiplicationExpression(node);
        }
        return node;
      }
      exports.default = reduce;
    }
  });

  // node_modules/reduce-css-calc/dist/lib/stringifier.js
  var require_stringifier = __commonJS({
    "node_modules/reduce-css-calc/dist/lib/stringifier.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = function(calc, node, precision) {
        var str = stringify(node, precision);
        if (node.type === "MathExpression") {
          str = calc + "(" + str + ")";
        }
        return str;
      };
      var _reducer = require_reducer();
      var order = {
        "*": 0,
        "/": 0,
        "+": 1,
        "-": 1
      };
      function round(value2, prec) {
        if (prec !== false) {
          var precision = Math.pow(10, prec);
          return Math.round(value2 * precision) / precision;
        }
        return value2;
      }
      function stringify(node, prec) {
        switch (node.type) {
          case "MathExpression": {
            var left = node.left, right = node.right, op = node.operator;
            var str = "";
            if (left.type === "MathExpression" && order[op] < order[left.operator])
              str += "(" + stringify(left, prec) + ")";
            else
              str += stringify(left, prec);
            str += " " + node.operator + " ";
            if (right.type === "MathExpression" && order[op] < order[right.operator]) {
              str += "(" + stringify(right, prec) + ")";
            } else if (right.type === "MathExpression" && op === "-" && ["+", "-"].includes(right.operator)) {
              right.operator = (0, _reducer.flip)(right.operator);
              str += stringify(right, prec);
            } else {
              str += stringify(right, prec);
            }
            return str;
          }
          case "Value":
            return round(node.value, prec);
          case "CssVariable":
            if (node.fallback) {
              return "var(" + node.value + ", " + stringify(node.fallback, prec, true) + ")";
            }
            return "var(" + node.value + ")";
          case "Calc":
            if (node.prefix) {
              return "-" + node.prefix + "-calc(" + stringify(node.value, prec) + ")";
            }
            return "calc(" + stringify(node.value, prec) + ")";
          default:
            return round(node.value, prec) + node.unit;
        }
      }
      module2.exports = exports["default"];
    }
  });

  // node_modules/reduce-css-calc/dist/index.js
  var require_dist = __commonJS({
    "node_modules/reduce-css-calc/dist/index.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _postcssValueParser = require_lib2();
      var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);
      var _parser = require_parser2();
      var _reducer = require_reducer();
      var _reducer2 = _interopRequireDefault(_reducer);
      var _stringifier = require_stringifier();
      var _stringifier2 = _interopRequireDefault(_stringifier);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var MATCH_CALC = /((?:\-[a-z]+\-)?calc)/;
      exports.default = function(value2) {
        var precision = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
        return (0, _postcssValueParser2.default)(value2).walk(function(node) {
          if (node.type !== "function" || !MATCH_CALC.test(node.value))
            return;
          var contents = _postcssValueParser2.default.stringify(node.nodes);
          if (contents.indexOf("constant") >= 0 || contents.indexOf("env") >= 0)
            return;
          var ast = _parser.parser.parse(contents);
          var reducedAst = (0, _reducer2.default)(ast, precision);
          node.type = "word";
          node.value = (0, _stringifier2.default)(node.value, reducedAst, precision);
        }, true).toString();
      };
      module2.exports = exports["default"];
    }
  });

  // node_modules/lodash/isEqual.js
  var require_isEqual = __commonJS({
    "node_modules/lodash/isEqual.js"(exports, module2) {
      var baseIsEqual = require_baseIsEqual();
      function isEqual2(value2, other) {
        return baseIsEqual(value2, other);
      }
      module2.exports = isEqual2;
    }
  });

  // node_modules/lodash/_baseExtremum.js
  var require_baseExtremum = __commonJS({
    "node_modules/lodash/_baseExtremum.js"(exports, module2) {
      var isSymbol2 = require_isSymbol();
      function baseExtremum(array, iteratee, comparator) {
        var index2 = -1, length2 = array.length;
        while (++index2 < length2) {
          var value2 = array[index2], current = iteratee(value2);
          if (current != null && (computed === void 0 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
            var computed = current, result = value2;
          }
        }
        return result;
      }
      module2.exports = baseExtremum;
    }
  });

  // node_modules/lodash/_baseGt.js
  var require_baseGt = __commonJS({
    "node_modules/lodash/_baseGt.js"(exports, module2) {
      function baseGt(value2, other) {
        return value2 > other;
      }
      module2.exports = baseGt;
    }
  });

  // node_modules/lodash/max.js
  var require_max = __commonJS({
    "node_modules/lodash/max.js"(exports, module2) {
      var baseExtremum = require_baseExtremum();
      var baseGt = require_baseGt();
      var identity7 = require_identity();
      function max2(array) {
        return array && array.length ? baseExtremum(array, identity7, baseGt) : void 0;
      }
      module2.exports = max2;
    }
  });

  // node_modules/lodash/_baseLt.js
  var require_baseLt = __commonJS({
    "node_modules/lodash/_baseLt.js"(exports, module2) {
      function baseLt(value2, other) {
        return value2 < other;
      }
      module2.exports = baseLt;
    }
  });

  // node_modules/lodash/min.js
  var require_min = __commonJS({
    "node_modules/lodash/min.js"(exports, module2) {
      var baseExtremum = require_baseExtremum();
      var baseLt = require_baseLt();
      var identity7 = require_identity();
      function min2(array) {
        return array && array.length ? baseExtremum(array, identity7, baseLt) : void 0;
      }
      module2.exports = min2;
    }
  });

  // node_modules/lodash/map.js
  var require_map = __commonJS({
    "node_modules/lodash/map.js"(exports, module2) {
      var arrayMap = require_arrayMap();
      var baseIteratee = require_baseIteratee();
      var baseMap = require_baseMap();
      var isArray2 = require_isArray();
      function map4(collection, iteratee) {
        var func2 = isArray2(collection) ? arrayMap : baseMap;
        return func2(collection, baseIteratee(iteratee, 3));
      }
      module2.exports = map4;
    }
  });

  // node_modules/lodash/flatMap.js
  var require_flatMap = __commonJS({
    "node_modules/lodash/flatMap.js"(exports, module2) {
      var baseFlatten = require_baseFlatten();
      var map4 = require_map();
      function flatMap(collection, iteratee) {
        return baseFlatten(map4(collection, iteratee), 1);
      }
      module2.exports = flatMap;
    }
  });

  // node_modules/decimal.js-light/decimal.js
  var require_decimal = __commonJS({
    "node_modules/decimal.js-light/decimal.js"(exports, module2) {
      (function(globalScope) {
        "use strict";
        var MAX_DIGITS = 1e9, Decimal3 = {
          precision: 20,
          rounding: 4,
          toExpNeg: -7,
          toExpPos: 21,
          LN10: "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"
        }, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", exponentOutOfRange = decimalError + "Exponent out of range: ", mathfloor = Math.floor, mathpow = Math.pow, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, ONE, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE), P2 = {};
        P2.absoluteValue = P2.abs = function() {
          var x3 = new this.constructor(this);
          if (x3.s)
            x3.s = 1;
          return x3;
        };
        P2.comparedTo = P2.cmp = function(y2) {
          var i3, j3, xdL, ydL, x3 = this;
          y2 = new x3.constructor(y2);
          if (x3.s !== y2.s)
            return x3.s || -y2.s;
          if (x3.e !== y2.e)
            return x3.e > y2.e ^ x3.s < 0 ? 1 : -1;
          xdL = x3.d.length;
          ydL = y2.d.length;
          for (i3 = 0, j3 = xdL < ydL ? xdL : ydL; i3 < j3; ++i3) {
            if (x3.d[i3] !== y2.d[i3])
              return x3.d[i3] > y2.d[i3] ^ x3.s < 0 ? 1 : -1;
          }
          return xdL === ydL ? 0 : xdL > ydL ^ x3.s < 0 ? 1 : -1;
        };
        P2.decimalPlaces = P2.dp = function() {
          var x3 = this, w2 = x3.d.length - 1, dp = (w2 - x3.e) * LOG_BASE;
          w2 = x3.d[w2];
          if (w2)
            for (; w2 % 10 == 0; w2 /= 10)
              dp--;
          return dp < 0 ? 0 : dp;
        };
        P2.dividedBy = P2.div = function(y2) {
          return divide(this, new this.constructor(y2));
        };
        P2.dividedToIntegerBy = P2.idiv = function(y2) {
          var x3 = this, Ctor = x3.constructor;
          return round(divide(x3, new Ctor(y2), 0, 1), Ctor.precision);
        };
        P2.equals = P2.eq = function(y2) {
          return !this.cmp(y2);
        };
        P2.exponent = function() {
          return getBase10Exponent(this);
        };
        P2.greaterThan = P2.gt = function(y2) {
          return this.cmp(y2) > 0;
        };
        P2.greaterThanOrEqualTo = P2.gte = function(y2) {
          return this.cmp(y2) >= 0;
        };
        P2.isInteger = P2.isint = function() {
          return this.e > this.d.length - 2;
        };
        P2.isNegative = P2.isneg = function() {
          return this.s < 0;
        };
        P2.isPositive = P2.ispos = function() {
          return this.s > 0;
        };
        P2.isZero = function() {
          return this.s === 0;
        };
        P2.lessThan = P2.lt = function(y2) {
          return this.cmp(y2) < 0;
        };
        P2.lessThanOrEqualTo = P2.lte = function(y2) {
          return this.cmp(y2) < 1;
        };
        P2.logarithm = P2.log = function(base) {
          var r, x3 = this, Ctor = x3.constructor, pr = Ctor.precision, wpr = pr + 5;
          if (base === void 0) {
            base = new Ctor(10);
          } else {
            base = new Ctor(base);
            if (base.s < 1 || base.eq(ONE))
              throw Error(decimalError + "NaN");
          }
          if (x3.s < 1)
            throw Error(decimalError + (x3.s ? "NaN" : "-Infinity"));
          if (x3.eq(ONE))
            return new Ctor(0);
          external = false;
          r = divide(ln(x3, wpr), ln(base, wpr), wpr);
          external = true;
          return round(r, pr);
        };
        P2.minus = P2.sub = function(y2) {
          var x3 = this;
          y2 = new x3.constructor(y2);
          return x3.s == y2.s ? subtract(x3, y2) : add(x3, (y2.s = -y2.s, y2));
        };
        P2.modulo = P2.mod = function(y2) {
          var q2, x3 = this, Ctor = x3.constructor, pr = Ctor.precision;
          y2 = new Ctor(y2);
          if (!y2.s)
            throw Error(decimalError + "NaN");
          if (!x3.s)
            return round(new Ctor(x3), pr);
          external = false;
          q2 = divide(x3, y2, 0, 1).times(y2);
          external = true;
          return x3.minus(q2);
        };
        P2.naturalExponential = P2.exp = function() {
          return exp(this);
        };
        P2.naturalLogarithm = P2.ln = function() {
          return ln(this);
        };
        P2.negated = P2.neg = function() {
          var x3 = new this.constructor(this);
          x3.s = -x3.s || 0;
          return x3;
        };
        P2.plus = P2.add = function(y2) {
          var x3 = this;
          y2 = new x3.constructor(y2);
          return x3.s == y2.s ? add(x3, y2) : subtract(x3, (y2.s = -y2.s, y2));
        };
        P2.precision = P2.sd = function(z) {
          var e3, sd, w2, x3 = this;
          if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
            throw Error(invalidArgument + z);
          e3 = getBase10Exponent(x3) + 1;
          w2 = x3.d.length - 1;
          sd = w2 * LOG_BASE + 1;
          w2 = x3.d[w2];
          if (w2) {
            for (; w2 % 10 == 0; w2 /= 10)
              sd--;
            for (w2 = x3.d[0]; w2 >= 10; w2 /= 10)
              sd++;
          }
          return z && e3 > sd ? e3 : sd;
        };
        P2.squareRoot = P2.sqrt = function() {
          var e3, n3, pr, r, s3, t2, wpr, x3 = this, Ctor = x3.constructor;
          if (x3.s < 1) {
            if (!x3.s)
              return new Ctor(0);
            throw Error(decimalError + "NaN");
          }
          e3 = getBase10Exponent(x3);
          external = false;
          s3 = Math.sqrt(+x3);
          if (s3 == 0 || s3 == 1 / 0) {
            n3 = digitsToString(x3.d);
            if ((n3.length + e3) % 2 == 0)
              n3 += "0";
            s3 = Math.sqrt(n3);
            e3 = mathfloor((e3 + 1) / 2) - (e3 < 0 || e3 % 2);
            if (s3 == 1 / 0) {
              n3 = "5e" + e3;
            } else {
              n3 = s3.toExponential();
              n3 = n3.slice(0, n3.indexOf("e") + 1) + e3;
            }
            r = new Ctor(n3);
          } else {
            r = new Ctor(s3.toString());
          }
          pr = Ctor.precision;
          s3 = wpr = pr + 3;
          for (; ; ) {
            t2 = r;
            r = t2.plus(divide(x3, t2, wpr + 2)).times(0.5);
            if (digitsToString(t2.d).slice(0, wpr) === (n3 = digitsToString(r.d)).slice(0, wpr)) {
              n3 = n3.slice(wpr - 3, wpr + 1);
              if (s3 == wpr && n3 == "4999") {
                round(t2, pr + 1, 0);
                if (t2.times(t2).eq(x3)) {
                  r = t2;
                  break;
                }
              } else if (n3 != "9999") {
                break;
              }
              wpr += 4;
            }
          }
          external = true;
          return round(r, pr);
        };
        P2.times = P2.mul = function(y2) {
          var carry, e3, i3, k3, r, rL, t2, xdL, ydL, x3 = this, Ctor = x3.constructor, xd = x3.d, yd = (y2 = new Ctor(y2)).d;
          if (!x3.s || !y2.s)
            return new Ctor(0);
          y2.s *= x3.s;
          e3 = x3.e + y2.e;
          xdL = xd.length;
          ydL = yd.length;
          if (xdL < ydL) {
            r = xd;
            xd = yd;
            yd = r;
            rL = xdL;
            xdL = ydL;
            ydL = rL;
          }
          r = [];
          rL = xdL + ydL;
          for (i3 = rL; i3--; )
            r.push(0);
          for (i3 = ydL; --i3 >= 0; ) {
            carry = 0;
            for (k3 = xdL + i3; k3 > i3; ) {
              t2 = r[k3] + yd[i3] * xd[k3 - i3 - 1] + carry;
              r[k3--] = t2 % BASE | 0;
              carry = t2 / BASE | 0;
            }
            r[k3] = (r[k3] + carry) % BASE | 0;
          }
          for (; !r[--rL]; )
            r.pop();
          if (carry)
            ++e3;
          else
            r.shift();
          y2.d = r;
          y2.e = e3;
          return external ? round(y2, Ctor.precision) : y2;
        };
        P2.toDecimalPlaces = P2.todp = function(dp, rm) {
          var x3 = this, Ctor = x3.constructor;
          x3 = new Ctor(x3);
          if (dp === void 0)
            return x3;
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0)
            rm = Ctor.rounding;
          else
            checkInt32(rm, 0, 8);
          return round(x3, dp + getBase10Exponent(x3) + 1, rm);
        };
        P2.toExponential = function(dp, rm) {
          var str, x3 = this, Ctor = x3.constructor;
          if (dp === void 0) {
            str = toString2(x3, true);
          } else {
            checkInt32(dp, 0, MAX_DIGITS);
            if (rm === void 0)
              rm = Ctor.rounding;
            else
              checkInt32(rm, 0, 8);
            x3 = round(new Ctor(x3), dp + 1, rm);
            str = toString2(x3, true, dp + 1);
          }
          return str;
        };
        P2.toFixed = function(dp, rm) {
          var str, y2, x3 = this, Ctor = x3.constructor;
          if (dp === void 0)
            return toString2(x3);
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0)
            rm = Ctor.rounding;
          else
            checkInt32(rm, 0, 8);
          y2 = round(new Ctor(x3), dp + getBase10Exponent(x3) + 1, rm);
          str = toString2(y2.abs(), false, dp + getBase10Exponent(y2) + 1);
          return x3.isneg() && !x3.isZero() ? "-" + str : str;
        };
        P2.toInteger = P2.toint = function() {
          var x3 = this, Ctor = x3.constructor;
          return round(new Ctor(x3), getBase10Exponent(x3) + 1, Ctor.rounding);
        };
        P2.toNumber = function() {
          return +this;
        };
        P2.toPower = P2.pow = function(y2) {
          var e3, k3, pr, r, sign2, yIsInt, x3 = this, Ctor = x3.constructor, guard = 12, yn = +(y2 = new Ctor(y2));
          if (!y2.s)
            return new Ctor(ONE);
          x3 = new Ctor(x3);
          if (!x3.s) {
            if (y2.s < 1)
              throw Error(decimalError + "Infinity");
            return x3;
          }
          if (x3.eq(ONE))
            return x3;
          pr = Ctor.precision;
          if (y2.eq(ONE))
            return round(x3, pr);
          e3 = y2.e;
          k3 = y2.d.length - 1;
          yIsInt = e3 >= k3;
          sign2 = x3.s;
          if (!yIsInt) {
            if (sign2 < 0)
              throw Error(decimalError + "NaN");
          } else if ((k3 = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
            r = new Ctor(ONE);
            e3 = Math.ceil(pr / LOG_BASE + 4);
            external = false;
            for (; ; ) {
              if (k3 % 2) {
                r = r.times(x3);
                truncate2(r.d, e3);
              }
              k3 = mathfloor(k3 / 2);
              if (k3 === 0)
                break;
              x3 = x3.times(x3);
              truncate2(x3.d, e3);
            }
            external = true;
            return y2.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);
          }
          sign2 = sign2 < 0 && y2.d[Math.max(e3, k3)] & 1 ? -1 : 1;
          x3.s = 1;
          external = false;
          r = y2.times(ln(x3, pr + guard));
          external = true;
          r = exp(r);
          r.s = sign2;
          return r;
        };
        P2.toPrecision = function(sd, rm) {
          var e3, str, x3 = this, Ctor = x3.constructor;
          if (sd === void 0) {
            e3 = getBase10Exponent(x3);
            str = toString2(x3, e3 <= Ctor.toExpNeg || e3 >= Ctor.toExpPos);
          } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0)
              rm = Ctor.rounding;
            else
              checkInt32(rm, 0, 8);
            x3 = round(new Ctor(x3), sd, rm);
            e3 = getBase10Exponent(x3);
            str = toString2(x3, sd <= e3 || e3 <= Ctor.toExpNeg, sd);
          }
          return str;
        };
        P2.toSignificantDigits = P2.tosd = function(sd, rm) {
          var x3 = this, Ctor = x3.constructor;
          if (sd === void 0) {
            sd = Ctor.precision;
            rm = Ctor.rounding;
          } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0)
              rm = Ctor.rounding;
            else
              checkInt32(rm, 0, 8);
          }
          return round(new Ctor(x3), sd, rm);
        };
        P2.toString = P2.valueOf = P2.val = P2.toJSON = function() {
          var x3 = this, e3 = getBase10Exponent(x3), Ctor = x3.constructor;
          return toString2(x3, e3 <= Ctor.toExpNeg || e3 >= Ctor.toExpPos);
        };
        function add(x3, y2) {
          var carry, d3, e3, i3, k3, len, xd, yd, Ctor = x3.constructor, pr = Ctor.precision;
          if (!x3.s || !y2.s) {
            if (!y2.s)
              y2 = new Ctor(x3);
            return external ? round(y2, pr) : y2;
          }
          xd = x3.d;
          yd = y2.d;
          k3 = x3.e;
          e3 = y2.e;
          xd = xd.slice();
          i3 = k3 - e3;
          if (i3) {
            if (i3 < 0) {
              d3 = xd;
              i3 = -i3;
              len = yd.length;
            } else {
              d3 = yd;
              e3 = k3;
              len = xd.length;
            }
            k3 = Math.ceil(pr / LOG_BASE);
            len = k3 > len ? k3 + 1 : len + 1;
            if (i3 > len) {
              i3 = len;
              d3.length = 1;
            }
            d3.reverse();
            for (; i3--; )
              d3.push(0);
            d3.reverse();
          }
          len = xd.length;
          i3 = yd.length;
          if (len - i3 < 0) {
            i3 = len;
            d3 = yd;
            yd = xd;
            xd = d3;
          }
          for (carry = 0; i3; ) {
            carry = (xd[--i3] = xd[i3] + yd[i3] + carry) / BASE | 0;
            xd[i3] %= BASE;
          }
          if (carry) {
            xd.unshift(carry);
            ++e3;
          }
          for (len = xd.length; xd[--len] == 0; )
            xd.pop();
          y2.d = xd;
          y2.e = e3;
          return external ? round(y2, pr) : y2;
        }
        function checkInt32(i3, min2, max2) {
          if (i3 !== ~~i3 || i3 < min2 || i3 > max2) {
            throw Error(invalidArgument + i3);
          }
        }
        function digitsToString(d3) {
          var i3, k3, ws, indexOfLastWord = d3.length - 1, str = "", w2 = d3[0];
          if (indexOfLastWord > 0) {
            str += w2;
            for (i3 = 1; i3 < indexOfLastWord; i3++) {
              ws = d3[i3] + "";
              k3 = LOG_BASE - ws.length;
              if (k3)
                str += getZeroString(k3);
              str += ws;
            }
            w2 = d3[i3];
            ws = w2 + "";
            k3 = LOG_BASE - ws.length;
            if (k3)
              str += getZeroString(k3);
          } else if (w2 === 0) {
            return "0";
          }
          for (; w2 % 10 === 0; )
            w2 /= 10;
          return str + w2;
        }
        var divide = function() {
          function multiplyInteger(x3, k3) {
            var temp, carry = 0, i3 = x3.length;
            for (x3 = x3.slice(); i3--; ) {
              temp = x3[i3] * k3 + carry;
              x3[i3] = temp % BASE | 0;
              carry = temp / BASE | 0;
            }
            if (carry)
              x3.unshift(carry);
            return x3;
          }
          function compare(a3, b2, aL, bL) {
            var i3, r;
            if (aL != bL) {
              r = aL > bL ? 1 : -1;
            } else {
              for (i3 = r = 0; i3 < aL; i3++) {
                if (a3[i3] != b2[i3]) {
                  r = a3[i3] > b2[i3] ? 1 : -1;
                  break;
                }
              }
            }
            return r;
          }
          function subtract2(a3, b2, aL) {
            var i3 = 0;
            for (; aL--; ) {
              a3[aL] -= i3;
              i3 = a3[aL] < b2[aL] ? 1 : 0;
              a3[aL] = i3 * BASE + a3[aL] - b2[aL];
            }
            for (; !a3[0] && a3.length > 1; )
              a3.shift();
          }
          return function(x3, y2, pr, dp) {
            var cmp, e3, i3, k3, prod, prodL, q2, qd, rem, remL, rem0, sd, t2, xi, xL, yd0, yL, yz, Ctor = x3.constructor, sign2 = x3.s == y2.s ? 1 : -1, xd = x3.d, yd = y2.d;
            if (!x3.s)
              return new Ctor(x3);
            if (!y2.s)
              throw Error(decimalError + "Division by zero");
            e3 = x3.e - y2.e;
            yL = yd.length;
            xL = xd.length;
            q2 = new Ctor(sign2);
            qd = q2.d = [];
            for (i3 = 0; yd[i3] == (xd[i3] || 0); )
              ++i3;
            if (yd[i3] > (xd[i3] || 0))
              --e3;
            if (pr == null) {
              sd = pr = Ctor.precision;
            } else if (dp) {
              sd = pr + (getBase10Exponent(x3) - getBase10Exponent(y2)) + 1;
            } else {
              sd = pr;
            }
            if (sd < 0)
              return new Ctor(0);
            sd = sd / LOG_BASE + 2 | 0;
            i3 = 0;
            if (yL == 1) {
              k3 = 0;
              yd = yd[0];
              sd++;
              for (; (i3 < xL || k3) && sd--; i3++) {
                t2 = k3 * BASE + (xd[i3] || 0);
                qd[i3] = t2 / yd | 0;
                k3 = t2 % yd | 0;
              }
            } else {
              k3 = BASE / (yd[0] + 1) | 0;
              if (k3 > 1) {
                yd = multiplyInteger(yd, k3);
                xd = multiplyInteger(xd, k3);
                yL = yd.length;
                xL = xd.length;
              }
              xi = yL;
              rem = xd.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; )
                rem[remL++] = 0;
              yz = yd.slice();
              yz.unshift(0);
              yd0 = yd[0];
              if (yd[1] >= BASE / 2)
                ++yd0;
              do {
                k3 = 0;
                cmp = compare(yd, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL)
                    rem0 = rem0 * BASE + (rem[1] || 0);
                  k3 = rem0 / yd0 | 0;
                  if (k3 > 1) {
                    if (k3 >= BASE)
                      k3 = BASE - 1;
                    prod = multiplyInteger(yd, k3);
                    prodL = prod.length;
                    remL = rem.length;
                    cmp = compare(prod, rem, prodL, remL);
                    if (cmp == 1) {
                      k3--;
                      subtract2(prod, yL < prodL ? yz : yd, prodL);
                    }
                  } else {
                    if (k3 == 0)
                      cmp = k3 = 1;
                    prod = yd.slice();
                  }
                  prodL = prod.length;
                  if (prodL < remL)
                    prod.unshift(0);
                  subtract2(rem, prod, remL);
                  if (cmp == -1) {
                    remL = rem.length;
                    cmp = compare(yd, rem, yL, remL);
                    if (cmp < 1) {
                      k3++;
                      subtract2(rem, yL < remL ? yz : yd, remL);
                    }
                  }
                  remL = rem.length;
                } else if (cmp === 0) {
                  k3++;
                  rem = [0];
                }
                qd[i3++] = k3;
                if (cmp && rem[0]) {
                  rem[remL++] = xd[xi] || 0;
                } else {
                  rem = [xd[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] !== void 0) && sd--);
            }
            if (!qd[0])
              qd.shift();
            q2.e = e3;
            return round(q2, dp ? pr + getBase10Exponent(q2) + 1 : pr);
          };
        }();
        function exp(x3, sd) {
          var denominator, guard, pow2, sum, t2, wpr, i3 = 0, k3 = 0, Ctor = x3.constructor, pr = Ctor.precision;
          if (getBase10Exponent(x3) > 16)
            throw Error(exponentOutOfRange + getBase10Exponent(x3));
          if (!x3.s)
            return new Ctor(ONE);
          if (sd == null) {
            external = false;
            wpr = pr;
          } else {
            wpr = sd;
          }
          t2 = new Ctor(0.03125);
          while (x3.abs().gte(0.1)) {
            x3 = x3.times(t2);
            k3 += 5;
          }
          guard = Math.log(mathpow(2, k3)) / Math.LN10 * 2 + 5 | 0;
          wpr += guard;
          denominator = pow2 = sum = new Ctor(ONE);
          Ctor.precision = wpr;
          for (; ; ) {
            pow2 = round(pow2.times(x3), wpr);
            denominator = denominator.times(++i3);
            t2 = sum.plus(divide(pow2, denominator, wpr));
            if (digitsToString(t2.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
              while (k3--)
                sum = round(sum.times(sum), wpr);
              Ctor.precision = pr;
              return sd == null ? (external = true, round(sum, pr)) : sum;
            }
            sum = t2;
          }
        }
        function getBase10Exponent(x3) {
          var e3 = x3.e * LOG_BASE, w2 = x3.d[0];
          for (; w2 >= 10; w2 /= 10)
            e3++;
          return e3;
        }
        function getLn10(Ctor, sd, pr) {
          if (sd > Ctor.LN10.sd()) {
            external = true;
            if (pr)
              Ctor.precision = pr;
            throw Error(decimalError + "LN10 precision limit exceeded");
          }
          return round(new Ctor(Ctor.LN10), sd);
        }
        function getZeroString(k3) {
          var zs = "";
          for (; k3--; )
            zs += "0";
          return zs;
        }
        function ln(y2, sd) {
          var c3, c0, denominator, e3, numerator, sum, t2, wpr, x22, n3 = 1, guard = 10, x3 = y2, xd = x3.d, Ctor = x3.constructor, pr = Ctor.precision;
          if (x3.s < 1)
            throw Error(decimalError + (x3.s ? "NaN" : "-Infinity"));
          if (x3.eq(ONE))
            return new Ctor(0);
          if (sd == null) {
            external = false;
            wpr = pr;
          } else {
            wpr = sd;
          }
          if (x3.eq(10)) {
            if (sd == null)
              external = true;
            return getLn10(Ctor, wpr);
          }
          wpr += guard;
          Ctor.precision = wpr;
          c3 = digitsToString(xd);
          c0 = c3.charAt(0);
          e3 = getBase10Exponent(x3);
          if (Math.abs(e3) < 15e14) {
            while (c0 < 7 && c0 != 1 || c0 == 1 && c3.charAt(1) > 3) {
              x3 = x3.times(y2);
              c3 = digitsToString(x3.d);
              c0 = c3.charAt(0);
              n3++;
            }
            e3 = getBase10Exponent(x3);
            if (c0 > 1) {
              x3 = new Ctor("0." + c3);
              e3++;
            } else {
              x3 = new Ctor(c0 + "." + c3.slice(1));
            }
          } else {
            t2 = getLn10(Ctor, wpr + 2, pr).times(e3 + "");
            x3 = ln(new Ctor(c0 + "." + c3.slice(1)), wpr - guard).plus(t2);
            Ctor.precision = pr;
            return sd == null ? (external = true, round(x3, pr)) : x3;
          }
          sum = numerator = x3 = divide(x3.minus(ONE), x3.plus(ONE), wpr);
          x22 = round(x3.times(x3), wpr);
          denominator = 3;
          for (; ; ) {
            numerator = round(numerator.times(x22), wpr);
            t2 = sum.plus(divide(numerator, new Ctor(denominator), wpr));
            if (digitsToString(t2.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
              sum = sum.times(2);
              if (e3 !== 0)
                sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e3 + ""));
              sum = divide(sum, new Ctor(n3), wpr);
              Ctor.precision = pr;
              return sd == null ? (external = true, round(sum, pr)) : sum;
            }
            sum = t2;
            denominator += 2;
          }
        }
        function parseDecimal(x3, str) {
          var e3, i3, len;
          if ((e3 = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          if ((i3 = str.search(/e/i)) > 0) {
            if (e3 < 0)
              e3 = i3;
            e3 += +str.slice(i3 + 1);
            str = str.substring(0, i3);
          } else if (e3 < 0) {
            e3 = str.length;
          }
          for (i3 = 0; str.charCodeAt(i3) === 48; )
            ++i3;
          for (len = str.length; str.charCodeAt(len - 1) === 48; )
            --len;
          str = str.slice(i3, len);
          if (str) {
            len -= i3;
            e3 = e3 - i3 - 1;
            x3.e = mathfloor(e3 / LOG_BASE);
            x3.d = [];
            i3 = (e3 + 1) % LOG_BASE;
            if (e3 < 0)
              i3 += LOG_BASE;
            if (i3 < len) {
              if (i3)
                x3.d.push(+str.slice(0, i3));
              for (len -= LOG_BASE; i3 < len; )
                x3.d.push(+str.slice(i3, i3 += LOG_BASE));
              str = str.slice(i3);
              i3 = LOG_BASE - str.length;
            } else {
              i3 -= len;
            }
            for (; i3--; )
              str += "0";
            x3.d.push(+str);
            if (external && (x3.e > MAX_E || x3.e < -MAX_E))
              throw Error(exponentOutOfRange + e3);
          } else {
            x3.s = 0;
            x3.e = 0;
            x3.d = [0];
          }
          return x3;
        }
        function round(x3, sd, rm) {
          var i3, j3, k3, n3, rd, doRound, w2, xdi, xd = x3.d;
          for (n3 = 1, k3 = xd[0]; k3 >= 10; k3 /= 10)
            n3++;
          i3 = sd - n3;
          if (i3 < 0) {
            i3 += LOG_BASE;
            j3 = sd;
            w2 = xd[xdi = 0];
          } else {
            xdi = Math.ceil((i3 + 1) / LOG_BASE);
            k3 = xd.length;
            if (xdi >= k3)
              return x3;
            w2 = k3 = xd[xdi];
            for (n3 = 1; k3 >= 10; k3 /= 10)
              n3++;
            i3 %= LOG_BASE;
            j3 = i3 - LOG_BASE + n3;
          }
          if (rm !== void 0) {
            k3 = mathpow(10, n3 - j3 - 1);
            rd = w2 / k3 % 10 | 0;
            doRound = sd < 0 || xd[xdi + 1] !== void 0 || w2 % k3;
            doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x3.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 && (i3 > 0 ? j3 > 0 ? w2 / mathpow(10, n3 - j3) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x3.s < 0 ? 8 : 7));
          }
          if (sd < 1 || !xd[0]) {
            if (doRound) {
              k3 = getBase10Exponent(x3);
              xd.length = 1;
              sd = sd - k3 - 1;
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x3.e = mathfloor(-sd / LOG_BASE) || 0;
            } else {
              xd.length = 1;
              xd[0] = x3.e = x3.s = 0;
            }
            return x3;
          }
          if (i3 == 0) {
            xd.length = xdi;
            k3 = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k3 = mathpow(10, LOG_BASE - i3);
            xd[xdi] = j3 > 0 ? (w2 / mathpow(10, n3 - j3) % mathpow(10, j3) | 0) * k3 : 0;
          }
          if (doRound) {
            for (; ; ) {
              if (xdi == 0) {
                if ((xd[0] += k3) == BASE) {
                  xd[0] = 1;
                  ++x3.e;
                }
                break;
              } else {
                xd[xdi] += k3;
                if (xd[xdi] != BASE)
                  break;
                xd[xdi--] = 0;
                k3 = 1;
              }
            }
          }
          for (i3 = xd.length; xd[--i3] === 0; )
            xd.pop();
          if (external && (x3.e > MAX_E || x3.e < -MAX_E)) {
            throw Error(exponentOutOfRange + getBase10Exponent(x3));
          }
          return x3;
        }
        function subtract(x3, y2) {
          var d3, e3, i3, j3, k3, len, xd, xe2, xLTy, yd, Ctor = x3.constructor, pr = Ctor.precision;
          if (!x3.s || !y2.s) {
            if (y2.s)
              y2.s = -y2.s;
            else
              y2 = new Ctor(x3);
            return external ? round(y2, pr) : y2;
          }
          xd = x3.d;
          yd = y2.d;
          e3 = y2.e;
          xe2 = x3.e;
          xd = xd.slice();
          k3 = xe2 - e3;
          if (k3) {
            xLTy = k3 < 0;
            if (xLTy) {
              d3 = xd;
              k3 = -k3;
              len = yd.length;
            } else {
              d3 = yd;
              e3 = xe2;
              len = xd.length;
            }
            i3 = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
            if (k3 > i3) {
              k3 = i3;
              d3.length = 1;
            }
            d3.reverse();
            for (i3 = k3; i3--; )
              d3.push(0);
            d3.reverse();
          } else {
            i3 = xd.length;
            len = yd.length;
            xLTy = i3 < len;
            if (xLTy)
              len = i3;
            for (i3 = 0; i3 < len; i3++) {
              if (xd[i3] != yd[i3]) {
                xLTy = xd[i3] < yd[i3];
                break;
              }
            }
            k3 = 0;
          }
          if (xLTy) {
            d3 = xd;
            xd = yd;
            yd = d3;
            y2.s = -y2.s;
          }
          len = xd.length;
          for (i3 = yd.length - len; i3 > 0; --i3)
            xd[len++] = 0;
          for (i3 = yd.length; i3 > k3; ) {
            if (xd[--i3] < yd[i3]) {
              for (j3 = i3; j3 && xd[--j3] === 0; )
                xd[j3] = BASE - 1;
              --xd[j3];
              xd[i3] += BASE;
            }
            xd[i3] -= yd[i3];
          }
          for (; xd[--len] === 0; )
            xd.pop();
          for (; xd[0] === 0; xd.shift())
            --e3;
          if (!xd[0])
            return new Ctor(0);
          y2.d = xd;
          y2.e = e3;
          return external ? round(y2, pr) : y2;
        }
        function toString2(x3, isExp, sd) {
          var k3, e3 = getBase10Exponent(x3), str = digitsToString(x3.d), len = str.length;
          if (isExp) {
            if (sd && (k3 = sd - len) > 0) {
              str = str.charAt(0) + "." + str.slice(1) + getZeroString(k3);
            } else if (len > 1) {
              str = str.charAt(0) + "." + str.slice(1);
            }
            str = str + (e3 < 0 ? "e" : "e+") + e3;
          } else if (e3 < 0) {
            str = "0." + getZeroString(-e3 - 1) + str;
            if (sd && (k3 = sd - len) > 0)
              str += getZeroString(k3);
          } else if (e3 >= len) {
            str += getZeroString(e3 + 1 - len);
            if (sd && (k3 = sd - e3 - 1) > 0)
              str = str + "." + getZeroString(k3);
          } else {
            if ((k3 = e3 + 1) < len)
              str = str.slice(0, k3) + "." + str.slice(k3);
            if (sd && (k3 = sd - len) > 0) {
              if (e3 + 1 === len)
                str += ".";
              str += getZeroString(k3);
            }
          }
          return x3.s < 0 ? "-" + str : str;
        }
        function truncate2(arr, len) {
          if (arr.length > len) {
            arr.length = len;
            return true;
          }
        }
        function clone(obj) {
          var i3, p2, ps;
          function Decimal4(value2) {
            var x3 = this;
            if (!(x3 instanceof Decimal4))
              return new Decimal4(value2);
            x3.constructor = Decimal4;
            if (value2 instanceof Decimal4) {
              x3.s = value2.s;
              x3.e = value2.e;
              x3.d = (value2 = value2.d) ? value2.slice() : value2;
              return;
            }
            if (typeof value2 === "number") {
              if (value2 * 0 !== 0) {
                throw Error(invalidArgument + value2);
              }
              if (value2 > 0) {
                x3.s = 1;
              } else if (value2 < 0) {
                value2 = -value2;
                x3.s = -1;
              } else {
                x3.s = 0;
                x3.e = 0;
                x3.d = [0];
                return;
              }
              if (value2 === ~~value2 && value2 < 1e7) {
                x3.e = 0;
                x3.d = [value2];
                return;
              }
              return parseDecimal(x3, value2.toString());
            } else if (typeof value2 !== "string") {
              throw Error(invalidArgument + value2);
            }
            if (value2.charCodeAt(0) === 45) {
              value2 = value2.slice(1);
              x3.s = -1;
            } else {
              x3.s = 1;
            }
            if (isDecimal.test(value2))
              parseDecimal(x3, value2);
            else
              throw Error(invalidArgument + value2);
          }
          Decimal4.prototype = P2;
          Decimal4.ROUND_UP = 0;
          Decimal4.ROUND_DOWN = 1;
          Decimal4.ROUND_CEIL = 2;
          Decimal4.ROUND_FLOOR = 3;
          Decimal4.ROUND_HALF_UP = 4;
          Decimal4.ROUND_HALF_DOWN = 5;
          Decimal4.ROUND_HALF_EVEN = 6;
          Decimal4.ROUND_HALF_CEIL = 7;
          Decimal4.ROUND_HALF_FLOOR = 8;
          Decimal4.clone = clone;
          Decimal4.config = Decimal4.set = config;
          if (obj === void 0)
            obj = {};
          if (obj) {
            ps = ["precision", "rounding", "toExpNeg", "toExpPos", "LN10"];
            for (i3 = 0; i3 < ps.length; )
              if (!obj.hasOwnProperty(p2 = ps[i3++]))
                obj[p2] = this[p2];
          }
          Decimal4.config(obj);
          return Decimal4;
        }
        function config(obj) {
          if (!obj || typeof obj !== "object") {
            throw Error(decimalError + "Object expected");
          }
          var i3, p2, v2, ps = [
            "precision",
            1,
            MAX_DIGITS,
            "rounding",
            0,
            8,
            "toExpNeg",
            -1 / 0,
            0,
            "toExpPos",
            0,
            1 / 0
          ];
          for (i3 = 0; i3 < ps.length; i3 += 3) {
            if ((v2 = obj[p2 = ps[i3]]) !== void 0) {
              if (mathfloor(v2) === v2 && v2 >= ps[i3 + 1] && v2 <= ps[i3 + 2])
                this[p2] = v2;
              else
                throw Error(invalidArgument + p2 + ": " + v2);
            }
          }
          if ((v2 = obj[p2 = "LN10"]) !== void 0) {
            if (v2 == Math.LN10)
              this[p2] = new this(v2);
            else
              throw Error(invalidArgument + p2 + ": " + v2);
          }
          return this;
        }
        Decimal3 = clone(Decimal3);
        Decimal3["default"] = Decimal3.Decimal = Decimal3;
        ONE = new Decimal3(1);
        if (typeof define == "function" && define.amd) {
          define(function() {
            return Decimal3;
          });
        } else if (typeof module2 != "undefined" && module2.exports) {
          module2.exports = Decimal3;
        } else {
          if (!globalScope) {
            globalScope = typeof self != "undefined" && self && self.self == self ? self : Function("return this")();
          }
          globalScope.Decimal = Decimal3;
        }
      })(exports);
    }
  });

  // node_modules/lodash/last.js
  var require_last = __commonJS({
    "node_modules/lodash/last.js"(exports, module2) {
      function last(array) {
        var length2 = array == null ? 0 : array.length;
        return length2 ? array[length2 - 1] : void 0;
      }
      module2.exports = last;
    }
  });

  // node_modules/lodash/_baseRange.js
  var require_baseRange = __commonJS({
    "node_modules/lodash/_baseRange.js"(exports, module2) {
      var nativeCeil = Math.ceil;
      var nativeMax2 = Math.max;
      function baseRange(start, end, step, fromRight) {
        var index2 = -1, length2 = nativeMax2(nativeCeil((end - start) / (step || 1)), 0), result = Array(length2);
        while (length2--) {
          result[fromRight ? length2 : ++index2] = start;
          start += step;
        }
        return result;
      }
      module2.exports = baseRange;
    }
  });

  // node_modules/lodash/toFinite.js
  var require_toFinite = __commonJS({
    "node_modules/lodash/toFinite.js"(exports, module2) {
      var toNumber2 = require_toNumber();
      var INFINITY = 1 / 0;
      var MAX_INTEGER = 17976931348623157e292;
      function toFinite(value2) {
        if (!value2) {
          return value2 === 0 ? value2 : 0;
        }
        value2 = toNumber2(value2);
        if (value2 === INFINITY || value2 === -INFINITY) {
          var sign2 = value2 < 0 ? -1 : 1;
          return sign2 * MAX_INTEGER;
        }
        return value2 === value2 ? value2 : 0;
      }
      module2.exports = toFinite;
    }
  });

  // node_modules/lodash/_createRange.js
  var require_createRange = __commonJS({
    "node_modules/lodash/_createRange.js"(exports, module2) {
      var baseRange = require_baseRange();
      var isIterateeCall = require_isIterateeCall();
      var toFinite = require_toFinite();
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = void 0;
          }
          start = toFinite(start);
          if (end === void 0) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === void 0 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      module2.exports = createRange;
    }
  });

  // node_modules/lodash/range.js
  var require_range = __commonJS({
    "node_modules/lodash/range.js"(exports, module2) {
      var createRange = require_createRange();
      var range4 = createRange();
      module2.exports = range4;
    }
  });

  // node_modules/lodash/_baseSome.js
  var require_baseSome = __commonJS({
    "node_modules/lodash/_baseSome.js"(exports, module2) {
      var baseEach = require_baseEach();
      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function(value2, index2, collection2) {
          result = predicate(value2, index2, collection2);
          return !result;
        });
        return !!result;
      }
      module2.exports = baseSome;
    }
  });

  // node_modules/lodash/some.js
  var require_some = __commonJS({
    "node_modules/lodash/some.js"(exports, module2) {
      var arraySome = require_arraySome();
      var baseIteratee = require_baseIteratee();
      var baseSome = require_baseSome();
      var isArray2 = require_isArray();
      var isIterateeCall = require_isIterateeCall();
      function some(collection, predicate, guard) {
        var func2 = isArray2(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = void 0;
        }
        return func2(collection, baseIteratee(predicate, 3));
      }
      module2.exports = some;
    }
  });

  // node_modules/lodash/_arrayEvery.js
  var require_arrayEvery = __commonJS({
    "node_modules/lodash/_arrayEvery.js"(exports, module2) {
      function arrayEvery(array, predicate) {
        var index2 = -1, length2 = array == null ? 0 : array.length;
        while (++index2 < length2) {
          if (!predicate(array[index2], index2, array)) {
            return false;
          }
        }
        return true;
      }
      module2.exports = arrayEvery;
    }
  });

  // node_modules/lodash/_baseEvery.js
  var require_baseEvery = __commonJS({
    "node_modules/lodash/_baseEvery.js"(exports, module2) {
      var baseEach = require_baseEach();
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value2, index2, collection2) {
          result = !!predicate(value2, index2, collection2);
          return result;
        });
        return result;
      }
      module2.exports = baseEvery;
    }
  });

  // node_modules/lodash/every.js
  var require_every = __commonJS({
    "node_modules/lodash/every.js"(exports, module2) {
      var arrayEvery = require_arrayEvery();
      var baseEvery = require_baseEvery();
      var baseIteratee = require_baseIteratee();
      var isArray2 = require_isArray();
      var isIterateeCall = require_isIterateeCall();
      function every(collection, predicate, guard) {
        var func2 = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = void 0;
        }
        return func2(collection, baseIteratee(predicate, 3));
      }
      module2.exports = every;
    }
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "node_modules/lodash/_baseAssignValue.js"(exports, module2) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key, value2) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value2,
            "writable": true
          });
        } else {
          object[key] = value2;
        }
      }
      module2.exports = baseAssignValue;
    }
  });

  // node_modules/lodash/mapValues.js
  var require_mapValues = __commonJS({
    "node_modules/lodash/mapValues.js"(exports, module2) {
      var baseAssignValue = require_baseAssignValue();
      var baseForOwn = require_baseForOwn();
      var baseIteratee = require_baseIteratee();
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = baseIteratee(iteratee, 3);
        baseForOwn(object, function(value2, key, object2) {
          baseAssignValue(result, key, iteratee(value2, key, object2));
        });
        return result;
      }
      module2.exports = mapValues;
    }
  });

  // node_modules/lodash/_createFind.js
  var require_createFind = __commonJS({
    "node_modules/lodash/_createFind.js"(exports, module2) {
      var baseIteratee = require_baseIteratee();
      var isArrayLike = require_isArrayLike();
      var keys = require_keys();
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = baseIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }
          var index2 = findIndexFunc(collection, predicate, fromIndex);
          return index2 > -1 ? iterable[iteratee ? collection[index2] : index2] : void 0;
        };
      }
      module2.exports = createFind;
    }
  });

  // node_modules/lodash/toInteger.js
  var require_toInteger = __commonJS({
    "node_modules/lodash/toInteger.js"(exports, module2) {
      var toFinite = require_toFinite();
      function toInteger2(value2) {
        var result = toFinite(value2), remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }
      module2.exports = toInteger2;
    }
  });

  // node_modules/lodash/findIndex.js
  var require_findIndex = __commonJS({
    "node_modules/lodash/findIndex.js"(exports, module2) {
      var baseFindIndex = require_baseFindIndex();
      var baseIteratee = require_baseIteratee();
      var toInteger2 = require_toInteger();
      var nativeMax2 = Math.max;
      function findIndex2(array, predicate, fromIndex) {
        var length2 = array == null ? 0 : array.length;
        if (!length2) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger2(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax2(length2 + index2, 0);
        }
        return baseFindIndex(array, baseIteratee(predicate, 3), index2);
      }
      module2.exports = findIndex2;
    }
  });

  // node_modules/lodash/find.js
  var require_find = __commonJS({
    "node_modules/lodash/find.js"(exports, module2) {
      var createFind = require_createFind();
      var findIndex2 = require_findIndex();
      var find = createFind(findIndex2);
      module2.exports = find;
    }
  });

  // node_modules/lodash/throttle.js
  var require_throttle = __commonJS({
    "node_modules/lodash/throttle.js"(exports, module2) {
      var debounce2 = require_debounce();
      var isObject2 = require_isObject();
      var FUNC_ERROR_TEXT2 = "Expected a function";
      function throttle2(func2, wait2, options2) {
        var leading = true, trailing = true;
        if (typeof func2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT2);
        }
        if (isObject2(options2)) {
          leading = "leading" in options2 ? !!options2.leading : leading;
          trailing = "trailing" in options2 ? !!options2.trailing : trailing;
        }
        return debounce2(func2, wait2, {
          "leading": leading,
          "maxWait": wait2,
          "trailing": trailing
        });
      }
      module2.exports = throttle2;
    }
  });

  // node_modules/lodash/isBoolean.js
  var require_isBoolean = __commonJS({
    "node_modules/lodash/isBoolean.js"(exports, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var boolTag = "[object Boolean]";
      function isBoolean(value2) {
        return value2 === true || value2 === false || isObjectLike2(value2) && baseGetTag2(value2) == boolTag;
      }
      module2.exports = isBoolean;
    }
  });

  // node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "node_modules/eventemitter3/index.js"(exports, module2) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix2 = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = Object.create(null);
        if (!new Events().__proto__)
          prefix2 = false;
      }
      function EE(fn, context2, once) {
        this.fn = fn;
        this.context = context2;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context2, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context2 || emitter, once), evt = prefix2 ? prefix2 + event : event;
        if (!emitter._events[evt])
          emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn)
          emitter._events[evt].push(listener);
        else
          emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0)
          emitter._events = new Events();
        else
          delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events = this._events) {
          if (has.call(events, name))
            names.push(prefix2 ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix2 ? prefix2 + event : event, handlers2 = this._events[evt];
        if (!handlers2)
          return [];
        if (handlers2.fn)
          return [handlers2.fn];
        for (var i3 = 0, l2 = handlers2.length, ee2 = new Array(l2); i3 < l2; i3++) {
          ee2[i3] = handlers2[i3].fn;
        }
        return ee2;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
        if (!listeners)
          return 0;
        if (listeners.fn)
          return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a22, a3, a4, a5) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i3;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a22), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a22, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a22, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a22, a3, a4, a5), true;
          }
          for (i3 = 1, args = new Array(len - 1); i3 < len; i3++) {
            args[i3 - 1] = arguments[i3];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length2 = listeners.length, j3;
          for (i3 = 0; i3 < length2; i3++) {
            if (listeners[i3].once)
              this.removeListener(event, listeners[i3].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i3].fn.call(listeners[i3].context);
                break;
              case 2:
                listeners[i3].fn.call(listeners[i3].context, a1);
                break;
              case 3:
                listeners[i3].fn.call(listeners[i3].context, a1, a22);
                break;
              case 4:
                listeners[i3].fn.call(listeners[i3].context, a1, a22, a3);
                break;
              default:
                if (!args)
                  for (j3 = 1, args = new Array(len - 1); j3 < len; j3++) {
                    args[j3 - 1] = arguments[j3];
                  }
                listeners[i3].fn.apply(listeners[i3].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on2(event, fn, context2) {
        return addListener(this, event, fn, context2, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context2) {
        return addListener(this, event, fn, context2, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn, context2, once) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt])
          return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context2 || listeners.context === context2)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i3 = 0, events = [], length2 = listeners.length; i3 < length2; i3++) {
            if (listeners[i3].fn !== fn || once && !listeners[i3].once || context2 && listeners[i3].context !== context2) {
              events.push(listeners[i3]);
            }
          }
          if (events.length)
            this._events[evt] = events.length === 1 ? events[0] : events;
          else
            clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix2 ? prefix2 + event : event;
          if (this._events[evt])
            clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix2;
      EventEmitter2.EventEmitter = EventEmitter2;
      if (typeof module2 !== "undefined") {
        module2.exports = EventEmitter2;
      }
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js
  var require_emotion_sheet_cjs_dev = __commonJS({
    "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function sheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i3 = 0; i3 < document.styleSheets.length; i3++) {
          if (document.styleSheets[i3].ownerNode === tag) {
            return document.styleSheets[i3];
          }
        }
      }
      function createStyleElement(options2) {
        var tag = document.createElement("style");
        tag.setAttribute("data-emotion", options2.key);
        if (options2.nonce !== void 0) {
          tag.setAttribute("nonce", options2.nonce);
        }
        tag.appendChild(document.createTextNode(""));
        tag.setAttribute("data-s", "");
        return tag;
      }
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options2) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options2.speedy === void 0 ? false : options2.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options2.nonce;
          this.key = options2.key;
          this.container = options2.container;
          this.prepend = options2.prepend;
          this.insertionPoint = options2.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e3) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e3);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush2() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
      exports.StyleSheet = StyleSheet;
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js
  var require_emotion_sheet_cjs = __commonJS({
    "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_sheet_cjs_dev();
      }
    }
  });

  // node_modules/stylis/dist/umd/stylis.js
  var require_stylis = __commonJS({
    "node_modules/stylis/dist/umd/stylis.js"(exports, module2) {
      (function(e3, r) {
        typeof exports === "object" && typeof module2 !== "undefined" ? r(exports) : typeof define === "function" && define.amd ? define(["exports"], r) : (e3 = e3 || self, r(e3.stylis = {}));
      })(exports, function(e3) {
        "use strict";
        var r = "-ms-";
        var a3 = "-moz-";
        var c3 = "-webkit-";
        var t2 = "comm";
        var n3 = "rule";
        var s3 = "decl";
        var i3 = "@page";
        var u3 = "@media";
        var o2 = "@import";
        var f3 = "@charset";
        var l2 = "@viewport";
        var h2 = "@supports";
        var p2 = "@document";
        var v2 = "@namespace";
        var b2 = "@keyframes";
        var d3 = "@font-face";
        var m3 = "@counter-style";
        var w2 = "@font-feature-values";
        var k3 = Math.abs;
        var $2 = String.fromCharCode;
        var g3 = Object.assign;
        function x3(e4, r2) {
          return (((r2 << 2 ^ O2(e4, 0)) << 2 ^ O2(e4, 1)) << 2 ^ O2(e4, 2)) << 2 ^ O2(e4, 3);
        }
        function E2(e4) {
          return e4.trim();
        }
        function y2(e4, r2) {
          return (e4 = r2.exec(e4)) ? e4[0] : e4;
        }
        function T(e4, r2, a4) {
          return e4.replace(r2, a4);
        }
        function A2(e4, r2) {
          return e4.indexOf(r2);
        }
        function O2(e4, r2) {
          return e4.charCodeAt(r2) | 0;
        }
        function C2(e4, r2, a4) {
          return e4.slice(r2, a4);
        }
        function M2(e4) {
          return e4.length;
        }
        function S2(e4) {
          return e4.length;
        }
        function R2(e4, r2) {
          return r2.push(e4), e4;
        }
        function z(e4, r2) {
          return e4.map(r2).join("");
        }
        e3.line = 1;
        e3.column = 1;
        e3.length = 0;
        e3.position = 0;
        e3.character = 0;
        e3.characters = "";
        function N(r2, a4, c4, t3, n4, s4, i4) {
          return { value: r2, root: a4, parent: c4, type: t3, props: n4, children: s4, line: e3.line, column: e3.column, length: i4, return: "" };
        }
        function P2(e4, r2) {
          return g3(N("", null, null, "", null, null, 0), e4, { length: -e4.length }, r2);
        }
        function j3() {
          return e3.character;
        }
        function U2() {
          e3.character = e3.position > 0 ? O2(e3.characters, --e3.position) : 0;
          if (e3.column--, e3.character === 10)
            e3.column = 1, e3.line--;
          return e3.character;
        }
        function _2() {
          e3.character = e3.position < e3.length ? O2(e3.characters, e3.position++) : 0;
          if (e3.column++, e3.character === 10)
            e3.column = 1, e3.line++;
          return e3.character;
        }
        function F() {
          return O2(e3.characters, e3.position);
        }
        function I() {
          return e3.position;
        }
        function L2(r2, a4) {
          return C2(e3.characters, r2, a4);
        }
        function D2(e4) {
          switch (e4) {
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            case 59:
            case 123:
            case 125:
              return 4;
            case 58:
              return 3;
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }
        function K2(r2) {
          return e3.line = e3.column = 1, e3.length = M2(e3.characters = r2), e3.position = 0, [];
        }
        function V2(r2) {
          return e3.characters = "", r2;
        }
        function W2(r2) {
          return E2(L2(e3.position - 1, Z(r2 === 91 ? r2 + 2 : r2 === 40 ? r2 + 1 : r2)));
        }
        function Y(e4) {
          return V2(G2(K2(e4)));
        }
        function B(r2) {
          while (e3.character = F())
            if (e3.character < 33)
              _2();
            else
              break;
          return D2(r2) > 2 || D2(e3.character) > 3 ? "" : " ";
        }
        function G2(r2) {
          while (_2())
            switch (D2(e3.character)) {
              case 0:
                R2(J2(e3.position - 1), r2);
                break;
              case 2:
                R2(W2(e3.character), r2);
                break;
              default:
                R2($2(e3.character), r2);
            }
          return r2;
        }
        function H2(r2, a4) {
          while (--a4 && _2())
            if (e3.character < 48 || e3.character > 102 || e3.character > 57 && e3.character < 65 || e3.character > 70 && e3.character < 97)
              break;
          return L2(r2, I() + (a4 < 6 && F() == 32 && _2() == 32));
        }
        function Z(r2) {
          while (_2())
            switch (e3.character) {
              case r2:
                return e3.position;
              case 34:
              case 39:
                if (r2 !== 34 && r2 !== 39)
                  Z(e3.character);
                break;
              case 40:
                if (r2 === 41)
                  Z(r2);
                break;
              case 92:
                _2();
                break;
            }
          return e3.position;
        }
        function q2(r2, a4) {
          while (_2())
            if (r2 + e3.character === 47 + 10)
              break;
            else if (r2 + e3.character === 42 + 42 && F() === 47)
              break;
          return "/*" + L2(a4, e3.position - 1) + "*" + $2(r2 === 47 ? r2 : _2());
        }
        function J2(r2) {
          while (!D2(F()))
            _2();
          return L2(r2, e3.position);
        }
        function Q2(e4) {
          return V2(X2("", null, null, null, [""], e4 = K2(e4), 0, [0], e4));
        }
        function X2(e4, r2, a4, c4, t3, n4, s4, i4, u4) {
          var o3 = 0;
          var f4 = 0;
          var l3 = s4;
          var h3 = 0;
          var p3 = 0;
          var v3 = 0;
          var b3 = 1;
          var d4 = 1;
          var m4 = 1;
          var w3 = 0;
          var k4 = "";
          var g4 = t3;
          var x4 = n4;
          var E3 = c4;
          var y3 = k4;
          while (d4)
            switch (v3 = w3, w3 = _2()) {
              case 40:
                if (v3 != 108 && y3.charCodeAt(l3 - 1) == 58) {
                  if (A2(y3 += T(W2(w3), "&", "&\f"), "&\f") != -1)
                    m4 = -1;
                  break;
                }
              case 34:
              case 39:
              case 91:
                y3 += W2(w3);
                break;
              case 9:
              case 10:
              case 13:
              case 32:
                y3 += B(v3);
                break;
              case 92:
                y3 += H2(I() - 1, 7);
                continue;
              case 47:
                switch (F()) {
                  case 42:
                  case 47:
                    R2(re3(q2(_2(), I()), r2, a4), u4);
                    break;
                  default:
                    y3 += "/";
                }
                break;
              case 123 * b3:
                i4[o3++] = M2(y3) * m4;
              case 125 * b3:
              case 59:
              case 0:
                switch (w3) {
                  case 0:
                  case 125:
                    d4 = 0;
                  case 59 + f4:
                    if (p3 > 0 && M2(y3) - l3)
                      R2(p3 > 32 ? ae(y3 + ";", c4, a4, l3 - 1) : ae(T(y3, " ", "") + ";", c4, a4, l3 - 2), u4);
                    break;
                  case 59:
                    y3 += ";";
                  default:
                    R2(E3 = ee2(y3, r2, a4, o3, f4, t3, i4, k4, g4 = [], x4 = [], l3), n4);
                    if (w3 === 123)
                      if (f4 === 0)
                        X2(y3, r2, E3, E3, g4, n4, l3, i4, x4);
                      else
                        switch (h3) {
                          case 100:
                          case 109:
                          case 115:
                            X2(e4, E3, E3, c4 && R2(ee2(e4, E3, E3, 0, 0, t3, i4, k4, t3, g4 = [], l3), x4), t3, x4, l3, i4, c4 ? g4 : x4);
                            break;
                          default:
                            X2(y3, E3, E3, E3, [""], x4, 0, i4, x4);
                        }
                }
                o3 = f4 = p3 = 0, b3 = m4 = 1, k4 = y3 = "", l3 = s4;
                break;
              case 58:
                l3 = 1 + M2(y3), p3 = v3;
              default:
                if (b3 < 1) {
                  if (w3 == 123)
                    --b3;
                  else if (w3 == 125 && b3++ == 0 && U2() == 125)
                    continue;
                }
                switch (y3 += $2(w3), w3 * b3) {
                  case 38:
                    m4 = f4 > 0 ? 1 : (y3 += "\f", -1);
                    break;
                  case 44:
                    i4[o3++] = (M2(y3) - 1) * m4, m4 = 1;
                    break;
                  case 64:
                    if (F() === 45)
                      y3 += W2(_2());
                    h3 = F(), f4 = l3 = M2(k4 = y3 += J2(I())), w3++;
                    break;
                  case 45:
                    if (v3 === 45 && M2(y3) == 2)
                      b3 = 0;
                }
            }
          return n4;
        }
        function ee2(e4, r2, a4, c4, t3, s4, i4, u4, o3, f4, l3) {
          var h3 = t3 - 1;
          var p3 = t3 === 0 ? s4 : [""];
          var v3 = S2(p3);
          for (var b3 = 0, d4 = 0, m4 = 0; b3 < c4; ++b3)
            for (var w3 = 0, $3 = C2(e4, h3 + 1, h3 = k3(d4 = i4[b3])), g4 = e4; w3 < v3; ++w3)
              if (g4 = E2(d4 > 0 ? p3[w3] + " " + $3 : T($3, /&\f/g, p3[w3])))
                o3[m4++] = g4;
          return N(e4, r2, a4, t3 === 0 ? n3 : u4, o3, f4, l3);
        }
        function re3(e4, r2, a4) {
          return N(e4, r2, a4, t2, $2(j3()), C2(e4, 2, -2), 0);
        }
        function ae(e4, r2, a4, c4) {
          return N(e4, r2, a4, s3, C2(e4, 0, c4), C2(e4, c4 + 1, -1), c4);
        }
        function ce2(e4, t3) {
          switch (x3(e4, t3)) {
            case 5103:
              return c3 + "print-" + e4 + e4;
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return c3 + e4 + e4;
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return c3 + e4 + a3 + e4 + r + e4 + e4;
            case 6828:
            case 4268:
              return c3 + e4 + r + e4 + e4;
            case 6165:
              return c3 + e4 + r + "flex-" + e4 + e4;
            case 5187:
              return c3 + e4 + T(e4, /(\w+).+(:[^]+)/, c3 + "box-$1$2" + r + "flex-$1$2") + e4;
            case 5443:
              return c3 + e4 + r + "flex-item-" + T(e4, /flex-|-self/, "") + e4;
            case 4675:
              return c3 + e4 + r + "flex-line-pack" + T(e4, /align-content|flex-|-self/, "") + e4;
            case 5548:
              return c3 + e4 + r + T(e4, "shrink", "negative") + e4;
            case 5292:
              return c3 + e4 + r + T(e4, "basis", "preferred-size") + e4;
            case 6060:
              return c3 + "box-" + T(e4, "-grow", "") + c3 + e4 + r + T(e4, "grow", "positive") + e4;
            case 4554:
              return c3 + T(e4, /([^-])(transform)/g, "$1" + c3 + "$2") + e4;
            case 6187:
              return T(T(T(e4, /(zoom-|grab)/, c3 + "$1"), /(image-set)/, c3 + "$1"), e4, "") + e4;
            case 5495:
            case 3959:
              return T(e4, /(image-set\([^]*)/, c3 + "$1$`$1");
            case 4968:
              return T(T(e4, /(.+:)(flex-)?(.*)/, c3 + "box-pack:$3" + r + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + c3 + e4 + e4;
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return T(e4, /(.+)-inline(.+)/, c3 + "$1$2") + e4;
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              if (M2(e4) - 1 - t3 > 6)
                switch (O2(e4, t3 + 1)) {
                  case 109:
                    if (O2(e4, t3 + 4) !== 45)
                      break;
                  case 102:
                    return T(e4, /(.+:)(.+)-([^]+)/, "$1" + c3 + "$2-$3$1" + a3 + (O2(e4, t3 + 3) == 108 ? "$3" : "$2-$3")) + e4;
                  case 115:
                    return ~A2(e4, "stretch") ? ce2(T(e4, "stretch", "fill-available"), t3) + e4 : e4;
                }
              break;
            case 4949:
              if (O2(e4, t3 + 1) !== 115)
                break;
            case 6444:
              switch (O2(e4, M2(e4) - 3 - (~A2(e4, "!important") && 10))) {
                case 107:
                  return T(e4, ":", ":" + c3) + e4;
                case 101:
                  return T(e4, /(.+:)([^;!]+)(;|!.+)?/, "$1" + c3 + (O2(e4, 14) === 45 ? "inline-" : "") + "box$3$1" + c3 + "$2$3$1" + r + "$2box$3") + e4;
              }
              break;
            case 5936:
              switch (O2(e4, t3 + 11)) {
                case 114:
                  return c3 + e4 + r + T(e4, /[svh]\w+-[tblr]{2}/, "tb") + e4;
                case 108:
                  return c3 + e4 + r + T(e4, /[svh]\w+-[tblr]{2}/, "tb-rl") + e4;
                case 45:
                  return c3 + e4 + r + T(e4, /[svh]\w+-[tblr]{2}/, "lr") + e4;
              }
              return c3 + e4 + r + e4 + e4;
          }
          return e4;
        }
        function te2(e4, r2) {
          var a4 = "";
          var c4 = S2(e4);
          for (var t3 = 0; t3 < c4; t3++)
            a4 += r2(e4[t3], t3, e4, r2) || "";
          return a4;
        }
        function ne2(e4, r2, a4, c4) {
          switch (e4.type) {
            case o2:
            case s3:
              return e4.return = e4.return || e4.value;
            case t2:
              return "";
            case b2:
              return e4.return = e4.value + "{" + te2(e4.children, c4) + "}";
            case n3:
              e4.value = e4.props.join(",");
          }
          return M2(a4 = te2(e4.children, c4)) ? e4.return = e4.value + "{" + a4 + "}" : "";
        }
        function se2(e4) {
          var r2 = S2(e4);
          return function(a4, c4, t3, n4) {
            var s4 = "";
            for (var i4 = 0; i4 < r2; i4++)
              s4 += e4[i4](a4, c4, t3, n4) || "";
            return s4;
          };
        }
        function ie(e4) {
          return function(r2) {
            if (!r2.root) {
              if (r2 = r2.return)
                e4(r2);
            }
          };
        }
        function ue2(e4, t3, i4, u4) {
          if (e4.length > -1) {
            if (!e4.return)
              switch (e4.type) {
                case s3:
                  e4.return = ce2(e4.value, e4.length);
                  break;
                case b2:
                  return te2([P2(e4, { value: T(e4.value, "@", "@" + c3) })], u4);
                case n3:
                  if (e4.length)
                    return z(e4.props, function(t4) {
                      switch (y2(t4, /(::plac\w+|:read-\w+)/)) {
                        case ":read-only":
                        case ":read-write":
                          return te2([P2(e4, { props: [T(t4, /:(read-\w+)/, ":" + a3 + "$1")] })], u4);
                        case "::placeholder":
                          return te2([P2(e4, { props: [T(t4, /:(plac\w+)/, ":" + c3 + "input-$1")] }), P2(e4, { props: [T(t4, /:(plac\w+)/, ":" + a3 + "$1")] }), P2(e4, { props: [T(t4, /:(plac\w+)/, r + "input-$1")] })], u4);
                      }
                      return "";
                    });
              }
          }
        }
        function oe2(e4) {
          switch (e4.type) {
            case n3:
              e4.props = e4.props.map(function(r2) {
                return z(Y(r2), function(r3, a4, c4) {
                  switch (O2(r3, 0)) {
                    case 12:
                      return C2(r3, 1, M2(r3));
                    case 0:
                    case 40:
                    case 43:
                    case 62:
                    case 126:
                      return r3;
                    case 58:
                      if (c4[++a4] === "global")
                        c4[a4] = "", c4[++a4] = "\f" + C2(c4[a4], a4 = 1, -1);
                    case 32:
                      return a4 === 1 ? "" : r3;
                    default:
                      switch (a4) {
                        case 0:
                          e4 = r3;
                          return S2(c4) > 1 ? "" : r3;
                        case (a4 = S2(c4) - 1):
                        case 2:
                          return a4 === 2 ? r3 + e4 + e4 : r3 + e4;
                        default:
                          return r3;
                      }
                  }
                });
              });
          }
        }
        e3.CHARSET = f3;
        e3.COMMENT = t2;
        e3.COUNTER_STYLE = m3;
        e3.DECLARATION = s3;
        e3.DOCUMENT = p2;
        e3.FONT_FACE = d3;
        e3.FONT_FEATURE_VALUES = w2;
        e3.IMPORT = o2;
        e3.KEYFRAMES = b2;
        e3.MEDIA = u3;
        e3.MOZ = a3;
        e3.MS = r;
        e3.NAMESPACE = v2;
        e3.PAGE = i3;
        e3.RULESET = n3;
        e3.SUPPORTS = h2;
        e3.VIEWPORT = l2;
        e3.WEBKIT = c3;
        e3.abs = k3;
        e3.alloc = K2;
        e3.append = R2;
        e3.assign = g3;
        e3.caret = I;
        e3.char = j3;
        e3.charat = O2;
        e3.combine = z;
        e3.comment = re3;
        e3.commenter = q2;
        e3.compile = Q2;
        e3.copy = P2;
        e3.dealloc = V2;
        e3.declaration = ae;
        e3.delimit = W2;
        e3.delimiter = Z;
        e3.escaping = H2;
        e3.from = $2;
        e3.hash = x3;
        e3.identifier = J2;
        e3.indexof = A2;
        e3.match = y2;
        e3.middleware = se2;
        e3.namespace = oe2;
        e3.next = _2;
        e3.node = N;
        e3.parse = X2;
        e3.peek = F;
        e3.prefix = ce2;
        e3.prefixer = ue2;
        e3.prev = U2;
        e3.replace = T;
        e3.ruleset = ee2;
        e3.rulesheet = ie;
        e3.serialize = te2;
        e3.sizeof = S2;
        e3.slice = L2;
        e3.stringify = ne2;
        e3.strlen = M2;
        e3.substr = C2;
        e3.token = D2;
        e3.tokenize = Y;
        e3.tokenizer = G2;
        e3.trim = E2;
        e3.whitespace = B;
        Object.defineProperty(e3, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js
  var require_emotion_weak_memoize_cjs_dev = __commonJS({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var weakMemoize = function weakMemoize2(func2) {
        var cache3 = new WeakMap();
        return function(arg) {
          if (cache3.has(arg)) {
            return cache3.get(arg);
          }
          var ret = func2(arg);
          cache3.set(arg, ret);
          return ret;
        };
      };
      exports.default = weakMemoize;
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js
  var require_emotion_weak_memoize_cjs = __commonJS({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_weak_memoize_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js
  var require_emotion_memoize_cjs_dev = __commonJS({
    "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize3(fn) {
        var cache3 = Object.create(null);
        return function(arg) {
          if (cache3[arg] === void 0)
            cache3[arg] = fn(arg);
          return cache3[arg];
        };
      }
      exports.default = memoize3;
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js
  var require_emotion_memoize_cjs = __commonJS({
    "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_memoize_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js
  var require_emotion_cache_cjs_dev = __commonJS({
    "node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sheet = require_emotion_sheet_cjs();
      var stylis = require_stylis();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e3) {
        return e3 && e3.__esModule ? e3 : { "default": e3 };
      }
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
        var previous = 0;
        var character = 0;
        while (true) {
          previous = character;
          character = stylis.peek();
          if (previous === 38 && character === 12) {
            points[index2] = 1;
          }
          if (stylis.token(character)) {
            break;
          }
          stylis.next();
        }
        return stylis.slice(begin, stylis.position);
      };
      var toRules = function toRules2(parsed, points) {
        var index2 = -1;
        var character = 44;
        do {
          switch (stylis.token(character)) {
            case 0:
              if (character === 38 && stylis.peek() === 12) {
                points[index2] = 1;
              }
              parsed[index2] += identifierWithPointTracking(stylis.position - 1, points, index2);
              break;
            case 2:
              parsed[index2] += stylis.delimit(character);
              break;
            case 4:
              if (character === 44) {
                parsed[++index2] = stylis.peek() === 58 ? "&\f" : "";
                points[index2] = parsed[index2].length;
                break;
              }
            default:
              parsed[index2] += stylis.from(character);
          }
        } while (character = stylis.next());
        return parsed;
      };
      var getRules = function getRules2(value2, points) {
        return stylis.dealloc(toRules(stylis.alloc(value2), points));
      };
      var fixedElements = /* @__PURE__ */ new WeakMap();
      var compat = function compat2(element2) {
        if (element2.type !== "rule" || !element2.parent || element2.length < 1) {
          return;
        }
        var value2 = element2.value, parent = element2.parent;
        var isImplicitRule = element2.column === parent.column && element2.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element2.props.length === 1 && value2.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element2, true);
        var points = [];
        var rules = getRules(value2, points);
        var parentRules = parent.props;
        for (var i3 = 0, k3 = 0; i3 < rules.length; i3++) {
          for (var j3 = 0; j3 < parentRules.length; j3++, k3++) {
            element2.props[k3] = points[i3] ? rules[i3].replace(/&\f/g, parentRules[j3]) : parentRules[j3] + " " + rules[i3];
          }
        }
      };
      var removeLabel = function removeLabel2(element2) {
        if (element2.type === "decl") {
          var value2 = element2.value;
          if (value2.charCodeAt(0) === 108 && value2.charCodeAt(2) === 98) {
            element2["return"] = "";
            element2.value = "";
          }
        }
      };
      var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      var isIgnoringComment = function isIgnoringComment2(element2) {
        return element2.type === "comm" && element2.children.indexOf(ignoreFlag) > -1;
      };
      var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache3) {
        return function(element2, index2, children) {
          if (element2.type !== "rule" || cache3.compat)
            return;
          var unsafePseudoClasses = element2.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = element2.parent === children[0];
            var commentContainer = isNested ? children[0].children : children;
            for (var i3 = commentContainer.length - 1; i3 >= 0; i3--) {
              var node = commentContainer[i3];
              if (node.line < element2.line) {
                break;
              }
              if (node.column < element2.column) {
                if (isIgnoringComment(node)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      var isImportRule = function isImportRule2(element2) {
        return element2.type.charCodeAt(1) === 105 && element2.type.charCodeAt(0) === 64;
      };
      var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
        for (var i3 = index2 - 1; i3 >= 0; i3--) {
          if (!isImportRule(children[i3])) {
            return true;
          }
        }
        return false;
      };
      var nullifyElement = function nullifyElement2(element2) {
        element2.type = "";
        element2.value = "";
        element2["return"] = "";
        element2.children = "";
        element2.props = "";
      };
      var incorrectImportAlarm = function incorrectImportAlarm2(element2, index2, children) {
        if (!isImportRule(element2)) {
          return;
        }
        if (element2.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element2);
        } else if (isPrependedWithRegularRules(index2, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element2);
        }
      };
      var isBrowser = typeof document !== "undefined";
      var getServerStylisCache = isBrowser ? void 0 : weakMemoize__default["default"](function() {
        return memoize__default["default"](function() {
          var cache3 = {};
          return function(name) {
            return cache3[name];
          };
        });
      });
      var defaultStylisPlugins = [stylis.prefixer];
      var createCache2 = function createCache3(options2) {
        var key = options2.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (isBrowser && key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node) {
            var dataEmotionAttribute = node.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node);
            node.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        if (isBrowser) {
          container = options2.container || document.head;
          Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
            var attrib = node.getAttribute("data-emotion").split(" ");
            for (var i3 = 1; i3 < attrib.length; i3++) {
              inserted[attrib[i3]] = true;
            }
            nodesToHydrate.push(node);
          });
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache3.compat;
            }
          }), incorrectImportAlarm);
        }
        if (isBrowser) {
          var currentSheet;
          var finalizingPlugins = [stylis.stringify, true ? function(element2) {
            if (!element2.root) {
              if (element2["return"]) {
                currentSheet.insert(element2["return"]);
              } else if (element2.value && element2.type !== stylis.COMMENT) {
                currentSheet.insert(element2.value + "{}");
              }
            }
          } : stylis.rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis$1 = function stylis$12(styles) {
            return stylis.serialize(stylis.compile(styles), serializer);
          };
          _insert = function insert(selector, serialized, sheet2, shouldCache) {
            currentSheet = sheet2;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet2.insert(rule + serialized.map);
                }
              };
            }
            stylis$1(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache3.inserted[serialized.name] = true;
            }
          };
        } else {
          var _finalizingPlugins = [stylis.stringify];
          var _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
          var _stylis = function _stylis2(styles) {
            return stylis.serialize(stylis.compile(styles), _serializer);
          };
          var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
          var getRules2 = function getRules3(selector, serialized) {
            var name = serialized.name;
            if (serverStylisCache[name] === void 0) {
              serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            }
            return serverStylisCache[name];
          };
          _insert = function _insert2(selector, serialized, sheet2, shouldCache) {
            var name = serialized.name;
            var rules = getRules2(selector, serialized);
            if (cache3.compat === void 0) {
              if (shouldCache) {
                cache3.inserted[name] = true;
              }
              if (serialized.map !== void 0) {
                return rules + serialized.map;
              }
              return rules;
            } else {
              if (shouldCache) {
                cache3.inserted[name] = rules;
              } else {
                return rules;
              }
            }
          };
        }
        var cache3 = {
          key,
          sheet: new sheet.StyleSheet({
            key,
            container,
            nonce: options2.nonce,
            speedy: options2.speedy,
            prepend: options2.prepend,
            insertionPoint: options2.insertionPoint
          }),
          nonce: options2.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache3.sheet.hydrate(nodesToHydrate);
        return cache3;
      };
      exports.default = createCache2;
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.cjs.js
  var require_emotion_cache_cjs = __commonJS({
    "node_modules/@emotion/cache/dist/emotion-cache.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_cache_cjs_dev();
      }
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module2) {
      function _extends23() {
        module2.exports = _extends23 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i3 = 1; i3 < arguments.length; i3++) {
            var source = arguments[i3];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        return _extends23.apply(this, arguments);
      }
      module2.exports = _extends23, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js
  var require_emotion_react_isolated_hnrs_cjs_dev = __commonJS({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hoistNonReactStatics$1 = require_hoist_non_react_statics_cjs();
      function _interopDefault(e3) {
        return e3 && e3.__esModule ? e3 : { "default": e3 };
      }
      var hoistNonReactStatics__default = /* @__PURE__ */ _interopDefault(hoistNonReactStatics$1);
      var hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return hoistNonReactStatics__default["default"](targetComponent, sourceComponent);
      };
      exports.default = hoistNonReactStatics;
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js
  var require_emotion_utils_cjs_dev = __commonJS({
    "node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var isBrowser = typeof document !== "undefined";
      function getRegisteredStyles(registered, registeredStyles, classNames23) {
        var rawClassName = "";
        classNames23.split(" ").forEach(function(className) {
          if (registered[className] !== void 0) {
            registeredStyles.push(registered[className] + ";");
          } else {
            rawClassName += className + " ";
          }
        });
        return rawClassName;
      }
      var registerStyles = function registerStyles2(cache3, serialized, isStringTag) {
        var className = cache3.key + "-" + serialized.name;
        if ((isStringTag === false || isBrowser === false && cache3.compat !== void 0) && cache3.registered[className] === void 0) {
          cache3.registered[className] = serialized.styles;
        }
      };
      var insertStyles = function insertStyles2(cache3, serialized, isStringTag) {
        registerStyles(cache3, serialized, isStringTag);
        var className = cache3.key + "-" + serialized.name;
        if (cache3.inserted[serialized.name] === void 0) {
          var stylesForSSR = "";
          var current = serialized;
          do {
            var maybeStyles = cache3.insert(serialized === current ? "." + className : "", current, cache3.sheet, true);
            if (!isBrowser && maybeStyles !== void 0) {
              stylesForSSR += maybeStyles;
            }
            current = current.next;
          } while (current !== void 0);
          if (!isBrowser && stylesForSSR.length !== 0) {
            return stylesForSSR;
          }
        }
      };
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.insertStyles = insertStyles;
      exports.registerStyles = registerStyles;
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.cjs.js
  var require_emotion_utils_cjs = __commonJS({
    "node_modules/@emotion/utils/dist/emotion-utils.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_utils_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js
  var require_emotion_hash_cjs_dev = __commonJS({
    "node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function murmur2(str) {
        var h2 = 0;
        var k3, i3 = 0, len = str.length;
        for (; len >= 4; ++i3, len -= 4) {
          k3 = str.charCodeAt(i3) & 255 | (str.charCodeAt(++i3) & 255) << 8 | (str.charCodeAt(++i3) & 255) << 16 | (str.charCodeAt(++i3) & 255) << 24;
          k3 = (k3 & 65535) * 1540483477 + ((k3 >>> 16) * 59797 << 16);
          k3 ^= k3 >>> 24;
          h2 = (k3 & 65535) * 1540483477 + ((k3 >>> 16) * 59797 << 16) ^ (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
        }
        switch (len) {
          case 3:
            h2 ^= (str.charCodeAt(i3 + 2) & 255) << 16;
          case 2:
            h2 ^= (str.charCodeAt(i3 + 1) & 255) << 8;
          case 1:
            h2 ^= str.charCodeAt(i3) & 255;
            h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
        }
        h2 ^= h2 >>> 13;
        h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
        return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
      }
      exports.default = murmur2;
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.cjs.js
  var require_emotion_hash_cjs = __commonJS({
    "node_modules/@emotion/hash/dist/emotion-hash.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_hash_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js
  var require_emotion_unitless_cjs_dev = __commonJS({
    "node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      exports.default = unitlessKeys;
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js
  var require_emotion_unitless_cjs = __commonJS({
    "node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_unitless_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js
  var require_emotion_serialize_cjs_dev = __commonJS({
    "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hashString = require_emotion_hash_cjs();
      var unitless = require_emotion_unitless_cjs();
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e3) {
        return e3 && e3.__esModule ? e3 : { "default": e3 };
      }
      var hashString__default = /* @__PURE__ */ _interopDefault(hashString);
      var unitless__default = /* @__PURE__ */ _interopDefault(unitless);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      var hyphenateRegex = /[A-Z]|^ms/g;
      var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      var isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      var isProcessableValue = function isProcessableValue2(value2) {
        return value2 != null && typeof value2 !== "boolean";
      };
      var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      var processStyleValue = function processStyleValue2(key, value2) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value2 === "string") {
              return value2.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitless__default["default"][key] !== 1 && !isCustomProperty(key) && typeof value2 === "number" && value2 !== 0) {
          return value2 + "px";
        }
        return value2;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue2(key, value2) {
          if (key === "content") {
            if (typeof value2 !== "string" || contentValues.indexOf(value2) === -1 && !contentValuePattern.test(value2) && (value2.charAt(0) !== value2.charAt(value2.length - 1) || value2.charAt(0) !== '"' && value2.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value2 + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value2);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      var contentValuePattern;
      var contentValues;
      var oldProcessStyleValue;
      var msPattern;
      var hyphenPattern;
      var hyphenatedCache;
      var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      function handleInterpolation(mergedProps, registered, interpolation) {
        if (interpolation == null) {
          return "";
        }
        if (interpolation.__emotion_styles !== void 0) {
          if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
            throw new Error(noComponentSelectorMessage);
          }
          return interpolation;
        }
        switch (typeof interpolation) {
          case "boolean": {
            return "";
          }
          case "object": {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }
            if (interpolation.styles !== void 0) {
              var next = interpolation.next;
              if (next !== void 0) {
                while (next !== void 0) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }
              var styles = interpolation.styles + ";";
              if (interpolation.map !== void 0) {
                styles += interpolation.map;
              }
              return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
          }
          case "function": {
            if (mergedProps !== void 0) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result);
            } else if (true) {
              console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            }
            break;
          }
          case "string":
            if (true) {
              var matched = [];
              var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
              });
              if (matched.length) {
                console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
              }
            }
            break;
        }
        if (registered == null) {
          return interpolation;
        }
        var cached = registered[interpolation];
        return cached !== void 0 ? cached : interpolation;
      }
      function createStringFromObject(mergedProps, registered, obj) {
        var string2 = "";
        if (Array.isArray(obj)) {
          for (var i3 = 0; i3 < obj.length; i3++) {
            string2 += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
          }
        } else {
          for (var _key in obj) {
            var value2 = obj[_key];
            if (typeof value2 !== "object") {
              if (registered != null && registered[value2] !== void 0) {
                string2 += _key + "{" + registered[value2] + "}";
              } else if (isProcessableValue(value2)) {
                string2 += processStyleName(_key) + ":" + processStyleValue(_key, value2) + ";";
              }
            } else {
              if (_key === "NO_COMPONENT_SELECTOR" && true) {
                throw new Error(noComponentSelectorMessage);
              }
              if (Array.isArray(value2) && typeof value2[0] === "string" && (registered == null || registered[value2[0]] === void 0)) {
                for (var _i = 0; _i < value2.length; _i++) {
                  if (isProcessableValue(value2[_i])) {
                    string2 += processStyleName(_key) + ":" + processStyleValue(_key, value2[_i]) + ";";
                  }
                }
              } else {
                var interpolated = handleInterpolation(mergedProps, registered, value2);
                switch (_key) {
                  case "animation":
                  case "animationName": {
                    string2 += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }
                  default: {
                    if (_key === "undefined") {
                      console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                    }
                    string2 += _key + "{" + interpolated + "}";
                  }
                }
              }
            }
          }
        }
        return string2;
      }
      var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      var sourceMapPattern;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      var cursor;
      var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles += strings[0];
        }
        for (var i3 = 1; i3 < args.length; i3++) {
          styles += handleInterpolation(mergedProps, registered, args[i3]);
          if (stringMode) {
            if (strings[i3] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles += strings[i3];
          }
        }
        var sourceMap;
        if (true) {
          styles = styles.replace(sourceMapPattern, function(match3) {
            sourceMap = match3;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match2;
        while ((match2 = labelPattern.exec(styles)) !== null) {
          identifierName += "-" + match2[1];
        }
        var name = hashString__default["default"](styles) + identifierName;
        if (true) {
          return {
            name,
            styles,
            map: sourceMap,
            next: cursor,
            toString: function toString2() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles,
          next: cursor
        };
      };
      exports.serializeStyles = serializeStyles;
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js
  var require_emotion_serialize_cjs = __commonJS({
    "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_serialize_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-ae8cc4ba.cjs.dev.js
  var require_emotion_element_ae8cc4ba_cjs_dev = __commonJS({
    "node_modules/@emotion/react/dist/emotion-element-ae8cc4ba.cjs.dev.js"(exports) {
      "use strict";
      var React54 = require_react();
      var createCache2 = require_emotion_cache_cjs();
      var _extends23 = require_extends();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var _isolatedHnrs_dist_emotionReact_isolatedHnrs = require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      function _interopDefault(e3) {
        return e3 && e3.__esModule ? e3 : { "default": e3 };
      }
      function _interopNamespace(e3) {
        if (e3 && e3.__esModule)
          return e3;
        var n3 = Object.create(null);
        if (e3) {
          Object.keys(e3).forEach(function(k3) {
            if (k3 !== "default") {
              var d3 = Object.getOwnPropertyDescriptor(e3, k3);
              Object.defineProperty(n3, k3, d3.get ? d3 : {
                enumerable: true,
                get: function() {
                  return e3[k3];
                }
              });
            }
          });
        }
        n3["default"] = e3;
        return Object.freeze(n3);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React54);
      var createCache__default = /* @__PURE__ */ _interopDefault(createCache2);
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var isBrowser = typeof document !== "undefined";
      var hasOwnProperty2 = {}.hasOwnProperty;
      var EmotionCacheContext = /* @__PURE__ */ React54.createContext(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache__default["default"]({
        key: "css"
      }) : null);
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      var CacheProvider = EmotionCacheContext.Provider;
      var __unsafe_useEmotionCache = function useEmotionCache() {
        return React54.useContext(EmotionCacheContext);
      };
      exports.withEmotionCache = function withEmotionCache(func2) {
        return /* @__PURE__ */ React54.forwardRef(function(props, ref) {
          var cache3 = React54.useContext(EmotionCacheContext);
          return func2(props, cache3, ref);
        });
      };
      if (!isBrowser) {
        exports.withEmotionCache = function withEmotionCache(func2) {
          return function(props) {
            var cache3 = React54.useContext(EmotionCacheContext);
            if (cache3 === null) {
              cache3 = createCache__default["default"]({
                key: "css"
              });
              return /* @__PURE__ */ React54.createElement(EmotionCacheContext.Provider, {
                value: cache3
              }, func2(props, cache3));
            } else {
              return func2(props, cache3);
            }
          };
        };
      }
      var ThemeContext = /* @__PURE__ */ React54.createContext({});
      if (true) {
        ThemeContext.displayName = "EmotionThemeContext";
      }
      var useTheme = function useTheme2() {
        return React54.useContext(ThemeContext);
      };
      var getTheme = function getTheme2(outerTheme, theme) {
        if (typeof theme === "function") {
          var mergedTheme = theme(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends23({}, outerTheme, theme);
      };
      var createCacheWithTheme = /* @__PURE__ */ weakMemoize__default["default"](function(outerTheme) {
        return weakMemoize__default["default"](function(theme) {
          return getTheme(outerTheme, theme);
        });
      });
      var ThemeProvider = function ThemeProvider2(props) {
        var theme = React54.useContext(ThemeContext);
        if (props.theme !== theme) {
          theme = createCacheWithTheme(theme)(props.theme);
        }
        return /* @__PURE__ */ React54.createElement(ThemeContext.Provider, {
          value: theme
        }, props.children);
      };
      function withTheme(Component11) {
        var componentName = Component11.displayName || Component11.name || "Component";
        var render = function render2(props, ref) {
          var theme = React54.useContext(ThemeContext);
          return /* @__PURE__ */ React54.createElement(Component11, _extends23({
            theme,
            ref
          }, props));
        };
        var WithTheme = /* @__PURE__ */ React54.forwardRef(render);
        WithTheme.displayName = "WithTheme(" + componentName + ")";
        return _isolatedHnrs_dist_emotionReact_isolatedHnrs["default"](WithTheme, Component11);
      }
      var getLastPart = function getLastPart2(functionName) {
        var parts2 = functionName.split(".");
        return parts2[parts2.length - 1];
      };
      var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line) {
        var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
        if (match2)
          return getLastPart(match2[1]);
        match2 = /^([A-Za-z0-9$.]+)@/.exec(line);
        if (match2)
          return getLastPart(match2[1]);
        return void 0;
      };
      var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      var sanitizeIdentifier = function sanitizeIdentifier2(identifier) {
        return identifier.replace(/\$/g, "-");
      };
      var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i3 = 0; i3 < lines.length; i3++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i3]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      var isBrowser$1 = typeof document !== "undefined";
      var useInsertionEffect = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : function useInsertionEffect2(create) {
        create();
      };
      function useInsertionEffectMaybe(create) {
        if (!isBrowser$1) {
          return create();
        }
        useInsertionEffect(create);
      }
      var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      var createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty2.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      var Insertion = function Insertion2(_ref3) {
        var cache3 = _ref3.cache, serialized = _ref3.serialized, isStringTag = _ref3.isStringTag;
        utils.registerStyles(cache3, serialized, isStringTag);
        var rules = useInsertionEffectMaybe(function() {
          return utils.insertStyles(cache3, serialized, isStringTag);
        });
        if (!isBrowser && rules !== void 0) {
          var _ref23;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React54.createElement("style", (_ref23 = {}, _ref23["data-emotion"] = cache3.key + " " + serializedNames, _ref23.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref23.nonce = cache3.sheet.nonce, _ref23));
        }
        return null;
      };
      var Emotion = /* @__PURE__ */ exports.withEmotionCache(function(props, cache3, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache3.registered[cssProp] !== void 0) {
          cssProp = cache3.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = utils.getRegisteredStyles(cache3.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serialize.serializeStyles(registeredStyles, void 0, React54.useContext(ThemeContext));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serialize.serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache3.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty2.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React54.createElement(React54.Fragment, null, /* @__PURE__ */ React54.createElement(Insertion, {
          cache: cache3,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React54.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      exports.CacheProvider = CacheProvider;
      exports.Emotion = Emotion;
      exports.ThemeContext = ThemeContext;
      exports.ThemeProvider = ThemeProvider;
      exports.__unsafe_useEmotionCache = __unsafe_useEmotionCache;
      exports.createEmotionProps = createEmotionProps;
      exports.hasOwnProperty = hasOwnProperty2;
      exports.isBrowser = isBrowser;
      exports.useInsertionEffectMaybe = useInsertionEffectMaybe;
      exports.useTheme = useTheme;
      exports.withTheme = withTheme;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.cjs.dev.js
  var require_emotion_react_cjs_dev = __commonJS({
    "node_modules/@emotion/react/dist/emotion-react.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React54 = require_react();
      require_emotion_cache_cjs();
      var emotionElement = require_emotion_element_ae8cc4ba_cjs_dev();
      require_extends();
      require_emotion_weak_memoize_cjs();
      require_hoist_non_react_statics_cjs();
      require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      function _interopNamespace(e3) {
        if (e3 && e3.__esModule)
          return e3;
        var n3 = Object.create(null);
        if (e3) {
          Object.keys(e3).forEach(function(k3) {
            if (k3 !== "default") {
              var d3 = Object.getOwnPropertyDescriptor(e3, k3);
              Object.defineProperty(n3, k3, d3.get ? d3 : {
                enumerable: true,
                get: function() {
                  return e3[k3];
                }
              });
            }
          });
        }
        n3["default"] = e3;
        return Object.freeze(n3);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React54);
      var pkg = {
        name: "@emotion/react",
        version: "11.10.0",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": "./macro.js"
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.js",
          "macro.d.ts",
          "macro.js.flow"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.10.0",
          "@emotion/cache": "^11.10.0",
          "@emotion/serialize": "^1.1.0",
          "@emotion/utils": "^1.2.0",
          "@emotion/weak-memoize": "^0.3.0",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          "@babel/core": "^7.0.0",
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@babel/core": {
            optional: true
          },
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@babel/core": "^7.18.5",
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.10.0",
          "@emotion/css-prettifier": "1.1.0",
          "@emotion/server": "11.10.0",
          "@emotion/styled": "11.10.0",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": "./macro.js"
            }
          }
        }
      };
      var jsx3 = function jsx4(type, props) {
        var args = arguments;
        if (props == null || !emotionElement.hasOwnProperty.call(props, "css")) {
          return React54.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = emotionElement.Emotion;
        createElementArgArray[1] = emotionElement.createEmotionProps(type, props);
        for (var i3 = 2; i3 < argsLength; i3++) {
          createElementArgArray[i3] = args[i3];
        }
        return React54.createElement.apply(null, createElementArgArray);
      };
      var useInsertionEffect = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : React54.useLayoutEffect;
      var warnedAboutCssPropForGlobal = false;
      var Global2 = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache3) {
        if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles = props.styles;
        var serialized = serialize.serializeStyles([styles], void 0, React54.useContext(emotionElement.ThemeContext));
        if (!emotionElement.isBrowser) {
          var _ref3;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            serializedStyles += next.styles;
            next = next.next;
          }
          var shouldCache = cache3.compat === true;
          var rules = cache3.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache3.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React54.createElement("style", (_ref3 = {}, _ref3["data-emotion"] = cache3.key + "-global " + serializedNames, _ref3.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref3.nonce = cache3.sheet.nonce, _ref3));
        }
        var sheetRef = React54.useRef();
        useInsertionEffect(function() {
          var key = cache3.key + "-global";
          var sheet = new cache3.sheet.constructor({
            key,
            nonce: cache3.sheet.nonce,
            container: cache3.sheet.container,
            speedy: cache3.sheet.isSpeedy
          });
          var rehydrating = false;
          var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache3.sheet.tags.length) {
            sheet.before = cache3.sheet.tags[0];
          }
          if (node !== null) {
            rehydrating = true;
            node.setAttribute("data-emotion", key);
            sheet.hydrate([node]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache3]);
        useInsertionEffect(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            utils.insertStyles(cache3, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element2 = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element2;
            sheet.flush();
          }
          cache3.insert("", serialized, sheet, false);
        }, [cache3, serialized.name]);
        return null;
      });
      if (true) {
        Global2.displayName = "EmotionGlobal";
      }
      function css5() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return serialize.serializeStyles(args);
      }
      var keyframes2 = function keyframes3() {
        var insertable = css5.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString2() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      var classnames = function classnames2(args) {
        var len = args.length;
        var i3 = 0;
        var cls4 = "";
        for (; i3 < len; i3++) {
          var arg = args[i3];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k3 in arg) {
                  if (arg[k3] && k3) {
                    toAdd && (toAdd += " ");
                    toAdd += k3;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls4 && (cls4 += " ");
            cls4 += toAdd;
          }
        }
        return cls4;
      };
      function merge(registered, css6, className) {
        var registeredStyles = [];
        var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
        if (registeredStyles.length < 2) {
          return className;
        }
        return rawClassName + css6(registeredStyles);
      }
      var Insertion = function Insertion2(_ref3) {
        var cache3 = _ref3.cache, serializedArr = _ref3.serializedArr;
        var rules = emotionElement.useInsertionEffectMaybe(function() {
          var rules2 = "";
          for (var i3 = 0; i3 < serializedArr.length; i3++) {
            var res = utils.insertStyles(cache3, serializedArr[i3], false);
            if (!emotionElement.isBrowser && res !== void 0) {
              rules2 += res;
            }
          }
          if (!emotionElement.isBrowser) {
            return rules2;
          }
        });
        if (!emotionElement.isBrowser && rules.length !== 0) {
          var _ref23;
          return /* @__PURE__ */ React54.createElement("style", (_ref23 = {}, _ref23["data-emotion"] = cache3.key + " " + serializedArr.map(function(serialized) {
            return serialized.name;
          }).join(" "), _ref23.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref23.nonce = cache3.sheet.nonce, _ref23));
        }
        return null;
      };
      var ClassNames2 = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache3) {
        var hasRendered = false;
        var serializedArr = [];
        var css6 = function css7() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serialize.serializeStyles(args, cache3.registered);
          serializedArr.push(serialized);
          utils.registerStyles(cache3, serialized, false);
          return cache3.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache3.registered, css6, classnames(args));
        };
        var content = {
          css: css6,
          cx,
          theme: React54.useContext(emotionElement.ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React54.createElement(React54.Fragment, null, /* @__PURE__ */ React54.createElement(Insertion, {
          cache: cache3,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames2.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser = typeof document !== "undefined";
        isJest = typeof jest !== "undefined";
        if (isBrowser && !isJest) {
          globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
      var isBrowser;
      var isJest;
      var globalContext;
      var globalKey;
      exports.CacheProvider = emotionElement.CacheProvider;
      exports.ThemeContext = emotionElement.ThemeContext;
      exports.ThemeProvider = emotionElement.ThemeProvider;
      exports.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache;
      exports.useTheme = emotionElement.useTheme;
      Object.defineProperty(exports, "withEmotionCache", {
        enumerable: true,
        get: function() {
          return emotionElement.withEmotionCache;
        }
      });
      exports.withTheme = emotionElement.withTheme;
      exports.ClassNames = ClassNames2;
      exports.Global = Global2;
      exports.createElement = jsx3;
      exports.css = css5;
      exports.jsx = jsx3;
      exports.keyframes = keyframes2;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.cjs.js
  var require_emotion_react_cjs = __commonJS({
    "node_modules/@emotion/react/dist/emotion-react.cjs.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_emotion_react_cjs_dev();
      }
    }
  });

  // src/index.tsx
  var import_react63 = __toModule(require_react());
  var import_react_dom4 = __toModule(require_react_dom());

  // node_modules/@sentry/utils/esm/env.js
  function isBrowserBundle() {
    return typeof __SENTRY_BROWSER_BUNDLE__ !== "undefined" && !!__SENTRY_BROWSER_BUNDLE__;
  }

  // node_modules/@sentry/utils/esm/node.js
  function isNodeEnv() {
    return !isBrowserBundle() && Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
  }
  function dynamicRequire(mod, request) {
    return mod.require(request);
  }
  function loadModule(moduleName) {
    let mod;
    try {
      mod = dynamicRequire(module, moduleName);
    } catch (e3) {
    }
    try {
      const { cwd } = dynamicRequire(module, "process");
      mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);
    } catch (e3) {
    }
    return mod;
  }

  // node_modules/@sentry/utils/esm/global.js
  var fallbackGlobalObject = {};
  function getGlobalObject() {
    return isNodeEnv() ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : fallbackGlobalObject;
  }
  function getGlobalSingleton(name, creator, obj) {
    var global9 = obj || getGlobalObject();
    var __SENTRY__ = global9.__SENTRY__ = global9.__SENTRY__ || {};
    var singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());
    return singleton;
  }

  // node_modules/@sentry/utils/esm/is.js
  var objectToString = Object.prototype.toString;
  function isError(wat) {
    switch (objectToString.call(wat)) {
      case "[object Error]":
      case "[object Exception]":
      case "[object DOMException]":
        return true;
      default:
        return isInstanceOf(wat, Error);
    }
  }
  function isBuiltin(wat, className) {
    return objectToString.call(wat) === `[object ${className}]`;
  }
  function isErrorEvent(wat) {
    return isBuiltin(wat, "ErrorEvent");
  }
  function isDOMError(wat) {
    return isBuiltin(wat, "DOMError");
  }
  function isDOMException(wat) {
    return isBuiltin(wat, "DOMException");
  }
  function isString(wat) {
    return isBuiltin(wat, "String");
  }
  function isPrimitive(wat) {
    return wat === null || typeof wat !== "object" && typeof wat !== "function";
  }
  function isPlainObject(wat) {
    return isBuiltin(wat, "Object");
  }
  function isEvent(wat) {
    return typeof Event !== "undefined" && isInstanceOf(wat, Event);
  }
  function isElement(wat) {
    return typeof Element !== "undefined" && isInstanceOf(wat, Element);
  }
  function isRegExp(wat) {
    return isBuiltin(wat, "RegExp");
  }
  function isThenable(wat) {
    return Boolean(wat && wat.then && typeof wat.then === "function");
  }
  function isSyntheticEvent(wat) {
    return isPlainObject(wat) && "nativeEvent" in wat && "preventDefault" in wat && "stopPropagation" in wat;
  }
  function isNaN2(wat) {
    return typeof wat === "number" && wat !== wat;
  }
  function isInstanceOf(wat, base) {
    try {
      return wat instanceof base;
    } catch (_e) {
      return false;
    }
  }

  // node_modules/@sentry/utils/esm/browser.js
  function htmlTreeAsString(elem, keyAttrs) {
    try {
      let currentElem = elem;
      var MAX_TRAVERSE_HEIGHT = 5;
      var MAX_OUTPUT_LEN = 80;
      var out = [];
      let height = 0;
      let len = 0;
      var separator = " > ";
      var sepLength = separator.length;
      let nextStr;
      while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
        nextStr = _htmlElementAsString(currentElem, keyAttrs);
        if (nextStr === "html" || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {
          break;
        }
        out.push(nextStr);
        len += nextStr.length;
        currentElem = currentElem.parentNode;
      }
      return out.reverse().join(separator);
    } catch (_oO) {
      return "<unknown>";
    }
  }
  function _htmlElementAsString(el, keyAttrs) {
    var elem = el;
    var out = [];
    let className;
    let classes;
    let key;
    let attr;
    let i3;
    if (!elem || !elem.tagName) {
      return "";
    }
    out.push(elem.tagName.toLowerCase());
    var keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr) => elem.getAttribute(keyAttr)).map((keyAttr) => [keyAttr, elem.getAttribute(keyAttr)]) : null;
    if (keyAttrPairs && keyAttrPairs.length) {
      keyAttrPairs.forEach((keyAttrPair) => {
        out.push(`[${keyAttrPair[0]}="${keyAttrPair[1]}"]`);
      });
    } else {
      if (elem.id) {
        out.push(`#${elem.id}`);
      }
      className = elem.className;
      if (className && isString(className)) {
        classes = className.split(/\s+/);
        for (i3 = 0; i3 < classes.length; i3++) {
          out.push(`.${classes[i3]}`);
        }
      }
    }
    var allowedAttrs = ["type", "name", "title", "alt"];
    for (i3 = 0; i3 < allowedAttrs.length; i3++) {
      key = allowedAttrs[i3];
      attr = elem.getAttribute(key);
      if (attr) {
        out.push(`[${key}="${attr}"]`);
      }
    }
    return out.join("");
  }
  function getLocationHref() {
    var global9 = getGlobalObject();
    try {
      return global9.document.location.href;
    } catch (oO) {
      return "";
    }
  }
  function getDomElement(selector) {
    var global9 = getGlobalObject();
    if (global9.document && global9.document.querySelector) {
      return global9.document.querySelector(selector);
    }
    return null;
  }

  // node_modules/@sentry/utils/esm/error.js
  var SentryError = class extends Error {
    constructor(message, logLevel = "warn") {
      super(message);
      this.message = message;
      ;
      this.name = new.target.prototype.constructor.name;
      Object.setPrototypeOf(this, new.target.prototype);
      this.logLevel = logLevel;
    }
  };

  // node_modules/@sentry/utils/esm/dsn.js
  var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;
  function isValidProtocol(protocol4) {
    return protocol4 === "http" || protocol4 === "https";
  }
  function dsnToString(dsn, withPassword = false) {
    const { host, path: path2, pass, port, projectId, protocol: protocol4, publicKey } = dsn;
    return `${protocol4}://${publicKey}${withPassword && pass ? `:${pass}` : ""}@${host}${port ? `:${port}` : ""}/${path2 ? `${path2}/` : path2}${projectId}`;
  }
  function dsnFromString(str) {
    var match2 = DSN_REGEX.exec(str);
    if (!match2) {
      throw new SentryError(`Invalid Sentry Dsn: ${str}`);
    }
    const [protocol4, publicKey, pass = "", host, port = "", lastPath] = match2.slice(1);
    let path2 = "";
    let projectId = lastPath;
    var split = projectId.split("/");
    if (split.length > 1) {
      path2 = split.slice(0, -1).join("/");
      projectId = split.pop();
    }
    if (projectId) {
      var projectMatch = projectId.match(/^\d+/);
      if (projectMatch) {
        projectId = projectMatch[0];
      }
    }
    return dsnFromComponents({ host, pass, path: path2, projectId, port, protocol: protocol4, publicKey });
  }
  function dsnFromComponents(components2) {
    return {
      protocol: components2.protocol,
      publicKey: components2.publicKey || "",
      pass: components2.pass || "",
      host: components2.host,
      port: components2.port || "",
      path: components2.path || "",
      projectId: components2.projectId
    };
  }
  function validateDsn(dsn) {
    if (!(typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__)) {
      return;
    }
    const { port, projectId, protocol: protocol4 } = dsn;
    var requiredComponents = ["protocol", "publicKey", "host", "projectId"];
    requiredComponents.forEach((component) => {
      if (!dsn[component]) {
        throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);
      }
    });
    if (!projectId.match(/^\d+$/)) {
      throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);
    }
    if (!isValidProtocol(protocol4)) {
      throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol4}`);
    }
    if (port && isNaN(parseInt(port, 10))) {
      throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);
    }
    return true;
  }
  function makeDsn(from) {
    var components2 = typeof from === "string" ? dsnFromString(from) : dsnFromComponents(from);
    validateDsn(components2);
    return components2;
  }

  // node_modules/@sentry/utils/esm/logger.js
  var global2 = getGlobalObject();
  var PREFIX = "Sentry Logger ";
  var CONSOLE_LEVELS = ["debug", "info", "warn", "error", "log", "assert", "trace"];
  function consoleSandbox(callback) {
    var global9 = getGlobalObject();
    if (!("console" in global9)) {
      return callback();
    }
    var originalConsole = global9.console;
    var wrappedLevels = {};
    CONSOLE_LEVELS.forEach((level) => {
      var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;
      if (level in global9.console && originalWrappedFunc) {
        wrappedLevels[level] = originalConsole[level];
        originalConsole[level] = originalWrappedFunc;
      }
    });
    try {
      return callback();
    } finally {
      Object.keys(wrappedLevels).forEach((level) => {
        originalConsole[level] = wrappedLevels[level];
      });
    }
  }
  function makeLogger() {
    let enabled = false;
    var logger2 = {
      enable: () => {
        enabled = true;
      },
      disable: () => {
        enabled = false;
      }
    };
    if (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) {
      CONSOLE_LEVELS.forEach((name) => {
        logger2[name] = (...args) => {
          if (enabled) {
            consoleSandbox(() => {
              global2.console[name](`${PREFIX}[${name}]:`, ...args);
            });
          }
        };
      });
    } else {
      CONSOLE_LEVELS.forEach((name) => {
        logger2[name] = () => void 0;
      });
    }
    return logger2;
  }
  var logger;
  if (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) {
    logger = getGlobalSingleton("logger", makeLogger);
  } else {
    logger = makeLogger();
  }

  // node_modules/@sentry/utils/esm/string.js
  function truncate(str, max2 = 0) {
    if (typeof str !== "string" || max2 === 0) {
      return str;
    }
    return str.length <= max2 ? str : `${str.substr(0, max2)}...`;
  }
  function safeJoin(input, delimiter) {
    if (!Array.isArray(input)) {
      return "";
    }
    var output = [];
    for (let i3 = 0; i3 < input.length; i3++) {
      var value2 = input[i3];
      try {
        output.push(String(value2));
      } catch (e3) {
        output.push("[value cannot be serialized]");
      }
    }
    return output.join(delimiter);
  }
  function isMatchingPattern(value2, pattern) {
    if (!isString(value2)) {
      return false;
    }
    if (isRegExp(pattern)) {
      return pattern.test(value2);
    }
    if (typeof pattern === "string") {
      return value2.indexOf(pattern) !== -1;
    }
    return false;
  }

  // node_modules/@sentry/utils/esm/object.js
  function fill(source, name, replacementFactory) {
    if (!(name in source)) {
      return;
    }
    var original = source[name];
    var wrapped = replacementFactory(original);
    if (typeof wrapped === "function") {
      try {
        markFunctionWrapped(wrapped, original);
      } catch (_Oo) {
      }
    }
    source[name] = wrapped;
  }
  function addNonEnumerableProperty(obj, name, value2) {
    Object.defineProperty(obj, name, {
      value: value2,
      writable: true,
      configurable: true
    });
  }
  function markFunctionWrapped(wrapped, original) {
    var proto = original.prototype || {};
    wrapped.prototype = original.prototype = proto;
    addNonEnumerableProperty(wrapped, "__sentry_original__", original);
  }
  function getOriginalFunction(func2) {
    return func2.__sentry_original__;
  }
  function urlEncode(object) {
    return Object.keys(object).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join("&");
  }
  function convertToPlainObject(value2) {
    if (isError(value2)) {
      return __spreadValues({
        message: value2.message,
        name: value2.name,
        stack: value2.stack
      }, getOwnProperties(value2));
    } else if (isEvent(value2)) {
      var newObj = __spreadValues({
        type: value2.type,
        target: serializeEventTarget(value2.target),
        currentTarget: serializeEventTarget(value2.currentTarget)
      }, getOwnProperties(value2));
      if (typeof CustomEvent !== "undefined" && isInstanceOf(value2, CustomEvent)) {
        newObj.detail = value2.detail;
      }
      return newObj;
    } else {
      return value2;
    }
  }
  function serializeEventTarget(target) {
    try {
      return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);
    } catch (_oO) {
      return "<unknown>";
    }
  }
  function getOwnProperties(obj) {
    if (typeof obj === "object" && obj !== null) {
      var extractedProps = {};
      for (var property in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, property)) {
          extractedProps[property] = obj[property];
        }
      }
      return extractedProps;
    } else {
      return {};
    }
  }
  function extractExceptionKeysForMessage(exception, maxLength = 40) {
    var keys = Object.keys(convertToPlainObject(exception));
    keys.sort();
    if (!keys.length) {
      return "[object has no keys]";
    }
    if (keys[0].length >= maxLength) {
      return truncate(keys[0], maxLength);
    }
    for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {
      var serialized = keys.slice(0, includedKeys).join(", ");
      if (serialized.length > maxLength) {
        continue;
      }
      if (includedKeys === keys.length) {
        return serialized;
      }
      return truncate(serialized, maxLength);
    }
    return "";
  }
  function dropUndefinedKeys(inputValue) {
    var memoizationMap = new Map();
    return _dropUndefinedKeys(inputValue, memoizationMap);
  }
  function _dropUndefinedKeys(inputValue, memoizationMap) {
    if (isPlainObject(inputValue)) {
      var memoVal = memoizationMap.get(inputValue);
      if (memoVal !== void 0) {
        return memoVal;
      }
      var returnValue = {};
      memoizationMap.set(inputValue, returnValue);
      for (var key of Object.keys(inputValue)) {
        if (typeof inputValue[key] !== "undefined") {
          returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);
        }
      }
      return returnValue;
    }
    if (Array.isArray(inputValue)) {
      var memoVal = memoizationMap.get(inputValue);
      if (memoVal !== void 0) {
        return memoVal;
      }
      var returnValue = [];
      memoizationMap.set(inputValue, returnValue);
      inputValue.forEach((item) => {
        returnValue.push(_dropUndefinedKeys(item, memoizationMap));
      });
      return returnValue;
    }
    return inputValue;
  }

  // node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js
  function _nullishCoalesce(lhs, rhsFn) {
    return lhs != null ? lhs : rhsFn();
  }

  // node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js
  function _optionalChain(ops) {
    let lastAccessLHS = void 0;
    let value2 = ops[0];
    let i3 = 1;
    while (i3 < ops.length) {
      var op = ops[i3];
      var fn = ops[i3 + 1];
      i3 += 2;
      if ((op === "optionalAccess" || op === "optionalCall") && value2 == null) {
        return;
      }
      if (op === "access" || op === "optionalAccess") {
        lastAccessLHS = value2;
        value2 = fn(value2);
      } else if (op === "call" || op === "optionalCall") {
        value2 = fn((...args) => value2.call(lastAccessLHS, ...args));
        lastAccessLHS = void 0;
      }
    }
    return value2;
  }

  // node_modules/@sentry/utils/esm/stacktrace.js
  var STACKTRACE_LIMIT = 50;
  function createStackParser(...parsers) {
    var sortedParsers = parsers.sort((a3, b2) => a3[0] - b2[0]).map((p2) => p2[1]);
    return (stack, skipFirst = 0) => {
      var frames = [];
      for (var line of stack.split("\n").slice(skipFirst)) {
        var cleanedLine = line.replace(/\(error: (.*)\)/, "$1");
        for (var parser of sortedParsers) {
          var frame = parser(cleanedLine);
          if (frame) {
            frames.push(frame);
            break;
          }
        }
      }
      return stripSentryFramesAndReverse(frames);
    };
  }
  function stackParserFromStackParserOptions(stackParser) {
    if (Array.isArray(stackParser)) {
      return createStackParser(...stackParser);
    }
    return stackParser;
  }
  function stripSentryFramesAndReverse(stack) {
    if (!stack.length) {
      return [];
    }
    let localStack = stack;
    var firstFrameFunction = localStack[0].function || "";
    var lastFrameFunction = localStack[localStack.length - 1].function || "";
    if (firstFrameFunction.indexOf("captureMessage") !== -1 || firstFrameFunction.indexOf("captureException") !== -1) {
      localStack = localStack.slice(1);
    }
    if (lastFrameFunction.indexOf("sentryWrapped") !== -1) {
      localStack = localStack.slice(0, -1);
    }
    return localStack.slice(0, STACKTRACE_LIMIT).map((frame) => __spreadProps(__spreadValues({}, frame), {
      filename: frame.filename || localStack[0].filename,
      function: frame.function || "?"
    })).reverse();
  }
  var defaultFunctionName = "<anonymous>";
  function getFunctionName(fn) {
    try {
      if (!fn || typeof fn !== "function") {
        return defaultFunctionName;
      }
      return fn.name || defaultFunctionName;
    } catch (e3) {
      return defaultFunctionName;
    }
  }

  // node_modules/@sentry/utils/esm/supports.js
  function supportsFetch() {
    if (!("fetch" in getGlobalObject())) {
      return false;
    }
    try {
      new Headers();
      new Request("http://www.example.com");
      new Response();
      return true;
    } catch (e3) {
      return false;
    }
  }
  function isNativeFetch(func2) {
    return func2 && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func2.toString());
  }
  function supportsNativeFetch() {
    if (!supportsFetch()) {
      return false;
    }
    var global9 = getGlobalObject();
    if (isNativeFetch(global9.fetch)) {
      return true;
    }
    let result = false;
    var doc = global9.document;
    if (doc && typeof doc.createElement === "function") {
      try {
        var sandbox = doc.createElement("iframe");
        sandbox.hidden = true;
        doc.head.appendChild(sandbox);
        if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
          result = isNativeFetch(sandbox.contentWindow.fetch);
        }
        doc.head.removeChild(sandbox);
      } catch (err) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", err);
      }
    }
    return result;
  }
  function supportsHistory() {
    var global9 = getGlobalObject();
    var chrome2 = global9.chrome;
    var isChromePackagedApp = chrome2 && chrome2.app && chrome2.app.runtime;
    var hasHistoryApi = "history" in global9 && !!global9.history.pushState && !!global9.history.replaceState;
    return !isChromePackagedApp && hasHistoryApi;
  }

  // node_modules/@sentry/utils/esm/instrument.js
  var global3 = getGlobalObject();
  var handlers = {};
  var instrumented = {};
  function instrument(type) {
    if (instrumented[type]) {
      return;
    }
    instrumented[type] = true;
    switch (type) {
      case "console":
        instrumentConsole();
        break;
      case "dom":
        instrumentDOM();
        break;
      case "xhr":
        instrumentXHR();
        break;
      case "fetch":
        instrumentFetch();
        break;
      case "history":
        instrumentHistory();
        break;
      case "error":
        instrumentError();
        break;
      case "unhandledrejection":
        instrumentUnhandledRejection();
        break;
      default:
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("unknown instrumentation type:", type);
        return;
    }
  }
  function addInstrumentationHandler(type, callback) {
    handlers[type] = handlers[type] || [];
    handlers[type].push(callback);
    instrument(type);
  }
  function triggerHandlers(type, data) {
    if (!type || !handlers[type]) {
      return;
    }
    for (var handler of handlers[type] || []) {
      try {
        handler(data);
      } catch (e3) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error(`Error while triggering instrumentation handler.
Type: ${type}
Name: ${getFunctionName(handler)}
Error:`, e3);
      }
    }
  }
  function instrumentConsole() {
    if (!("console" in global3)) {
      return;
    }
    CONSOLE_LEVELS.forEach(function(level) {
      if (!(level in global3.console)) {
        return;
      }
      fill(global3.console, level, function(originalConsoleMethod) {
        return function(...args) {
          triggerHandlers("console", { args, level });
          if (originalConsoleMethod) {
            originalConsoleMethod.apply(global3.console, args);
          }
        };
      });
    });
  }
  function instrumentFetch() {
    if (!supportsNativeFetch()) {
      return;
    }
    fill(global3, "fetch", function(originalFetch) {
      return function(...args) {
        var handlerData = {
          args,
          fetchData: {
            method: getFetchMethod(args),
            url: getFetchUrl(args)
          },
          startTimestamp: Date.now()
        };
        triggerHandlers("fetch", __spreadValues({}, handlerData));
        return originalFetch.apply(global3, args).then((response) => {
          triggerHandlers("fetch", __spreadProps(__spreadValues({}, handlerData), {
            endTimestamp: Date.now(),
            response
          }));
          return response;
        }, (error) => {
          triggerHandlers("fetch", __spreadProps(__spreadValues({}, handlerData), {
            endTimestamp: Date.now(),
            error
          }));
          throw error;
        });
      };
    });
  }
  function getFetchMethod(fetchArgs = []) {
    if ("Request" in global3 && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {
      return String(fetchArgs[0].method).toUpperCase();
    }
    if (fetchArgs[1] && fetchArgs[1].method) {
      return String(fetchArgs[1].method).toUpperCase();
    }
    return "GET";
  }
  function getFetchUrl(fetchArgs = []) {
    if (typeof fetchArgs[0] === "string") {
      return fetchArgs[0];
    }
    if ("Request" in global3 && isInstanceOf(fetchArgs[0], Request)) {
      return fetchArgs[0].url;
    }
    return String(fetchArgs[0]);
  }
  function instrumentXHR() {
    if (!("XMLHttpRequest" in global3)) {
      return;
    }
    var xhrproto = XMLHttpRequest.prototype;
    fill(xhrproto, "open", function(originalOpen) {
      return function(...args) {
        var xhr = this;
        var url2 = args[1];
        var xhrInfo = xhr.__sentry_xhr__ = {
          method: isString(args[0]) ? args[0].toUpperCase() : args[0],
          url: args[1]
        };
        if (isString(url2) && xhrInfo.method === "POST" && url2.match(/sentry_key/)) {
          xhr.__sentry_own_request__ = true;
        }
        var onreadystatechangeHandler = function() {
          if (xhr.readyState === 4) {
            try {
              xhrInfo.status_code = xhr.status;
            } catch (e3) {
            }
            triggerHandlers("xhr", {
              args,
              endTimestamp: Date.now(),
              startTimestamp: Date.now(),
              xhr
            });
          }
        };
        if ("onreadystatechange" in xhr && typeof xhr.onreadystatechange === "function") {
          fill(xhr, "onreadystatechange", function(original) {
            return function(...readyStateArgs) {
              onreadystatechangeHandler();
              return original.apply(xhr, readyStateArgs);
            };
          });
        } else {
          xhr.addEventListener("readystatechange", onreadystatechangeHandler);
        }
        return originalOpen.apply(xhr, args);
      };
    });
    fill(xhrproto, "send", function(originalSend) {
      return function(...args) {
        if (this.__sentry_xhr__ && args[0] !== void 0) {
          this.__sentry_xhr__.body = args[0];
        }
        triggerHandlers("xhr", {
          args,
          startTimestamp: Date.now(),
          xhr: this
        });
        return originalSend.apply(this, args);
      };
    });
  }
  var lastHref;
  function instrumentHistory() {
    if (!supportsHistory()) {
      return;
    }
    var oldOnPopState = global3.onpopstate;
    global3.onpopstate = function(...args) {
      var to = global3.location.href;
      var from = lastHref;
      lastHref = to;
      triggerHandlers("history", {
        from,
        to
      });
      if (oldOnPopState) {
        try {
          return oldOnPopState.apply(this, args);
        } catch (_oO) {
        }
      }
    };
    function historyReplacementFunction(originalHistoryFunction) {
      return function(...args) {
        var url2 = args.length > 2 ? args[2] : void 0;
        if (url2) {
          var from = lastHref;
          var to = String(url2);
          lastHref = to;
          triggerHandlers("history", {
            from,
            to
          });
        }
        return originalHistoryFunction.apply(this, args);
      };
    }
    fill(global3.history, "pushState", historyReplacementFunction);
    fill(global3.history, "replaceState", historyReplacementFunction);
  }
  var debounceDuration = 1e3;
  var debounceTimerID;
  var lastCapturedEvent;
  function shouldShortcircuitPreviousDebounce(previous, current) {
    if (!previous) {
      return true;
    }
    if (previous.type !== current.type) {
      return true;
    }
    try {
      if (previous.target !== current.target) {
        return true;
      }
    } catch (e3) {
    }
    return false;
  }
  function shouldSkipDOMEvent(event) {
    if (event.type !== "keypress") {
      return false;
    }
    try {
      var target = event.target;
      if (!target || !target.tagName) {
        return true;
      }
      if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.isContentEditable) {
        return false;
      }
    } catch (e3) {
    }
    return true;
  }
  function makeDOMEventHandler(handler, globalListener = false) {
    return (event) => {
      if (!event || lastCapturedEvent === event) {
        return;
      }
      if (shouldSkipDOMEvent(event)) {
        return;
      }
      var name = event.type === "keypress" ? "input" : event.type;
      if (debounceTimerID === void 0) {
        handler({
          event,
          name,
          global: globalListener
        });
        lastCapturedEvent = event;
      } else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {
        handler({
          event,
          name,
          global: globalListener
        });
        lastCapturedEvent = event;
      }
      clearTimeout(debounceTimerID);
      debounceTimerID = global3.setTimeout(() => {
        debounceTimerID = void 0;
      }, debounceDuration);
    };
  }
  function instrumentDOM() {
    if (!("document" in global3)) {
      return;
    }
    var triggerDOMHandler = triggerHandlers.bind(null, "dom");
    var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
    global3.document.addEventListener("click", globalDOMEventHandler, false);
    global3.document.addEventListener("keypress", globalDOMEventHandler, false);
    ["EventTarget", "Node"].forEach((target) => {
      var proto = global3[target] && global3[target].prototype;
      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) {
        return;
      }
      fill(proto, "addEventListener", function(originalAddEventListener) {
        return function(type, listener, options2) {
          if (type === "click" || type == "keypress") {
            try {
              var el = this;
              var handlers2 = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};
              var handlerForType = handlers2[type] = handlers2[type] || { refCount: 0 };
              if (!handlerForType.handler) {
                var handler = makeDOMEventHandler(triggerDOMHandler);
                handlerForType.handler = handler;
                originalAddEventListener.call(this, type, handler, options2);
              }
              handlerForType.refCount += 1;
            } catch (e3) {
            }
          }
          return originalAddEventListener.call(this, type, listener, options2);
        };
      });
      fill(proto, "removeEventListener", function(originalRemoveEventListener) {
        return function(type, listener, options2) {
          if (type === "click" || type == "keypress") {
            try {
              var el = this;
              var handlers2 = el.__sentry_instrumentation_handlers__ || {};
              var handlerForType = handlers2[type];
              if (handlerForType) {
                handlerForType.refCount -= 1;
                if (handlerForType.refCount <= 0) {
                  originalRemoveEventListener.call(this, type, handlerForType.handler, options2);
                  handlerForType.handler = void 0;
                  delete handlers2[type];
                }
                if (Object.keys(handlers2).length === 0) {
                  delete el.__sentry_instrumentation_handlers__;
                }
              }
            } catch (e3) {
            }
          }
          return originalRemoveEventListener.call(this, type, listener, options2);
        };
      });
    });
  }
  var _oldOnErrorHandler = null;
  function instrumentError() {
    _oldOnErrorHandler = global3.onerror;
    global3.onerror = function(msg, url2, line, column, error) {
      triggerHandlers("error", {
        column,
        error,
        line,
        msg,
        url: url2
      });
      if (_oldOnErrorHandler) {
        return _oldOnErrorHandler.apply(this, arguments);
      }
      return false;
    };
  }
  var _oldOnUnhandledRejectionHandler = null;
  function instrumentUnhandledRejection() {
    _oldOnUnhandledRejectionHandler = global3.onunhandledrejection;
    global3.onunhandledrejection = function(e3) {
      triggerHandlers("unhandledrejection", e3);
      if (_oldOnUnhandledRejectionHandler) {
        return _oldOnUnhandledRejectionHandler.apply(this, arguments);
      }
      return true;
    };
  }

  // node_modules/@sentry/utils/esm/memo.js
  function memoBuilder() {
    var hasWeakSet = typeof WeakSet === "function";
    var inner = hasWeakSet ? new WeakSet() : [];
    function memoize3(obj) {
      if (hasWeakSet) {
        if (inner.has(obj)) {
          return true;
        }
        inner.add(obj);
        return false;
      }
      for (let i3 = 0; i3 < inner.length; i3++) {
        var value2 = inner[i3];
        if (value2 === obj) {
          return true;
        }
      }
      inner.push(obj);
      return false;
    }
    function unmemoize(obj) {
      if (hasWeakSet) {
        inner.delete(obj);
      } else {
        for (let i3 = 0; i3 < inner.length; i3++) {
          if (inner[i3] === obj) {
            inner.splice(i3, 1);
            break;
          }
        }
      }
    }
    return [memoize3, unmemoize];
  }

  // node_modules/@sentry/utils/esm/misc.js
  function uuid4() {
    var global9 = getGlobalObject();
    var crypto = global9.crypto || global9.msCrypto;
    if (crypto && crypto.randomUUID) {
      return crypto.randomUUID().replace(/-/g, "");
    }
    var getRandomByte = crypto && crypto.getRandomValues ? () => crypto.getRandomValues(new Uint8Array(1))[0] : () => Math.random() * 16;
    return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c3) => (c3 ^ (getRandomByte() & 15) >> c3 / 4).toString(16));
  }
  function getFirstException(event) {
    return event.exception && event.exception.values ? event.exception.values[0] : void 0;
  }
  function getEventDescription(event) {
    const { message, event_id: eventId } = event;
    if (message) {
      return message;
    }
    var firstException = getFirstException(event);
    if (firstException) {
      if (firstException.type && firstException.value) {
        return `${firstException.type}: ${firstException.value}`;
      }
      return firstException.type || firstException.value || eventId || "<unknown>";
    }
    return eventId || "<unknown>";
  }
  function addExceptionTypeValue(event, value2, type) {
    var exception = event.exception = event.exception || {};
    var values = exception.values = exception.values || [];
    var firstException = values[0] = values[0] || {};
    if (!firstException.value) {
      firstException.value = value2 || "";
    }
    if (!firstException.type) {
      firstException.type = type || "Error";
    }
  }
  function addExceptionMechanism(event, newMechanism) {
    var firstException = getFirstException(event);
    if (!firstException) {
      return;
    }
    var defaultMechanism = { type: "generic", handled: true };
    var currentMechanism = firstException.mechanism;
    firstException.mechanism = __spreadValues(__spreadValues(__spreadValues({}, defaultMechanism), currentMechanism), newMechanism);
    if (newMechanism && "data" in newMechanism) {
      var mergedData = __spreadValues(__spreadValues({}, currentMechanism && currentMechanism.data), newMechanism.data);
      firstException.mechanism.data = mergedData;
    }
  }
  function checkOrSetAlreadyCaught(exception) {
    if (exception && exception.__sentry_captured__) {
      return true;
    }
    try {
      addNonEnumerableProperty(exception, "__sentry_captured__", true);
    } catch (err) {
    }
    return false;
  }
  function arrayify(maybeArray) {
    return Array.isArray(maybeArray) ? maybeArray : [maybeArray];
  }

  // node_modules/@sentry/utils/esm/normalize.js
  function normalize(input, depth = Infinity, maxProperties = Infinity) {
    try {
      return visit("", input, depth, maxProperties);
    } catch (err) {
      return { ERROR: `**non-serializable** (${err})` };
    }
  }
  function normalizeToSize(object, depth = 3, maxSize = 100 * 1024) {
    var normalized = normalize(object, depth);
    if (jsonSize(normalized) > maxSize) {
      return normalizeToSize(object, depth - 1, maxSize);
    }
    return normalized;
  }
  function visit(key, value2, depth = Infinity, maxProperties = Infinity, memo2 = memoBuilder()) {
    const [memoize3, unmemoize] = memo2;
    if (value2 === null || ["number", "boolean", "string"].includes(typeof value2) && !isNaN2(value2)) {
      return value2;
    }
    var stringified = stringifyValue(key, value2);
    if (!stringified.startsWith("[object ")) {
      return stringified;
    }
    if (value2["__sentry_skip_normalization__"]) {
      return value2;
    }
    if (depth === 0) {
      return stringified.replace("object ", "");
    }
    if (memoize3(value2)) {
      return "[Circular ~]";
    }
    var valueWithToJSON = value2;
    if (valueWithToJSON && typeof valueWithToJSON.toJSON === "function") {
      try {
        var jsonValue = valueWithToJSON.toJSON();
        return visit("", jsonValue, depth - 1, maxProperties, memo2);
      } catch (err) {
      }
    }
    var normalized = Array.isArray(value2) ? [] : {};
    let numAdded = 0;
    var visitable = convertToPlainObject(value2);
    for (var visitKey in visitable) {
      if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {
        continue;
      }
      if (numAdded >= maxProperties) {
        normalized[visitKey] = "[MaxProperties ~]";
        break;
      }
      var visitValue = visitable[visitKey];
      normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo2);
      numAdded += 1;
    }
    unmemoize(value2);
    return normalized;
  }
  function stringifyValue(key, value2) {
    try {
      if (key === "domain" && value2 && typeof value2 === "object" && value2._events) {
        return "[Domain]";
      }
      if (key === "domainEmitter") {
        return "[DomainEmitter]";
      }
      if (typeof global !== "undefined" && value2 === global) {
        return "[Global]";
      }
      if (typeof window !== "undefined" && value2 === window) {
        return "[Window]";
      }
      if (typeof document !== "undefined" && value2 === document) {
        return "[Document]";
      }
      if (isSyntheticEvent(value2)) {
        return "[SyntheticEvent]";
      }
      if (typeof value2 === "number" && value2 !== value2) {
        return "[NaN]";
      }
      if (value2 === void 0) {
        return "[undefined]";
      }
      if (typeof value2 === "function") {
        return `[Function: ${getFunctionName(value2)}]`;
      }
      if (typeof value2 === "symbol") {
        return `[${String(value2)}]`;
      }
      if (typeof value2 === "bigint") {
        return `[BigInt: ${String(value2)}]`;
      }
      return `[object ${Object.getPrototypeOf(value2).constructor.name}]`;
    } catch (err) {
      return `**non-serializable** (${err})`;
    }
  }
  function utf8Length(value2) {
    return ~-encodeURI(value2).split(/%..|./).length;
  }
  function jsonSize(value2) {
    return utf8Length(JSON.stringify(value2));
  }

  // node_modules/@sentry/utils/esm/syncpromise.js
  var States;
  (function(States2) {
    var PENDING = 0;
    States2[States2["PENDING"] = PENDING] = "PENDING";
    var RESOLVED = 1;
    States2[States2["RESOLVED"] = RESOLVED] = "RESOLVED";
    var REJECTED = 2;
    States2[States2["REJECTED"] = REJECTED] = "REJECTED";
  })(States || (States = {}));
  function resolvedSyncPromise(value2) {
    return new SyncPromise((resolve) => {
      resolve(value2);
    });
  }
  function rejectedSyncPromise(reason) {
    return new SyncPromise((_2, reject) => {
      reject(reason);
    });
  }
  var SyncPromise = class {
    __init() {
      this._state = States.PENDING;
    }
    __init2() {
      this._handlers = [];
    }
    constructor(executor) {
      ;
      SyncPromise.prototype.__init.call(this);
      SyncPromise.prototype.__init2.call(this);
      SyncPromise.prototype.__init3.call(this);
      SyncPromise.prototype.__init4.call(this);
      SyncPromise.prototype.__init5.call(this);
      SyncPromise.prototype.__init6.call(this);
      try {
        executor(this._resolve, this._reject);
      } catch (e3) {
        this._reject(e3);
      }
    }
    then(onfulfilled, onrejected) {
      return new SyncPromise((resolve, reject) => {
        this._handlers.push([
          false,
          (result) => {
            if (!onfulfilled) {
              resolve(result);
            } else {
              try {
                resolve(onfulfilled(result));
              } catch (e3) {
                reject(e3);
              }
            }
          },
          (reason) => {
            if (!onrejected) {
              reject(reason);
            } else {
              try {
                resolve(onrejected(reason));
              } catch (e3) {
                reject(e3);
              }
            }
          }
        ]);
        this._executeHandlers();
      });
    }
    catch(onrejected) {
      return this.then((val) => val, onrejected);
    }
    finally(onfinally) {
      return new SyncPromise((resolve, reject) => {
        let val;
        let isRejected;
        return this.then((value2) => {
          isRejected = false;
          val = value2;
          if (onfinally) {
            onfinally();
          }
        }, (reason) => {
          isRejected = true;
          val = reason;
          if (onfinally) {
            onfinally();
          }
        }).then(() => {
          if (isRejected) {
            reject(val);
            return;
          }
          resolve(val);
        });
      });
    }
    __init3() {
      this._resolve = (value2) => {
        this._setResult(States.RESOLVED, value2);
      };
    }
    __init4() {
      this._reject = (reason) => {
        this._setResult(States.REJECTED, reason);
      };
    }
    __init5() {
      this._setResult = (state, value2) => {
        if (this._state !== States.PENDING) {
          return;
        }
        if (isThenable(value2)) {
          void value2.then(this._resolve, this._reject);
          return;
        }
        this._state = state;
        this._value = value2;
        this._executeHandlers();
      };
    }
    __init6() {
      this._executeHandlers = () => {
        if (this._state === States.PENDING) {
          return;
        }
        var cachedHandlers = this._handlers.slice();
        this._handlers = [];
        cachedHandlers.forEach((handler) => {
          if (handler[0]) {
            return;
          }
          if (this._state === States.RESOLVED) {
            handler[1](this._value);
          }
          if (this._state === States.REJECTED) {
            handler[2](this._value);
          }
          handler[0] = true;
        });
      };
    }
  };

  // node_modules/@sentry/utils/esm/promisebuffer.js
  function makePromiseBuffer(limit) {
    var buffer = [];
    function isReady() {
      return limit === void 0 || buffer.length < limit;
    }
    function remove(task) {
      return buffer.splice(buffer.indexOf(task), 1)[0];
    }
    function add(taskProducer) {
      if (!isReady()) {
        return rejectedSyncPromise(new SentryError("Not adding Promise because buffer limit was reached."));
      }
      var task = taskProducer();
      if (buffer.indexOf(task) === -1) {
        buffer.push(task);
      }
      void task.then(() => remove(task)).then(null, () => remove(task).then(null, () => {
      }));
      return task;
    }
    function drain(timeout) {
      return new SyncPromise((resolve, reject) => {
        let counter = buffer.length;
        if (!counter) {
          return resolve(true);
        }
        var capturedSetTimeout = setTimeout(() => {
          if (timeout && timeout > 0) {
            resolve(false);
          }
        }, timeout);
        buffer.forEach((item) => {
          void resolvedSyncPromise(item).then(() => {
            if (!--counter) {
              clearTimeout(capturedSetTimeout);
              resolve(true);
            }
          }, reject);
        });
      });
    }
    return {
      $: buffer,
      add,
      drain
    };
  }

  // node_modules/@sentry/utils/esm/url.js
  function parseUrl(url2) {
    if (!url2) {
      return {};
    }
    var match2 = url2.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!match2) {
      return {};
    }
    var query = match2[6] || "";
    var fragment = match2[8] || "";
    return {
      host: match2[4],
      path: match2[5],
      protocol: match2[2],
      relative: match2[5] + query + fragment
    };
  }

  // node_modules/@sentry/utils/esm/severity.js
  var validSeverityLevels = ["fatal", "error", "warning", "log", "info", "debug"];
  function severityLevelFromString(level) {
    return level === "warn" ? "warning" : validSeverityLevels.includes(level) ? level : "log";
  }

  // node_modules/@sentry/utils/esm/time.js
  var dateTimestampSource = {
    nowSeconds: () => Date.now() / 1e3
  };
  function getBrowserPerformance() {
    const { performance: performance2 } = getGlobalObject();
    if (!performance2 || !performance2.now) {
      return void 0;
    }
    var timeOrigin = Date.now() - performance2.now();
    return {
      now: () => performance2.now(),
      timeOrigin
    };
  }
  function getNodePerformance() {
    try {
      var perfHooks = dynamicRequire(module, "perf_hooks");
      return perfHooks.performance;
    } catch (_2) {
      return void 0;
    }
  }
  var platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();
  var timestampSource = platformPerformance === void 0 ? dateTimestampSource : {
    nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1e3
  };
  var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);
  var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);
  var timestampWithMs = timestampInSeconds;
  var _browserPerformanceTimeOriginMode;
  var browserPerformanceTimeOrigin = (() => {
    const { performance: performance2 } = getGlobalObject();
    if (!performance2 || !performance2.now) {
      _browserPerformanceTimeOriginMode = "none";
      return void 0;
    }
    var threshold2 = 3600 * 1e3;
    var performanceNow = performance2.now();
    var dateNow = Date.now();
    var timeOriginDelta = performance2.timeOrigin ? Math.abs(performance2.timeOrigin + performanceNow - dateNow) : threshold2;
    var timeOriginIsReliable = timeOriginDelta < threshold2;
    var navigationStart = performance2.timing && performance2.timing.navigationStart;
    var hasNavigationStart = typeof navigationStart === "number";
    var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold2;
    var navigationStartIsReliable = navigationStartDelta < threshold2;
    if (timeOriginIsReliable || navigationStartIsReliable) {
      if (timeOriginDelta <= navigationStartDelta) {
        _browserPerformanceTimeOriginMode = "timeOrigin";
        return performance2.timeOrigin;
      } else {
        _browserPerformanceTimeOriginMode = "navigationStart";
        return navigationStart;
      }
    }
    _browserPerformanceTimeOriginMode = "dateNow";
    return dateNow;
  })();

  // node_modules/@sentry/utils/esm/tracing.js
  var TRACEPARENT_REGEXP = new RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");
  function extractTraceparentData(traceparent) {
    var matches = traceparent.match(TRACEPARENT_REGEXP);
    if (matches) {
      let parentSampled;
      if (matches[3] === "1") {
        parentSampled = true;
      } else if (matches[3] === "0") {
        parentSampled = false;
      }
      return {
        traceId: matches[1],
        parentSampled,
        parentSpanId: matches[2]
      };
    }
    return void 0;
  }

  // node_modules/@sentry/utils/esm/envelope.js
  function createEnvelope(headers, items = []) {
    return [headers, items];
  }
  function addItemToEnvelope(envelope, newItem) {
    const [headers, items] = envelope;
    return [headers, [...items, newItem]];
  }
  function forEachEnvelopeItem(envelope, callback) {
    var envelopeItems = envelope[1];
    envelopeItems.forEach((envelopeItem) => {
      var envelopeItemType = envelopeItem[0].type;
      callback(envelopeItem, envelopeItemType);
    });
  }
  function encodeUTF8(input, textEncoder) {
    var utf8 = textEncoder || new TextEncoder();
    return utf8.encode(input);
  }
  function serializeEnvelope(envelope, textEncoder) {
    const [envHeaders, items] = envelope;
    let parts2 = JSON.stringify(envHeaders);
    function append(next) {
      if (typeof parts2 === "string") {
        parts2 = typeof next === "string" ? parts2 + next : [encodeUTF8(parts2, textEncoder), next];
      } else {
        parts2.push(typeof next === "string" ? encodeUTF8(next, textEncoder) : next);
      }
    }
    for (var item of items) {
      const [itemHeaders, payload] = item;
      append(`
${JSON.stringify(itemHeaders)}
`);
      append(typeof payload === "string" || payload instanceof Uint8Array ? payload : JSON.stringify(payload));
    }
    return typeof parts2 === "string" ? parts2 : concatBuffers(parts2);
  }
  function concatBuffers(buffers) {
    var totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);
    var merged = new Uint8Array(totalLength);
    let offset = 0;
    for (var buffer of buffers) {
      merged.set(buffer, offset);
      offset += buffer.length;
    }
    return merged;
  }
  function createAttachmentEnvelopeItem(attachment, textEncoder) {
    var buffer = typeof attachment.data === "string" ? encodeUTF8(attachment.data, textEncoder) : attachment.data;
    return [
      dropUndefinedKeys({
        type: "attachment",
        length: buffer.length,
        filename: attachment.filename,
        content_type: attachment.contentType,
        attachment_type: attachment.attachmentType
      }),
      buffer
    ];
  }
  var ITEM_TYPE_TO_DATA_CATEGORY_MAP = {
    session: "session",
    sessions: "session",
    attachment: "attachment",
    transaction: "transaction",
    event: "error",
    client_report: "internal",
    user_report: "default"
  };
  function envelopeItemTypeToDataCategory(type) {
    return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];
  }

  // node_modules/@sentry/utils/esm/clientreport.js
  function createClientReportEnvelope(discarded_events, dsn, timestamp) {
    var clientReportItem = [
      { type: "client_report" },
      {
        timestamp: timestamp || dateTimestampInSeconds(),
        discarded_events
      }
    ];
    return createEnvelope(dsn ? { dsn } : {}, [clientReportItem]);
  }

  // node_modules/@sentry/utils/esm/ratelimit.js
  var DEFAULT_RETRY_AFTER = 60 * 1e3;
  function parseRetryAfterHeader(header, now2 = Date.now()) {
    var headerDelay = parseInt(`${header}`, 10);
    if (!isNaN(headerDelay)) {
      return headerDelay * 1e3;
    }
    var headerDate = Date.parse(`${header}`);
    if (!isNaN(headerDate)) {
      return headerDate - now2;
    }
    return DEFAULT_RETRY_AFTER;
  }
  function disabledUntil(limits, category) {
    return limits[category] || limits.all || 0;
  }
  function isRateLimited(limits, category, now2 = Date.now()) {
    return disabledUntil(limits, category) > now2;
  }
  function updateRateLimits(limits, { statusCode, headers }, now2 = Date.now()) {
    var updatedRateLimits = __spreadValues({}, limits);
    var rateLimitHeader = headers && headers["x-sentry-rate-limits"];
    var retryAfterHeader = headers && headers["retry-after"];
    if (rateLimitHeader) {
      for (var limit of rateLimitHeader.trim().split(",")) {
        const [retryAfter, categories] = limit.split(":", 2);
        var headerDelay = parseInt(retryAfter, 10);
        var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1e3;
        if (!categories) {
          updatedRateLimits.all = now2 + delay;
        } else {
          for (var category of categories.split(";")) {
            updatedRateLimits[category] = now2 + delay;
          }
        }
      }
    } else if (retryAfterHeader) {
      updatedRateLimits.all = now2 + parseRetryAfterHeader(retryAfterHeader, now2);
    } else if (statusCode === 429) {
      updatedRateLimits.all = now2 + 60 * 1e3;
    }
    return updatedRateLimits;
  }

  // node_modules/@sentry/utils/esm/baggage.js
  var BAGGAGE_HEADER_NAME = "baggage";
  var SENTRY_BAGGAGE_KEY_PREFIX = "sentry-";
  var SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;
  var MAX_BAGGAGE_STRING_LENGTH = 8192;
  function createBaggage(initItems, baggageString = "", mutable = true) {
    return [__spreadValues({}, initItems), baggageString, mutable];
  }
  function isSentryBaggageEmpty(baggage) {
    return Object.keys(baggage[0]).length === 0;
  }
  function getSentryBaggageItems(baggage) {
    return baggage[0];
  }
  function getThirdPartyBaggage(baggage) {
    return baggage[1];
  }
  function isBaggageMutable(baggage) {
    return baggage[2];
  }
  function setBaggageImmutable(baggage) {
    baggage[2] = false;
  }
  function serializeBaggage(baggage) {
    return Object.keys(baggage[0]).reduce((prev2, key) => {
      var val = baggage[0][key];
      var baggageEntry = `${SENTRY_BAGGAGE_KEY_PREFIX}${encodeURIComponent(key)}=${encodeURIComponent(val)}`;
      var newVal = prev2 === "" ? baggageEntry : `${prev2},${baggageEntry}`;
      if (newVal.length > MAX_BAGGAGE_STRING_LENGTH) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Not adding key: ${key} with val: ${val} to baggage due to exceeding baggage size limits.`);
        return prev2;
      } else {
        return newVal;
      }
    }, baggage[1]);
  }
  function parseBaggageHeader(inputBaggageValue, includeThirdPartyEntries = false) {
    if (!Array.isArray(inputBaggageValue) && !isString(inputBaggageValue) || typeof inputBaggageValue === "number") {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("[parseBaggageHeader] Received input value of incompatible type: ", typeof inputBaggageValue, inputBaggageValue);
      return createBaggage({}, "");
    }
    var baggageEntries = (isString(inputBaggageValue) ? inputBaggageValue : inputBaggageValue.join(",")).split(",").map((entry) => entry.trim()).filter((entry) => entry !== "" && (includeThirdPartyEntries || SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(entry)));
    return baggageEntries.reduce(([baggageObj, baggageString], curr) => {
      const [key, val] = curr.split("=");
      if (SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(key)) {
        var baggageKey = decodeURIComponent(key.split("-")[1]);
        return [
          __spreadProps(__spreadValues({}, baggageObj), {
            [baggageKey]: decodeURIComponent(val)
          }),
          baggageString,
          true
        ];
      } else {
        return [baggageObj, baggageString === "" ? curr : `${baggageString},${curr}`, true];
      }
    }, [{}, "", true]);
  }
  function mergeAndSerializeBaggage(incomingBaggage, thirdPartyBaggageHeader) {
    if (!incomingBaggage && !thirdPartyBaggageHeader) {
      return "";
    }
    var headerBaggage = thirdPartyBaggageHeader && parseBaggageHeader(thirdPartyBaggageHeader, true) || void 0;
    var thirdPartyHeaderBaggage = headerBaggage && getThirdPartyBaggage(headerBaggage);
    var finalBaggage = createBaggage(incomingBaggage && incomingBaggage[0] || {}, thirdPartyHeaderBaggage || "");
    return serializeBaggage(finalBaggage);
  }
  function parseBaggageSetMutability(rawBaggageValue, sentryTraceHeader) {
    var baggage = parseBaggageHeader(rawBaggageValue || "");
    (sentryTraceHeader || !isSentryBaggageEmpty(baggage)) && setBaggageImmutable(baggage);
    return baggage;
  }

  // node_modules/@sentry/hub/esm/session.js
  function makeSession(context2) {
    var startingTime = timestampInSeconds();
    var session = {
      sid: uuid4(),
      init: true,
      timestamp: startingTime,
      started: startingTime,
      duration: 0,
      status: "ok",
      errors: 0,
      ignoreDuration: false,
      toJSON: () => sessionToJSON(session)
    };
    if (context2) {
      updateSession(session, context2);
    }
    return session;
  }
  function updateSession(session, context2 = {}) {
    if (context2.user) {
      if (!session.ipAddress && context2.user.ip_address) {
        session.ipAddress = context2.user.ip_address;
      }
      if (!session.did && !context2.did) {
        session.did = context2.user.id || context2.user.email || context2.user.username;
      }
    }
    session.timestamp = context2.timestamp || timestampInSeconds();
    if (context2.ignoreDuration) {
      session.ignoreDuration = context2.ignoreDuration;
    }
    if (context2.sid) {
      session.sid = context2.sid.length === 32 ? context2.sid : uuid4();
    }
    if (context2.init !== void 0) {
      session.init = context2.init;
    }
    if (!session.did && context2.did) {
      session.did = `${context2.did}`;
    }
    if (typeof context2.started === "number") {
      session.started = context2.started;
    }
    if (session.ignoreDuration) {
      session.duration = void 0;
    } else if (typeof context2.duration === "number") {
      session.duration = context2.duration;
    } else {
      var duration = session.timestamp - session.started;
      session.duration = duration >= 0 ? duration : 0;
    }
    if (context2.release) {
      session.release = context2.release;
    }
    if (context2.environment) {
      session.environment = context2.environment;
    }
    if (!session.ipAddress && context2.ipAddress) {
      session.ipAddress = context2.ipAddress;
    }
    if (!session.userAgent && context2.userAgent) {
      session.userAgent = context2.userAgent;
    }
    if (typeof context2.errors === "number") {
      session.errors = context2.errors;
    }
    if (context2.status) {
      session.status = context2.status;
    }
  }
  function closeSession(session, status) {
    let context2 = {};
    if (status) {
      context2 = { status };
    } else if (session.status === "ok") {
      context2 = { status: "exited" };
    }
    updateSession(session, context2);
  }
  function sessionToJSON(session) {
    return dropUndefinedKeys({
      sid: `${session.sid}`,
      init: session.init,
      started: new Date(session.started * 1e3).toISOString(),
      timestamp: new Date(session.timestamp * 1e3).toISOString(),
      status: session.status,
      errors: session.errors,
      did: typeof session.did === "number" || typeof session.did === "string" ? `${session.did}` : void 0,
      duration: session.duration,
      attrs: {
        release: session.release,
        environment: session.environment,
        ip_address: session.ipAddress,
        user_agent: session.userAgent
      }
    });
  }

  // node_modules/@sentry/hub/esm/scope.js
  var MAX_BREADCRUMBS = 100;
  var Scope = class {
    constructor() {
      this._notifyingListeners = false;
      this._scopeListeners = [];
      this._eventProcessors = [];
      this._breadcrumbs = [];
      this._attachments = [];
      this._user = {};
      this._tags = {};
      this._extra = {};
      this._contexts = {};
      this._sdkProcessingMetadata = {};
    }
    static clone(scope) {
      var newScope = new Scope();
      if (scope) {
        newScope._breadcrumbs = [...scope._breadcrumbs];
        newScope._tags = __spreadValues({}, scope._tags);
        newScope._extra = __spreadValues({}, scope._extra);
        newScope._contexts = __spreadValues({}, scope._contexts);
        newScope._user = scope._user;
        newScope._level = scope._level;
        newScope._span = scope._span;
        newScope._session = scope._session;
        newScope._transactionName = scope._transactionName;
        newScope._fingerprint = scope._fingerprint;
        newScope._eventProcessors = [...scope._eventProcessors];
        newScope._requestSession = scope._requestSession;
        newScope._attachments = [...scope._attachments];
      }
      return newScope;
    }
    addScopeListener(callback) {
      this._scopeListeners.push(callback);
    }
    addEventProcessor(callback) {
      this._eventProcessors.push(callback);
      return this;
    }
    setUser(user) {
      this._user = user || {};
      if (this._session) {
        updateSession(this._session, { user });
      }
      this._notifyScopeListeners();
      return this;
    }
    getUser() {
      return this._user;
    }
    getRequestSession() {
      return this._requestSession;
    }
    setRequestSession(requestSession) {
      this._requestSession = requestSession;
      return this;
    }
    setTags(tags) {
      this._tags = __spreadValues(__spreadValues({}, this._tags), tags);
      this._notifyScopeListeners();
      return this;
    }
    setTag(key, value2) {
      this._tags = __spreadProps(__spreadValues({}, this._tags), { [key]: value2 });
      this._notifyScopeListeners();
      return this;
    }
    setExtras(extras) {
      this._extra = __spreadValues(__spreadValues({}, this._extra), extras);
      this._notifyScopeListeners();
      return this;
    }
    setExtra(key, extra) {
      this._extra = __spreadProps(__spreadValues({}, this._extra), { [key]: extra });
      this._notifyScopeListeners();
      return this;
    }
    setFingerprint(fingerprint) {
      this._fingerprint = fingerprint;
      this._notifyScopeListeners();
      return this;
    }
    setLevel(level) {
      this._level = level;
      this._notifyScopeListeners();
      return this;
    }
    setTransactionName(name) {
      this._transactionName = name;
      this._notifyScopeListeners();
      return this;
    }
    setContext(key, context2) {
      if (context2 === null) {
        delete this._contexts[key];
      } else {
        this._contexts = __spreadProps(__spreadValues({}, this._contexts), { [key]: context2 });
      }
      this._notifyScopeListeners();
      return this;
    }
    setSpan(span) {
      this._span = span;
      this._notifyScopeListeners();
      return this;
    }
    getSpan() {
      return this._span;
    }
    getTransaction() {
      var span = this.getSpan();
      return span && span.transaction;
    }
    setSession(session) {
      if (!session) {
        delete this._session;
      } else {
        this._session = session;
      }
      this._notifyScopeListeners();
      return this;
    }
    getSession() {
      return this._session;
    }
    update(captureContext) {
      if (!captureContext) {
        return this;
      }
      if (typeof captureContext === "function") {
        var updatedScope = captureContext(this);
        return updatedScope instanceof Scope ? updatedScope : this;
      }
      if (captureContext instanceof Scope) {
        this._tags = __spreadValues(__spreadValues({}, this._tags), captureContext._tags);
        this._extra = __spreadValues(__spreadValues({}, this._extra), captureContext._extra);
        this._contexts = __spreadValues(__spreadValues({}, this._contexts), captureContext._contexts);
        if (captureContext._user && Object.keys(captureContext._user).length) {
          this._user = captureContext._user;
        }
        if (captureContext._level) {
          this._level = captureContext._level;
        }
        if (captureContext._fingerprint) {
          this._fingerprint = captureContext._fingerprint;
        }
        if (captureContext._requestSession) {
          this._requestSession = captureContext._requestSession;
        }
      } else if (isPlainObject(captureContext)) {
        captureContext = captureContext;
        this._tags = __spreadValues(__spreadValues({}, this._tags), captureContext.tags);
        this._extra = __spreadValues(__spreadValues({}, this._extra), captureContext.extra);
        this._contexts = __spreadValues(__spreadValues({}, this._contexts), captureContext.contexts);
        if (captureContext.user) {
          this._user = captureContext.user;
        }
        if (captureContext.level) {
          this._level = captureContext.level;
        }
        if (captureContext.fingerprint) {
          this._fingerprint = captureContext.fingerprint;
        }
        if (captureContext.requestSession) {
          this._requestSession = captureContext.requestSession;
        }
      }
      return this;
    }
    clear() {
      this._breadcrumbs = [];
      this._tags = {};
      this._extra = {};
      this._user = {};
      this._contexts = {};
      this._level = void 0;
      this._transactionName = void 0;
      this._fingerprint = void 0;
      this._requestSession = void 0;
      this._span = void 0;
      this._session = void 0;
      this._notifyScopeListeners();
      this._attachments = [];
      return this;
    }
    addBreadcrumb(breadcrumb, maxBreadcrumbs) {
      var maxCrumbs = typeof maxBreadcrumbs === "number" ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;
      if (maxCrumbs <= 0) {
        return this;
      }
      var mergedBreadcrumb = __spreadValues({
        timestamp: dateTimestampInSeconds()
      }, breadcrumb);
      this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);
      this._notifyScopeListeners();
      return this;
    }
    clearBreadcrumbs() {
      this._breadcrumbs = [];
      this._notifyScopeListeners();
      return this;
    }
    addAttachment(attachment) {
      this._attachments.push(attachment);
      return this;
    }
    getAttachments() {
      return this._attachments;
    }
    clearAttachments() {
      this._attachments = [];
      return this;
    }
    applyToEvent(event, hint = {}) {
      if (this._extra && Object.keys(this._extra).length) {
        event.extra = __spreadValues(__spreadValues({}, this._extra), event.extra);
      }
      if (this._tags && Object.keys(this._tags).length) {
        event.tags = __spreadValues(__spreadValues({}, this._tags), event.tags);
      }
      if (this._user && Object.keys(this._user).length) {
        event.user = __spreadValues(__spreadValues({}, this._user), event.user);
      }
      if (this._contexts && Object.keys(this._contexts).length) {
        event.contexts = __spreadValues(__spreadValues({}, this._contexts), event.contexts);
      }
      if (this._level) {
        event.level = this._level;
      }
      if (this._transactionName) {
        event.transaction = this._transactionName;
      }
      if (this._span) {
        event.contexts = __spreadValues({ trace: this._span.getTraceContext() }, event.contexts);
        var transactionName = this._span.transaction && this._span.transaction.name;
        if (transactionName) {
          event.tags = __spreadValues({ transaction: transactionName }, event.tags);
        }
      }
      this._applyFingerprint(event);
      event.breadcrumbs = [...event.breadcrumbs || [], ...this._breadcrumbs];
      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : void 0;
      event.sdkProcessingMetadata = __spreadValues(__spreadValues({}, event.sdkProcessingMetadata), this._sdkProcessingMetadata);
      return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);
    }
    setSDKProcessingMetadata(newData) {
      this._sdkProcessingMetadata = __spreadValues(__spreadValues({}, this._sdkProcessingMetadata), newData);
      return this;
    }
    _notifyEventProcessors(processors, event, hint, index2 = 0) {
      return new SyncPromise((resolve, reject) => {
        var processor = processors[index2];
        if (event === null || typeof processor !== "function") {
          resolve(event);
        } else {
          var result = processor(__spreadValues({}, event), hint);
          (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && processor.id && result === null && logger.log(`Event processor "${processor.id}" dropped event`);
          if (isThenable(result)) {
            void result.then((final) => this._notifyEventProcessors(processors, final, hint, index2 + 1).then(resolve)).then(null, reject);
          } else {
            void this._notifyEventProcessors(processors, result, hint, index2 + 1).then(resolve).then(null, reject);
          }
        }
      });
    }
    _notifyScopeListeners() {
      if (!this._notifyingListeners) {
        this._notifyingListeners = true;
        this._scopeListeners.forEach((callback) => {
          callback(this);
        });
        this._notifyingListeners = false;
      }
    }
    _applyFingerprint(event) {
      event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];
      if (this._fingerprint) {
        event.fingerprint = event.fingerprint.concat(this._fingerprint);
      }
      if (event.fingerprint && !event.fingerprint.length) {
        delete event.fingerprint;
      }
    }
  };
  function getGlobalEventProcessors() {
    return getGlobalSingleton("globalEventProcessors", () => []);
  }
  function addGlobalEventProcessor(callback) {
    getGlobalEventProcessors().push(callback);
  }

  // node_modules/@sentry/hub/esm/hub.js
  var API_VERSION = 4;
  var DEFAULT_BREADCRUMBS = 100;
  var Hub = class {
    __init() {
      this._stack = [{}];
    }
    constructor(client, scope = new Scope(), _version = API_VERSION) {
      ;
      this._version = _version;
      Hub.prototype.__init.call(this);
      this.getStackTop().scope = scope;
      if (client) {
        this.bindClient(client);
      }
    }
    isOlderThan(version) {
      return this._version < version;
    }
    bindClient(client) {
      var top = this.getStackTop();
      top.client = client;
      if (client && client.setupIntegrations) {
        client.setupIntegrations();
      }
    }
    pushScope() {
      var scope = Scope.clone(this.getScope());
      this.getStack().push({
        client: this.getClient(),
        scope
      });
      return scope;
    }
    popScope() {
      if (this.getStack().length <= 1)
        return false;
      return !!this.getStack().pop();
    }
    withScope(callback) {
      var scope = this.pushScope();
      try {
        callback(scope);
      } finally {
        this.popScope();
      }
    }
    getClient() {
      return this.getStackTop().client;
    }
    getScope() {
      return this.getStackTop().scope;
    }
    getStack() {
      return this._stack;
    }
    getStackTop() {
      return this._stack[this._stack.length - 1];
    }
    captureException(exception, hint) {
      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();
      var syntheticException = new Error("Sentry syntheticException");
      this._withClient((client, scope) => {
        client.captureException(exception, __spreadProps(__spreadValues({
          originalException: exception,
          syntheticException
        }, hint), {
          event_id: eventId
        }), scope);
      });
      return eventId;
    }
    captureMessage(message, level, hint) {
      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();
      var syntheticException = new Error(message);
      this._withClient((client, scope) => {
        client.captureMessage(message, level, __spreadProps(__spreadValues({
          originalException: message,
          syntheticException
        }, hint), {
          event_id: eventId
        }), scope);
      });
      return eventId;
    }
    captureEvent(event, hint) {
      var eventId = hint && hint.event_id ? hint.event_id : uuid4();
      if (event.type !== "transaction") {
        this._lastEventId = eventId;
      }
      this._withClient((client, scope) => {
        client.captureEvent(event, __spreadProps(__spreadValues({}, hint), { event_id: eventId }), scope);
      });
      return eventId;
    }
    lastEventId() {
      return this._lastEventId;
    }
    addBreadcrumb(breadcrumb, hint) {
      const { scope, client } = this.getStackTop();
      if (!scope || !client)
        return;
      const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions && client.getOptions() || {};
      if (maxBreadcrumbs <= 0)
        return;
      var timestamp = dateTimestampInSeconds();
      var mergedBreadcrumb = __spreadValues({ timestamp }, breadcrumb);
      var finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;
      if (finalBreadcrumb === null)
        return;
      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
    }
    setUser(user) {
      var scope = this.getScope();
      if (scope)
        scope.setUser(user);
    }
    setTags(tags) {
      var scope = this.getScope();
      if (scope)
        scope.setTags(tags);
    }
    setExtras(extras) {
      var scope = this.getScope();
      if (scope)
        scope.setExtras(extras);
    }
    setTag(key, value2) {
      var scope = this.getScope();
      if (scope)
        scope.setTag(key, value2);
    }
    setExtra(key, extra) {
      var scope = this.getScope();
      if (scope)
        scope.setExtra(key, extra);
    }
    setContext(name, context2) {
      var scope = this.getScope();
      if (scope)
        scope.setContext(name, context2);
    }
    configureScope(callback) {
      const { scope, client } = this.getStackTop();
      if (scope && client) {
        callback(scope);
      }
    }
    run(callback) {
      var oldHub = makeMain(this);
      try {
        callback(this);
      } finally {
        makeMain(oldHub);
      }
    }
    getIntegration(integration) {
      var client = this.getClient();
      if (!client)
        return null;
      try {
        return client.getIntegration(integration);
      } catch (_oO) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);
        return null;
      }
    }
    startTransaction(context2, customSamplingContext) {
      return this._callExtensionMethod("startTransaction", context2, customSamplingContext);
    }
    traceHeaders() {
      return this._callExtensionMethod("traceHeaders");
    }
    captureSession(endSession = false) {
      if (endSession) {
        return this.endSession();
      }
      this._sendSessionUpdate();
    }
    endSession() {
      var layer = this.getStackTop();
      var scope = layer && layer.scope;
      var session = scope && scope.getSession();
      if (session) {
        closeSession(session);
      }
      this._sendSessionUpdate();
      if (scope) {
        scope.setSession();
      }
    }
    startSession(context2) {
      const { scope, client } = this.getStackTop();
      const { release, environment } = client && client.getOptions() || {};
      var global9 = getGlobalObject();
      const { userAgent } = global9.navigator || {};
      var session = makeSession(__spreadValues(__spreadValues(__spreadValues({
        release,
        environment
      }, scope && { user: scope.getUser() }), userAgent && { userAgent }), context2));
      if (scope) {
        var currentSession = scope.getSession && scope.getSession();
        if (currentSession && currentSession.status === "ok") {
          updateSession(currentSession, { status: "exited" });
        }
        this.endSession();
        scope.setSession(session);
      }
      return session;
    }
    shouldSendDefaultPii() {
      var client = this.getClient();
      var options2 = client && client.getOptions();
      return Boolean(options2 && options2.sendDefaultPii);
    }
    _sendSessionUpdate() {
      const { scope, client } = this.getStackTop();
      if (!scope)
        return;
      var session = scope.getSession();
      if (session) {
        if (client && client.captureSession) {
          client.captureSession(session);
        }
      }
    }
    _withClient(callback) {
      const { scope, client } = this.getStackTop();
      if (client) {
        callback(client, scope);
      }
    }
    _callExtensionMethod(method, ...args) {
      var carrier = getMainCarrier();
      var sentry = carrier.__SENTRY__;
      if (sentry && sentry.extensions && typeof sentry.extensions[method] === "function") {
        return sentry.extensions[method].apply(this, args);
      }
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);
    }
  };
  function getMainCarrier() {
    var carrier = getGlobalObject();
    carrier.__SENTRY__ = carrier.__SENTRY__ || {
      extensions: {},
      hub: void 0
    };
    return carrier;
  }
  function makeMain(hub) {
    var registry = getMainCarrier();
    var oldHub = getHubFromCarrier(registry);
    setHubOnCarrier(registry, hub);
    return oldHub;
  }
  function getCurrentHub() {
    var registry = getMainCarrier();
    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {
      setHubOnCarrier(registry, new Hub());
    }
    if (isNodeEnv()) {
      return getHubFromActiveDomain(registry);
    }
    return getHubFromCarrier(registry);
  }
  function getHubFromActiveDomain(registry) {
    try {
      var sentry = getMainCarrier().__SENTRY__;
      var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
      if (!activeDomain) {
        return getHubFromCarrier(registry);
      }
      if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {
        var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
        setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));
      }
      return getHubFromCarrier(activeDomain);
    } catch (_Oo) {
      return getHubFromCarrier(registry);
    }
  }
  function hasHubOnCarrier(carrier) {
    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);
  }
  function getHubFromCarrier(carrier) {
    return getGlobalSingleton("hub", () => new Hub(), carrier);
  }
  function setHubOnCarrier(carrier, hub) {
    if (!carrier)
      return false;
    var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    __SENTRY__.hub = hub;
    return true;
  }

  // node_modules/@sentry/hub/esm/exports.js
  function captureException(exception, captureContext) {
    return getCurrentHub().captureException(exception, { captureContext });
  }
  function setTag(key, value2) {
    getCurrentHub().setTag(key, value2);
  }
  function setUser(user) {
    getCurrentHub().setUser(user);
  }
  function withScope(callback) {
    getCurrentHub().withScope(callback);
  }

  // node_modules/@sentry/core/esm/api.js
  var SENTRY_API_VERSION = "7";
  function getBaseApiEndpoint(dsn) {
    var protocol4 = dsn.protocol ? `${dsn.protocol}:` : "";
    var port = dsn.port ? `:${dsn.port}` : "";
    return `${protocol4}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ""}/api/`;
  }
  function _getIngestEndpoint(dsn) {
    return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;
  }
  function _encodedAuth(dsn, sdkInfo) {
    return urlEncode(__spreadValues({
      sentry_key: dsn.publicKey,
      sentry_version: SENTRY_API_VERSION
    }, sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }));
  }
  function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnelOrOptions = {}) {
    var tunnel = typeof tunnelOrOptions === "string" ? tunnelOrOptions : tunnelOrOptions.tunnel;
    var sdkInfo = typeof tunnelOrOptions === "string" || !tunnelOrOptions._metadata ? void 0 : tunnelOrOptions._metadata.sdk;
    return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;
  }

  // node_modules/@sentry/core/esm/envelope.js
  function getSdkMetadataForEnvelopeHeader(metadata) {
    if (!metadata || !metadata.sdk) {
      return;
    }
    const { name, version } = metadata.sdk;
    return { name, version };
  }
  function enhanceEventWithSdkInfo(event, sdkInfo) {
    if (!sdkInfo) {
      return event;
    }
    event.sdk = event.sdk || {};
    event.sdk.name = event.sdk.name || sdkInfo.name;
    event.sdk.version = event.sdk.version || sdkInfo.version;
    event.sdk.integrations = [...event.sdk.integrations || [], ...sdkInfo.integrations || []];
    event.sdk.packages = [...event.sdk.packages || [], ...sdkInfo.packages || []];
    return event;
  }
  function createSessionEnvelope(session, dsn, metadata, tunnel) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);
    var envelopeHeaders = __spreadValues(__spreadValues({
      sent_at: new Date().toISOString()
    }, sdkInfo && { sdk: sdkInfo }), !!tunnel && { dsn: dsnToString(dsn) });
    var envelopeItem = "aggregates" in session ? [{ type: "sessions" }, session] : [{ type: "session" }, session];
    return createEnvelope(envelopeHeaders, [envelopeItem]);
  }
  function createEventEnvelope(event, dsn, metadata, tunnel) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);
    var eventType = event.type || "event";
    const { transactionSampling } = event.sdkProcessingMetadata || {};
    const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};
    enhanceEventWithSdkInfo(event, metadata && metadata.sdk);
    var envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);
    delete event.sdkProcessingMetadata;
    var eventItem = [
      {
        type: eventType,
        sample_rates: [{ id: samplingMethod, rate: sampleRate }]
      },
      event
    ];
    return createEnvelope(envelopeHeaders, [eventItem]);
  }
  function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {
    var baggage = event.sdkProcessingMetadata && event.sdkProcessingMetadata.baggage;
    var dynamicSamplingContext = baggage && getSentryBaggageItems(baggage);
    return __spreadValues(__spreadValues(__spreadValues({
      event_id: event.event_id,
      sent_at: new Date().toISOString()
    }, sdkInfo && { sdk: sdkInfo }), !!tunnel && { dsn: dsnToString(dsn) }), event.type === "transaction" && dynamicSamplingContext && {
      trace: dropUndefinedKeys(__spreadValues({}, dynamicSamplingContext))
    });
  }

  // node_modules/@sentry/core/esm/integration.js
  var installedIntegrations = [];
  function filterDuplicates(integrations) {
    return integrations.reduce((acc, integrations2) => {
      if (acc.every((accIntegration) => integrations2.name !== accIntegration.name)) {
        acc.push(integrations2);
      }
      return acc;
    }, []);
  }
  function getIntegrationsToSetup(options2) {
    var defaultIntegrations2 = options2.defaultIntegrations && [...options2.defaultIntegrations] || [];
    var userIntegrations = options2.integrations;
    let integrations = [...filterDuplicates(defaultIntegrations2)];
    if (Array.isArray(userIntegrations)) {
      integrations = [
        ...integrations.filter((integrations2) => userIntegrations.every((userIntegration) => userIntegration.name !== integrations2.name)),
        ...filterDuplicates(userIntegrations)
      ];
    } else if (typeof userIntegrations === "function") {
      integrations = userIntegrations(integrations);
      integrations = Array.isArray(integrations) ? integrations : [integrations];
    }
    var integrationsNames = integrations.map((i3) => i3.name);
    var alwaysLastToRun = "Debug";
    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
      integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));
    }
    return integrations;
  }
  function setupIntegrations(integrations) {
    var integrationIndex = {};
    integrations.forEach((integration) => {
      integrationIndex[integration.name] = integration;
      if (installedIntegrations.indexOf(integration.name) === -1) {
        integration.setupOnce(addGlobalEventProcessor, getCurrentHub);
        installedIntegrations.push(integration.name);
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`Integration installed: ${integration.name}`);
      }
    });
    return integrationIndex;
  }

  // node_modules/@sentry/core/esm/baseclient.js
  var ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";
  var BaseClient = class {
    __init() {
      this._integrations = {};
    }
    __init2() {
      this._integrationsInitialized = false;
    }
    __init3() {
      this._numProcessing = 0;
    }
    __init4() {
      this._outcomes = {};
    }
    constructor(options2) {
      ;
      BaseClient.prototype.__init.call(this);
      BaseClient.prototype.__init2.call(this);
      BaseClient.prototype.__init3.call(this);
      BaseClient.prototype.__init4.call(this);
      this._options = options2;
      if (options2.dsn) {
        this._dsn = makeDsn(options2.dsn);
        var url2 = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options2);
        this._transport = options2.transport(__spreadProps(__spreadValues({
          recordDroppedEvent: this.recordDroppedEvent.bind(this)
        }, options2.transportOptions), {
          url: url2
        }));
      } else {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("No DSN provided, client will not do anything.");
      }
    }
    captureException(exception, hint, scope) {
      if (checkOrSetAlreadyCaught(exception)) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(ALREADY_SEEN_ERROR);
        return;
      }
      let eventId = hint && hint.event_id;
      this._process(this.eventFromException(exception, hint).then((event) => this._captureEvent(event, hint, scope)).then((result) => {
        eventId = result;
      }));
      return eventId;
    }
    captureMessage(message, level, hint, scope) {
      let eventId = hint && hint.event_id;
      var promisedEvent = isPrimitive(message) ? this.eventFromMessage(String(message), level, hint) : this.eventFromException(message, hint);
      this._process(promisedEvent.then((event) => this._captureEvent(event, hint, scope)).then((result) => {
        eventId = result;
      }));
      return eventId;
    }
    captureEvent(event, hint, scope) {
      if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(ALREADY_SEEN_ERROR);
        return;
      }
      let eventId = hint && hint.event_id;
      this._process(this._captureEvent(event, hint, scope).then((result) => {
        eventId = result;
      }));
      return eventId;
    }
    captureSession(session) {
      if (!this._isEnabled()) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("SDK not enabled, will not capture session.");
        return;
      }
      if (!(typeof session.release === "string")) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Discarded session because of missing or non-string release");
      } else {
        this.sendSession(session);
        updateSession(session, { init: false });
      }
    }
    getDsn() {
      return this._dsn;
    }
    getOptions() {
      return this._options;
    }
    getTransport() {
      return this._transport;
    }
    flush(timeout) {
      var transport = this._transport;
      if (transport) {
        return this._isClientDoneProcessing(timeout).then((clientFinished) => {
          return transport.flush(timeout).then((transportFlushed) => clientFinished && transportFlushed);
        });
      } else {
        return resolvedSyncPromise(true);
      }
    }
    close(timeout) {
      return this.flush(timeout).then((result) => {
        this.getOptions().enabled = false;
        return result;
      });
    }
    setupIntegrations() {
      if (this._isEnabled() && !this._integrationsInitialized) {
        this._integrations = setupIntegrations(this._options.integrations);
        this._integrationsInitialized = true;
      }
    }
    getIntegrationById(integrationId) {
      return this._integrations[integrationId];
    }
    getIntegration(integration) {
      try {
        return this._integrations[integration.id] || null;
      } catch (_oO) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);
        return null;
      }
    }
    sendEvent(event, hint = {}) {
      if (this._dsn) {
        let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);
        for (var attachment of hint.attachments || []) {
          env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment, this._options.transportOptions && this._options.transportOptions.textEncoder));
        }
        this._sendEnvelope(env);
      }
    }
    sendSession(session) {
      if (this._dsn) {
        var env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);
        this._sendEnvelope(env);
      }
    }
    recordDroppedEvent(reason, category) {
      if (this._options.sendClientReports) {
        var key = `${reason}:${category}`;
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`Adding outcome: "${key}"`);
        this._outcomes[key] = this._outcomes[key] + 1 || 1;
      }
    }
    _updateSessionFromEvent(session, event) {
      let crashed = false;
      let errored = false;
      var exceptions = event.exception && event.exception.values;
      if (exceptions) {
        errored = true;
        for (var ex of exceptions) {
          var mechanism = ex.mechanism;
          if (mechanism && mechanism.handled === false) {
            crashed = true;
            break;
          }
        }
      }
      var sessionNonTerminal = session.status === "ok";
      var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;
      if (shouldUpdateAndSend) {
        updateSession(session, __spreadProps(__spreadValues({}, crashed && { status: "crashed" }), {
          errors: session.errors || Number(errored || crashed)
        }));
        this.captureSession(session);
      }
    }
    _isClientDoneProcessing(timeout) {
      return new SyncPromise((resolve) => {
        let ticked = 0;
        var tick = 1;
        var interval = setInterval(() => {
          if (this._numProcessing == 0) {
            clearInterval(interval);
            resolve(true);
          } else {
            ticked += tick;
            if (timeout && ticked >= timeout) {
              clearInterval(interval);
              resolve(false);
            }
          }
        }, tick);
      });
    }
    _isEnabled() {
      return this.getOptions().enabled !== false && this._dsn !== void 0;
    }
    _prepareEvent(event, hint, scope) {
      const { normalizeDepth = 3, normalizeMaxBreadth = 1e3 } = this.getOptions();
      var prepared = __spreadProps(__spreadValues({}, event), {
        event_id: event.event_id || hint.event_id || uuid4(),
        timestamp: event.timestamp || dateTimestampInSeconds()
      });
      this._applyClientOptions(prepared);
      this._applyIntegrationsMetadata(prepared);
      let finalScope = scope;
      if (hint.captureContext) {
        finalScope = Scope.clone(finalScope).update(hint.captureContext);
      }
      let result = resolvedSyncPromise(prepared);
      if (finalScope) {
        var attachments = [...hint.attachments || [], ...finalScope.getAttachments()];
        if (attachments.length) {
          hint.attachments = attachments;
        }
        result = finalScope.applyToEvent(prepared, hint);
      }
      return result.then((evt) => {
        if (typeof normalizeDepth === "number" && normalizeDepth > 0) {
          return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);
        }
        return evt;
      });
    }
    _normalizeEvent(event, depth, maxBreadth) {
      if (!event) {
        return null;
      }
      var normalized = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, event), event.breadcrumbs && {
        breadcrumbs: event.breadcrumbs.map((b2) => __spreadValues(__spreadValues({}, b2), b2.data && {
          data: normalize(b2.data, depth, maxBreadth)
        }))
      }), event.user && {
        user: normalize(event.user, depth, maxBreadth)
      }), event.contexts && {
        contexts: normalize(event.contexts, depth, maxBreadth)
      }), event.extra && {
        extra: normalize(event.extra, depth, maxBreadth)
      });
      if (event.contexts && event.contexts.trace && normalized.contexts) {
        normalized.contexts.trace = event.contexts.trace;
        if (event.contexts.trace.data) {
          normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);
        }
      }
      if (event.spans) {
        normalized.spans = event.spans.map((span) => {
          if (span.data) {
            span.data = normalize(span.data, depth, maxBreadth);
          }
          return span;
        });
      }
      return normalized;
    }
    _applyClientOptions(event) {
      var options2 = this.getOptions();
      const { environment, release, dist, maxValueLength = 250 } = options2;
      if (!("environment" in event)) {
        event.environment = "environment" in options2 ? environment : "production";
      }
      if (event.release === void 0 && release !== void 0) {
        event.release = release;
      }
      if (event.dist === void 0 && dist !== void 0) {
        event.dist = dist;
      }
      if (event.message) {
        event.message = truncate(event.message, maxValueLength);
      }
      var exception = event.exception && event.exception.values && event.exception.values[0];
      if (exception && exception.value) {
        exception.value = truncate(exception.value, maxValueLength);
      }
      var request = event.request;
      if (request && request.url) {
        request.url = truncate(request.url, maxValueLength);
      }
    }
    _applyIntegrationsMetadata(event) {
      var integrationsArray = Object.keys(this._integrations);
      if (integrationsArray.length > 0) {
        event.sdk = event.sdk || {};
        event.sdk.integrations = [...event.sdk.integrations || [], ...integrationsArray];
      }
    }
    _captureEvent(event, hint = {}, scope) {
      return this._processEvent(event, hint, scope).then((finalEvent) => {
        return finalEvent.event_id;
      }, (reason) => {
        if (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) {
          var sentryError = reason;
          if (sentryError.logLevel === "log") {
            logger.log(sentryError.message);
          } else {
            logger.warn(sentryError);
          }
        }
        return void 0;
      });
    }
    _processEvent(event, hint, scope) {
      const { beforeSend, sampleRate } = this.getOptions();
      if (!this._isEnabled()) {
        return rejectedSyncPromise(new SentryError("SDK not enabled, will not capture event.", "log"));
      }
      var isTransaction = event.type === "transaction";
      if (!isTransaction && typeof sampleRate === "number" && Math.random() > sampleRate) {
        this.recordDroppedEvent("sample_rate", "error");
        return rejectedSyncPromise(new SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, "log"));
      }
      return this._prepareEvent(event, hint, scope).then((prepared) => {
        if (prepared === null) {
          this.recordDroppedEvent("event_processor", event.type || "error");
          throw new SentryError("An event processor returned null, will not send event.", "log");
        }
        var isInternalException = hint.data && hint.data.__sentry__ === true;
        if (isInternalException || isTransaction || !beforeSend) {
          return prepared;
        }
        var beforeSendResult = beforeSend(prepared, hint);
        return _ensureBeforeSendRv(beforeSendResult);
      }).then((processedEvent) => {
        if (processedEvent === null) {
          this.recordDroppedEvent("before_send", event.type || "error");
          throw new SentryError("`beforeSend` returned `null`, will not send event.", "log");
        }
        var session = scope && scope.getSession();
        if (!isTransaction && session) {
          this._updateSessionFromEvent(session, processedEvent);
        }
        this.sendEvent(processedEvent, hint);
        return processedEvent;
      }).then(null, (reason) => {
        if (reason instanceof SentryError) {
          throw reason;
        }
        this.captureException(reason, {
          data: {
            __sentry__: true
          },
          originalException: reason
        });
        throw new SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${reason}`);
      });
    }
    _process(promise) {
      this._numProcessing += 1;
      void promise.then((value2) => {
        this._numProcessing -= 1;
        return value2;
      }, (reason) => {
        this._numProcessing -= 1;
        return reason;
      });
    }
    _sendEnvelope(envelope) {
      if (this._transport && this._dsn) {
        this._transport.send(envelope).then(null, (reason) => {
          (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error("Error while sending event:", reason);
        });
      } else {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error("Transport disabled");
      }
    }
    _clearOutcomes() {
      var outcomes = this._outcomes;
      this._outcomes = {};
      return Object.keys(outcomes).map((key) => {
        const [reason, category] = key.split(":");
        return {
          reason,
          category,
          quantity: outcomes[key]
        };
      });
    }
  };
  function _ensureBeforeSendRv(rv) {
    var nullErr = "`beforeSend` method has to return `null` or a valid event.";
    if (isThenable(rv)) {
      return rv.then((event) => {
        if (!(isPlainObject(event) || event === null)) {
          throw new SentryError(nullErr);
        }
        return event;
      }, (e3) => {
        throw new SentryError(`beforeSend rejected with ${e3}`);
      });
    } else if (!(isPlainObject(rv) || rv === null)) {
      throw new SentryError(nullErr);
    }
    return rv;
  }

  // node_modules/@sentry/core/esm/sdk.js
  function initAndBind(clientClass, options2) {
    if (options2.debug === true) {
      if (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) {
        logger.enable();
      } else {
        console.warn("[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.");
      }
    }
    var hub = getCurrentHub();
    var scope = hub.getScope();
    if (scope) {
      scope.update(options2.initialScope);
    }
    var client = new clientClass(options2);
    hub.bindClient(client);
  }

  // node_modules/@sentry/core/esm/transports/base.js
  var DEFAULT_TRANSPORT_BUFFER_SIZE = 30;
  function createTransport(options2, makeRequest, buffer = makePromiseBuffer(options2.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {
    let rateLimits = {};
    var flush2 = (timeout) => buffer.drain(timeout);
    function send(envelope) {
      var filteredEnvelopeItems = [];
      forEachEnvelopeItem(envelope, (item, type) => {
        var envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);
        if (isRateLimited(rateLimits, envelopeItemDataCategory)) {
          options2.recordDroppedEvent("ratelimit_backoff", envelopeItemDataCategory);
        } else {
          filteredEnvelopeItems.push(item);
        }
      });
      if (filteredEnvelopeItems.length === 0) {
        return resolvedSyncPromise();
      }
      var filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems);
      var recordEnvelopeLoss = (reason) => {
        forEachEnvelopeItem(filteredEnvelope, (_2, type) => {
          options2.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));
        });
      };
      var requestTask = () => makeRequest({ body: serializeEnvelope(filteredEnvelope, options2.textEncoder) }).then((response) => {
        if (response.statusCode !== void 0 && (response.statusCode < 200 || response.statusCode >= 300)) {
          (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);
        }
        rateLimits = updateRateLimits(rateLimits, response);
      }, (error) => {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error("Failed while sending event:", error);
        recordEnvelopeLoss("network_error");
      });
      return buffer.add(requestTask).then((result) => result, (error) => {
        if (error instanceof SentryError) {
          (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error("Skipped sending event because buffer is full.");
          recordEnvelopeLoss("queue_overflow");
          return resolvedSyncPromise();
        } else {
          throw error;
        }
      });
    }
    return {
      send,
      flush: flush2
    };
  }

  // node_modules/@sentry/core/esm/version.js
  var SDK_VERSION = "7.12.1";

  // node_modules/@sentry/core/esm/integrations/index.js
  var integrations_exports = {};
  __export(integrations_exports, {
    FunctionToString: () => FunctionToString,
    InboundFilters: () => InboundFilters
  });

  // node_modules/@sentry/core/esm/integrations/functiontostring.js
  var originalFunctionToString;
  var FunctionToString = class {
    constructor() {
      FunctionToString.prototype.__init.call(this);
    }
    static __initStatic() {
      this.id = "FunctionToString";
    }
    __init() {
      this.name = FunctionToString.id;
    }
    setupOnce() {
      originalFunctionToString = Function.prototype.toString;
      Function.prototype.toString = function(...args) {
        var context2 = getOriginalFunction(this) || this;
        return originalFunctionToString.apply(context2, args);
      };
    }
  };
  FunctionToString.__initStatic();

  // node_modules/@sentry/core/esm/integrations/inboundfilters.js
  var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
  var InboundFilters = class {
    static __initStatic() {
      this.id = "InboundFilters";
    }
    __init() {
      this.name = InboundFilters.id;
    }
    constructor(_options = {}) {
      ;
      this._options = _options;
      InboundFilters.prototype.__init.call(this);
    }
    setupOnce(addGlobalEventProcessor2, getCurrentHub2) {
      var eventProcess = (event) => {
        var hub = getCurrentHub2();
        if (hub) {
          var self2 = hub.getIntegration(InboundFilters);
          if (self2) {
            var client = hub.getClient();
            var clientOptions = client ? client.getOptions() : {};
            var options2 = _mergeOptions(self2._options, clientOptions);
            return _shouldDropEvent(event, options2) ? null : event;
          }
        }
        return event;
      };
      eventProcess.id = this.name;
      addGlobalEventProcessor2(eventProcess);
    }
  };
  InboundFilters.__initStatic();
  function _mergeOptions(internalOptions = {}, clientOptions = {}) {
    return {
      allowUrls: [...internalOptions.allowUrls || [], ...clientOptions.allowUrls || []],
      denyUrls: [...internalOptions.denyUrls || [], ...clientOptions.denyUrls || []],
      ignoreErrors: [
        ...internalOptions.ignoreErrors || [],
        ...clientOptions.ignoreErrors || [],
        ...DEFAULT_IGNORE_ERRORS
      ],
      ignoreInternal: internalOptions.ignoreInternal !== void 0 ? internalOptions.ignoreInternal : true
    };
  }
  function _shouldDropEvent(event, options2) {
    if (options2.ignoreInternal && _isSentryError(event)) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Event dropped due to being internal Sentry Error.
Event: ${getEventDescription(event)}`);
      return true;
    }
    if (_isIgnoredError(event, options2.ignoreErrors)) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${getEventDescription(event)}`);
      return true;
    }
    if (_isDeniedUrl(event, options2.denyUrls)) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Event dropped due to being matched by \`denyUrls\` option.
Event: ${getEventDescription(event)}.
Url: ${_getEventFilterUrl(event)}`);
      return true;
    }
    if (!_isAllowedUrl(event, options2.allowUrls)) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`Event dropped due to not being matched by \`allowUrls\` option.
Event: ${getEventDescription(event)}.
Url: ${_getEventFilterUrl(event)}`);
      return true;
    }
    return false;
  }
  function _isIgnoredError(event, ignoreErrors) {
    if (!ignoreErrors || !ignoreErrors.length) {
      return false;
    }
    return _getPossibleEventMessages(event).some((message) => ignoreErrors.some((pattern) => isMatchingPattern(message, pattern)));
  }
  function _isDeniedUrl(event, denyUrls) {
    if (!denyUrls || !denyUrls.length) {
      return false;
    }
    var url2 = _getEventFilterUrl(event);
    return !url2 ? false : denyUrls.some((pattern) => isMatchingPattern(url2, pattern));
  }
  function _isAllowedUrl(event, allowUrls) {
    if (!allowUrls || !allowUrls.length) {
      return true;
    }
    var url2 = _getEventFilterUrl(event);
    return !url2 ? true : allowUrls.some((pattern) => isMatchingPattern(url2, pattern));
  }
  function _getPossibleEventMessages(event) {
    if (event.message) {
      return [event.message];
    }
    if (event.exception) {
      try {
        const { type = "", value: value2 = "" } = event.exception.values && event.exception.values[0] || {};
        return [`${value2}`, `${type}: ${value2}`];
      } catch (oO) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);
        return [];
      }
    }
    return [];
  }
  function _isSentryError(event) {
    try {
      return event.exception.values[0].type === "SentryError";
    } catch (e3) {
    }
    return false;
  }
  function _getLastValidUrl(frames = []) {
    for (let i3 = frames.length - 1; i3 >= 0; i3--) {
      var frame = frames[i3];
      if (frame && frame.filename !== "<anonymous>" && frame.filename !== "[native code]") {
        return frame.filename || null;
      }
    }
    return null;
  }
  function _getEventFilterUrl(event) {
    try {
      let frames;
      try {
        frames = event.exception.values[0].stacktrace.frames;
      } catch (e3) {
      }
      return frames ? _getLastValidUrl(frames) : null;
    } catch (oO) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);
      return null;
    }
  }

  // node_modules/@sentry/browser/esm/eventbuilder.js
  function exceptionFromError(stackParser, ex) {
    var frames = parseStackFrames(stackParser, ex);
    var exception = {
      type: ex && ex.name,
      value: extractMessage(ex)
    };
    if (frames.length) {
      exception.stacktrace = { frames };
    }
    if (exception.type === void 0 && exception.value === "") {
      exception.value = "Unrecoverable error caught";
    }
    return exception;
  }
  function eventFromPlainObject(stackParser, exception, syntheticException, isUnhandledRejection) {
    var event = {
      exception: {
        values: [
          {
            type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? "UnhandledRejection" : "Error",
            value: `Non-Error ${isUnhandledRejection ? "promise rejection" : "exception"} captured with keys: ${extractExceptionKeysForMessage(exception)}`
          }
        ]
      },
      extra: {
        __serialized__: normalizeToSize(exception)
      }
    };
    if (syntheticException) {
      var frames = parseStackFrames(stackParser, syntheticException);
      if (frames.length) {
        event.exception.values[0].stacktrace = { frames };
      }
    }
    return event;
  }
  function eventFromError(stackParser, ex) {
    return {
      exception: {
        values: [exceptionFromError(stackParser, ex)]
      }
    };
  }
  function parseStackFrames(stackParser, ex) {
    var stacktrace = ex.stacktrace || ex.stack || "";
    var popSize = getPopSize(ex);
    try {
      return stackParser(stacktrace, popSize);
    } catch (e3) {
    }
    return [];
  }
  var reactMinifiedRegexp = /Minified React error #\d+;/i;
  function getPopSize(ex) {
    if (ex) {
      if (typeof ex.framesToPop === "number") {
        return ex.framesToPop;
      }
      if (reactMinifiedRegexp.test(ex.message)) {
        return 1;
      }
    }
    return 0;
  }
  function extractMessage(ex) {
    var message = ex && ex.message;
    if (!message) {
      return "No error message";
    }
    if (message.error && typeof message.error.message === "string") {
      return message.error.message;
    }
    return message;
  }
  function eventFromException(stackParser, exception, hint, attachStacktrace) {
    var syntheticException = hint && hint.syntheticException || void 0;
    var event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);
    addExceptionMechanism(event);
    event.level = "error";
    if (hint && hint.event_id) {
      event.event_id = hint.event_id;
    }
    return resolvedSyncPromise(event);
  }
  function eventFromMessage(stackParser, message, level = "info", hint, attachStacktrace) {
    var syntheticException = hint && hint.syntheticException || void 0;
    var event = eventFromString(stackParser, message, syntheticException, attachStacktrace);
    event.level = level;
    if (hint && hint.event_id) {
      event.event_id = hint.event_id;
    }
    return resolvedSyncPromise(event);
  }
  function eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace, isUnhandledRejection) {
    let event;
    if (isErrorEvent(exception) && exception.error) {
      var errorEvent = exception;
      return eventFromError(stackParser, errorEvent.error);
    }
    if (isDOMError(exception) || isDOMException(exception)) {
      var domException = exception;
      if ("stack" in exception) {
        event = eventFromError(stackParser, exception);
      } else {
        var name = domException.name || (isDOMError(domException) ? "DOMError" : "DOMException");
        var message = domException.message ? `${name}: ${domException.message}` : name;
        event = eventFromString(stackParser, message, syntheticException, attachStacktrace);
        addExceptionTypeValue(event, message);
      }
      if ("code" in domException) {
        event.tags = __spreadProps(__spreadValues({}, event.tags), { "DOMException.code": `${domException.code}` });
      }
      return event;
    }
    if (isError(exception)) {
      return eventFromError(stackParser, exception);
    }
    if (isPlainObject(exception) || isEvent(exception)) {
      var objectException = exception;
      event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);
      addExceptionMechanism(event, {
        synthetic: true
      });
      return event;
    }
    event = eventFromString(stackParser, exception, syntheticException, attachStacktrace);
    addExceptionTypeValue(event, `${exception}`, void 0);
    addExceptionMechanism(event, {
      synthetic: true
    });
    return event;
  }
  function eventFromString(stackParser, input, syntheticException, attachStacktrace) {
    var event = {
      message: input
    };
    if (attachStacktrace && syntheticException) {
      var frames = parseStackFrames(stackParser, syntheticException);
      if (frames.length) {
        event.exception = {
          values: [{ value: input, stacktrace: { frames } }]
        };
      }
    }
    return event;
  }

  // node_modules/@sentry/browser/esm/integrations/breadcrumbs.js
  var BREADCRUMB_INTEGRATION_ID = "Breadcrumbs";
  var Breadcrumbs = class {
    static __initStatic() {
      this.id = BREADCRUMB_INTEGRATION_ID;
    }
    __init() {
      this.name = Breadcrumbs.id;
    }
    constructor(options2) {
      ;
      Breadcrumbs.prototype.__init.call(this);
      this.options = __spreadValues({
        console: true,
        dom: true,
        fetch: true,
        history: true,
        sentry: true,
        xhr: true
      }, options2);
    }
    setupOnce() {
      if (this.options.console) {
        addInstrumentationHandler("console", _consoleBreadcrumb);
      }
      if (this.options.dom) {
        addInstrumentationHandler("dom", _domBreadcrumb(this.options.dom));
      }
      if (this.options.xhr) {
        addInstrumentationHandler("xhr", _xhrBreadcrumb);
      }
      if (this.options.fetch) {
        addInstrumentationHandler("fetch", _fetchBreadcrumb);
      }
      if (this.options.history) {
        addInstrumentationHandler("history", _historyBreadcrumb);
      }
    }
  };
  Breadcrumbs.__initStatic();
  function _domBreadcrumb(dom) {
    function _innerDomBreadcrumb(handlerData) {
      let target;
      let keyAttrs = typeof dom === "object" ? dom.serializeAttribute : void 0;
      if (typeof keyAttrs === "string") {
        keyAttrs = [keyAttrs];
      }
      try {
        target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target, keyAttrs) : htmlTreeAsString(handlerData.event, keyAttrs);
      } catch (e3) {
        target = "<unknown>";
      }
      if (target.length === 0) {
        return;
      }
      getCurrentHub().addBreadcrumb({
        category: `ui.${handlerData.name}`,
        message: target
      }, {
        event: handlerData.event,
        name: handlerData.name,
        global: handlerData.global
      });
    }
    return _innerDomBreadcrumb;
  }
  function _consoleBreadcrumb(handlerData) {
    var breadcrumb = {
      category: "console",
      data: {
        arguments: handlerData.args,
        logger: "console"
      },
      level: severityLevelFromString(handlerData.level),
      message: safeJoin(handlerData.args, " ")
    };
    if (handlerData.level === "assert") {
      if (handlerData.args[0] === false) {
        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), " ") || "console.assert"}`;
        breadcrumb.data.arguments = handlerData.args.slice(1);
      } else {
        return;
      }
    }
    getCurrentHub().addBreadcrumb(breadcrumb, {
      input: handlerData.args,
      level: handlerData.level
    });
  }
  function _xhrBreadcrumb(handlerData) {
    if (handlerData.endTimestamp) {
      if (handlerData.xhr.__sentry_own_request__) {
        return;
      }
      const { method, url: url2, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};
      getCurrentHub().addBreadcrumb({
        category: "xhr",
        data: {
          method,
          url: url2,
          status_code
        },
        type: "http"
      }, {
        xhr: handlerData.xhr,
        input: body
      });
      return;
    }
  }
  function _fetchBreadcrumb(handlerData) {
    if (!handlerData.endTimestamp) {
      return;
    }
    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === "POST") {
      return;
    }
    if (handlerData.error) {
      getCurrentHub().addBreadcrumb({
        category: "fetch",
        data: handlerData.fetchData,
        level: "error",
        type: "http"
      }, {
        data: handlerData.error,
        input: handlerData.args
      });
    } else {
      getCurrentHub().addBreadcrumb({
        category: "fetch",
        data: __spreadProps(__spreadValues({}, handlerData.fetchData), {
          status_code: handlerData.response.status
        }),
        type: "http"
      }, {
        input: handlerData.args,
        response: handlerData.response
      });
    }
  }
  function _historyBreadcrumb(handlerData) {
    var global9 = getGlobalObject();
    let from = handlerData.from;
    let to = handlerData.to;
    var parsedLoc = parseUrl(global9.location.href);
    let parsedFrom = parseUrl(from);
    var parsedTo = parseUrl(to);
    if (!parsedFrom.path) {
      parsedFrom = parsedLoc;
    }
    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
      to = parsedTo.relative;
    }
    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
      from = parsedFrom.relative;
    }
    getCurrentHub().addBreadcrumb({
      category: "navigation",
      data: {
        from,
        to
      }
    });
  }

  // node_modules/@sentry/browser/esm/transports/utils.js
  var global4 = getGlobalObject();
  var cachedFetchImpl;
  function getNativeFetchImplementation() {
    if (cachedFetchImpl) {
      return cachedFetchImpl;
    }
    if (isNativeFetch(global4.fetch)) {
      return cachedFetchImpl = global4.fetch.bind(global4);
    }
    var document2 = global4.document;
    let fetchImpl = global4.fetch;
    if (document2 && typeof document2.createElement === "function") {
      try {
        var sandbox = document2.createElement("iframe");
        sandbox.hidden = true;
        document2.head.appendChild(sandbox);
        var contentWindow = sandbox.contentWindow;
        if (contentWindow && contentWindow.fetch) {
          fetchImpl = contentWindow.fetch;
        }
        document2.head.removeChild(sandbox);
      } catch (e3) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", e3);
      }
    }
    return cachedFetchImpl = fetchImpl.bind(global4);
  }
  function sendReport(url2, body) {
    var isRealNavigator = Object.prototype.toString.call(global4 && global4.navigator) === "[object Navigator]";
    var hasSendBeacon = isRealNavigator && typeof global4.navigator.sendBeacon === "function";
    if (hasSendBeacon) {
      var sendBeacon = global4.navigator.sendBeacon.bind(global4.navigator);
      sendBeacon(url2, body);
    } else if (supportsFetch()) {
      var fetch2 = getNativeFetchImplementation();
      fetch2(url2, {
        body,
        method: "POST",
        credentials: "omit",
        keepalive: true
      }).then(null, (error) => {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error(error);
      });
    }
  }

  // node_modules/@sentry/browser/esm/client.js
  var globalObject = getGlobalObject();
  var BrowserClient = class extends BaseClient {
    constructor(options2) {
      options2._metadata = options2._metadata || {};
      options2._metadata.sdk = options2._metadata.sdk || {
        name: "sentry.javascript.browser",
        packages: [
          {
            name: "npm:@sentry/browser",
            version: SDK_VERSION
          }
        ],
        version: SDK_VERSION
      };
      super(options2);
      if (options2.sendClientReports && globalObject.document) {
        globalObject.document.addEventListener("visibilitychange", () => {
          if (globalObject.document.visibilityState === "hidden") {
            this._flushOutcomes();
          }
        });
      }
    }
    eventFromException(exception, hint) {
      return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);
    }
    eventFromMessage(message, level = "info", hint) {
      return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);
    }
    sendEvent(event, hint) {
      var breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID);
      if (breadcrumbIntegration && breadcrumbIntegration.options && breadcrumbIntegration.options.sentry) {
        getCurrentHub().addBreadcrumb({
          category: `sentry.${event.type === "transaction" ? "transaction" : "event"}`,
          event_id: event.event_id,
          level: event.level,
          message: getEventDescription(event)
        }, {
          event
        });
      }
      super.sendEvent(event, hint);
    }
    _prepareEvent(event, hint, scope) {
      event.platform = event.platform || "javascript";
      return super._prepareEvent(event, hint, scope);
    }
    _flushOutcomes() {
      var outcomes = this._clearOutcomes();
      if (outcomes.length === 0) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("No outcomes to send");
        return;
      }
      if (!this._dsn) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("No dsn provided, will not send outcomes");
        return;
      }
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("Sending outcomes:", outcomes);
      var url2 = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);
      var envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));
      try {
        sendReport(url2, serializeEnvelope(envelope));
      } catch (e3) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.error(e3);
      }
    }
  };

  // node_modules/@sentry/browser/esm/transports/fetch.js
  function makeFetchTransport(options2, nativeFetch = getNativeFetchImplementation()) {
    function makeRequest(request) {
      var requestOptions = __spreadValues({
        body: request.body,
        method: "POST",
        referrerPolicy: "origin",
        headers: options2.headers
      }, options2.fetchOptions);
      return nativeFetch(options2.url, requestOptions).then((response) => ({
        statusCode: response.status,
        headers: {
          "x-sentry-rate-limits": response.headers.get("X-Sentry-Rate-Limits"),
          "retry-after": response.headers.get("Retry-After")
        }
      }));
    }
    return createTransport(options2, makeRequest);
  }

  // node_modules/@sentry/browser/esm/transports/xhr.js
  var XHR_READYSTATE_DONE = 4;
  function makeXHRTransport(options2) {
    function makeRequest(request) {
      return new SyncPromise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.onerror = reject;
        xhr.onreadystatechange = () => {
          if (xhr.readyState === XHR_READYSTATE_DONE) {
            resolve({
              statusCode: xhr.status,
              headers: {
                "x-sentry-rate-limits": xhr.getResponseHeader("X-Sentry-Rate-Limits"),
                "retry-after": xhr.getResponseHeader("Retry-After")
              }
            });
          }
        };
        xhr.open("POST", options2.url);
        for (var header in options2.headers) {
          if (Object.prototype.hasOwnProperty.call(options2.headers, header)) {
            xhr.setRequestHeader(header, options2.headers[header]);
          }
        }
        xhr.send(request.body);
      });
    }
    return createTransport(options2, makeRequest);
  }

  // node_modules/@sentry/browser/esm/stack-parsers.js
  var UNKNOWN_FUNCTION = "?";
  var CHROME_PRIORITY = 30;
  var WINJS_PRIORITY = 40;
  var GECKO_PRIORITY = 50;
  function createFrame(filename, func2, lineno, colno) {
    var frame = {
      filename,
      function: func2,
      in_app: true
    };
    if (lineno !== void 0) {
      frame.lineno = lineno;
    }
    if (colno !== void 0) {
      frame.colno = colno;
    }
    return frame;
  }
  var chromeRegex = /^\s*at (?:(.*\).*?|.*?) ?\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRegex = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  var chrome = (line) => {
    var parts2 = chromeRegex.exec(line);
    if (parts2) {
      var isEval = parts2[2] && parts2[2].indexOf("eval") === 0;
      if (isEval) {
        var subMatch = chromeEvalRegex.exec(parts2[2]);
        if (subMatch) {
          parts2[2] = subMatch[1];
          parts2[3] = subMatch[2];
          parts2[4] = subMatch[3];
        }
      }
      const [func2, filename] = extractSafariExtensionDetails(parts2[1] || UNKNOWN_FUNCTION, parts2[2]);
      return createFrame(filename, func2, parts2[3] ? +parts2[3] : void 0, parts2[4] ? +parts2[4] : void 0);
    }
    return;
  };
  var chromeStackLineParser = [CHROME_PRIORITY, chrome];
  var geckoREgex = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|safari-extension|safari-web-extension|capacitor)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRegex = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  var gecko = (line) => {
    var parts2 = geckoREgex.exec(line);
    if (parts2) {
      var isEval = parts2[3] && parts2[3].indexOf(" > eval") > -1;
      if (isEval) {
        var subMatch = geckoEvalRegex.exec(parts2[3]);
        if (subMatch) {
          parts2[1] = parts2[1] || "eval";
          parts2[3] = subMatch[1];
          parts2[4] = subMatch[2];
          parts2[5] = "";
        }
      }
      let filename = parts2[3];
      let func2 = parts2[1] || UNKNOWN_FUNCTION;
      [func2, filename] = extractSafariExtensionDetails(func2, filename);
      return createFrame(filename, func2, parts2[4] ? +parts2[4] : void 0, parts2[5] ? +parts2[5] : void 0);
    }
    return;
  };
  var geckoStackLineParser = [GECKO_PRIORITY, gecko];
  var winjsRegex = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  var winjs = (line) => {
    var parts2 = winjsRegex.exec(line);
    return parts2 ? createFrame(parts2[2], parts2[1] || UNKNOWN_FUNCTION, +parts2[3], parts2[4] ? +parts2[4] : void 0) : void 0;
  };
  var winjsStackLineParser = [WINJS_PRIORITY, winjs];
  var defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];
  var defaultStackParser = createStackParser(...defaultStackLineParsers);
  var extractSafariExtensionDetails = (func2, filename) => {
    var isSafariExtension = func2.indexOf("safari-extension") !== -1;
    var isSafariWebExtension = func2.indexOf("safari-web-extension") !== -1;
    return isSafariExtension || isSafariWebExtension ? [
      func2.indexOf("@") !== -1 ? func2.split("@")[0] : UNKNOWN_FUNCTION,
      isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`
    ] : [func2, filename];
  };

  // node_modules/@sentry/browser/esm/helpers.js
  var ignoreOnError = 0;
  function shouldIgnoreOnError() {
    return ignoreOnError > 0;
  }
  function ignoreNextOnError() {
    ignoreOnError += 1;
    setTimeout(() => {
      ignoreOnError -= 1;
    });
  }
  function wrap(fn, options2 = {}, before) {
    if (typeof fn !== "function") {
      return fn;
    }
    try {
      var wrapper = fn.__sentry_wrapped__;
      if (wrapper) {
        return wrapper;
      }
      if (getOriginalFunction(fn)) {
        return fn;
      }
    } catch (e3) {
      return fn;
    }
    var sentryWrapped = function() {
      var args = Array.prototype.slice.call(arguments);
      try {
        if (before && typeof before === "function") {
          before.apply(this, arguments);
        }
        var wrappedArguments = args.map((arg) => wrap(arg, options2));
        return fn.apply(this, wrappedArguments);
      } catch (ex) {
        ignoreNextOnError();
        withScope((scope) => {
          scope.addEventProcessor((event) => {
            if (options2.mechanism) {
              addExceptionTypeValue(event, void 0, void 0);
              addExceptionMechanism(event, options2.mechanism);
            }
            event.extra = __spreadProps(__spreadValues({}, event.extra), {
              arguments: args
            });
            return event;
          });
          captureException(ex);
        });
        throw ex;
      }
    };
    try {
      for (var property in fn) {
        if (Object.prototype.hasOwnProperty.call(fn, property)) {
          sentryWrapped[property] = fn[property];
        }
      }
    } catch (_oO) {
    }
    markFunctionWrapped(sentryWrapped, fn);
    addNonEnumerableProperty(fn, "__sentry_wrapped__", sentryWrapped);
    try {
      var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, "name");
      if (descriptor.configurable) {
        Object.defineProperty(sentryWrapped, "name", {
          get() {
            return fn.name;
          }
        });
      }
    } catch (_oO) {
    }
    return sentryWrapped;
  }

  // node_modules/@sentry/browser/esm/integrations/index.js
  var integrations_exports2 = {};
  __export(integrations_exports2, {
    Breadcrumbs: () => Breadcrumbs,
    Dedupe: () => Dedupe,
    GlobalHandlers: () => GlobalHandlers,
    HttpContext: () => HttpContext,
    LinkedErrors: () => LinkedErrors,
    TryCatch: () => TryCatch
  });

  // node_modules/@sentry/browser/esm/integrations/globalhandlers.js
  var GlobalHandlers = class {
    static __initStatic() {
      this.id = "GlobalHandlers";
    }
    __init() {
      this.name = GlobalHandlers.id;
    }
    __init2() {
      this._installFunc = {
        onerror: _installGlobalOnErrorHandler,
        onunhandledrejection: _installGlobalOnUnhandledRejectionHandler
      };
    }
    constructor(options2) {
      ;
      GlobalHandlers.prototype.__init.call(this);
      GlobalHandlers.prototype.__init2.call(this);
      this._options = __spreadValues({
        onerror: true,
        onunhandledrejection: true
      }, options2);
    }
    setupOnce() {
      Error.stackTraceLimit = 50;
      var options2 = this._options;
      for (var key in options2) {
        var installFunc = this._installFunc[key];
        if (installFunc && options2[key]) {
          globalHandlerLog(key);
          installFunc();
          this._installFunc[key] = void 0;
        }
      }
    }
  };
  GlobalHandlers.__initStatic();
  function _installGlobalOnErrorHandler() {
    addInstrumentationHandler("error", (data) => {
      const [hub, stackParser, attachStacktrace] = getHubAndOptions();
      if (!hub.getIntegration(GlobalHandlers)) {
        return;
      }
      const { msg, url: url2, line, column, error } = data;
      if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {
        return;
      }
      var event = error === void 0 && isString(msg) ? _eventFromIncompleteOnError(msg, url2, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(stackParser, error || msg, void 0, attachStacktrace, false), url2, line, column);
      event.level = "error";
      addMechanismAndCapture(hub, error, event, "onerror");
    });
  }
  function _installGlobalOnUnhandledRejectionHandler() {
    addInstrumentationHandler("unhandledrejection", (e3) => {
      const [hub, stackParser, attachStacktrace] = getHubAndOptions();
      if (!hub.getIntegration(GlobalHandlers)) {
        return;
      }
      let error = e3;
      try {
        if ("reason" in e3) {
          error = e3.reason;
        } else if ("detail" in e3 && "reason" in e3.detail) {
          error = e3.detail.reason;
        }
      } catch (_oO) {
      }
      if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {
        return true;
      }
      var event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(stackParser, error, void 0, attachStacktrace, true);
      event.level = "error";
      addMechanismAndCapture(hub, error, event, "onunhandledrejection");
      return;
    });
  }
  function _eventFromRejectionWithPrimitive(reason) {
    return {
      exception: {
        values: [
          {
            type: "UnhandledRejection",
            value: `Non-Error promise rejection captured with value: ${String(reason)}`
          }
        ]
      }
    };
  }
  function _eventFromIncompleteOnError(msg, url2, line, column) {
    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
    let message = isErrorEvent(msg) ? msg.message : msg;
    let name = "Error";
    var groups = message.match(ERROR_TYPES_RE);
    if (groups) {
      name = groups[1];
      message = groups[2];
    }
    var event = {
      exception: {
        values: [
          {
            type: name,
            value: message
          }
        ]
      }
    };
    return _enhanceEventWithInitialFrame(event, url2, line, column);
  }
  function _enhanceEventWithInitialFrame(event, url2, line, column) {
    var e3 = event.exception = event.exception || {};
    var ev = e3.values = e3.values || [];
    var ev0 = ev[0] = ev[0] || {};
    var ev0s = ev0.stacktrace = ev0.stacktrace || {};
    var ev0sf = ev0s.frames = ev0s.frames || [];
    var colno = isNaN(parseInt(column, 10)) ? void 0 : column;
    var lineno = isNaN(parseInt(line, 10)) ? void 0 : line;
    var filename = isString(url2) && url2.length > 0 ? url2 : getLocationHref();
    if (ev0sf.length === 0) {
      ev0sf.push({
        colno,
        filename,
        function: "?",
        in_app: true,
        lineno
      });
    }
    return event;
  }
  function globalHandlerLog(type) {
    (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`Global Handler attached: ${type}`);
  }
  function addMechanismAndCapture(hub, error, event, type) {
    addExceptionMechanism(event, {
      handled: false,
      type
    });
    hub.captureEvent(event, {
      originalException: error
    });
  }
  function getHubAndOptions() {
    var hub = getCurrentHub();
    var client = hub.getClient();
    var options2 = client && client.getOptions() || {
      stackParser: () => [],
      attachStacktrace: false
    };
    return [hub, options2.stackParser, options2.attachStacktrace];
  }

  // node_modules/@sentry/browser/esm/integrations/trycatch.js
  var DEFAULT_EVENT_TARGET = [
    "EventTarget",
    "Window",
    "Node",
    "ApplicationCache",
    "AudioTrackList",
    "ChannelMergerNode",
    "CryptoOperation",
    "EventSource",
    "FileReader",
    "HTMLUnknownElement",
    "IDBDatabase",
    "IDBRequest",
    "IDBTransaction",
    "KeyOperation",
    "MediaController",
    "MessagePort",
    "ModalWindow",
    "Notification",
    "SVGElementInstance",
    "Screen",
    "TextTrack",
    "TextTrackCue",
    "TextTrackList",
    "WebSocket",
    "WebSocketWorker",
    "Worker",
    "XMLHttpRequest",
    "XMLHttpRequestEventTarget",
    "XMLHttpRequestUpload"
  ];
  var TryCatch = class {
    static __initStatic() {
      this.id = "TryCatch";
    }
    __init() {
      this.name = TryCatch.id;
    }
    constructor(options2) {
      ;
      TryCatch.prototype.__init.call(this);
      this._options = __spreadValues({
        XMLHttpRequest: true,
        eventTarget: true,
        requestAnimationFrame: true,
        setInterval: true,
        setTimeout: true
      }, options2);
    }
    setupOnce() {
      var global9 = getGlobalObject();
      if (this._options.setTimeout) {
        fill(global9, "setTimeout", _wrapTimeFunction);
      }
      if (this._options.setInterval) {
        fill(global9, "setInterval", _wrapTimeFunction);
      }
      if (this._options.requestAnimationFrame) {
        fill(global9, "requestAnimationFrame", _wrapRAF);
      }
      if (this._options.XMLHttpRequest && "XMLHttpRequest" in global9) {
        fill(XMLHttpRequest.prototype, "send", _wrapXHR);
      }
      var eventTargetOption = this._options.eventTarget;
      if (eventTargetOption) {
        var eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;
        eventTarget.forEach(_wrapEventTarget);
      }
    }
  };
  TryCatch.__initStatic();
  function _wrapTimeFunction(original) {
    return function(...args) {
      var originalCallback = args[0];
      args[0] = wrap(originalCallback, {
        mechanism: {
          data: { function: getFunctionName(original) },
          handled: true,
          type: "instrument"
        }
      });
      return original.apply(this, args);
    };
  }
  function _wrapRAF(original) {
    return function(callback) {
      return original.apply(this, [
        wrap(callback, {
          mechanism: {
            data: {
              function: "requestAnimationFrame",
              handler: getFunctionName(original)
            },
            handled: true,
            type: "instrument"
          }
        })
      ]);
    };
  }
  function _wrapXHR(originalSend) {
    return function(...args) {
      var xhr = this;
      var xmlHttpRequestProps = ["onload", "onerror", "onprogress", "onreadystatechange"];
      xmlHttpRequestProps.forEach((prop) => {
        if (prop in xhr && typeof xhr[prop] === "function") {
          fill(xhr, prop, function(original) {
            var wrapOptions = {
              mechanism: {
                data: {
                  function: prop,
                  handler: getFunctionName(original)
                },
                handled: true,
                type: "instrument"
              }
            };
            var originalFunction = getOriginalFunction(original);
            if (originalFunction) {
              wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);
            }
            return wrap(original, wrapOptions);
          });
        }
      });
      return originalSend.apply(this, args);
    };
  }
  function _wrapEventTarget(target) {
    var global9 = getGlobalObject();
    var proto = global9[target] && global9[target].prototype;
    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) {
      return;
    }
    fill(proto, "addEventListener", function(original) {
      return function(eventName, fn, options2) {
        try {
          if (typeof fn.handleEvent === "function") {
            fn.handleEvent = wrap(fn.handleEvent, {
              mechanism: {
                data: {
                  function: "handleEvent",
                  handler: getFunctionName(fn),
                  target
                },
                handled: true,
                type: "instrument"
              }
            });
          }
        } catch (err) {
        }
        return original.apply(this, [
          eventName,
          wrap(fn, {
            mechanism: {
              data: {
                function: "addEventListener",
                handler: getFunctionName(fn),
                target
              },
              handled: true,
              type: "instrument"
            }
          }),
          options2
        ]);
      };
    });
    fill(proto, "removeEventListener", function(originalRemoveEventListener) {
      return function(eventName, fn, options2) {
        var wrappedEventHandler = fn;
        try {
          var originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;
          if (originalEventHandler) {
            originalRemoveEventListener.call(this, eventName, originalEventHandler, options2);
          }
        } catch (e3) {
        }
        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options2);
      };
    });
  }

  // node_modules/@sentry/browser/esm/integrations/linkederrors.js
  var DEFAULT_KEY = "cause";
  var DEFAULT_LIMIT = 5;
  var LinkedErrors = class {
    static __initStatic() {
      this.id = "LinkedErrors";
    }
    __init() {
      this.name = LinkedErrors.id;
    }
    constructor(options2 = {}) {
      ;
      LinkedErrors.prototype.__init.call(this);
      this._key = options2.key || DEFAULT_KEY;
      this._limit = options2.limit || DEFAULT_LIMIT;
    }
    setupOnce() {
      var client = getCurrentHub().getClient();
      if (!client) {
        return;
      }
      addGlobalEventProcessor((event, hint) => {
        var self2 = getCurrentHub().getIntegration(LinkedErrors);
        return self2 ? _handler(client.getOptions().stackParser, self2._key, self2._limit, event, hint) : event;
      });
    }
  };
  LinkedErrors.__initStatic();
  function _handler(parser, key, limit, event, hint) {
    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {
      return event;
    }
    var linkedErrors = _walkErrorTree(parser, limit, hint.originalException, key);
    event.exception.values = [...linkedErrors, ...event.exception.values];
    return event;
  }
  function _walkErrorTree(parser, limit, error, key, stack = []) {
    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {
      return stack;
    }
    var exception = exceptionFromError(parser, error[key]);
    return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);
  }

  // node_modules/@sentry/browser/esm/integrations/httpcontext.js
  var global5 = getGlobalObject();
  var HttpContext = class {
    constructor() {
      HttpContext.prototype.__init.call(this);
    }
    static __initStatic() {
      this.id = "HttpContext";
    }
    __init() {
      this.name = HttpContext.id;
    }
    setupOnce() {
      addGlobalEventProcessor((event) => {
        if (getCurrentHub().getIntegration(HttpContext)) {
          if (!global5.navigator && !global5.location && !global5.document) {
            return event;
          }
          var url2 = event.request && event.request.url || global5.location && global5.location.href;
          const { referrer } = global5.document || {};
          const { userAgent } = global5.navigator || {};
          var headers = __spreadValues(__spreadValues(__spreadValues({}, event.request && event.request.headers), referrer && { Referer: referrer }), userAgent && { "User-Agent": userAgent });
          var request = __spreadProps(__spreadValues({}, url2 && { url: url2 }), { headers });
          return __spreadProps(__spreadValues({}, event), { request });
        }
        return event;
      });
    }
  };
  HttpContext.__initStatic();

  // node_modules/@sentry/browser/esm/integrations/dedupe.js
  var Dedupe = class {
    constructor() {
      Dedupe.prototype.__init.call(this);
    }
    static __initStatic() {
      this.id = "Dedupe";
    }
    __init() {
      this.name = Dedupe.id;
    }
    setupOnce(addGlobalEventProcessor2, getCurrentHub2) {
      var eventProcessor = (currentEvent) => {
        var self2 = getCurrentHub2().getIntegration(Dedupe);
        if (self2) {
          try {
            if (_shouldDropEvent2(currentEvent, self2._previousEvent)) {
              (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Event dropped due to being a duplicate of previously captured event.");
              return null;
            }
          } catch (_oO) {
            return self2._previousEvent = currentEvent;
          }
          return self2._previousEvent = currentEvent;
        }
        return currentEvent;
      };
      eventProcessor.id = this.name;
      addGlobalEventProcessor2(eventProcessor);
    }
  };
  Dedupe.__initStatic();
  function _shouldDropEvent2(currentEvent, previousEvent) {
    if (!previousEvent) {
      return false;
    }
    if (_isSameMessageEvent(currentEvent, previousEvent)) {
      return true;
    }
    if (_isSameExceptionEvent(currentEvent, previousEvent)) {
      return true;
    }
    return false;
  }
  function _isSameMessageEvent(currentEvent, previousEvent) {
    var currentMessage = currentEvent.message;
    var previousMessage = previousEvent.message;
    if (!currentMessage && !previousMessage) {
      return false;
    }
    if (currentMessage && !previousMessage || !currentMessage && previousMessage) {
      return false;
    }
    if (currentMessage !== previousMessage) {
      return false;
    }
    if (!_isSameFingerprint(currentEvent, previousEvent)) {
      return false;
    }
    if (!_isSameStacktrace(currentEvent, previousEvent)) {
      return false;
    }
    return true;
  }
  function _isSameExceptionEvent(currentEvent, previousEvent) {
    var previousException = _getExceptionFromEvent(previousEvent);
    var currentException = _getExceptionFromEvent(currentEvent);
    if (!previousException || !currentException) {
      return false;
    }
    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
      return false;
    }
    if (!_isSameFingerprint(currentEvent, previousEvent)) {
      return false;
    }
    if (!_isSameStacktrace(currentEvent, previousEvent)) {
      return false;
    }
    return true;
  }
  function _isSameStacktrace(currentEvent, previousEvent) {
    let currentFrames = _getFramesFromEvent(currentEvent);
    let previousFrames = _getFramesFromEvent(previousEvent);
    if (!currentFrames && !previousFrames) {
      return true;
    }
    if (currentFrames && !previousFrames || !currentFrames && previousFrames) {
      return false;
    }
    currentFrames = currentFrames;
    previousFrames = previousFrames;
    if (previousFrames.length !== currentFrames.length) {
      return false;
    }
    for (let i3 = 0; i3 < previousFrames.length; i3++) {
      var frameA = previousFrames[i3];
      var frameB = currentFrames[i3];
      if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {
        return false;
      }
    }
    return true;
  }
  function _isSameFingerprint(currentEvent, previousEvent) {
    let currentFingerprint = currentEvent.fingerprint;
    let previousFingerprint = previousEvent.fingerprint;
    if (!currentFingerprint && !previousFingerprint) {
      return true;
    }
    if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {
      return false;
    }
    currentFingerprint = currentFingerprint;
    previousFingerprint = previousFingerprint;
    try {
      return !!(currentFingerprint.join("") === previousFingerprint.join(""));
    } catch (_oO) {
      return false;
    }
  }
  function _getExceptionFromEvent(event) {
    return event.exception && event.exception.values && event.exception.values[0];
  }
  function _getFramesFromEvent(event) {
    var exception = event.exception;
    if (exception) {
      try {
        return exception.values[0].stacktrace.frames;
      } catch (_oO) {
        return void 0;
      }
    }
    return void 0;
  }

  // node_modules/@sentry/browser/esm/sdk.js
  var defaultIntegrations = [
    new integrations_exports.InboundFilters(),
    new integrations_exports.FunctionToString(),
    new TryCatch(),
    new Breadcrumbs(),
    new GlobalHandlers(),
    new LinkedErrors(),
    new Dedupe(),
    new HttpContext()
  ];
  function init(options2 = {}) {
    if (options2.defaultIntegrations === void 0) {
      options2.defaultIntegrations = defaultIntegrations;
    }
    if (options2.release === void 0) {
      var window2 = getGlobalObject();
      if (window2.SENTRY_RELEASE && window2.SENTRY_RELEASE.id) {
        options2.release = window2.SENTRY_RELEASE.id;
      }
    }
    if (options2.autoSessionTracking === void 0) {
      options2.autoSessionTracking = true;
    }
    if (options2.sendClientReports === void 0) {
      options2.sendClientReports = true;
    }
    var clientOptions = __spreadProps(__spreadValues({}, options2), {
      stackParser: stackParserFromStackParserOptions(options2.stackParser || defaultStackParser),
      integrations: getIntegrationsToSetup(options2),
      transport: options2.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport)
    });
    initAndBind(BrowserClient, clientOptions);
    if (options2.autoSessionTracking) {
      startSessionTracking();
    }
  }
  function startSessionOnHub(hub) {
    hub.startSession({ ignoreDuration: true });
    hub.captureSession();
  }
  function startSessionTracking() {
    var window2 = getGlobalObject();
    var document2 = window2.document;
    if (typeof document2 === "undefined") {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Session tracking in non-browser environment with @sentry/browser is not supported.");
      return;
    }
    var hub = getCurrentHub();
    if (!hub.captureSession) {
      return;
    }
    startSessionOnHub(hub);
    addInstrumentationHandler("history", ({ from, to }) => {
      if (!(from === void 0 || from === to)) {
        startSessionOnHub(getCurrentHub());
      }
    });
  }

  // node_modules/@sentry/browser/esm/index.js
  var windowIntegrations = {};
  var _window = getGlobalObject();
  if (_window.Sentry && _window.Sentry.Integrations) {
    windowIntegrations = _window.Sentry.Integrations;
  }
  var INTEGRATIONS = __spreadValues(__spreadValues(__spreadValues({}, windowIntegrations), integrations_exports), integrations_exports2);

  // node_modules/@sentry/react/esm/sdk.js
  function init2(options2) {
    options2._metadata = options2._metadata || {};
    options2._metadata.sdk = options2._metadata.sdk || {
      name: "sentry.javascript.react",
      packages: [
        {
          name: "npm:@sentry/react",
          version: SDK_VERSION
        }
      ],
      version: SDK_VERSION
    };
    init(options2);
  }

  // node_modules/@sentry/tracing/esm/utils.js
  function hasTracingEnabled(maybeOptions) {
    var client = getCurrentHub().getClient();
    var options2 = maybeOptions || client && client.getOptions();
    return !!options2 && ("tracesSampleRate" in options2 || "tracesSampler" in options2);
  }
  function getActiveTransaction(maybeHub) {
    var hub = maybeHub || getCurrentHub();
    var scope = hub.getScope();
    return scope && scope.getTransaction();
  }
  function msToSec(time2) {
    return time2 / 1e3;
  }

  // node_modules/@sentry/tracing/esm/errors.js
  function registerErrorInstrumentation() {
    addInstrumentationHandler("error", errorCallback);
    addInstrumentationHandler("unhandledrejection", errorCallback);
  }
  function errorCallback() {
    var activeTransaction = getActiveTransaction();
    if (activeTransaction) {
      var status = "internal_error";
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);
      activeTransaction.setStatus(status);
    }
  }

  // node_modules/@sentry/tracing/esm/span.js
  var SpanRecorder = class {
    __init() {
      this.spans = [];
    }
    constructor(maxlen = 1e3) {
      ;
      SpanRecorder.prototype.__init.call(this);
      this._maxlen = maxlen;
    }
    add(span) {
      if (this.spans.length > this._maxlen) {
        span.spanRecorder = void 0;
      } else {
        this.spans.push(span);
      }
    }
  };
  var Span = class {
    __init2() {
      this.traceId = uuid4();
    }
    __init3() {
      this.spanId = uuid4().substring(16);
    }
    __init4() {
      this.startTimestamp = timestampWithMs();
    }
    __init5() {
      this.tags = {};
    }
    __init6() {
      this.data = {};
    }
    constructor(spanContext) {
      ;
      Span.prototype.__init2.call(this);
      Span.prototype.__init3.call(this);
      Span.prototype.__init4.call(this);
      Span.prototype.__init5.call(this);
      Span.prototype.__init6.call(this);
      if (!spanContext) {
        return this;
      }
      if (spanContext.traceId) {
        this.traceId = spanContext.traceId;
      }
      if (spanContext.spanId) {
        this.spanId = spanContext.spanId;
      }
      if (spanContext.parentSpanId) {
        this.parentSpanId = spanContext.parentSpanId;
      }
      if ("sampled" in spanContext) {
        this.sampled = spanContext.sampled;
      }
      if (spanContext.op) {
        this.op = spanContext.op;
      }
      if (spanContext.description) {
        this.description = spanContext.description;
      }
      if (spanContext.data) {
        this.data = spanContext.data;
      }
      if (spanContext.tags) {
        this.tags = spanContext.tags;
      }
      if (spanContext.status) {
        this.status = spanContext.status;
      }
      if (spanContext.startTimestamp) {
        this.startTimestamp = spanContext.startTimestamp;
      }
      if (spanContext.endTimestamp) {
        this.endTimestamp = spanContext.endTimestamp;
      }
    }
    startChild(spanContext) {
      var childSpan = new Span(__spreadProps(__spreadValues({}, spanContext), {
        parentSpanId: this.spanId,
        sampled: this.sampled,
        traceId: this.traceId
      }));
      childSpan.spanRecorder = this.spanRecorder;
      if (childSpan.spanRecorder) {
        childSpan.spanRecorder.add(childSpan);
      }
      childSpan.transaction = this.transaction;
      if ((typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && childSpan.transaction) {
        var opStr = spanContext && spanContext.op || "< unknown op >";
        var nameStr = childSpan.transaction.name || "< unknown name >";
        var idStr = childSpan.transaction.spanId;
        var logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;
        childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = { logMessage };
        logger.log(logMessage);
      }
      return childSpan;
    }
    setTag(key, value2) {
      this.tags = __spreadProps(__spreadValues({}, this.tags), { [key]: value2 });
      return this;
    }
    setData(key, value2) {
      this.data = __spreadProps(__spreadValues({}, this.data), { [key]: value2 });
      return this;
    }
    setStatus(value2) {
      this.status = value2;
      return this;
    }
    setHttpStatus(httpStatus) {
      this.setTag("http.status_code", String(httpStatus));
      var spanStatus = spanStatusfromHttpCode(httpStatus);
      if (spanStatus !== "unknown_error") {
        this.setStatus(spanStatus);
      }
      return this;
    }
    isSuccess() {
      return this.status === "ok";
    }
    finish(endTimestamp) {
      if ((typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && this.transaction && this.transaction.spanId !== this.spanId) {
        const { logMessage } = this.transaction.metadata.spanMetadata[this.spanId];
        if (logMessage) {
          logger.log(logMessage.replace("Starting", "Finishing"));
        }
      }
      this.endTimestamp = typeof endTimestamp === "number" ? endTimestamp : timestampWithMs();
    }
    toTraceparent() {
      let sampledString = "";
      if (this.sampled !== void 0) {
        sampledString = this.sampled ? "-1" : "-0";
      }
      return `${this.traceId}-${this.spanId}${sampledString}`;
    }
    toContext() {
      return dropUndefinedKeys({
        data: this.data,
        description: this.description,
        endTimestamp: this.endTimestamp,
        op: this.op,
        parentSpanId: this.parentSpanId,
        sampled: this.sampled,
        spanId: this.spanId,
        startTimestamp: this.startTimestamp,
        status: this.status,
        tags: this.tags,
        traceId: this.traceId
      });
    }
    updateWithContext(spanContext) {
      this.data = _nullishCoalesce(spanContext.data, () => ({}));
      this.description = spanContext.description;
      this.endTimestamp = spanContext.endTimestamp;
      this.op = spanContext.op;
      this.parentSpanId = spanContext.parentSpanId;
      this.sampled = spanContext.sampled;
      this.spanId = _nullishCoalesce(spanContext.spanId, () => this.spanId);
      this.startTimestamp = _nullishCoalesce(spanContext.startTimestamp, () => this.startTimestamp);
      this.status = spanContext.status;
      this.tags = _nullishCoalesce(spanContext.tags, () => ({}));
      this.traceId = _nullishCoalesce(spanContext.traceId, () => this.traceId);
      return this;
    }
    getTraceContext() {
      return dropUndefinedKeys({
        data: Object.keys(this.data).length > 0 ? this.data : void 0,
        description: this.description,
        op: this.op,
        parent_span_id: this.parentSpanId,
        span_id: this.spanId,
        status: this.status,
        tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
        trace_id: this.traceId
      });
    }
    toJSON() {
      return dropUndefinedKeys({
        data: Object.keys(this.data).length > 0 ? this.data : void 0,
        description: this.description,
        op: this.op,
        parent_span_id: this.parentSpanId,
        span_id: this.spanId,
        start_timestamp: this.startTimestamp,
        status: this.status,
        tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
        timestamp: this.endTimestamp,
        trace_id: this.traceId
      });
    }
  };
  function spanStatusfromHttpCode(httpStatus) {
    if (httpStatus < 400 && httpStatus >= 100) {
      return "ok";
    }
    if (httpStatus >= 400 && httpStatus < 500) {
      switch (httpStatus) {
        case 401:
          return "unauthenticated";
        case 403:
          return "permission_denied";
        case 404:
          return "not_found";
        case 409:
          return "already_exists";
        case 413:
          return "failed_precondition";
        case 429:
          return "resource_exhausted";
        default:
          return "invalid_argument";
      }
    }
    if (httpStatus >= 500 && httpStatus < 600) {
      switch (httpStatus) {
        case 501:
          return "unimplemented";
        case 503:
          return "unavailable";
        case 504:
          return "deadline_exceeded";
        default:
          return "internal_error";
      }
    }
    return "unknown_error";
  }

  // node_modules/@sentry/tracing/esm/transaction.js
  var Transaction = class extends Span {
    __init() {
      this._measurements = {};
    }
    constructor(transactionContext, hub) {
      super(transactionContext);
      Transaction.prototype.__init.call(this);
      ;
      this._hub = hub || getCurrentHub();
      this._name = transactionContext.name || "";
      this.metadata = __spreadProps(__spreadValues({}, transactionContext.metadata), {
        spanMetadata: {}
      });
      this._trimEnd = transactionContext.trimEnd;
      this.transaction = this;
    }
    get name() {
      return this._name;
    }
    set name(newName) {
      this._name = newName;
      this.metadata.source = "custom";
    }
    setName(name, source = "custom") {
      this.name = name;
      this.metadata.source = source;
    }
    initSpanRecorder(maxlen = 1e3) {
      if (!this.spanRecorder) {
        this.spanRecorder = new SpanRecorder(maxlen);
      }
      this.spanRecorder.add(this);
    }
    setMeasurement(name, value2, unit2 = "") {
      this._measurements[name] = { value: value2, unit: unit2 };
    }
    setMetadata(newMetadata) {
      this.metadata = __spreadValues(__spreadValues({}, this.metadata), newMetadata);
    }
    finish(endTimestamp) {
      if (this.endTimestamp !== void 0) {
        return void 0;
      }
      if (!this.name) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Transaction has no name, falling back to `<unlabeled transaction>`.");
        this.name = "<unlabeled transaction>";
      }
      super.finish(endTimestamp);
      if (this.sampled !== true) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] Discarding transaction because its trace was not chosen to be sampled.");
        var client = this._hub.getClient();
        if (client) {
          client.recordDroppedEvent("sample_rate", "transaction");
        }
        return void 0;
      }
      var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter((s3) => s3 !== this && s3.endTimestamp) : [];
      if (this._trimEnd && finishedSpans.length > 0) {
        this.endTimestamp = finishedSpans.reduce((prev2, current) => {
          if (prev2.endTimestamp && current.endTimestamp) {
            return prev2.endTimestamp > current.endTimestamp ? prev2 : current;
          }
          return prev2;
        }).endTimestamp;
      }
      var metadata = this.metadata;
      var transaction = __spreadValues({
        contexts: {
          trace: this.getTraceContext()
        },
        spans: finishedSpans,
        start_timestamp: this.startTimestamp,
        tags: this.tags,
        timestamp: this.endTimestamp,
        transaction: this.name,
        type: "transaction",
        sdkProcessingMetadata: __spreadProps(__spreadValues({}, metadata), {
          baggage: this.getBaggage()
        })
      }, metadata.source && {
        transaction_info: {
          source: metadata.source
        }
      });
      var hasMeasurements = Object.keys(this._measurements).length > 0;
      if (hasMeasurements) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding measurements to transaction", JSON.stringify(this._measurements, void 0, 2));
        transaction.measurements = this._measurements;
      }
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);
      return this._hub.captureEvent(transaction);
    }
    toContext() {
      var spanContext = super.toContext();
      return dropUndefinedKeys(__spreadProps(__spreadValues({}, spanContext), {
        name: this.name,
        trimEnd: this._trimEnd
      }));
    }
    updateWithContext(transactionContext) {
      super.updateWithContext(transactionContext);
      this.name = _nullishCoalesce(transactionContext.name, () => "");
      this._trimEnd = transactionContext.trimEnd;
      return this;
    }
    getBaggage() {
      var existingBaggage = this.metadata.baggage;
      var finalBaggage = !existingBaggage || isBaggageMutable(existingBaggage) ? this._populateBaggageWithSentryValues(existingBaggage) : existingBaggage;
      this.metadata.baggage = finalBaggage;
      return finalBaggage;
    }
    _populateBaggageWithSentryValues(baggage = createBaggage({})) {
      var hub = this._hub || getCurrentHub();
      var client = hub && hub.getClient();
      if (!client)
        return baggage;
      const { environment, release } = client.getOptions() || {};
      const { publicKey: public_key } = client.getDsn() || {};
      var sample_rate = this.metadata && this.metadata.transactionSampling && this.metadata.transactionSampling.rate && this.metadata.transactionSampling.rate.toString();
      var scope = hub.getScope();
      const { segment: user_segment } = scope && scope.getUser() || {};
      var source = this.metadata.source;
      var transaction = source && source !== "url" ? this.name : void 0;
      return createBaggage(dropUndefinedKeys(__spreadValues({
        environment,
        release,
        transaction,
        user_segment,
        public_key,
        trace_id: this.traceId,
        sample_rate
      }, getSentryBaggageItems(baggage))), "", false);
    }
  };

  // node_modules/@sentry/tracing/esm/idletransaction.js
  var DEFAULT_IDLE_TIMEOUT = 1e3;
  var DEFAULT_FINAL_TIMEOUT = 3e4;
  var HEARTBEAT_INTERVAL = 5e3;
  var IdleTransactionSpanRecorder = class extends SpanRecorder {
    constructor(_pushActivity, _popActivity, transactionSpanId, maxlen) {
      super(maxlen);
      this._pushActivity = _pushActivity;
      this._popActivity = _popActivity;
      this.transactionSpanId = transactionSpanId;
      ;
    }
    add(span) {
      if (span.spanId !== this.transactionSpanId) {
        span.finish = (endTimestamp) => {
          span.endTimestamp = typeof endTimestamp === "number" ? endTimestamp : timestampWithMs();
          this._popActivity(span.spanId);
        };
        if (span.endTimestamp === void 0) {
          this._pushActivity(span.spanId);
        }
      }
      super.add(span);
    }
  };
  var IdleTransaction = class extends Transaction {
    __init() {
      this.activities = {};
    }
    __init2() {
      this._heartbeatCounter = 0;
    }
    __init3() {
      this._finished = false;
    }
    __init4() {
      this._beforeFinishCallbacks = [];
    }
    constructor(transactionContext, _idleHub, _idleTimeout = DEFAULT_IDLE_TIMEOUT, _finalTimeout = DEFAULT_FINAL_TIMEOUT, _onScope = false) {
      super(transactionContext, _idleHub);
      this._idleHub = _idleHub;
      this._idleTimeout = _idleTimeout;
      this._finalTimeout = _finalTimeout;
      this._onScope = _onScope;
      IdleTransaction.prototype.__init.call(this);
      IdleTransaction.prototype.__init2.call(this);
      IdleTransaction.prototype.__init3.call(this);
      IdleTransaction.prototype.__init4.call(this);
      ;
      if (_onScope) {
        clearActiveTransaction(_idleHub);
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);
        _idleHub.configureScope((scope) => scope.setSpan(this));
      }
      this._startIdleTimeout();
      setTimeout(() => {
        if (!this._finished) {
          this.setStatus("deadline_exceeded");
          this.finish();
        }
      }, this._finalTimeout);
    }
    finish(endTimestamp = timestampWithMs()) {
      this._finished = true;
      this.activities = {};
      if (this.spanRecorder) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] finishing IdleTransaction", new Date(endTimestamp * 1e3).toISOString(), this.op);
        for (var callback of this._beforeFinishCallbacks) {
          callback(this, endTimestamp);
        }
        this.spanRecorder.spans = this.spanRecorder.spans.filter((span) => {
          if (span.spanId === this.spanId) {
            return true;
          }
          if (!span.endTimestamp) {
            span.endTimestamp = endTimestamp;
            span.setStatus("cancelled");
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] cancelling span since transaction ended early", JSON.stringify(span, void 0, 2));
          }
          var keepSpan = span.startTimestamp < endTimestamp;
          if (!keepSpan) {
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] discarding Span since it happened after Transaction was finished", JSON.stringify(span, void 0, 2));
          }
          return keepSpan;
        });
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] flushing IdleTransaction");
      } else {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] No active IdleTransaction");
      }
      if (this._onScope) {
        clearActiveTransaction(this._idleHub);
      }
      return super.finish(endTimestamp);
    }
    registerBeforeFinishCallback(callback) {
      this._beforeFinishCallbacks.push(callback);
    }
    initSpanRecorder(maxlen) {
      if (!this.spanRecorder) {
        var pushActivity = (id) => {
          if (this._finished) {
            return;
          }
          this._pushActivity(id);
        };
        var popActivity = (id) => {
          if (this._finished) {
            return;
          }
          this._popActivity(id);
        };
        this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("Starting heartbeat");
        this._pingHeartbeat();
      }
      this.spanRecorder.add(this);
    }
    _cancelIdleTimeout() {
      if (this._idleTimeoutID) {
        clearTimeout(this._idleTimeoutID);
        this._idleTimeoutID = void 0;
      }
    }
    _startIdleTimeout(endTimestamp) {
      this._cancelIdleTimeout();
      this._idleTimeoutID = setTimeout(() => {
        if (!this._finished && Object.keys(this.activities).length === 0) {
          this.finish(endTimestamp);
        }
      }, this._idleTimeout);
    }
    _pushActivity(spanId) {
      this._cancelIdleTimeout();
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] pushActivity: ${spanId}`);
      this.activities[spanId] = true;
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] new activities count", Object.keys(this.activities).length);
    }
    _popActivity(spanId) {
      if (this.activities[spanId]) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] popActivity ${spanId}`);
        delete this.activities[spanId];
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] new activities count", Object.keys(this.activities).length);
      }
      if (Object.keys(this.activities).length === 0) {
        var endTimestamp = timestampWithMs() + this._idleTimeout / 1e3;
        this._startIdleTimeout(endTimestamp);
      }
    }
    _beat() {
      if (this._finished) {
        return;
      }
      var heartbeatString = Object.keys(this.activities).join("");
      if (heartbeatString === this._prevHeartbeatString) {
        this._heartbeatCounter += 1;
      } else {
        this._heartbeatCounter = 1;
      }
      this._prevHeartbeatString = heartbeatString;
      if (this._heartbeatCounter >= 3) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] Transaction finished because of no change for 3 heart beats");
        this.setStatus("deadline_exceeded");
        this.finish();
      } else {
        this._pingHeartbeat();
      }
    }
    _pingHeartbeat() {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);
      setTimeout(() => {
        this._beat();
      }, HEARTBEAT_INTERVAL);
    }
  };
  function clearActiveTransaction(hub) {
    var scope = hub.getScope();
    if (scope) {
      var transaction = scope.getTransaction();
      if (transaction) {
        scope.setSpan(void 0);
      }
    }
  }

  // node_modules/@sentry/tracing/esm/hubextensions.js
  function traceHeaders() {
    var scope = this.getScope();
    if (scope) {
      var span = scope.getSpan();
      if (span) {
        return {
          "sentry-trace": span.toTraceparent()
        };
      }
    }
    return {};
  }
  function sample(transaction, options2, samplingContext) {
    if (!hasTracingEnabled(options2)) {
      transaction.sampled = false;
      return transaction;
    }
    if (transaction.sampled !== void 0) {
      transaction.setMetadata({
        transactionSampling: { method: "explicitly_set" }
      });
      return transaction;
    }
    let sampleRate;
    if (typeof options2.tracesSampler === "function") {
      sampleRate = options2.tracesSampler(samplingContext);
      transaction.setMetadata({
        transactionSampling: {
          method: "client_sampler",
          rate: Number(sampleRate)
        }
      });
    } else if (samplingContext.parentSampled !== void 0) {
      sampleRate = samplingContext.parentSampled;
      transaction.setMetadata({
        transactionSampling: { method: "inheritance" }
      });
    } else {
      sampleRate = options2.tracesSampleRate;
      transaction.setMetadata({
        transactionSampling: {
          method: "client_rate",
          rate: Number(sampleRate)
        }
      });
    }
    if (!isValidSampleRate(sampleRate)) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("[Tracing] Discarding transaction because of invalid sample rate.");
      transaction.sampled = false;
      return transaction;
    }
    if (!sampleRate) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Discarding transaction because ${typeof options2.tracesSampler === "function" ? "tracesSampler returned 0 or false" : "a negative sampling decision was inherited or tracesSampleRate is set to 0"}`);
      transaction.sampled = false;
      return transaction;
    }
    transaction.sampled = Math.random() < sampleRate;
    if (!transaction.sampled) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);
      return transaction;
    }
    (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);
    return transaction;
  }
  function isValidSampleRate(rate) {
    if (isNaN2(rate) || !(typeof rate === "number" || typeof rate === "boolean")) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(rate)} of type ${JSON.stringify(typeof rate)}.`);
      return false;
    }
    if (rate < 0 || rate > 1) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);
      return false;
    }
    return true;
  }
  function _startTransaction(transactionContext, customSamplingContext) {
    var client = this.getClient();
    var options2 = client && client.getOptions() || {};
    let transaction = new Transaction(transactionContext, this);
    transaction = sample(transaction, options2, __spreadValues({
      parentSampled: transactionContext.parentSampled,
      transactionContext
    }, customSamplingContext));
    if (transaction.sampled) {
      transaction.initSpanRecorder(options2._experiments && options2._experiments.maxSpans);
    }
    return transaction;
  }
  function startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext) {
    var client = hub.getClient();
    var options2 = client && client.getOptions() || {};
    let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, onScope);
    transaction = sample(transaction, options2, __spreadValues({
      parentSampled: transactionContext.parentSampled,
      transactionContext
    }, customSamplingContext));
    if (transaction.sampled) {
      transaction.initSpanRecorder(options2._experiments && options2._experiments.maxSpans);
    }
    return transaction;
  }
  function _addTracingExtensions() {
    var carrier = getMainCarrier();
    if (!carrier.__SENTRY__) {
      return;
    }
    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
    if (!carrier.__SENTRY__.extensions.startTransaction) {
      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;
    }
    if (!carrier.__SENTRY__.extensions.traceHeaders) {
      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
    }
  }
  function _autoloadDatabaseIntegrations() {
    var carrier = getMainCarrier();
    if (!carrier.__SENTRY__) {
      return;
    }
    var packageToIntegrationMapping = {
      mongodb() {
        var integration = dynamicRequire(module, "./integrations/node/mongo");
        return new integration.Mongo();
      },
      mongoose() {
        var integration = dynamicRequire(module, "./integrations/node/mongo");
        return new integration.Mongo({ mongoose: true });
      },
      mysql() {
        var integration = dynamicRequire(module, "./integrations/node/mysql");
        return new integration.Mysql();
      },
      pg() {
        var integration = dynamicRequire(module, "./integrations/node/postgres");
        return new integration.Postgres();
      }
    };
    var mappedPackages = Object.keys(packageToIntegrationMapping).filter((moduleName) => !!loadModule(moduleName)).map((pkg) => {
      try {
        return packageToIntegrationMapping[pkg]();
      } catch (e3) {
        return void 0;
      }
    }).filter((p2) => p2);
    if (mappedPackages.length > 0) {
      carrier.__SENTRY__.integrations = [...carrier.__SENTRY__.integrations || [], ...mappedPackages];
    }
  }
  function addExtensionMethods() {
    _addTracingExtensions();
    if (isNodeEnv()) {
      _autoloadDatabaseIntegrations();
    }
    registerErrorInstrumentation();
  }

  // node_modules/@sentry/tracing/esm/browser/backgroundtab.js
  var global6 = getGlobalObject();
  function registerBackgroundTabDetection() {
    if (global6 && global6.document) {
      global6.document.addEventListener("visibilitychange", () => {
        var activeTransaction = getActiveTransaction();
        if (global6.document.hidden && activeTransaction) {
          var statusType = "cancelled";
          (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`);
          if (!activeTransaction.status) {
            activeTransaction.setStatus(statusType);
          }
          activeTransaction.setTag("visibilitychange", "document.hidden");
          activeTransaction.finish();
        }
      });
    } else {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("[Tracing] Could not set up background tab detection due to lack of global document");
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js
  var bindReporter = (callback, metric, reportAllChanges) => {
    let prevValue;
    return (forceReport) => {
      if (metric.value >= 0) {
        if (forceReport || reportAllChanges) {
          metric.delta = metric.value - (prevValue || 0);
          if (metric.delta || prevValue === void 0) {
            prevValue = metric.value;
            callback(metric);
          }
        }
      }
    };
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js
  var generateUniqueID = () => {
    return `v2-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js
  var initMetric = (name, value2) => {
    return {
      name,
      value: _nullishCoalesce(value2, () => -1),
      delta: 0,
      entries: [],
      id: generateUniqueID()
    };
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js
  var observe = (type, callback) => {
    try {
      if (PerformanceObserver.supportedEntryTypes.includes(type)) {
        if (type === "first-input" && !("PerformanceEventTiming" in self)) {
          return;
        }
        var po = new PerformanceObserver((l2) => l2.getEntries().map(callback));
        po.observe({ type, buffered: true });
        return po;
      }
    } catch (e3) {
    }
    return;
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js
  var onHidden = (cb, once) => {
    var onHiddenOrPageHide = (event) => {
      if (event.type === "pagehide" || getGlobalObject().document.visibilityState === "hidden") {
        cb(event);
        if (once) {
          removeEventListener("visibilitychange", onHiddenOrPageHide, true);
          removeEventListener("pagehide", onHiddenOrPageHide, true);
        }
      }
    };
    addEventListener("visibilitychange", onHiddenOrPageHide, true);
    addEventListener("pagehide", onHiddenOrPageHide, true);
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js
  var getCLS = (onReport, reportAllChanges) => {
    var metric = initMetric("CLS", 0);
    let report;
    let sessionValue = 0;
    let sessionEntries = [];
    var entryHandler = (entry) => {
      if (entry && !entry.hadRecentInput) {
        var firstSessionEntry = sessionEntries[0];
        var lastSessionEntry = sessionEntries[sessionEntries.length - 1];
        if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1e3 && entry.startTime - firstSessionEntry.startTime < 5e3) {
          sessionValue += entry.value;
          sessionEntries.push(entry);
        } else {
          sessionValue = entry.value;
          sessionEntries = [entry];
        }
        if (sessionValue > metric.value) {
          metric.value = sessionValue;
          metric.entries = sessionEntries;
          if (report) {
            report();
          }
        }
      }
    };
    var po = observe("layout-shift", entryHandler);
    if (po) {
      report = bindReporter(onReport, metric, reportAllChanges);
      onHidden(() => {
        po.takeRecords().map(entryHandler);
        report(true);
      });
    }
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js
  var firstHiddenTime = -1;
  var initHiddenTime = () => {
    return getGlobalObject().document.visibilityState === "hidden" ? 0 : Infinity;
  };
  var trackChanges = () => {
    onHidden(({ timeStamp }) => {
      firstHiddenTime = timeStamp;
    }, true);
  };
  var getVisibilityWatcher = () => {
    if (firstHiddenTime < 0) {
      firstHiddenTime = initHiddenTime();
      trackChanges();
    }
    return {
      get firstHiddenTime() {
        return firstHiddenTime;
      }
    };
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js
  var getFID = (onReport, reportAllChanges) => {
    var visibilityWatcher = getVisibilityWatcher();
    var metric = initMetric("FID");
    let report;
    var entryHandler = (entry) => {
      if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {
        metric.value = entry.processingStart - entry.startTime;
        metric.entries.push(entry);
        report(true);
      }
    };
    var po = observe("first-input", entryHandler);
    if (po) {
      report = bindReporter(onReport, metric, reportAllChanges);
      onHidden(() => {
        po.takeRecords().map(entryHandler);
        po.disconnect();
      }, true);
    }
  };

  // node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js
  var reportedMetricIDs = {};
  var getLCP = (onReport, reportAllChanges) => {
    var visibilityWatcher = getVisibilityWatcher();
    var metric = initMetric("LCP");
    let report;
    var entryHandler = (entry) => {
      var value2 = entry.startTime;
      if (value2 < visibilityWatcher.firstHiddenTime) {
        metric.value = value2;
        metric.entries.push(entry);
      }
      if (report) {
        report();
      }
    };
    var po = observe("largest-contentful-paint", entryHandler);
    if (po) {
      report = bindReporter(onReport, metric, reportAllChanges);
      var stopListening = () => {
        if (!reportedMetricIDs[metric.id]) {
          po.takeRecords().map(entryHandler);
          po.disconnect();
          reportedMetricIDs[metric.id] = true;
          report(true);
        }
      };
      ["keydown", "click"].forEach((type) => {
        addEventListener(type, stopListening, { once: true, capture: true });
      });
      onHidden(stopListening, true);
    }
  };

  // node_modules/@sentry/tracing/esm/browser/metrics/utils.js
  function isMeasurementValue(value2) {
    return typeof value2 === "number" && isFinite(value2);
  }
  function _startChild(transaction, _a) {
    var _b = _a, { startTimestamp } = _b, ctx = __objRest(_b, ["startTimestamp"]);
    if (startTimestamp && transaction.startTimestamp > startTimestamp) {
      transaction.startTimestamp = startTimestamp;
    }
    return transaction.startChild(__spreadValues({
      startTimestamp
    }, ctx));
  }

  // node_modules/@sentry/tracing/esm/browser/metrics/index.js
  var global7 = getGlobalObject();
  function getBrowserPerformanceAPI() {
    return global7 && global7.addEventListener && global7.performance;
  }
  var _performanceCursor = 0;
  var _measurements = {};
  var _lcpEntry;
  var _clsEntry;
  function startTrackingWebVitals(reportAllChanges = false) {
    var performance2 = getBrowserPerformanceAPI();
    if (performance2 && browserPerformanceTimeOrigin) {
      if (performance2.mark) {
        global7.performance.mark("sentry-tracing-init");
      }
      _trackCLS();
      _trackLCP(reportAllChanges);
      _trackFID();
    }
  }
  function startTrackingLongTasks() {
    var entryHandler = (entry) => {
      var transaction = getActiveTransaction();
      if (!transaction) {
        return;
      }
      var startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);
      var duration = msToSec(entry.duration);
      transaction.startChild({
        description: "Main UI thread blocked",
        op: "ui.long-task",
        startTimestamp: startTime,
        endTimestamp: startTime + duration
      });
    };
    observe("longtask", entryHandler);
  }
  function _trackCLS() {
    getCLS((metric) => {
      var entry = metric.entries.pop();
      if (!entry) {
        return;
      }
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding CLS");
      _measurements["cls"] = { value: metric.value, unit: "" };
      _clsEntry = entry;
    });
  }
  function _trackLCP(reportAllChanges) {
    getLCP((metric) => {
      var entry = metric.entries.pop();
      if (!entry) {
        return;
      }
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding LCP");
      _measurements["lcp"] = { value: metric.value, unit: "millisecond" };
      _lcpEntry = entry;
    }, reportAllChanges);
  }
  function _trackFID() {
    getFID((metric) => {
      var entry = metric.entries.pop();
      if (!entry) {
        return;
      }
      var timeOrigin = msToSec(browserPerformanceTimeOrigin);
      var startTime = msToSec(entry.startTime);
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding FID");
      _measurements["fid"] = { value: metric.value, unit: "millisecond" };
      _measurements["mark.fid"] = { value: timeOrigin + startTime, unit: "second" };
    });
  }
  function addPerformanceEntries(transaction) {
    var performance2 = getBrowserPerformanceAPI();
    if (!performance2 || !global7.performance.getEntries || !browserPerformanceTimeOrigin) {
      return;
    }
    (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Tracing] Adding & adjusting spans using Performance API");
    var timeOrigin = msToSec(browserPerformanceTimeOrigin);
    var performanceEntries = performance2.getEntries();
    let responseStartTimestamp;
    let requestStartTimestamp;
    performanceEntries.slice(_performanceCursor).forEach((entry) => {
      var startTime = msToSec(entry.startTime);
      var duration = msToSec(entry.duration);
      if (transaction.op === "navigation" && timeOrigin + startTime < transaction.startTimestamp) {
        return;
      }
      switch (entry.entryType) {
        case "navigation": {
          _addNavigationSpans(transaction, entry, timeOrigin);
          responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);
          requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);
          break;
        }
        case "mark":
        case "paint":
        case "measure": {
          _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);
          var firstHidden = getVisibilityWatcher();
          var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;
          if (entry.name === "first-paint" && shouldRecord) {
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding FP");
            _measurements["fp"] = { value: entry.startTime, unit: "millisecond" };
          }
          if (entry.name === "first-contentful-paint" && shouldRecord) {
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding FCP");
            _measurements["fcp"] = { value: entry.startTime, unit: "millisecond" };
          }
          break;
        }
        case "resource": {
          var resourceName = entry.name.replace(global7.location.origin, "");
          _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);
          break;
        }
        default:
      }
    });
    _performanceCursor = Math.max(performanceEntries.length - 1, 0);
    _trackNavigator(transaction);
    if (transaction.op === "pageload") {
      if (typeof responseStartTimestamp === "number") {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding TTFB");
        _measurements["ttfb"] = {
          value: (responseStartTimestamp - transaction.startTimestamp) * 1e3,
          unit: "millisecond"
        };
        if (typeof requestStartTimestamp === "number" && requestStartTimestamp <= responseStartTimestamp) {
          _measurements["ttfb.requestTime"] = {
            value: (responseStartTimestamp - requestStartTimestamp) * 1e3,
            unit: "millisecond"
          };
        }
      }
      ["fcp", "fp", "lcp"].forEach((name) => {
        if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {
          return;
        }
        var oldValue = _measurements[name].value;
        var measurementTimestamp = timeOrigin + msToSec(oldValue);
        var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1e3);
        var delta = normalizedValue - oldValue;
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);
        _measurements[name].value = normalizedValue;
      });
      var fidMark = _measurements["mark.fid"];
      if (fidMark && _measurements["fid"]) {
        _startChild(transaction, {
          description: "first input delay",
          endTimestamp: fidMark.value + msToSec(_measurements["fid"].value),
          op: "web.vitals",
          startTimestamp: fidMark.value
        });
        delete _measurements["mark.fid"];
      }
      if (!("fcp" in _measurements)) {
        delete _measurements.cls;
      }
      Object.keys(_measurements).forEach((measurementName) => {
        transaction.setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);
      });
      _tagMetricInfo(transaction);
    }
    _lcpEntry = void 0;
    _clsEntry = void 0;
    _measurements = {};
  }
  function _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {
    var measureStartTimestamp = timeOrigin + startTime;
    var measureEndTimestamp = measureStartTimestamp + duration;
    _startChild(transaction, {
      description: entry.name,
      endTimestamp: measureEndTimestamp,
      op: entry.entryType,
      startTimestamp: measureStartTimestamp
    });
    return measureStartTimestamp;
  }
  function _addNavigationSpans(transaction, entry, timeOrigin) {
    ["unloadEvent", "redirect", "domContentLoadedEvent", "loadEvent", "connect"].forEach((event) => {
      _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);
    });
    _addPerformanceNavigationTiming(transaction, entry, "secureConnection", timeOrigin, "TLS/SSL", "connectEnd");
    _addPerformanceNavigationTiming(transaction, entry, "fetch", timeOrigin, "cache", "domainLookupStart");
    _addPerformanceNavigationTiming(transaction, entry, "domainLookup", timeOrigin, "DNS");
    _addRequest(transaction, entry, timeOrigin);
  }
  function _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {
    var end = eventEnd ? entry[eventEnd] : entry[`${event}End`];
    var start = entry[`${event}Start`];
    if (!start || !end) {
      return;
    }
    _startChild(transaction, {
      op: "browser",
      description: _nullishCoalesce(description, () => event),
      startTimestamp: timeOrigin + msToSec(start),
      endTimestamp: timeOrigin + msToSec(end)
    });
  }
  function _addRequest(transaction, entry, timeOrigin) {
    _startChild(transaction, {
      op: "browser",
      description: "request",
      startTimestamp: timeOrigin + msToSec(entry.requestStart),
      endTimestamp: timeOrigin + msToSec(entry.responseEnd)
    });
    _startChild(transaction, {
      op: "browser",
      description: "response",
      startTimestamp: timeOrigin + msToSec(entry.responseStart),
      endTimestamp: timeOrigin + msToSec(entry.responseEnd)
    });
  }
  function _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {
    if (entry.initiatorType === "xmlhttprequest" || entry.initiatorType === "fetch") {
      return;
    }
    var data = {};
    if ("transferSize" in entry) {
      data["Transfer Size"] = entry.transferSize;
    }
    if ("encodedBodySize" in entry) {
      data["Encoded Body Size"] = entry.encodedBodySize;
    }
    if ("decodedBodySize" in entry) {
      data["Decoded Body Size"] = entry.decodedBodySize;
    }
    var startTimestamp = timeOrigin + startTime;
    var endTimestamp = startTimestamp + duration;
    _startChild(transaction, {
      description: resourceName,
      endTimestamp,
      op: entry.initiatorType ? `resource.${entry.initiatorType}` : "resource",
      startTimestamp,
      data
    });
  }
  function _trackNavigator(transaction) {
    var navigator2 = global7.navigator;
    if (!navigator2) {
      return;
    }
    var connection = navigator2.connection;
    if (connection) {
      if (connection.effectiveType) {
        transaction.setTag("effectiveConnectionType", connection.effectiveType);
      }
      if (connection.type) {
        transaction.setTag("connectionType", connection.type);
      }
      if (isMeasurementValue(connection.rtt)) {
        _measurements["connection.rtt"] = { value: connection.rtt, unit: "millisecond" };
      }
      if (isMeasurementValue(connection.downlink)) {
        _measurements["connection.downlink"] = { value: connection.downlink, unit: "" };
      }
    }
    if (isMeasurementValue(navigator2.deviceMemory)) {
      transaction.setTag("deviceMemory", `${navigator2.deviceMemory} GB`);
    }
    if (isMeasurementValue(navigator2.hardwareConcurrency)) {
      transaction.setTag("hardwareConcurrency", String(navigator2.hardwareConcurrency));
    }
  }
  function _tagMetricInfo(transaction) {
    if (_lcpEntry) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding LCP Data");
      if (_lcpEntry.element) {
        transaction.setTag("lcp.element", htmlTreeAsString(_lcpEntry.element));
      }
      if (_lcpEntry.id) {
        transaction.setTag("lcp.id", _lcpEntry.id);
      }
      if (_lcpEntry.url) {
        transaction.setTag("lcp.url", _lcpEntry.url.trim().slice(0, 200));
      }
      transaction.setTag("lcp.size", _lcpEntry.size);
    }
    if (_clsEntry && _clsEntry.sources) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log("[Measurements] Adding CLS Data");
      _clsEntry.sources.forEach((source, index2) => transaction.setTag(`cls.source.${index2 + 1}`, htmlTreeAsString(source.node)));
    }
  }

  // node_modules/@sentry/tracing/esm/browser/request.js
  var DEFAULT_TRACING_ORIGINS = ["localhost", /^\//];
  var defaultRequestInstrumentationOptions = {
    traceFetch: true,
    traceXHR: true,
    tracingOrigins: DEFAULT_TRACING_ORIGINS
  };
  function instrumentOutgoingRequests(_options) {
    const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = __spreadValues(__spreadValues({}, defaultRequestInstrumentationOptions), _options);
    var urlMap = {};
    var defaultShouldCreateSpan = (url2) => {
      if (urlMap[url2]) {
        return urlMap[url2];
      }
      var origins = tracingOrigins;
      urlMap[url2] = origins.some((origin) => isMatchingPattern(url2, origin)) && !isMatchingPattern(url2, "sentry_key");
      return urlMap[url2];
    };
    let shouldCreateSpan = defaultShouldCreateSpan;
    if (typeof shouldCreateSpanForRequest === "function") {
      shouldCreateSpan = (url2) => {
        return defaultShouldCreateSpan(url2) && shouldCreateSpanForRequest(url2);
      };
    }
    var spans = {};
    if (traceFetch) {
      addInstrumentationHandler("fetch", (handlerData) => {
        fetchCallback(handlerData, shouldCreateSpan, spans);
      });
    }
    if (traceXHR) {
      addInstrumentationHandler("xhr", (handlerData) => {
        xhrCallback(handlerData, shouldCreateSpan, spans);
      });
    }
  }
  function fetchCallback(handlerData, shouldCreateSpan, spans) {
    if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {
      return;
    }
    if (handlerData.endTimestamp) {
      var spanId = handlerData.fetchData.__span;
      if (!spanId)
        return;
      var span = spans[spanId];
      if (span) {
        if (handlerData.response) {
          span.setHttpStatus(handlerData.response.status);
        } else if (handlerData.error) {
          span.setStatus("internal_error");
        }
        span.finish();
        delete spans[spanId];
      }
      return;
    }
    var activeTransaction = getActiveTransaction();
    if (activeTransaction) {
      var span = activeTransaction.startChild({
        data: __spreadProps(__spreadValues({}, handlerData.fetchData), {
          type: "fetch"
        }),
        description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,
        op: "http.client"
      });
      handlerData.fetchData.__span = span.spanId;
      spans[span.spanId] = span;
      var request = handlerData.args[0] = handlerData.args[0];
      var options2 = handlerData.args[1] = handlerData.args[1] || {};
      options2.headers = addTracingHeaders(request, activeTransaction.getBaggage(), span, options2);
    }
  }
  function addTracingHeaders(request, incomingBaggage, span, options2) {
    let headers = options2.headers;
    if (isInstanceOf(request, Request)) {
      headers = request.headers;
    }
    if (headers) {
      if (typeof headers.append === "function") {
        headers.append("sentry-trace", span.toTraceparent());
        headers.append(BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headers.get(BAGGAGE_HEADER_NAME)));
      } else if (Array.isArray(headers)) {
        const [, headerBaggageString] = headers.find(([key, _2]) => key === BAGGAGE_HEADER_NAME);
        headers = [
          ...headers,
          ["sentry-trace", span.toTraceparent()],
          [BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(incomingBaggage, headerBaggageString)]
        ];
      } else {
        headers = __spreadProps(__spreadValues({}, headers), {
          "sentry-trace": span.toTraceparent(),
          baggage: mergeAndSerializeBaggage(incomingBaggage, headers.baggage)
        });
      }
    } else {
      headers = { "sentry-trace": span.toTraceparent(), baggage: mergeAndSerializeBaggage(incomingBaggage) };
    }
    return headers;
  }
  function xhrCallback(handlerData, shouldCreateSpan, spans) {
    if (!hasTracingEnabled() || handlerData.xhr && handlerData.xhr.__sentry_own_request__ || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) {
      return;
    }
    var xhr = handlerData.xhr.__sentry_xhr__;
    if (handlerData.endTimestamp) {
      var spanId = handlerData.xhr.__sentry_xhr_span_id__;
      if (!spanId)
        return;
      var span = spans[spanId];
      if (span) {
        span.setHttpStatus(xhr.status_code);
        span.finish();
        delete spans[spanId];
      }
      return;
    }
    var activeTransaction = getActiveTransaction();
    if (activeTransaction) {
      var span = activeTransaction.startChild({
        data: __spreadProps(__spreadValues({}, xhr.data), {
          type: "xhr",
          method: xhr.method,
          url: xhr.url
        }),
        description: `${xhr.method} ${xhr.url}`,
        op: "http.client"
      });
      handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;
      spans[handlerData.xhr.__sentry_xhr_span_id__] = span;
      if (handlerData.xhr.setRequestHeader) {
        try {
          handlerData.xhr.setRequestHeader("sentry-trace", span.toTraceparent());
          var headerBaggageString = handlerData.xhr.getRequestHeader && handlerData.xhr.getRequestHeader(BAGGAGE_HEADER_NAME);
          handlerData.xhr.setRequestHeader(BAGGAGE_HEADER_NAME, mergeAndSerializeBaggage(activeTransaction.getBaggage(), headerBaggageString));
        } catch (_2) {
        }
      }
    }
  }

  // node_modules/@sentry/tracing/esm/browser/router.js
  var global8 = getGlobalObject();
  function instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad = true, startTransactionOnLocationChange = true) {
    if (!global8 || !global8.location) {
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("Could not initialize routing instrumentation due to invalid location");
      return;
    }
    let startingUrl = global8.location.href;
    let activeTransaction;
    if (startTransactionOnPageLoad) {
      activeTransaction = customStartTransaction({
        name: global8.location.pathname,
        op: "pageload",
        metadata: { source: "url" }
      });
    }
    if (startTransactionOnLocationChange) {
      addInstrumentationHandler("history", ({ to, from }) => {
        if (from === void 0 && startingUrl && startingUrl.indexOf(to) !== -1) {
          startingUrl = void 0;
          return;
        }
        if (from !== to) {
          startingUrl = void 0;
          if (activeTransaction) {
            (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);
            activeTransaction.finish();
          }
          activeTransaction = customStartTransaction({
            name: global8.location.pathname,
            op: "navigation",
            metadata: { source: "url" }
          });
        }
      });
    }
  }

  // node_modules/@sentry/tracing/esm/browser/browsertracing.js
  var BROWSER_TRACING_INTEGRATION_ID = "BrowserTracing";
  var DEFAULT_BROWSER_TRACING_OPTIONS = __spreadValues({
    idleTimeout: DEFAULT_IDLE_TIMEOUT,
    finalTimeout: DEFAULT_FINAL_TIMEOUT,
    markBackgroundTransactions: true,
    routingInstrumentation: instrumentRoutingWithDefaults,
    startTransactionOnLocationChange: true,
    startTransactionOnPageLoad: true,
    _experiments: { enableLongTask: true }
  }, defaultRequestInstrumentationOptions);
  var BrowserTracing = class {
    __init() {
      this.name = BROWSER_TRACING_INTEGRATION_ID;
    }
    constructor(_options) {
      ;
      BrowserTracing.prototype.__init.call(this);
      let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;
      if (_options) {
        if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins)) {
          tracingOrigins = _options.tracingOrigins;
        } else {
          (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && (this._emitOptionsWarning = true);
        }
      }
      this.options = __spreadProps(__spreadValues(__spreadValues({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {
        tracingOrigins
      });
      const { _metricOptions } = this.options;
      startTrackingWebVitals(_metricOptions && _metricOptions._reportAllChanges);
      if (_optionalChain([this, "access", (_2) => _2.options, "access", (_3) => _3._experiments, "optionalAccess", (_4) => _4.enableLongTask])) {
        startTrackingLongTasks();
      }
    }
    setupOnce(_2, getCurrentHub2) {
      this._getCurrentHub = getCurrentHub2;
      if (this._emitOptionsWarning) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn("[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.");
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`);
      }
      const {
        routingInstrumentation: instrumentRouting,
        startTransactionOnLocationChange,
        startTransactionOnPageLoad,
        markBackgroundTransactions,
        traceFetch,
        traceXHR,
        tracingOrigins,
        shouldCreateSpanForRequest
      } = this.options;
      instrumentRouting((context2) => this._createRouteTransaction(context2), startTransactionOnPageLoad, startTransactionOnLocationChange);
      if (markBackgroundTransactions) {
        registerBackgroundTabDetection();
      }
      instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });
    }
    _createRouteTransaction(context2) {
      if (!this._getCurrentHub) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${context2.op} transaction because _getCurrentHub is invalid.`);
        return void 0;
      }
      const { beforeNavigate, idleTimeout, finalTimeout } = this.options;
      var parentContextFromHeader = context2.op === "pageload" ? extractTraceDataFromMetaTags() : void 0;
      var expandedContext = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, context2), parentContextFromHeader), parentContextFromHeader && {
        metadata: __spreadValues(__spreadValues({}, context2.metadata), parentContextFromHeader.metadata)
      }), {
        trimEnd: true
      });
      var modifiedContext = typeof beforeNavigate === "function" ? beforeNavigate(expandedContext) : expandedContext;
      var finalContext = modifiedContext === void 0 ? __spreadProps(__spreadValues({}, expandedContext), { sampled: false }) : modifiedContext;
      finalContext.metadata = finalContext.name !== expandedContext.name ? __spreadProps(__spreadValues({}, finalContext.metadata), { source: "custom" }) : finalContext.metadata;
      if (finalContext.sampled === false) {
        (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);
      }
      (typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__) && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);
      var hub = this._getCurrentHub();
      const { location: location2 } = getGlobalObject();
      var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, finalTimeout, true, { location: location2 });
      idleTransaction.registerBeforeFinishCallback((transaction) => {
        addPerformanceEntries(transaction);
        transaction.setTag("sentry_reportAllChanges", Boolean(this.options._metricOptions && this.options._metricOptions._reportAllChanges));
      });
      return idleTransaction;
    }
  };
  function extractTraceDataFromMetaTags() {
    var sentrytraceValue = getMetaContent("sentry-trace");
    var baggageValue = getMetaContent("baggage");
    var sentrytraceData = sentrytraceValue ? extractTraceparentData(sentrytraceValue) : void 0;
    var baggage = parseBaggageSetMutability(baggageValue, sentrytraceValue);
    if (sentrytraceData || baggage) {
      return __spreadValues(__spreadValues({}, sentrytraceData && sentrytraceData), baggage && { metadata: { baggage } });
    }
    return void 0;
  }
  function getMetaContent(metaName) {
    var metaTag = getDomElement(`meta[name=${metaName}]`);
    return metaTag ? metaTag.getAttribute("content") : null;
  }

  // node_modules/@sentry/tracing/esm/index.js
  if (typeof __SENTRY_TRACING__ === "undefined" || __SENTRY_TRACING__) {
    addExtensionMethods();
  }

  // src/App.tsx
  var import_react62 = __toModule(require_react());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf(o2, p2);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-router/esm/react-router.js
  var import_react2 = __toModule(require_react());
  var import_prop_types2 = __toModule(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/resolve-pathname/esm/resolve-pathname.js
  function isAbsolute(pathname) {
    return pathname.charAt(0) === "/";
  }
  function spliceOne(list, index2) {
    for (var i3 = index2, k3 = i3 + 1, n3 = list.length; k3 < n3; i3 += 1, k3 += 1) {
      list[i3] = list[k3];
    }
    list.pop();
  }
  function resolvePathname(to, from) {
    if (from === void 0)
      from = "";
    var toParts = to && to.split("/") || [];
    var fromParts = from && from.split("/") || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from && isAbsolute(from);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) {
      fromParts = toParts;
    } else if (toParts.length) {
      fromParts.pop();
      fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length)
      return "/";
    var hasTrailingSlash;
    if (fromParts.length) {
      var last = fromParts[fromParts.length - 1];
      hasTrailingSlash = last === "." || last === ".." || last === "";
    } else {
      hasTrailingSlash = false;
    }
    var up = 0;
    for (var i3 = fromParts.length; i3 >= 0; i3--) {
      var part = fromParts[i3];
      if (part === ".") {
        spliceOne(fromParts, i3);
      } else if (part === "..") {
        spliceOne(fromParts, i3);
        up++;
      } else if (up) {
        spliceOne(fromParts, i3);
        up--;
      }
    }
    if (!mustEndAbs)
      for (; up--; up)
        fromParts.unshift("..");
    if (mustEndAbs && fromParts[0] !== "" && (!fromParts[0] || !isAbsolute(fromParts[0])))
      fromParts.unshift("");
    var result = fromParts.join("/");
    if (hasTrailingSlash && result.substr(-1) !== "/")
      result += "/";
    return result;
  }
  var resolve_pathname_default = resolvePathname;

  // node_modules/value-equal/esm/value-equal.js
  function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
  }
  function valueEqual(a3, b2) {
    if (a3 === b2)
      return true;
    if (a3 == null || b2 == null)
      return false;
    if (Array.isArray(a3)) {
      return Array.isArray(b2) && a3.length === b2.length && a3.every(function(item, index2) {
        return valueEqual(item, b2[index2]);
      });
    }
    if (typeof a3 === "object" || typeof b2 === "object") {
      var aValue = valueOf(a3);
      var bValue = valueOf(b2);
      if (aValue !== a3 || bValue !== b2)
        return valueEqual(aValue, bValue);
      return Object.keys(Object.assign({}, a3, b2)).every(function(key) {
        return valueEqual(a3[key], b2[key]);
      });
    }
    return false;
  }
  var value_equal_default = valueEqual;

  // node_modules/tiny-warning/dist/tiny-warning.esm.js
  var isProduction = false;
  function warning(condition, message) {
    if (!isProduction) {
      if (condition) {
        return;
      }
      var text = "Warning: " + message;
      if (typeof console !== "undefined") {
        console.warn(text);
      }
      try {
        throw Error(text);
      } catch (x3) {
      }
    }
  }
  var tiny_warning_esm_default = warning;

  // node_modules/tiny-invariant/dist/tiny-invariant.esm.js
  var isProduction2 = false;
  var prefix = "Invariant failed";
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction2) {
      throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ""));
  }
  var tiny_invariant_esm_default = invariant;

  // node_modules/history/esm/history.js
  function addLeadingSlash(path2) {
    return path2.charAt(0) === "/" ? path2 : "/" + path2;
  }
  function stripLeadingSlash(path2) {
    return path2.charAt(0) === "/" ? path2.substr(1) : path2;
  }
  function hasBasename(path2, prefix2) {
    return path2.toLowerCase().indexOf(prefix2.toLowerCase()) === 0 && "/?#".indexOf(path2.charAt(prefix2.length)) !== -1;
  }
  function stripBasename(path2, prefix2) {
    return hasBasename(path2, prefix2) ? path2.substr(prefix2.length) : path2;
  }
  function stripTrailingSlash(path2) {
    return path2.charAt(path2.length - 1) === "/" ? path2.slice(0, -1) : path2;
  }
  function parsePath(path2) {
    var pathname = path2 || "/";
    var search = "";
    var hash = "";
    var hashIndex = pathname.indexOf("#");
    if (hashIndex !== -1) {
      hash = pathname.substr(hashIndex);
      pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf("?");
    if (searchIndex !== -1) {
      search = pathname.substr(searchIndex);
      pathname = pathname.substr(0, searchIndex);
    }
    return {
      pathname,
      search: search === "?" ? "" : search,
      hash: hash === "#" ? "" : hash
    };
  }
  function createPath(location2) {
    var pathname = location2.pathname, search = location2.search, hash = location2.hash;
    var path2 = pathname || "/";
    if (search && search !== "?")
      path2 += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      path2 += hash.charAt(0) === "#" ? hash : "#" + hash;
    return path2;
  }
  function createLocation(path2, state, key, currentLocation) {
    var location2;
    if (typeof path2 === "string") {
      location2 = parsePath(path2);
      location2.state = state;
    } else {
      location2 = _extends({}, path2);
      if (location2.pathname === void 0)
        location2.pathname = "";
      if (location2.search) {
        if (location2.search.charAt(0) !== "?")
          location2.search = "?" + location2.search;
      } else {
        location2.search = "";
      }
      if (location2.hash) {
        if (location2.hash.charAt(0) !== "#")
          location2.hash = "#" + location2.hash;
      } else {
        location2.hash = "";
      }
      if (state !== void 0 && location2.state === void 0)
        location2.state = state;
    }
    try {
      location2.pathname = decodeURI(location2.pathname);
    } catch (e3) {
      if (e3 instanceof URIError) {
        throw new URIError('Pathname "' + location2.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.');
      } else {
        throw e3;
      }
    }
    if (key)
      location2.key = key;
    if (currentLocation) {
      if (!location2.pathname) {
        location2.pathname = currentLocation.pathname;
      } else if (location2.pathname.charAt(0) !== "/") {
        location2.pathname = resolve_pathname_default(location2.pathname, currentLocation.pathname);
      }
    } else {
      if (!location2.pathname) {
        location2.pathname = "/";
      }
    }
    return location2;
  }
  function locationsAreEqual(a3, b2) {
    return a3.pathname === b2.pathname && a3.search === b2.search && a3.hash === b2.hash && a3.key === b2.key && value_equal_default(a3.state, b2.state);
  }
  function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
      true ? tiny_warning_esm_default(prompt == null, "A history supports only one prompt at a time") : void 0;
      prompt = nextPrompt;
      return function() {
        if (prompt === nextPrompt)
          prompt = null;
      };
    }
    function confirmTransitionTo(location2, action, getUserConfirmation, callback) {
      if (prompt != null) {
        var result = typeof prompt === "function" ? prompt(location2, action) : prompt;
        if (typeof result === "string") {
          if (typeof getUserConfirmation === "function") {
            getUserConfirmation(result, callback);
          } else {
            true ? tiny_warning_esm_default(false, "A history needs a getUserConfirmation function in order to use a prompt message") : void 0;
            callback(true);
          }
        } else {
          callback(result !== false);
        }
      } else {
        callback(true);
      }
    }
    var listeners = [];
    function appendListener(fn) {
      var isActive = true;
      function listener() {
        if (isActive)
          fn.apply(void 0, arguments);
      }
      listeners.push(listener);
      return function() {
        isActive = false;
        listeners = listeners.filter(function(item) {
          return item !== listener;
        });
      };
    }
    function notifyListeners() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      listeners.forEach(function(listener) {
        return listener.apply(void 0, args);
      });
    }
    return {
      setPrompt,
      confirmTransitionTo,
      appendListener,
      notifyListeners
    };
  }
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  function getConfirmation(message, callback) {
    callback(window.confirm(message));
  }
  function supportsHistory2() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1)
      return false;
    return window.history && "pushState" in window.history;
  }
  function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf("Trident") === -1;
  }
  function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf("Firefox") === -1;
  }
  function isExtraneousPopstateEvent(event) {
    return event.state === void 0 && navigator.userAgent.indexOf("CriOS") === -1;
  }
  var PopStateEvent = "popstate";
  var HashChangeEvent = "hashchange";
  function getHistoryState() {
    try {
      return window.history.state || {};
    } catch (e3) {
      return {};
    }
  }
  function createBrowserHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? true ? tiny_invariant_esm_default(false, "Browser history needs a DOM") : tiny_invariant_esm_default(false) : void 0;
    var globalHistory = window.history;
    var canUseHistory = supportsHistory2();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    function getDOMLocation(historyState) {
      var _ref3 = historyState || {}, key = _ref3.key, state = _ref3.state;
      var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
      var path2 = pathname + search + hash;
      true ? tiny_warning_esm_default(!basename || hasBasename(path2, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path2 + '" to begin with "' + basename + '".') : void 0;
      if (basename)
        path2 = stripBasename(path2, basename);
      return createLocation(path2, state, key);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history, nextState);
      history.length = globalHistory.length;
      transitionManager.notifyListeners(history.location, history.action);
    }
    function handlePopState(event) {
      if (isExtraneousPopstateEvent(event))
        return;
      handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
      handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location2) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location: location2
            });
          } else {
            revertPop(location2);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history.location;
      var toIndex = allKeys.indexOf(toLocation.key);
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allKeys.indexOf(fromLocation.key);
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];
    function createHref(location2) {
      return basename + createPath(location2);
    }
    function push(path2, state) {
      true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
      var action = "PUSH";
      var location2 = createLocation(path2, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location2);
        var key = location2.key, state2 = location2.state;
        if (canUseHistory) {
          globalHistory.pushState({
            key,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.href = href;
          } else {
            var prevIndex = allKeys.indexOf(history.location.key);
            var nextKeys = allKeys.slice(0, prevIndex + 1);
            nextKeys.push(location2.key);
            allKeys = nextKeys;
            setState({
              action,
              location: location2
            });
          }
        } else {
          true ? tiny_warning_esm_default(state2 === void 0, "Browser history cannot push state in browsers that do not support HTML5 history") : void 0;
          window.location.href = href;
        }
      });
    }
    function replace(path2, state) {
      true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
      var action = "REPLACE";
      var location2 = createLocation(path2, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location2);
        var key = location2.key, state2 = location2.state;
        if (canUseHistory) {
          globalHistory.replaceState({
            key,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.replace(href);
          } else {
            var prevIndex = allKeys.indexOf(history.location.key);
            if (prevIndex !== -1)
              allKeys[prevIndex] = location2.key;
            setState({
              action,
              location: location2
            });
          }
        } else {
          true ? tiny_warning_esm_default(state2 === void 0, "Browser history cannot replace state in browsers that do not support HTML5 history") : void 0;
          window.location.replace(href);
        }
      });
    }
    function go(n3) {
      globalHistory.go(n3);
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.addEventListener(HashChangeEvent, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.removeEventListener(HashChangeEvent, handleHashChange);
      }
    }
    var isBlocked = false;
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      block,
      listen
    };
    return history;
  }
  var HashChangeEvent$1 = "hashchange";
  var HashPathCoders = {
    hashbang: {
      encodePath: function encodePath(path2) {
        return path2.charAt(0) === "!" ? path2 : "!/" + stripLeadingSlash(path2);
      },
      decodePath: function decodePath(path2) {
        return path2.charAt(0) === "!" ? path2.substr(1) : path2;
      }
    },
    noslash: {
      encodePath: stripLeadingSlash,
      decodePath: addLeadingSlash
    },
    slash: {
      encodePath: addLeadingSlash,
      decodePath: addLeadingSlash
    }
  };
  function stripHash(url2) {
    var hashIndex = url2.indexOf("#");
    return hashIndex === -1 ? url2 : url2.slice(0, hashIndex);
  }
  function getHashPath() {
    var href = window.location.href;
    var hashIndex = href.indexOf("#");
    return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
  }
  function pushHashPath(path2) {
    window.location.hash = path2;
  }
  function replaceHashPath(path2) {
    window.location.replace(stripHash(window.location.href) + "#" + path2);
  }
  function createHashHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? true ? tiny_invariant_esm_default(false, "Hash history needs a DOM") : tiny_invariant_esm_default(false) : void 0;
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath2 = _HashPathCoders$hashT.encodePath, decodePath2 = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
      var path3 = decodePath2(getHashPath());
      true ? tiny_warning_esm_default(!basename || hasBasename(path3, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path3 + '" to begin with "' + basename + '".') : void 0;
      if (basename)
        path3 = stripBasename(path3, basename);
      return createLocation(path3);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history, nextState);
      history.length = globalHistory.length;
      transitionManager.notifyListeners(history.location, history.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a3, b2) {
      return a3.pathname === b2.pathname && a3.search === b2.search && a3.hash === b2.hash;
    }
    function handleHashChange() {
      var path3 = getHashPath();
      var encodedPath2 = encodePath2(path3);
      if (path3 !== encodedPath2) {
        replaceHashPath(encodedPath2);
      } else {
        var location2 = getDOMLocation();
        var prevLocation = history.location;
        if (!forceNextPop && locationsAreEqual$$1(prevLocation, location2))
          return;
        if (ignorePath === createPath(location2))
          return;
        ignorePath = null;
        handlePop(location2);
      }
    }
    function handlePop(location2) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location: location2
            });
          } else {
            revertPop(location2);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history.location;
      var toIndex = allPaths.lastIndexOf(createPath(toLocation));
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }
    var path2 = getHashPath();
    var encodedPath = encodePath2(path2);
    if (path2 !== encodedPath)
      replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [createPath(initialLocation)];
    function createHref(location2) {
      var baseTag = document.querySelector("base");
      var href = "";
      if (baseTag && baseTag.getAttribute("href")) {
        href = stripHash(window.location.href);
      }
      return href + "#" + encodePath2(basename + createPath(location2));
    }
    function push(path3, state) {
      true ? tiny_warning_esm_default(state === void 0, "Hash history cannot push state; it is ignored") : void 0;
      var action = "PUSH";
      var location2 = createLocation(path3, void 0, void 0, history.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path4 = createPath(location2);
        var encodedPath2 = encodePath2(basename + path4);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path4;
          pushHashPath(encodedPath2);
          var prevIndex = allPaths.lastIndexOf(createPath(history.location));
          var nextPaths = allPaths.slice(0, prevIndex + 1);
          nextPaths.push(path4);
          allPaths = nextPaths;
          setState({
            action,
            location: location2
          });
        } else {
          true ? tiny_warning_esm_default(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack") : void 0;
          setState();
        }
      });
    }
    function replace(path3, state) {
      true ? tiny_warning_esm_default(state === void 0, "Hash history cannot replace state; it is ignored") : void 0;
      var action = "REPLACE";
      var location2 = createLocation(path3, void 0, void 0, history.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path4 = createPath(location2);
        var encodedPath2 = encodePath2(basename + path4);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path4;
          replaceHashPath(encodedPath2);
        }
        var prevIndex = allPaths.indexOf(createPath(history.location));
        if (prevIndex !== -1)
          allPaths[prevIndex] = path4;
        setState({
          action,
          location: location2
        });
      });
    }
    function go(n3) {
      true ? tiny_warning_esm_default(canGoWithoutReload, "Hash history go(n) causes a full page reload in this browser") : void 0;
      globalHistory.go(n3);
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(HashChangeEvent$1, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(HashChangeEvent$1, handleHashChange);
      }
    }
    var isBlocked = false;
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      block,
      listen
    };
    return history;
  }
  function clamp(n3, lowerBound, upperBound) {
    return Math.min(Math.max(n3, lowerBound), upperBound);
  }
  function createMemoryHistory(props) {
    if (props === void 0) {
      props = {};
    }
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ["/"] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history, nextState);
      history.length = history.entries.length;
      transitionManager.notifyListeners(history.location, history.action);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var index2 = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
      return typeof entry === "string" ? createLocation(entry, void 0, createKey()) : createLocation(entry, void 0, entry.key || createKey());
    });
    var createHref = createPath;
    function push(path2, state) {
      true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
      var action = "PUSH";
      var location2 = createLocation(path2, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var prevIndex = history.index;
        var nextIndex = prevIndex + 1;
        var nextEntries = history.entries.slice(0);
        if (nextEntries.length > nextIndex) {
          nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location2);
        } else {
          nextEntries.push(location2);
        }
        setState({
          action,
          location: location2,
          index: nextIndex,
          entries: nextEntries
        });
      });
    }
    function replace(path2, state) {
      true ? tiny_warning_esm_default(!(typeof path2 === "object" && path2.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored") : void 0;
      var action = "REPLACE";
      var location2 = createLocation(path2, state, createKey(), history.location);
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        history.entries[history.index] = location2;
        setState({
          action,
          location: location2
        });
      });
    }
    function go(n3) {
      var nextIndex = clamp(history.index + n3, 0, history.entries.length - 1);
      var action = "POP";
      var location2 = history.entries[nextIndex];
      transitionManager.confirmTransitionTo(location2, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location: location2,
            index: nextIndex
          });
        } else {
          setState();
        }
      });
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    function canGo(n3) {
      var nextIndex = history.index + n3;
      return nextIndex >= 0 && nextIndex < history.entries.length;
    }
    function block(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
      return transitionManager.appendListener(listener);
    }
    var history = {
      length: entries.length,
      action: "POP",
      location: entries[index2],
      index: index2,
      entries,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      canGo,
      block,
      listen
    };
    return history;
  }

  // node_modules/mini-create-react-context/dist/esm/index.js
  var import_react = __toModule(require_react());
  var import_prop_types = __toModule(require_prop_types());
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  function getUniqueId() {
    var key = "__global_unique_id__";
    return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
  }
  function objectIs(x3, y2) {
    if (x3 === y2) {
      return x3 !== 0 || 1 / x3 === 1 / y2;
    } else {
      return x3 !== x3 && y2 !== y2;
    }
  }
  function createEventEmitter(value2) {
    var handlers2 = [];
    return {
      on: function on2(handler) {
        handlers2.push(handler);
      },
      off: function off(handler) {
        handlers2 = handlers2.filter(function(h2) {
          return h2 !== handler;
        });
      },
      get: function get2() {
        return value2;
      },
      set: function set2(newValue, changedBits) {
        value2 = newValue;
        handlers2.forEach(function(handler) {
          return handler(value2, changedBits);
        });
      }
    };
  }
  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }
  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = "__create-react-context-" + getUniqueId() + "__";
    var Provider = /* @__PURE__ */ function(_Component) {
      _inheritsLoose(Provider2, _Component);
      function Provider2() {
        var _this;
        _this = _Component.apply(this, arguments) || this;
        _this.emitter = createEventEmitter(_this.props.value);
        return _this;
      }
      var _proto = Provider2.prototype;
      _proto.getChildContext = function getChildContext() {
        var _ref3;
        return _ref3 = {}, _ref3[contextProp] = this.emitter, _ref3;
      };
      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits;
          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === "function" ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if (true) {
              tiny_warning_esm_default((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
            }
            changedBits |= 0;
            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };
      _proto.render = function render() {
        return this.props.children;
      };
      return Provider2;
    }(import_react.Component);
    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = import_prop_types.default.object.isRequired, _Provider$childContex);
    var Consumer = /* @__PURE__ */ function(_Component2) {
      _inheritsLoose(Consumer2, _Component2);
      function Consumer2() {
        var _this2;
        _this2 = _Component2.apply(this, arguments) || this;
        _this2.state = {
          value: _this2.getValue()
        };
        _this2.onUpdate = function(newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;
          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        };
        return _this2;
      }
      var _proto2 = Consumer2.prototype;
      _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };
      _proto2.getValue = function getValue() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };
      _proto2.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };
      return Consumer2;
    }(import_react.Component);
    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = import_prop_types.default.object, _Consumer$contextType);
    return {
      Provider,
      Consumer
    };
  }
  var index = import_react.default.createContext || createReactContext;
  var esm_default = index;

  // node_modules/react-router/esm/react-router.js
  var import_path_to_regexp = __toModule(require_path_to_regexp());
  var import_react_is = __toModule(require_react_is());

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/react-router/esm/react-router.js
  var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  var createNamedContext = function createNamedContext2(name) {
    var context2 = esm_default();
    context2.displayName = name;
    return context2;
  };
  var historyContext = /* @__PURE__ */ createNamedContext("Router-History");
  var context = /* @__PURE__ */ createNamedContext("Router");
  var Router = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
      return {
        path: "/",
        url: "/",
        params: {},
        isExact: pathname === "/"
      };
    };
    function Router2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this.state = {
        location: props.history.location
      };
      _this._isMounted = false;
      _this._pendingLocation = null;
      if (!props.staticContext) {
        _this.unlisten = props.history.listen(function(location2) {
          if (_this._isMounted) {
            _this.setState({
              location: location2
            });
          } else {
            _this._pendingLocation = location2;
          }
        });
      }
      return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._isMounted = true;
      if (this._pendingLocation) {
        this.setState({
          location: this._pendingLocation
        });
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.unlisten) {
        this.unlisten();
        this._isMounted = false;
        this._pendingLocation = null;
      }
    };
    _proto.render = function render() {
      return /* @__PURE__ */ import_react2.default.createElement(context.Provider, {
        value: {
          history: this.props.history,
          location: this.state.location,
          match: Router2.computeRootMatch(this.state.location.pathname),
          staticContext: this.props.staticContext
        }
      }, /* @__PURE__ */ import_react2.default.createElement(historyContext.Provider, {
        children: this.props.children || null,
        value: this.props.history
      }));
    };
    return Router2;
  }(import_react2.default.Component);
  if (true) {
    Router.propTypes = {
      children: import_prop_types2.default.node,
      history: import_prop_types2.default.object.isRequired,
      staticContext: import_prop_types2.default.object
    };
    Router.prototype.componentDidUpdate = function(prevProps) {
      true ? tiny_warning_esm_default(prevProps.history === this.props.history, "You cannot change <Router history>") : void 0;
    };
  }
  var MemoryRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createMemoryHistory(_this.props);
      return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
      return /* @__PURE__ */ import_react2.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return MemoryRouter2;
  }(import_react2.default.Component);
  if (true) {
    MemoryRouter.propTypes = {
      initialEntries: import_prop_types2.default.array,
      initialIndex: import_prop_types2.default.number,
      getUserConfirmation: import_prop_types2.default.func,
      keyLength: import_prop_types2.default.number,
      children: import_prop_types2.default.node
    };
    MemoryRouter.prototype.componentDidMount = function() {
      true ? tiny_warning_esm_default(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.") : void 0;
    };
  }
  var Lifecycle = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Lifecycle2, _React$Component);
    function Lifecycle2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      if (this.props.onMount)
        this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.onUpdate)
        this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.props.onUnmount)
        this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
      return null;
    };
    return Lifecycle2;
  }(import_react2.default.Component);
  function Prompt(_ref3) {
    var message = _ref3.message, _ref$when = _ref3.when, when = _ref$when === void 0 ? true : _ref$when;
    return /* @__PURE__ */ import_react2.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? true ? tiny_invariant_esm_default(false, "You should not use <Prompt> outside a <Router>") : tiny_invariant_esm_default(false) : void 0;
      if (!when || context2.staticContext)
        return null;
      var method = context2.history.block;
      return /* @__PURE__ */ import_react2.default.createElement(Lifecycle, {
        onMount: function onMount(self2) {
          self2.release = method(message);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          if (prevProps.message !== message) {
            self2.release();
            self2.release = method(message);
          }
        },
        onUnmount: function onUnmount(self2) {
          self2.release();
        },
        message
      });
    });
  }
  if (true) {
    messageType = import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.string]);
    Prompt.propTypes = {
      when: import_prop_types2.default.bool,
      message: messageType.isRequired
    };
  }
  var messageType;
  var cache = {};
  var cacheLimit = 1e4;
  var cacheCount = 0;
  function compilePath(path2) {
    if (cache[path2])
      return cache[path2];
    var generator = import_path_to_regexp.default.compile(path2);
    if (cacheCount < cacheLimit) {
      cache[path2] = generator;
      cacheCount++;
    }
    return generator;
  }
  function generatePath(path2, params) {
    if (path2 === void 0) {
      path2 = "/";
    }
    if (params === void 0) {
      params = {};
    }
    return path2 === "/" ? path2 : compilePath(path2)(params, {
      pretty: true
    });
  }
  function Redirect(_ref3) {
    var computedMatch = _ref3.computedMatch, to = _ref3.to, _ref$push = _ref3.push, push = _ref$push === void 0 ? false : _ref$push;
    return /* @__PURE__ */ import_react2.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? true ? tiny_invariant_esm_default(false, "You should not use <Redirect> outside a <Router>") : tiny_invariant_esm_default(false) : void 0;
      var history = context2.history, staticContext = context2.staticContext;
      var method = push ? history.push : history.replace;
      var location2 = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
        pathname: generatePath(to.pathname, computedMatch.params)
      }) : to);
      if (staticContext) {
        method(location2);
        return null;
      }
      return /* @__PURE__ */ import_react2.default.createElement(Lifecycle, {
        onMount: function onMount() {
          method(location2);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          var prevLocation = createLocation(prevProps.to);
          if (!locationsAreEqual(prevLocation, _extends({}, location2, {
            key: prevLocation.key
          }))) {
            method(location2);
          }
        },
        to
      });
    });
  }
  if (true) {
    Redirect.propTypes = {
      push: import_prop_types2.default.bool,
      from: import_prop_types2.default.string,
      to: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.object]).isRequired
    };
  }
  var cache$1 = {};
  var cacheLimit$1 = 1e4;
  var cacheCount$1 = 0;
  function compilePath$1(path2, options2) {
    var cacheKey = "" + options2.end + options2.strict + options2.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
    if (pathCache[path2])
      return pathCache[path2];
    var keys = [];
    var regexp = (0, import_path_to_regexp.default)(path2, keys, options2);
    var result = {
      regexp,
      keys
    };
    if (cacheCount$1 < cacheLimit$1) {
      pathCache[path2] = result;
      cacheCount$1++;
    }
    return result;
  }
  function matchPath(pathname, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    if (typeof options2 === "string" || Array.isArray(options2)) {
      options2 = {
        path: options2
      };
    }
    var _options = options2, path2 = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path2);
    return paths.reduce(function(matched, path3) {
      if (!path3 && path3 !== "")
        return null;
      if (matched)
        return matched;
      var _compilePath = compilePath$1(path3, {
        end: exact,
        strict,
        sensitive
      }), regexp = _compilePath.regexp, keys = _compilePath.keys;
      var match2 = regexp.exec(pathname);
      if (!match2)
        return null;
      var url2 = match2[0], values = match2.slice(1);
      var isExact = pathname === url2;
      if (exact && !isExact)
        return null;
      return {
        path: path3,
        url: path3 === "/" && url2 === "" ? "/" : url2,
        isExact,
        params: keys.reduce(function(memo2, key, index2) {
          memo2[key.name] = values[index2];
          return memo2;
        }, {})
      };
    }, null);
  }
  function isEmptyChildren(children) {
    return import_react2.default.Children.count(children) === 0;
  }
  function evalChildrenDev(children, props, path2) {
    var value2 = children(props);
    true ? tiny_warning_esm_default(value2 !== void 0, "You returned `undefined` from the `children` function of " + ("<Route" + (path2 ? ' path="' + path2 + '"' : "") + ">, but you ") + "should have returned a React element or `null`") : void 0;
    return value2 || null;
  }
  var Route = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Route2, _React$Component);
    function Route2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route2.prototype;
    _proto.render = function render() {
      var _this = this;
      return /* @__PURE__ */ import_react2.default.createElement(context.Consumer, null, function(context$1) {
        !context$1 ? true ? tiny_invariant_esm_default(false, "You should not use <Route> outside a <Router>") : tiny_invariant_esm_default(false) : void 0;
        var location2 = _this.props.location || context$1.location;
        var match2 = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location2.pathname, _this.props) : context$1.match;
        var props = _extends({}, context$1, {
          location: location2,
          match: match2
        });
        var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render2 = _this$props.render;
        if (Array.isArray(children) && isEmptyChildren(children)) {
          children = null;
        }
        return /* @__PURE__ */ import_react2.default.createElement(context.Provider, {
          value: props
        }, props.match ? children ? typeof children === "function" ? true ? evalChildrenDev(children, props, _this.props.path) : children(props) : children : component ? /* @__PURE__ */ import_react2.default.createElement(component, props) : render2 ? render2(props) : null : typeof children === "function" ? true ? evalChildrenDev(children, props, _this.props.path) : children(props) : null);
      });
    };
    return Route2;
  }(import_react2.default.Component);
  if (true) {
    Route.propTypes = {
      children: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.node]),
      component: function component(props, propName) {
        if (props[propName] && !(0, import_react_is.isValidElementType)(props[propName])) {
          return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
        }
      },
      exact: import_prop_types2.default.bool,
      location: import_prop_types2.default.object,
      path: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.arrayOf(import_prop_types2.default.string)]),
      render: import_prop_types2.default.func,
      sensitive: import_prop_types2.default.bool,
      strict: import_prop_types2.default.bool
    };
    Route.prototype.componentDidMount = function() {
      true ? tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : void 0;
      true ? tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : void 0;
      true ? tiny_warning_esm_default(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : void 0;
    };
    Route.prototype.componentDidUpdate = function(prevProps) {
      true ? tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
      true ? tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
    };
  }
  function addLeadingSlash2(path2) {
    return path2.charAt(0) === "/" ? path2 : "/" + path2;
  }
  function addBasename(basename, location2) {
    if (!basename)
      return location2;
    return _extends({}, location2, {
      pathname: addLeadingSlash2(basename) + location2.pathname
    });
  }
  function stripBasename2(basename, location2) {
    if (!basename)
      return location2;
    var base = addLeadingSlash2(basename);
    if (location2.pathname.indexOf(base) !== 0)
      return location2;
    return _extends({}, location2, {
      pathname: location2.pathname.substr(base.length)
    });
  }
  function createURL(location2) {
    return typeof location2 === "string" ? location2 : createPath(location2);
  }
  function staticHandler(methodName) {
    return function() {
      true ? tiny_invariant_esm_default(false, "You cannot %s with <StaticRouter>", methodName) : tiny_invariant_esm_default(false);
    };
  }
  function noop() {
  }
  var StaticRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(StaticRouter2, _React$Component);
    function StaticRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlePush = function(location2) {
        return _this.navigateTo(location2, "PUSH");
      };
      _this.handleReplace = function(location2) {
        return _this.navigateTo(location2, "REPLACE");
      };
      _this.handleListen = function() {
        return noop;
      };
      _this.handleBlock = function() {
        return noop;
      };
      return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location2, action) {
      var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context2 = _this$props$context === void 0 ? {} : _this$props$context;
      context2.action = action;
      context2.location = addBasename(basename, createLocation(location2));
      context2.url = createURL(context2.location);
    };
    _proto.render = function render() {
      var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context2 = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location2 = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);
      var history = {
        createHref: function createHref(path2) {
          return addLeadingSlash2(basename + createURL(path2));
        },
        action: "POP",
        location: stripBasename2(basename, createLocation(location2)),
        push: this.handlePush,
        replace: this.handleReplace,
        go: staticHandler("go"),
        goBack: staticHandler("goBack"),
        goForward: staticHandler("goForward"),
        listen: this.handleListen,
        block: this.handleBlock
      };
      return /* @__PURE__ */ import_react2.default.createElement(Router, _extends({}, rest, {
        history,
        staticContext: context2
      }));
    };
    return StaticRouter2;
  }(import_react2.default.Component);
  if (true) {
    StaticRouter.propTypes = {
      basename: import_prop_types2.default.string,
      context: import_prop_types2.default.object,
      location: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.object])
    };
    StaticRouter.prototype.componentDidMount = function() {
      true ? tiny_warning_esm_default(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.") : void 0;
    };
  }
  var Switch = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Switch2, _React$Component);
    function Switch2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch2.prototype;
    _proto.render = function render() {
      var _this = this;
      return /* @__PURE__ */ import_react2.default.createElement(context.Consumer, null, function(context2) {
        !context2 ? true ? tiny_invariant_esm_default(false, "You should not use <Switch> outside a <Router>") : tiny_invariant_esm_default(false) : void 0;
        var location2 = _this.props.location || context2.location;
        var element2, match2;
        import_react2.default.Children.forEach(_this.props.children, function(child) {
          if (match2 == null && /* @__PURE__ */ import_react2.default.isValidElement(child)) {
            element2 = child;
            var path2 = child.props.path || child.props.from;
            match2 = path2 ? matchPath(location2.pathname, _extends({}, child.props, {
              path: path2
            })) : context2.match;
          }
        });
        return match2 ? /* @__PURE__ */ import_react2.default.cloneElement(element2, {
          location: location2,
          computedMatch: match2
        }) : null;
      });
    };
    return Switch2;
  }(import_react2.default.Component);
  if (true) {
    Switch.propTypes = {
      children: import_prop_types2.default.node,
      location: import_prop_types2.default.object
    };
    Switch.prototype.componentDidUpdate = function(prevProps) {
      true ? tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
      true ? tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
    };
  }
  var useContext = import_react2.default.useContext;
  function useHistory() {
    if (true) {
      !(typeof useContext === "function") ? true ? tiny_invariant_esm_default(false, "You must use React >= 16.8 in order to use useHistory()") : tiny_invariant_esm_default(false) : void 0;
    }
    return useContext(historyContext);
  }
  function useLocation() {
    if (true) {
      !(typeof useContext === "function") ? true ? tiny_invariant_esm_default(false, "You must use React >= 16.8 in order to use useLocation()") : tiny_invariant_esm_default(false) : void 0;
    }
    return useContext(context).location;
  }
  if (true) {
    if (typeof window !== "undefined") {
      global9 = window;
      key = "__react_router_build__";
      buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
      };
      if (global9[key] && global9[key] !== "esm") {
        initialBuildName = buildNames[global9[key]];
        secondaryBuildName = buildNames["esm"];
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
      }
      global9[key] = "esm";
    }
  }
  var global9;
  var key;
  var buildNames;
  var initialBuildName;
  var secondaryBuildName;

  // node_modules/react-router-dom/esm/react-router-dom.js
  var import_react3 = __toModule(require_react());
  var import_prop_types3 = __toModule(require_prop_types());
  var BrowserRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createBrowserHistory(_this.props);
      return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
      return /* @__PURE__ */ import_react3.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return BrowserRouter2;
  }(import_react3.default.Component);
  if (true) {
    BrowserRouter.propTypes = {
      basename: import_prop_types3.default.string,
      children: import_prop_types3.default.node,
      forceRefresh: import_prop_types3.default.bool,
      getUserConfirmation: import_prop_types3.default.func,
      keyLength: import_prop_types3.default.number
    };
    BrowserRouter.prototype.componentDidMount = function() {
      true ? tiny_warning_esm_default(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.") : void 0;
    };
  }
  var HashRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(HashRouter2, _React$Component);
    function HashRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createHashHistory(_this.props);
      return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
      return /* @__PURE__ */ import_react3.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return HashRouter2;
  }(import_react3.default.Component);
  if (true) {
    HashRouter.propTypes = {
      basename: import_prop_types3.default.string,
      children: import_prop_types3.default.node,
      getUserConfirmation: import_prop_types3.default.func,
      hashType: import_prop_types3.default.oneOf(["hashbang", "noslash", "slash"])
    };
    HashRouter.prototype.componentDidMount = function() {
      true ? tiny_warning_esm_default(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.") : void 0;
    };
  }
  var resolveToLocation = function resolveToLocation2(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
  };
  var normalizeToLocation = function normalizeToLocation2(to, currentLocation) {
    return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
  };
  var forwardRefShim = function forwardRefShim2(C2) {
    return C2;
  };
  var forwardRef = import_react3.default.forwardRef;
  if (typeof forwardRef === "undefined") {
    forwardRef = forwardRefShim;
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  var LinkAnchor = forwardRef(function(_ref3, forwardedRef) {
    var innerRef = _ref3.innerRef, navigate = _ref3.navigate, _onClick = _ref3.onClick, rest = _objectWithoutPropertiesLoose(_ref3, ["innerRef", "navigate", "onClick"]);
    var target = rest.target;
    var props = _extends({}, rest, {
      onClick: function onClick(event) {
        try {
          if (_onClick)
            _onClick(event);
        } catch (ex) {
          event.preventDefault();
          throw ex;
        }
        if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
          event.preventDefault();
          navigate();
        }
      }
    });
    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.ref = innerRef;
    }
    return /* @__PURE__ */ import_react3.default.createElement("a", props);
  });
  if (true) {
    LinkAnchor.displayName = "LinkAnchor";
  }
  var Link = forwardRef(function(_ref23, forwardedRef) {
    var _ref2$component = _ref23.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref23.replace, to = _ref23.to, innerRef = _ref23.innerRef, rest = _objectWithoutPropertiesLoose(_ref23, ["component", "replace", "to", "innerRef"]);
    return /* @__PURE__ */ import_react3.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? true ? tiny_invariant_esm_default(false, "You should not use <Link> outside a <Router>") : tiny_invariant_esm_default(false) : void 0;
      var history = context2.history;
      var location2 = normalizeToLocation(resolveToLocation(to, context2.location), context2.location);
      var href = location2 ? history.createHref(location2) : "";
      var props = _extends({}, rest, {
        href,
        navigate: function navigate() {
          var location3 = resolveToLocation(to, context2.location);
          var isDuplicateNavigation = createPath(context2.location) === createPath(normalizeToLocation(location3));
          var method = replace || isDuplicateNavigation ? history.replace : history.push;
          method(location3);
        }
      });
      if (forwardRefShim !== forwardRef) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return /* @__PURE__ */ import_react3.default.createElement(component, props);
    });
  });
  if (true) {
    toType = import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.object, import_prop_types3.default.func]);
    refType = import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.func, import_prop_types3.default.shape({
      current: import_prop_types3.default.any
    })]);
    Link.displayName = "Link";
    Link.propTypes = {
      innerRef: refType,
      onClick: import_prop_types3.default.func,
      replace: import_prop_types3.default.bool,
      target: import_prop_types3.default.string,
      to: toType.isRequired
    };
  }
  var toType;
  var refType;
  var forwardRefShim$1 = function forwardRefShim3(C2) {
    return C2;
  };
  var forwardRef$1 = import_react3.default.forwardRef;
  if (typeof forwardRef$1 === "undefined") {
    forwardRef$1 = forwardRefShim$1;
  }
  function joinClassnames() {
    for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
      classnames[_key] = arguments[_key];
    }
    return classnames.filter(function(i3) {
      return i3;
    }).join(" ");
  }
  var NavLink = forwardRef$1(function(_ref3, forwardedRef) {
    var _ref$ariaCurrent = _ref3["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref3.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref3.activeStyle, classNameProp = _ref3.className, exact = _ref3.exact, isActiveProp = _ref3.isActive, locationProp = _ref3.location, sensitive = _ref3.sensitive, strict = _ref3.strict, styleProp = _ref3.style, to = _ref3.to, innerRef = _ref3.innerRef, rest = _objectWithoutPropertiesLoose(_ref3, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
    return /* @__PURE__ */ import_react3.default.createElement(context.Consumer, null, function(context2) {
      !context2 ? true ? tiny_invariant_esm_default(false, "You should not use <NavLink> outside a <Router>") : tiny_invariant_esm_default(false) : void 0;
      var currentLocation = locationProp || context2.location;
      var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
      var path2 = toLocation.pathname;
      var escapedPath = path2 && path2.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
      var match2 = escapedPath ? matchPath(currentLocation.pathname, {
        path: escapedPath,
        exact,
        sensitive,
        strict
      }) : null;
      var isActive = !!(isActiveProp ? isActiveProp(match2, currentLocation) : match2);
      var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;
      var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;
      if (isActive) {
        className = joinClassnames(className, activeClassName);
        style = _extends({}, style, activeStyle);
      }
      var props = _extends({
        "aria-current": isActive && ariaCurrent || null,
        className,
        style,
        to: toLocation
      }, rest);
      if (forwardRefShim$1 !== forwardRef$1) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return /* @__PURE__ */ import_react3.default.createElement(Link, props);
    });
  });
  if (true) {
    NavLink.displayName = "NavLink";
    ariaCurrentType = import_prop_types3.default.oneOf(["page", "step", "location", "date", "time", "true", "false"]);
    NavLink.propTypes = _extends({}, Link.propTypes, {
      "aria-current": ariaCurrentType,
      activeClassName: import_prop_types3.default.string,
      activeStyle: import_prop_types3.default.object,
      className: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.func]),
      exact: import_prop_types3.default.bool,
      isActive: import_prop_types3.default.func,
      location: import_prop_types3.default.object,
      sensitive: import_prop_types3.default.bool,
      strict: import_prop_types3.default.bool,
      style: import_prop_types3.default.oneOfType([import_prop_types3.default.object, import_prop_types3.default.func])
    });
  }
  var ariaCurrentType;

  // node_modules/react-hot-toast/dist/index.mjs
  var import_react4 = __toModule(require_react());
  var import_react5 = __toModule(require_react());
  var d2 = __toModule(require_react());

  // node_modules/goober/dist/goober.modern.js
  var e = { data: "" };
  var t = (t2) => typeof window == "object" ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t2 || e;
  var l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a = /\/\*[^]*?\*\/|  +/g;
  var n = /\n+/g;
  var o = (e3, t2) => {
    let r = "", l2 = "", a3 = "";
    for (let n3 in e3) {
      let c3 = e3[n3];
      n3[0] == "@" ? n3[1] == "i" ? r = n3 + " " + c3 + ";" : l2 += n3[1] == "f" ? o(c3, n3) : n3 + "{" + o(c3, n3[1] == "k" ? "" : t2) + "}" : typeof c3 == "object" ? l2 += o(c3, t2 ? t2.replace(/([^,])+/g, (e4) => n3.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e4) : e4 ? e4 + " " + t3 : t3)) : n3) : c3 != null && (n3 = /^--/.test(n3) ? n3 : n3.replace(/[A-Z]/g, "-$&").toLowerCase(), a3 += o.p ? o.p(n3, c3) : n3 + ":" + c3 + ";");
    }
    return r + (t2 && a3 ? t2 + "{" + a3 + "}" : a3) + l2;
  };
  var c = {};
  var s = (e3) => {
    if (typeof e3 == "object") {
      let t2 = "";
      for (let r in e3)
        t2 += r + s(e3[r]);
      return t2;
    }
    return e3;
  };
  var i = (e3, t2, r, i3, p2) => {
    let u3 = s(e3), d3 = c[u3] || (c[u3] = ((e4) => {
      let t3 = 0, r2 = 11;
      for (; t3 < e4.length; )
        r2 = 101 * r2 + e4.charCodeAt(t3++) >>> 0;
      return "go" + r2;
    })(u3));
    if (!c[d3]) {
      let t3 = u3 !== e3 ? e3 : ((e4) => {
        let t4, r2, o2 = [{}];
        for (; t4 = l.exec(e4.replace(a, "")); )
          t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
        return o2[0];
      })(e3);
      c[d3] = o(p2 ? { ["@keyframes " + d3]: t3 } : t3, r ? "" : "." + d3);
    }
    return ((e4, t3, r2) => {
      t3.data.indexOf(e4) == -1 && (t3.data = r2 ? e4 + t3.data : t3.data + e4);
    })(c[d3], t2, i3), d3;
  };
  var p = (e3, t2, r) => e3.reduce((e4, l2, a3) => {
    let n3 = t2[a3];
    if (n3 && n3.call) {
      let e6 = n3(r), t3 = e6 && e6.props && e6.props.className || /^go/.test(e6) && e6;
      n3 = t3 ? "." + t3 : e6 && typeof e6 == "object" ? e6.props ? "" : o(e6, "") : e6 === false ? "" : e6;
    }
    return e4 + l2 + (n3 == null ? "" : n3);
  }, "");
  function u(e3) {
    let r = this || {}, l2 = e3.call ? e3(r.p) : e3;
    return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r.p) : l2.reduce((e4, t2) => Object.assign(e4, t2 && t2.call ? t2(r.p) : t2), {}) : l2, t(r.target), r.g, r.o, r.k);
  }
  var d;
  var f;
  var g;
  var b = u.bind({ g: 1 });
  var h = u.bind({ k: 1 });
  function m(e3, t2, r, l2) {
    o.p = t2, d = e3, f = r, g = l2;
  }
  function j(e3, t2) {
    let r = this || {};
    return function() {
      let l2 = arguments;
      function a3(n3, o2) {
        let c3 = Object.assign({}, n3), s3 = c3.className || a3.className;
        r.p = Object.assign({ theme: f && f() }, c3), r.o = / *go\d+/.test(s3), c3.className = u.apply(r, l2) + (s3 ? " " + s3 : ""), t2 && (c3.ref = o2);
        let i3 = e3;
        return e3[0] && (i3 = c3.as || e3, delete c3.as), g && i3[0] && g(c3), d(i3, c3);
      }
      return t2 ? t2(a3) : a3;
    };
  }

  // node_modules/react-hot-toast/dist/index.mjs
  var f2 = __toModule(require_react());
  var x = __toModule(require_react());
  var H = (e3) => typeof e3 == "function";
  var u2 = (e3, t2) => H(e3) ? e3(t2) : e3;
  var U = (() => {
    let e3 = 0;
    return () => (++e3).toString();
  })();
  var $ = (e3) => (t2) => {
    t2 && setTimeout(() => {
      let o2 = t2.getBoundingClientRect();
      e3(o2);
    });
  };
  var S = (() => {
    let e3;
    return () => {
      if (e3 === void 0 && typeof window < "u") {
        let t2 = matchMedia("(prefers-reduced-motion: reduce)");
        e3 = !t2 || t2.matches;
      }
      return e3;
    };
  })();
  var Q = 20;
  var A = new Map();
  var L = (e3) => {
    if (A.has(e3))
      return;
    let t2 = setTimeout(() => {
      A.delete(e3), m2({ type: 4, toastId: e3 });
    }, 1e3);
    A.set(e3, t2);
  };
  var J = (e3) => {
    let t2 = A.get(e3);
    t2 && clearTimeout(t2);
  };
  var E = (e3, t2) => {
    switch (t2.type) {
      case 0:
        return __spreadProps(__spreadValues({}, e3), { toasts: [t2.toast, ...e3.toasts].slice(0, Q) });
      case 1:
        return t2.toast.id && J(t2.toast.id), __spreadProps(__spreadValues({}, e3), { toasts: e3.toasts.map((a3) => a3.id === t2.toast.id ? __spreadValues(__spreadValues({}, a3), t2.toast) : a3) });
      case 2:
        let { toast: o2 } = t2;
        return e3.toasts.find((a3) => a3.id === o2.id) ? E(e3, { type: 1, toast: o2 }) : E(e3, { type: 0, toast: o2 });
      case 3:
        let { toastId: s3 } = t2;
        return s3 ? L(s3) : e3.toasts.forEach((a3) => {
          L(a3.id);
        }), __spreadProps(__spreadValues({}, e3), { toasts: e3.toasts.map((a3) => a3.id === s3 || s3 === void 0 ? __spreadProps(__spreadValues({}, a3), { visible: false }) : a3) });
      case 4:
        return t2.toastId === void 0 ? __spreadProps(__spreadValues({}, e3), { toasts: [] }) : __spreadProps(__spreadValues({}, e3), { toasts: e3.toasts.filter((a3) => a3.id !== t2.toastId) });
      case 5:
        return __spreadProps(__spreadValues({}, e3), { pausedAt: t2.time });
      case 6:
        let r = t2.time - (e3.pausedAt || 0);
        return __spreadProps(__spreadValues({}, e3), { pausedAt: void 0, toasts: e3.toasts.map((a3) => __spreadProps(__spreadValues({}, a3), { pauseDuration: a3.pauseDuration + r })) });
    }
  };
  var P = [];
  var R = { toasts: [], pausedAt: void 0 };
  var m2 = (e3) => {
    R = E(R, e3), P.forEach((t2) => {
      t2(R);
    });
  };
  var X = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 };
  var v = (e3 = {}) => {
    let [t2, o2] = (0, import_react4.useState)(R);
    (0, import_react4.useEffect)(() => (P.push(o2), () => {
      let r = P.indexOf(o2);
      r > -1 && P.splice(r, 1);
    }), [t2]);
    let s3 = t2.toasts.map((r) => {
      var a3, i3;
      return __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, e3), e3[r.type]), r), { duration: r.duration || ((a3 = e3[r.type]) == null ? void 0 : a3.duration) || (e3 == null ? void 0 : e3.duration) || X[r.type], style: __spreadValues(__spreadValues(__spreadValues({}, e3.style), (i3 = e3[r.type]) == null ? void 0 : i3.style), r.style) });
    });
    return __spreadProps(__spreadValues({}, t2), { toasts: s3 });
  };
  var q = (e3, t2 = "blank", o2) => __spreadProps(__spreadValues({ createdAt: Date.now(), visible: true, type: t2, ariaProps: { role: "status", "aria-live": "polite" }, message: e3, pauseDuration: 0 }, o2), { id: (o2 == null ? void 0 : o2.id) || U() });
  var g2 = (e3) => (t2, o2) => {
    let s3 = q(t2, e3, o2);
    return m2({ type: 2, toast: s3 }), s3.id;
  };
  var n2 = (e3, t2) => g2("blank")(e3, t2);
  n2.error = g2("error");
  n2.success = g2("success");
  n2.loading = g2("loading");
  n2.custom = g2("custom");
  n2.dismiss = (e3) => {
    m2({ type: 3, toastId: e3 });
  };
  n2.remove = (e3) => m2({ type: 4, toastId: e3 });
  n2.promise = (e3, t2, o2) => {
    let s3 = n2.loading(t2.loading, __spreadValues(__spreadValues({}, o2), o2 == null ? void 0 : o2.loading));
    return e3.then((r) => (n2.success(u2(t2.success, r), __spreadValues(__spreadValues({ id: s3 }, o2), o2 == null ? void 0 : o2.success)), r)).catch((r) => {
      n2.error(u2(t2.error, r), __spreadValues(__spreadValues({ id: s3 }, o2), o2 == null ? void 0 : o2.error));
    }), e3;
  };
  var D = (e3) => {
    let { toasts: t2, pausedAt: o2 } = v(e3);
    (0, import_react5.useEffect)(() => {
      if (o2)
        return;
      let r = Date.now(), a3 = t2.map((i3) => {
        if (i3.duration === 1 / 0)
          return;
        let T = (i3.duration || 0) + i3.pauseDuration - (r - i3.createdAt);
        if (T < 0) {
          i3.visible && n2.dismiss(i3.id);
          return;
        }
        return setTimeout(() => n2.dismiss(i3.id), T);
      });
      return () => {
        a3.forEach((i3) => i3 && clearTimeout(i3));
      };
    }, [t2, o2]);
    let s3 = (0, import_react5.useMemo)(() => ({ startPause: () => {
      m2({ type: 5, time: Date.now() });
    }, endPause: () => {
      o2 && m2({ type: 6, time: Date.now() });
    }, updateHeight: (r, a3) => m2({ type: 1, toast: { id: r, height: a3 } }), calculateOffset: (r, a3) => {
      let { reverseOrder: i3 = false, gutter: T = 8, defaultPosition: l2 } = a3 || {}, c3 = t2.filter((p2) => (p2.position || l2) === (r.position || l2) && p2.height), h2 = c3.findIndex((p2) => p2.id === r.id), b2 = c3.filter((p2, y2) => y2 < h2 && p2.visible).length;
      return c3.filter((p2) => p2.visible).slice(...i3 ? [b2 + 1] : [0, b2]).reduce((p2, y2) => p2 + (y2.height || 0) + T, 0);
    } }), [t2, o2]);
    return { toasts: t2, handlers: s3 };
  };
  var ee = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`;
  var te = h`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var oe = h`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;
  var k = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e3) => e3.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${ee} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${te} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e3) => e3.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${oe} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
  var se = h`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
  var V = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e3) => e3.secondary || "#e0e0e0"};
  border-right-color: ${(e3) => e3.primary || "#616161"};
  animation: ${se} 1s linear infinite;
`;
  var ne = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`;
  var ce = h`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;
  var _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e3) => e3.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${ne} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${ce} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e3) => e3.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
  var de = j("div")`
  position: absolute;
`;
  var me = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`;
  var ue = h`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var le = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${ue} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`;
  var M = ({ toast: e3 }) => {
    let { icon: t2, type: o2, iconTheme: s3 } = e3;
    return t2 !== void 0 ? typeof t2 == "string" ? f2.createElement(le, null, t2) : t2 : o2 === "blank" ? null : f2.createElement(me, null, f2.createElement(V, __spreadValues({}, s3)), o2 !== "loading" && f2.createElement(de, null, o2 === "error" ? f2.createElement(k, __spreadValues({}, s3)) : f2.createElement(_, __spreadValues({}, s3))));
  };
  var fe = (e3) => `
0% {transform: translate3d(0,${e3 * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`;
  var Te = (e3) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e3 * -150}%,-1px) scale(.6); opacity:0;}
`;
  var ye = "0%{opacity:0;} 100%{opacity:1;}";
  var ge = "0%{opacity:1;} 100%{opacity:0;}";
  var xe = j("div", d2.forwardRef)`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`;
  var he = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;
  var be = (e3, t2) => {
    let s3 = e3.includes("top") ? 1 : -1, [r, a3] = S() ? [ye, ge] : [fe(s3), Te(s3)];
    return { animation: t2 ? `${h(r)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h(a3)} 0.4s forwards cubic-bezier(.06,.71,.55,1)` };
  };
  var C = d2.memo(({ toast: e3, position: t2, style: o2, children: s3 }) => {
    let r = e3 != null && e3.height ? be(e3.position || t2 || "top-center", e3.visible) : { opacity: 0 }, a3 = d2.createElement(M, { toast: e3 }), i3 = d2.createElement(he, __spreadValues({}, e3.ariaProps), u2(e3.message, e3));
    return d2.createElement(xe, { className: e3.className, style: __spreadValues(__spreadValues(__spreadValues({}, r), o2), e3.style) }, typeof s3 == "function" ? s3({ icon: a3, message: i3 }) : d2.createElement(d2.Fragment, null, a3, i3));
  });
  m(x.createElement);
  var Pe = (e3, t2) => {
    let o2 = e3.includes("top"), s3 = o2 ? { top: 0 } : { bottom: 0 }, r = e3.includes("center") ? { justifyContent: "center" } : e3.includes("right") ? { justifyContent: "flex-end" } : {};
    return __spreadValues(__spreadValues({ left: 0, right: 0, display: "flex", position: "absolute", transition: S() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)", transform: `translateY(${t2 * (o2 ? 1 : -1)}px)` }, s3), r);
  };
  var Re = u`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
  var O = 16;
  var Oe = ({ reverseOrder: e3, position: t2 = "top-center", toastOptions: o2, gutter: s3, children: r, containerStyle: a3, containerClassName: i3 }) => {
    let { toasts: T, handlers: l2 } = D(o2);
    return x.createElement("div", { style: __spreadValues({ position: "fixed", zIndex: 9999, top: O, left: O, right: O, bottom: O, pointerEvents: "none" }, a3), className: i3, onMouseEnter: l2.startPause, onMouseLeave: l2.endPause }, T.map((c3) => {
      let h2 = c3.position || t2, b2 = l2.calculateOffset(c3, { reverseOrder: e3, gutter: s3, defaultPosition: t2 }), F = Pe(h2, b2), p2 = c3.height ? void 0 : $((y2) => {
        l2.updateHeight(c3.id, y2.height);
      });
      return x.createElement("div", { ref: p2, className: c3.visible ? Re : "", key: c3.id, style: F }, c3.type === "custom" ? u2(c3.message, c3) : r ? r(c3) : x.createElement(C, { toast: c3, position: h2 }));
    }));
  };
  var Et = n2;

  // src/chat.ts
  var import_react6 = __toModule(require_react());
  var import_tmi = __toModule(require_tmi());

  // node_modules/date-fns/esm/_lib/toInteger/index.js
  function toInteger(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
      return NaN;
    }
    var number5 = Number(dirtyNumber);
    if (isNaN(number5)) {
      return number5;
    }
    return number5 < 0 ? Math.ceil(number5) : Math.floor(number5);
  }

  // node_modules/date-fns/esm/_lib/requiredArgs/index.js
  function requiredArgs(required, args) {
    if (args.length < required) {
      throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
    }
  }

  // node_modules/date-fns/esm/toDate/index.js
  function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument);
    if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
      return new Date(argument.getTime());
    } else if (typeof argument === "number" || argStr === "[object Number]") {
      return new Date(argument);
    } else {
      if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
        console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
        console.warn(new Error().stack);
      }
      return new Date(NaN);
    }
  }

  // node_modules/date-fns/esm/addMilliseconds/index.js
  function addMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var timestamp = toDate(dirtyDate).getTime();
    var amount = toInteger(dirtyAmount);
    return new Date(timestamp + amount);
  }

  // node_modules/date-fns/esm/_lib/defaultOptions/index.js
  var defaultOptions = {};
  function getDefaultOptions() {
    return defaultOptions;
  }

  // node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
  function getTimezoneOffsetInMilliseconds(date2) {
    var utcDate2 = new Date(Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()));
    utcDate2.setUTCFullYear(date2.getFullYear());
    return date2.getTime() - utcDate2.getTime();
  }

  // node_modules/date-fns/esm/compareAsc/index.js
  function compareAsc(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var diff = dateLeft.getTime() - dateRight.getTime();
    if (diff < 0) {
      return -1;
    } else if (diff > 0) {
      return 1;
    } else {
      return diff;
    }
  }

  // node_modules/date-fns/esm/isDate/index.js
  function isDate(value2) {
    requiredArgs(1, arguments);
    return value2 instanceof Date || typeof value2 === "object" && Object.prototype.toString.call(value2) === "[object Date]";
  }

  // node_modules/date-fns/esm/isValid/index.js
  function isValid(dirtyDate) {
    requiredArgs(1, arguments);
    if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
      return false;
    }
    var date2 = toDate(dirtyDate);
    return !isNaN(Number(date2));
  }

  // node_modules/date-fns/esm/differenceInCalendarMonths/index.js
  function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
  }

  // node_modules/date-fns/esm/differenceInMilliseconds/index.js
  function differenceInMilliseconds(dateLeft, dateRight) {
    requiredArgs(2, arguments);
    return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
  }

  // node_modules/date-fns/esm/_lib/roundingMethods/index.js
  var roundingMap = {
    ceil: Math.ceil,
    round: Math.round,
    floor: Math.floor,
    trunc: function(value2) {
      return value2 < 0 ? Math.ceil(value2) : Math.floor(value2);
    }
  };
  var defaultRoundingMethod = "trunc";
  function getRoundingMethod(method) {
    return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
  }

  // node_modules/date-fns/esm/endOfDay/index.js
  function endOfDay(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    date2.setHours(23, 59, 59, 999);
    return date2;
  }

  // node_modules/date-fns/esm/endOfMonth/index.js
  function endOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    var month2 = date2.getMonth();
    date2.setFullYear(date2.getFullYear(), month2 + 1, 0);
    date2.setHours(23, 59, 59, 999);
    return date2;
  }

  // node_modules/date-fns/esm/isLastDayOfMonth/index.js
  function isLastDayOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    return endOfDay(date2).getTime() === endOfMonth(date2).getTime();
  }

  // node_modules/date-fns/esm/differenceInMonths/index.js
  function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var sign2 = compareAsc(dateLeft, dateRight);
    var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
    var result;
    if (difference < 1) {
      result = 0;
    } else {
      if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
        dateLeft.setDate(30);
      }
      dateLeft.setMonth(dateLeft.getMonth() - sign2 * difference);
      var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign2;
      if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
        isLastMonthNotFull = false;
      }
      result = sign2 * (difference - Number(isLastMonthNotFull));
    }
    return result === 0 ? 0 : result;
  }

  // node_modules/date-fns/esm/differenceInSeconds/index.js
  function differenceInSeconds(dateLeft, dateRight, options2) {
    requiredArgs(2, arguments);
    var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
    return getRoundingMethod(options2 === null || options2 === void 0 ? void 0 : options2.roundingMethod)(diff);
  }

  // node_modules/date-fns/esm/subMilliseconds/index.js
  function subMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, -amount);
  }

  // node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
  var MILLISECONDS_IN_DAY = 864e5;
  function getUTCDayOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    var timestamp = date2.getTime();
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date2.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
  }

  // node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
  function startOfUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var weekStartsOn = 1;
    var date2 = toDate(dirtyDate);
    var day2 = date2.getUTCDay();
    var diff = (day2 < weekStartsOn ? 7 : 0) + day2 - weekStartsOn;
    date2.setUTCDate(date2.getUTCDate() - diff);
    date2.setUTCHours(0, 0, 0, 0);
    return date2;
  }

  // node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
  function getUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    var year2 = date2.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year2 + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year2, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
    if (date2.getTime() >= startOfNextYear.getTime()) {
      return year2 + 1;
    } else if (date2.getTime() >= startOfThisYear.getTime()) {
      return year2;
    } else {
      return year2 - 1;
    }
  }

  // node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
  function startOfUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year2 = getUTCISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setUTCFullYear(year2, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date2 = startOfUTCISOWeek(fourthOfJanuary);
    return date2;
  }

  // node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
  var MILLISECONDS_IN_WEEK = 6048e5;
  function getUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
  }

  // node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
  function startOfUTCWeek(dirtyDate, options2) {
    var _ref3, _ref23, _ref32, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions2 = getDefaultOptions();
    var weekStartsOn = toInteger((_ref3 = (_ref23 = (_ref32 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref32 !== void 0 ? _ref32 : defaultOptions2.weekStartsOn) !== null && _ref23 !== void 0 ? _ref23 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : 0);
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    }
    var date2 = toDate(dirtyDate);
    var day2 = date2.getUTCDay();
    var diff = (day2 < weekStartsOn ? 7 : 0) + day2 - weekStartsOn;
    date2.setUTCDate(date2.getUTCDate() - diff);
    date2.setUTCHours(0, 0, 0, 0);
    return date2;
  }

  // node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
  function getUTCWeekYear(dirtyDate, options2) {
    var _ref3, _ref23, _ref32, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    var year2 = date2.getUTCFullYear();
    var defaultOptions2 = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref3 = (_ref23 = (_ref32 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref32 !== void 0 ? _ref32 : defaultOptions2.firstWeekContainsDate) !== null && _ref23 !== void 0 ? _ref23 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : 1);
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    }
    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year2 + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options2);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year2, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options2);
    if (date2.getTime() >= startOfNextYear.getTime()) {
      return year2 + 1;
    } else if (date2.getTime() >= startOfThisYear.getTime()) {
      return year2;
    } else {
      return year2 - 1;
    }
  }

  // node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
  function startOfUTCWeekYear(dirtyDate, options2) {
    var _ref3, _ref23, _ref32, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions2 = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref3 = (_ref23 = (_ref32 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref32 !== void 0 ? _ref32 : defaultOptions2.firstWeekContainsDate) !== null && _ref23 !== void 0 ? _ref23 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : 1);
    var year2 = getUTCWeekYear(dirtyDate, options2);
    var firstWeek = new Date(0);
    firstWeek.setUTCFullYear(year2, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date2 = startOfUTCWeek(firstWeek, options2);
    return date2;
  }

  // node_modules/date-fns/esm/_lib/getUTCWeek/index.js
  var MILLISECONDS_IN_WEEK2 = 6048e5;
  function getUTCWeek(dirtyDate, options2) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate);
    var diff = startOfUTCWeek(date2, options2).getTime() - startOfUTCWeekYear(date2, options2).getTime();
    return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
  }

  // node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
  function addLeadingZeros(number5, targetLength) {
    var sign2 = number5 < 0 ? "-" : "";
    var output = Math.abs(number5).toString();
    while (output.length < targetLength) {
      output = "0" + output;
    }
    return sign2 + output;
  }

  // node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
  var formatters = {
    y: function(date2, token) {
      var signedYear = date2.getUTCFullYear();
      var year2 = signedYear > 0 ? signedYear : 1 - signedYear;
      return addLeadingZeros(token === "yy" ? year2 % 100 : year2, token.length);
    },
    M: function(date2, token) {
      var month2 = date2.getUTCMonth();
      return token === "M" ? String(month2 + 1) : addLeadingZeros(month2 + 1, 2);
    },
    d: function(date2, token) {
      return addLeadingZeros(date2.getUTCDate(), token.length);
    },
    a: function(date2, token) {
      var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
      switch (token) {
        case "a":
        case "aa":
          return dayPeriodEnumValue.toUpperCase();
        case "aaa":
          return dayPeriodEnumValue;
        case "aaaaa":
          return dayPeriodEnumValue[0];
        case "aaaa":
        default:
          return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
      }
    },
    h: function(date2, token) {
      return addLeadingZeros(date2.getUTCHours() % 12 || 12, token.length);
    },
    H: function(date2, token) {
      return addLeadingZeros(date2.getUTCHours(), token.length);
    },
    m: function(date2, token) {
      return addLeadingZeros(date2.getUTCMinutes(), token.length);
    },
    s: function(date2, token) {
      return addLeadingZeros(date2.getUTCSeconds(), token.length);
    },
    S: function(date2, token) {
      var numberOfDigits = token.length;
      var milliseconds2 = date2.getUTCMilliseconds();
      var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
      return addLeadingZeros(fractionalSeconds, token.length);
    }
  };
  var lightFormatters_default = formatters;

  // node_modules/date-fns/esm/_lib/format/formatters/index.js
  var dayPeriodEnum = {
    am: "am",
    pm: "pm",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  };
  var formatters2 = {
    G: function(date2, token, localize2) {
      var era = date2.getUTCFullYear() > 0 ? 1 : 0;
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return localize2.era(era, {
            width: "abbreviated"
          });
        case "GGGGG":
          return localize2.era(era, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return localize2.era(era, {
            width: "wide"
          });
      }
    },
    y: function(date2, token, localize2) {
      if (token === "yo") {
        var signedYear = date2.getUTCFullYear();
        var year2 = signedYear > 0 ? signedYear : 1 - signedYear;
        return localize2.ordinalNumber(year2, {
          unit: "year"
        });
      }
      return lightFormatters_default.y(date2, token);
    },
    Y: function(date2, token, localize2, options2) {
      var signedWeekYear = getUTCWeekYear(date2, options2);
      var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
      if (token === "YY") {
        var twoDigitYear = weekYear % 100;
        return addLeadingZeros(twoDigitYear, 2);
      }
      if (token === "Yo") {
        return localize2.ordinalNumber(weekYear, {
          unit: "year"
        });
      }
      return addLeadingZeros(weekYear, token.length);
    },
    R: function(date2, token) {
      var isoWeekYear = getUTCISOWeekYear(date2);
      return addLeadingZeros(isoWeekYear, token.length);
    },
    u: function(date2, token) {
      var year2 = date2.getUTCFullYear();
      return addLeadingZeros(year2, token.length);
    },
    Q: function(date2, token, localize2) {
      var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
      switch (token) {
        case "Q":
          return String(quarter);
        case "QQ":
          return addLeadingZeros(quarter, 2);
        case "Qo":
          return localize2.ordinalNumber(quarter, {
            unit: "quarter"
          });
        case "QQQ":
          return localize2.quarter(quarter, {
            width: "abbreviated",
            context: "formatting"
          });
        case "QQQQQ":
          return localize2.quarter(quarter, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return localize2.quarter(quarter, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    q: function(date2, token, localize2) {
      var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
      switch (token) {
        case "q":
          return String(quarter);
        case "qq":
          return addLeadingZeros(quarter, 2);
        case "qo":
          return localize2.ordinalNumber(quarter, {
            unit: "quarter"
          });
        case "qqq":
          return localize2.quarter(quarter, {
            width: "abbreviated",
            context: "standalone"
          });
        case "qqqqq":
          return localize2.quarter(quarter, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return localize2.quarter(quarter, {
            width: "wide",
            context: "standalone"
          });
      }
    },
    M: function(date2, token, localize2) {
      var month2 = date2.getUTCMonth();
      switch (token) {
        case "M":
        case "MM":
          return lightFormatters_default.M(date2, token);
        case "Mo":
          return localize2.ordinalNumber(month2 + 1, {
            unit: "month"
          });
        case "MMM":
          return localize2.month(month2, {
            width: "abbreviated",
            context: "formatting"
          });
        case "MMMMM":
          return localize2.month(month2, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return localize2.month(month2, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    L: function(date2, token, localize2) {
      var month2 = date2.getUTCMonth();
      switch (token) {
        case "L":
          return String(month2 + 1);
        case "LL":
          return addLeadingZeros(month2 + 1, 2);
        case "Lo":
          return localize2.ordinalNumber(month2 + 1, {
            unit: "month"
          });
        case "LLL":
          return localize2.month(month2, {
            width: "abbreviated",
            context: "standalone"
          });
        case "LLLLL":
          return localize2.month(month2, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return localize2.month(month2, {
            width: "wide",
            context: "standalone"
          });
      }
    },
    w: function(date2, token, localize2, options2) {
      var week = getUTCWeek(date2, options2);
      if (token === "wo") {
        return localize2.ordinalNumber(week, {
          unit: "week"
        });
      }
      return addLeadingZeros(week, token.length);
    },
    I: function(date2, token, localize2) {
      var isoWeek = getUTCISOWeek(date2);
      if (token === "Io") {
        return localize2.ordinalNumber(isoWeek, {
          unit: "week"
        });
      }
      return addLeadingZeros(isoWeek, token.length);
    },
    d: function(date2, token, localize2) {
      if (token === "do") {
        return localize2.ordinalNumber(date2.getUTCDate(), {
          unit: "date"
        });
      }
      return lightFormatters_default.d(date2, token);
    },
    D: function(date2, token, localize2) {
      var dayOfYear = getUTCDayOfYear(date2);
      if (token === "Do") {
        return localize2.ordinalNumber(dayOfYear, {
          unit: "dayOfYear"
        });
      }
      return addLeadingZeros(dayOfYear, token.length);
    },
    E: function(date2, token, localize2) {
      var dayOfWeek = date2.getUTCDay();
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting"
          });
        case "EEEEE":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "formatting"
          });
        case "EEEE":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    e: function(date2, token, localize2, options2) {
      var dayOfWeek = date2.getUTCDay();
      var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        case "e":
          return String(localDayOfWeek);
        case "ee":
          return addLeadingZeros(localDayOfWeek, 2);
        case "eo":
          return localize2.ordinalNumber(localDayOfWeek, {
            unit: "day"
          });
        case "eee":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting"
          });
        case "eeeee":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "formatting"
          });
        case "eeee":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    c: function(date2, token, localize2, options2) {
      var dayOfWeek = date2.getUTCDay();
      var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        case "c":
          return String(localDayOfWeek);
        case "cc":
          return addLeadingZeros(localDayOfWeek, token.length);
        case "co":
          return localize2.ordinalNumber(localDayOfWeek, {
            unit: "day"
          });
        case "ccc":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "standalone"
          });
        case "ccccc":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "standalone"
          });
        case "cccc":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "standalone"
          });
      }
    },
    i: function(date2, token, localize2) {
      var dayOfWeek = date2.getUTCDay();
      var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
      switch (token) {
        case "i":
          return String(isoDayOfWeek);
        case "ii":
          return addLeadingZeros(isoDayOfWeek, token.length);
        case "io":
          return localize2.ordinalNumber(isoDayOfWeek, {
            unit: "day"
          });
        case "iii":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting"
          });
        case "iiiii":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "formatting"
          });
        case "iiiiii":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "formatting"
          });
        case "iiii":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    a: function(date2, token, localize2) {
      var hours2 = date2.getUTCHours();
      var dayPeriodEnumValue = hours2 / 12 >= 1 ? "pm" : "am";
      switch (token) {
        case "a":
        case "aa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "aaa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          }).toLowerCase();
        case "aaaaa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    b: function(date2, token, localize2) {
      var hours2 = date2.getUTCHours();
      var dayPeriodEnumValue;
      if (hours2 === 12) {
        dayPeriodEnumValue = dayPeriodEnum.noon;
      } else if (hours2 === 0) {
        dayPeriodEnumValue = dayPeriodEnum.midnight;
      } else {
        dayPeriodEnumValue = hours2 / 12 >= 1 ? "pm" : "am";
      }
      switch (token) {
        case "b":
        case "bb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "bbb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          }).toLowerCase();
        case "bbbbb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    B: function(date2, token, localize2) {
      var hours2 = date2.getUTCHours();
      var dayPeriodEnumValue;
      if (hours2 >= 17) {
        dayPeriodEnumValue = dayPeriodEnum.evening;
      } else if (hours2 >= 12) {
        dayPeriodEnumValue = dayPeriodEnum.afternoon;
      } else if (hours2 >= 4) {
        dayPeriodEnumValue = dayPeriodEnum.morning;
      } else {
        dayPeriodEnumValue = dayPeriodEnum.night;
      }
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "BBBBB":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    },
    h: function(date2, token, localize2) {
      if (token === "ho") {
        var hours2 = date2.getUTCHours() % 12;
        if (hours2 === 0)
          hours2 = 12;
        return localize2.ordinalNumber(hours2, {
          unit: "hour"
        });
      }
      return lightFormatters_default.h(date2, token);
    },
    H: function(date2, token, localize2) {
      if (token === "Ho") {
        return localize2.ordinalNumber(date2.getUTCHours(), {
          unit: "hour"
        });
      }
      return lightFormatters_default.H(date2, token);
    },
    K: function(date2, token, localize2) {
      var hours2 = date2.getUTCHours() % 12;
      if (token === "Ko") {
        return localize2.ordinalNumber(hours2, {
          unit: "hour"
        });
      }
      return addLeadingZeros(hours2, token.length);
    },
    k: function(date2, token, localize2) {
      var hours2 = date2.getUTCHours();
      if (hours2 === 0)
        hours2 = 24;
      if (token === "ko") {
        return localize2.ordinalNumber(hours2, {
          unit: "hour"
        });
      }
      return addLeadingZeros(hours2, token.length);
    },
    m: function(date2, token, localize2) {
      if (token === "mo") {
        return localize2.ordinalNumber(date2.getUTCMinutes(), {
          unit: "minute"
        });
      }
      return lightFormatters_default.m(date2, token);
    },
    s: function(date2, token, localize2) {
      if (token === "so") {
        return localize2.ordinalNumber(date2.getUTCSeconds(), {
          unit: "second"
        });
      }
      return lightFormatters_default.s(date2, token);
    },
    S: function(date2, token) {
      return lightFormatters_default.S(date2, token);
    },
    X: function(date2, token, _localize, options2) {
      var originalDate = options2._originalDate || date2;
      var timezoneOffset = originalDate.getTimezoneOffset();
      if (timezoneOffset === 0) {
        return "Z";
      }
      switch (token) {
        case "X":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        case "XXXX":
        case "XX":
          return formatTimezone(timezoneOffset);
        case "XXXXX":
        case "XXX":
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    },
    x: function(date2, token, _localize, options2) {
      var originalDate = options2._originalDate || date2;
      var timezoneOffset = originalDate.getTimezoneOffset();
      switch (token) {
        case "x":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        case "xxxx":
        case "xx":
          return formatTimezone(timezoneOffset);
        case "xxxxx":
        case "xxx":
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    },
    O: function(date2, token, _localize, options2) {
      var originalDate = options2._originalDate || date2;
      var timezoneOffset = originalDate.getTimezoneOffset();
      switch (token) {
        case "O":
        case "OO":
        case "OOO":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        case "OOOO":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    },
    z: function(date2, token, _localize, options2) {
      var originalDate = options2._originalDate || date2;
      var timezoneOffset = originalDate.getTimezoneOffset();
      switch (token) {
        case "z":
        case "zz":
        case "zzz":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        case "zzzz":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    },
    t: function(date2, token, _localize, options2) {
      var originalDate = options2._originalDate || date2;
      var timestamp = Math.floor(originalDate.getTime() / 1e3);
      return addLeadingZeros(timestamp, token.length);
    },
    T: function(date2, token, _localize, options2) {
      var originalDate = options2._originalDate || date2;
      var timestamp = originalDate.getTime();
      return addLeadingZeros(timestamp, token.length);
    }
  };
  function formatTimezoneShort(offset, dirtyDelimiter) {
    var sign2 = offset > 0 ? "-" : "+";
    var absOffset = Math.abs(offset);
    var hours2 = Math.floor(absOffset / 60);
    var minutes2 = absOffset % 60;
    if (minutes2 === 0) {
      return sign2 + String(hours2);
    }
    var delimiter = dirtyDelimiter || "";
    return sign2 + String(hours2) + delimiter + addLeadingZeros(minutes2, 2);
  }
  function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
    if (offset % 60 === 0) {
      var sign2 = offset > 0 ? "-" : "+";
      return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
    }
    return formatTimezone(offset, dirtyDelimiter);
  }
  function formatTimezone(offset, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || "";
    var sign2 = offset > 0 ? "-" : "+";
    var absOffset = Math.abs(offset);
    var hours2 = addLeadingZeros(Math.floor(absOffset / 60), 2);
    var minutes2 = addLeadingZeros(absOffset % 60, 2);
    return sign2 + hours2 + delimiter + minutes2;
  }
  var formatters_default = formatters2;

  // node_modules/date-fns/esm/_lib/format/longFormatters/index.js
  var dateLongFormatter = function(pattern, formatLong2) {
    switch (pattern) {
      case "P":
        return formatLong2.date({
          width: "short"
        });
      case "PP":
        return formatLong2.date({
          width: "medium"
        });
      case "PPP":
        return formatLong2.date({
          width: "long"
        });
      case "PPPP":
      default:
        return formatLong2.date({
          width: "full"
        });
    }
  };
  var timeLongFormatter = function(pattern, formatLong2) {
    switch (pattern) {
      case "p":
        return formatLong2.time({
          width: "short"
        });
      case "pp":
        return formatLong2.time({
          width: "medium"
        });
      case "ppp":
        return formatLong2.time({
          width: "long"
        });
      case "pppp":
      default:
        return formatLong2.time({
          width: "full"
        });
    }
  };
  var dateTimeLongFormatter = function(pattern, formatLong2) {
    var matchResult = pattern.match(/(P+)(p+)?/) || [];
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];
    if (!timePattern) {
      return dateLongFormatter(pattern, formatLong2);
    }
    var dateTimeFormat;
    switch (datePattern) {
      case "P":
        dateTimeFormat = formatLong2.dateTime({
          width: "short"
        });
        break;
      case "PP":
        dateTimeFormat = formatLong2.dateTime({
          width: "medium"
        });
        break;
      case "PPP":
        dateTimeFormat = formatLong2.dateTime({
          width: "long"
        });
        break;
      case "PPPP":
      default:
        dateTimeFormat = formatLong2.dateTime({
          width: "full"
        });
        break;
    }
    return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
  };
  var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
  };
  var longFormatters_default = longFormatters;

  // node_modules/date-fns/esm/_lib/protectedTokens/index.js
  var protectedDayOfYearTokens = ["D", "DD"];
  var protectedWeekYearTokens = ["YY", "YYYY"];
  function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
  }
  function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
  }
  function throwProtectedError(token, format3, input) {
    if (token === "YYYY") {
      throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    } else if (token === "YY") {
      throw new RangeError("Use `yy` instead of `YY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    } else if (token === "D") {
      throw new RangeError("Use `d` instead of `D` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    } else if (token === "DD") {
      throw new RangeError("Use `dd` instead of `DD` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
  }

  // node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: "less than a second",
      other: "less than {{count}} seconds"
    },
    xSeconds: {
      one: "1 second",
      other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
      one: "less than a minute",
      other: "less than {{count}} minutes"
    },
    xMinutes: {
      one: "1 minute",
      other: "{{count}} minutes"
    },
    aboutXHours: {
      one: "about 1 hour",
      other: "about {{count}} hours"
    },
    xHours: {
      one: "1 hour",
      other: "{{count}} hours"
    },
    xDays: {
      one: "1 day",
      other: "{{count}} days"
    },
    aboutXWeeks: {
      one: "about 1 week",
      other: "about {{count}} weeks"
    },
    xWeeks: {
      one: "1 week",
      other: "{{count}} weeks"
    },
    aboutXMonths: {
      one: "about 1 month",
      other: "about {{count}} months"
    },
    xMonths: {
      one: "1 month",
      other: "{{count}} months"
    },
    aboutXYears: {
      one: "about 1 year",
      other: "about {{count}} years"
    },
    xYears: {
      one: "1 year",
      other: "{{count}} years"
    },
    overXYears: {
      one: "over 1 year",
      other: "over {{count}} years"
    },
    almostXYears: {
      one: "almost 1 year",
      other: "almost {{count}} years"
    }
  };
  var formatDistance = function(token, count, options2) {
    var result;
    var tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") {
      result = tokenValue;
    } else if (count === 1) {
      result = tokenValue.one;
    } else {
      result = tokenValue.other.replace("{{count}}", count.toString());
    }
    if (options2 !== null && options2 !== void 0 && options2.addSuffix) {
      if (options2.comparison && options2.comparison > 0) {
        return "in " + result;
      } else {
        return result + " ago";
      }
    }
    return result;
  };
  var formatDistance_default = formatDistance;

  // node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
  function buildFormatLongFn(args) {
    return function() {
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var width = options2.width ? String(options2.width) : args.defaultWidth;
      var format3 = args.formats[width] || args.formats[args.defaultWidth];
      return format3;
    };
  }

  // node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
  var dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
  };
  var timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: "full"
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: "full"
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: "full"
    })
  };
  var formatLong_default = formatLong;

  // node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P"
  };
  var formatRelative = function(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
  };
  var formatRelative_default = formatRelative;

  // node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
  function buildLocalizeFn(args) {
    return function(dirtyIndex, options2) {
      var context2 = options2 !== null && options2 !== void 0 && options2.context ? String(options2.context) : "standalone";
      var valuesArray;
      if (context2 === "formatting" && args.formattingValues) {
        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        var width = options2 !== null && options2 !== void 0 && options2.width ? String(options2.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        var _defaultWidth = args.defaultWidth;
        var _width = options2 !== null && options2 !== void 0 && options2.width ? String(options2.width) : args.defaultWidth;
        valuesArray = args.values[_width] || args.values[_defaultWidth];
      }
      var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
      return valuesArray[index2];
    };
  }

  // node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
  var eraValues = {
    narrow: ["B", "A"],
    abbreviated: ["BC", "AD"],
    wide: ["Before Christ", "Anno Domini"]
  };
  var quarterValues = {
    narrow: ["1", "2", "3", "4"],
    abbreviated: ["Q1", "Q2", "Q3", "Q4"],
    wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
  };
  var monthValues = {
    narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
    abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
  };
  var dayValues = {
    narrow: ["S", "M", "T", "W", "T", "F", "S"],
    short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
  };
  var dayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    }
  };
  var ordinalNumber = function(dirtyNumber, _options) {
    var number5 = Number(dirtyNumber);
    var rem100 = number5 % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number5 + "st";
        case 2:
          return number5 + "nd";
        case 3:
          return number5 + "rd";
      }
    }
    return number5 + "th";
  };
  var localize = {
    ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: "wide"
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: "wide",
      argumentCallback: function(quarter) {
        return quarter - 1;
      }
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: "wide"
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: "wide"
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: "wide",
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: "wide"
    })
  };
  var localize_default = localize;

  // node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
  function buildMatchFn(args) {
    return function(string2) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var width = options2.width;
      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      var matchResult = string2.match(matchPattern);
      if (!matchResult) {
        return null;
      }
      var matchedString = matchResult[0];
      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      }) : findKey(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
      var value2;
      value2 = args.valueCallback ? args.valueCallback(key) : key;
      value2 = options2.valueCallback ? options2.valueCallback(value2) : value2;
      var rest = string2.slice(matchedString.length);
      return {
        value: value2,
        rest
      };
    };
  }
  function findKey(object, predicate) {
    for (var key in object) {
      if (object.hasOwnProperty(key) && predicate(object[key])) {
        return key;
      }
    }
    return void 0;
  }
  function findIndex(array, predicate) {
    for (var key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
    return void 0;
  }

  // node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
  function buildMatchPatternFn(args) {
    return function(string2) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var matchResult = string2.match(args.matchPattern);
      if (!matchResult)
        return null;
      var matchedString = matchResult[0];
      var parseResult = string2.match(args.parsePattern);
      if (!parseResult)
        return null;
      var value2 = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value2 = options2.valueCallback ? options2.valueCallback(value2) : value2;
      var rest = string2.slice(matchedString.length);
      return {
        value: value2,
        rest
      };
    };
  }

  // node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: function(value2) {
        return parseInt(value2, 10);
      }
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseEraPatterns,
      defaultParseWidth: "any"
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: "any",
      valueCallback: function(index2) {
        return index2 + 1;
      }
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: "any"
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseDayPatterns,
      defaultParseWidth: "any"
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: "any",
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: "any"
    })
  };
  var match_default = match;

  // node_modules/date-fns/esm/locale/en-US/index.js
  var locale = {
    code: "en-US",
    formatDistance: formatDistance_default,
    formatLong: formatLong_default,
    formatRelative: formatRelative_default,
    localize: localize_default,
    match: match_default,
    options: {
      weekStartsOn: 0,
      firstWeekContainsDate: 1
    }
  };
  var en_US_default = locale;

  // node_modules/date-fns/esm/_lib/defaultLocale/index.js
  var defaultLocale_default = en_US_default;

  // node_modules/date-fns/esm/format/index.js
  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var escapedStringRegExp = /^'([^]*?)'?$/;
  var doubleQuoteRegExp = /''/g;
  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  function format(dirtyDate, dirtyFormatStr, options2) {
    var _ref3, _options$locale, _ref23, _ref32, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
    requiredArgs(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var defaultOptions2 = getDefaultOptions();
    var locale4 = (_ref3 = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref3 !== void 0 ? _ref3 : defaultLocale_default;
    var firstWeekContainsDate = toInteger((_ref23 = (_ref32 = (_ref4 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale2 = options2.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref32 !== void 0 ? _ref32 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref23 !== void 0 ? _ref23 : 1);
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    }
    var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale3 = options2.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    }
    if (!locale4.localize) {
      throw new RangeError("locale must contain localize property");
    }
    if (!locale4.formatLong) {
      throw new RangeError("locale must contain formatLong property");
    }
    var originalDate = toDate(dirtyDate);
    if (!isValid(originalDate)) {
      throw new RangeError("Invalid time value");
    }
    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
    var utcDate2 = subMilliseconds(originalDate, timezoneOffset);
    var formatterOptions = {
      firstWeekContainsDate,
      weekStartsOn,
      locale: locale4,
      _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
      var firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        var longFormatter = longFormatters_default[firstCharacter];
        return longFormatter(substring, locale4.formatLong);
      }
      return substring;
    }).join("").match(formattingTokensRegExp).map(function(substring) {
      if (substring === "''") {
        return "'";
      }
      var firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return cleanEscapedString(substring);
      }
      var formatter = formatters_default[firstCharacter];
      if (formatter) {
        if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
          throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
        }
        if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
          throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
        }
        return formatter(utcDate2, substring, locale4.localize, formatterOptions);
      }
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
      }
      return substring;
    }).join("");
    return result;
  }
  function cleanEscapedString(input) {
    var matched = input.match(escapedStringRegExp);
    if (!matched) {
      return input;
    }
    return matched[1].replace(doubleQuoteRegExp, "'");
  }

  // node_modules/date-fns/esm/_lib/assign/index.js
  function assign(target, object) {
    if (target == null) {
      throw new TypeError("assign requires that input parameter not be null or undefined");
    }
    for (var property in object) {
      if (Object.prototype.hasOwnProperty.call(object, property)) {
        ;
        target[property] = object[property];
      }
    }
    return target;
  }

  // node_modules/date-fns/esm/_lib/cloneObject/index.js
  function cloneObject(object) {
    return assign({}, object);
  }

  // node_modules/date-fns/esm/formatDistance/index.js
  var MINUTES_IN_DAY = 1440;
  var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
  var MINUTES_IN_MONTH = 43200;
  var MINUTES_IN_TWO_MONTHS = 86400;
  function formatDistance2(dirtyDate, dirtyBaseDate, options2) {
    var _ref3, _options$locale;
    requiredArgs(2, arguments);
    var defaultOptions2 = getDefaultOptions();
    var locale4 = (_ref3 = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref3 !== void 0 ? _ref3 : defaultLocale_default;
    if (!locale4.formatDistance) {
      throw new RangeError("locale must contain formatDistance property");
    }
    var comparison = compareAsc(dirtyDate, dirtyBaseDate);
    if (isNaN(comparison)) {
      throw new RangeError("Invalid time value");
    }
    var localizeOptions = assign(cloneObject(options2), {
      addSuffix: Boolean(options2 === null || options2 === void 0 ? void 0 : options2.addSuffix),
      comparison
    });
    var dateLeft;
    var dateRight;
    if (comparison > 0) {
      dateLeft = toDate(dirtyBaseDate);
      dateRight = toDate(dirtyDate);
    } else {
      dateLeft = toDate(dirtyDate);
      dateRight = toDate(dirtyBaseDate);
    }
    var seconds2 = differenceInSeconds(dateRight, dateLeft);
    var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
    var minutes2 = Math.round((seconds2 - offsetInSeconds) / 60);
    var months2;
    if (minutes2 < 2) {
      if (options2 !== null && options2 !== void 0 && options2.includeSeconds) {
        if (seconds2 < 5) {
          return locale4.formatDistance("lessThanXSeconds", 5, localizeOptions);
        } else if (seconds2 < 10) {
          return locale4.formatDistance("lessThanXSeconds", 10, localizeOptions);
        } else if (seconds2 < 20) {
          return locale4.formatDistance("lessThanXSeconds", 20, localizeOptions);
        } else if (seconds2 < 40) {
          return locale4.formatDistance("halfAMinute", 0, localizeOptions);
        } else if (seconds2 < 60) {
          return locale4.formatDistance("lessThanXMinutes", 1, localizeOptions);
        } else {
          return locale4.formatDistance("xMinutes", 1, localizeOptions);
        }
      } else {
        if (minutes2 === 0) {
          return locale4.formatDistance("lessThanXMinutes", 1, localizeOptions);
        } else {
          return locale4.formatDistance("xMinutes", minutes2, localizeOptions);
        }
      }
    } else if (minutes2 < 45) {
      return locale4.formatDistance("xMinutes", minutes2, localizeOptions);
    } else if (minutes2 < 90) {
      return locale4.formatDistance("aboutXHours", 1, localizeOptions);
    } else if (minutes2 < MINUTES_IN_DAY) {
      var hours2 = Math.round(minutes2 / 60);
      return locale4.formatDistance("aboutXHours", hours2, localizeOptions);
    } else if (minutes2 < MINUTES_IN_ALMOST_TWO_DAYS) {
      return locale4.formatDistance("xDays", 1, localizeOptions);
    } else if (minutes2 < MINUTES_IN_MONTH) {
      var days2 = Math.round(minutes2 / MINUTES_IN_DAY);
      return locale4.formatDistance("xDays", days2, localizeOptions);
    } else if (minutes2 < MINUTES_IN_TWO_MONTHS) {
      months2 = Math.round(minutes2 / MINUTES_IN_MONTH);
      return locale4.formatDistance("aboutXMonths", months2, localizeOptions);
    }
    months2 = differenceInMonths(dateRight, dateLeft);
    if (months2 < 12) {
      var nearestMonth = Math.round(minutes2 / MINUTES_IN_MONTH);
      return locale4.formatDistance("xMonths", nearestMonth, localizeOptions);
    } else {
      var monthsSinceStartOfYear = months2 % 12;
      var years2 = Math.floor(months2 / 12);
      if (monthsSinceStartOfYear < 3) {
        return locale4.formatDistance("aboutXYears", years2, localizeOptions);
      } else if (monthsSinceStartOfYear < 9) {
        return locale4.formatDistance("overXYears", years2, localizeOptions);
      } else {
        return locale4.formatDistance("almostXYears", years2 + 1, localizeOptions);
      }
    }
  }

  // node_modules/date-fns/esm/formatDistanceStrict/index.js
  var MILLISECONDS_IN_MINUTE = 1e3 * 60;
  var MINUTES_IN_DAY2 = 60 * 24;
  var MINUTES_IN_MONTH2 = MINUTES_IN_DAY2 * 30;
  var MINUTES_IN_YEAR = MINUTES_IN_DAY2 * 365;
  function formatDistanceStrict(dirtyDate, dirtyBaseDate, options2) {
    var _ref3, _options$locale, _options$roundingMeth;
    requiredArgs(2, arguments);
    var defaultOptions2 = getDefaultOptions();
    var locale4 = (_ref3 = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref3 !== void 0 ? _ref3 : defaultLocale_default;
    if (!locale4.formatDistance) {
      throw new RangeError("locale must contain localize.formatDistance property");
    }
    var comparison = compareAsc(dirtyDate, dirtyBaseDate);
    if (isNaN(comparison)) {
      throw new RangeError("Invalid time value");
    }
    var localizeOptions = assign(cloneObject(options2), {
      addSuffix: Boolean(options2 === null || options2 === void 0 ? void 0 : options2.addSuffix),
      comparison
    });
    var dateLeft;
    var dateRight;
    if (comparison > 0) {
      dateLeft = toDate(dirtyBaseDate);
      dateRight = toDate(dirtyDate);
    } else {
      dateLeft = toDate(dirtyDate);
      dateRight = toDate(dirtyBaseDate);
    }
    var roundingMethod = String((_options$roundingMeth = options2 === null || options2 === void 0 ? void 0 : options2.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : "round");
    var roundingMethodFn;
    if (roundingMethod === "floor") {
      roundingMethodFn = Math.floor;
    } else if (roundingMethod === "ceil") {
      roundingMethodFn = Math.ceil;
    } else if (roundingMethod === "round") {
      roundingMethodFn = Math.round;
    } else {
      throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");
    }
    var milliseconds2 = dateRight.getTime() - dateLeft.getTime();
    var minutes2 = milliseconds2 / MILLISECONDS_IN_MINUTE;
    var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft);
    var dstNormalizedMinutes = (milliseconds2 - timezoneOffset) / MILLISECONDS_IN_MINUTE;
    var defaultUnit = options2 === null || options2 === void 0 ? void 0 : options2.unit;
    var unit2;
    if (!defaultUnit) {
      if (minutes2 < 1) {
        unit2 = "second";
      } else if (minutes2 < 60) {
        unit2 = "minute";
      } else if (minutes2 < MINUTES_IN_DAY2) {
        unit2 = "hour";
      } else if (dstNormalizedMinutes < MINUTES_IN_MONTH2) {
        unit2 = "day";
      } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {
        unit2 = "month";
      } else {
        unit2 = "year";
      }
    } else {
      unit2 = String(defaultUnit);
    }
    if (unit2 === "second") {
      var seconds2 = roundingMethodFn(milliseconds2 / 1e3);
      return locale4.formatDistance("xSeconds", seconds2, localizeOptions);
    } else if (unit2 === "minute") {
      var roundedMinutes = roundingMethodFn(minutes2);
      return locale4.formatDistance("xMinutes", roundedMinutes, localizeOptions);
    } else if (unit2 === "hour") {
      var hours2 = roundingMethodFn(minutes2 / 60);
      return locale4.formatDistance("xHours", hours2, localizeOptions);
    } else if (unit2 === "day") {
      var days2 = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY2);
      return locale4.formatDistance("xDays", days2, localizeOptions);
    } else if (unit2 === "month") {
      var months2 = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH2);
      return months2 === 12 && defaultUnit !== "month" ? locale4.formatDistance("xYears", 1, localizeOptions) : locale4.formatDistance("xMonths", months2, localizeOptions);
    } else if (unit2 === "year") {
      var years2 = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);
      return locale4.formatDistance("xYears", years2, localizeOptions);
    }
    throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'");
  }

  // node_modules/date-fns/esm/formatDistanceToNow/index.js
  function formatDistanceToNow(dirtyDate, options2) {
    requiredArgs(1, arguments);
    return formatDistance2(dirtyDate, Date.now(), options2);
  }

  // node_modules/date-fns/esm/formatDuration/index.js
  var defaultFormat = ["years", "months", "weeks", "days", "hours", "minutes", "seconds"];
  function formatDuration(duration, options2) {
    var _ref3, _options$locale, _options$format, _options$zero, _options$delimiter;
    if (arguments.length < 1) {
      throw new TypeError("1 argument required, but only ".concat(arguments.length, " present"));
    }
    var defaultOptions2 = getDefaultOptions();
    var locale4 = (_ref3 = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref3 !== void 0 ? _ref3 : defaultLocale_default;
    var format3 = (_options$format = options2 === null || options2 === void 0 ? void 0 : options2.format) !== null && _options$format !== void 0 ? _options$format : defaultFormat;
    var zero3 = (_options$zero = options2 === null || options2 === void 0 ? void 0 : options2.zero) !== null && _options$zero !== void 0 ? _options$zero : false;
    var delimiter = (_options$delimiter = options2 === null || options2 === void 0 ? void 0 : options2.delimiter) !== null && _options$delimiter !== void 0 ? _options$delimiter : " ";
    if (!locale4.formatDistance) {
      return "";
    }
    var result = format3.reduce(function(acc, unit2) {
      var token = "x".concat(unit2.replace(/(^.)/, function(m3) {
        return m3.toUpperCase();
      }));
      var value2 = duration[unit2];
      if (typeof value2 === "number" && (zero3 || duration[unit2])) {
        return acc.concat(locale4.formatDistance(token, value2));
      }
      return acc;
    }, []).join(delimiter);
    return result;
  }

  // src/chat.ts
  var ChatEvent = class extends EventTarget {
    emit(data) {
      this.dispatchEvent(new CustomEvent("chat", { detail: data }));
    }
  };
  var chatEmitter = new ChatEvent();
  function useChatEvents(paused, winners, onChat) {
    const [chat, setChat] = (0, import_react6.useState)([]);
    (0, import_react6.useEffect)(() => {
      function handleChat(d3) {
        onChat(d3.detail);
        if (paused && !winners.some((w2) => w2.username === d3.detail.username))
          return;
        setChat((c3) => c3.concat(d3.detail));
      }
      chatEmitter.addEventListener("chat", handleChat);
      return () => {
        chatEmitter.removeEventListener("chat", handleChat);
      };
    }, [setChat, onChat, paused, winners]);
    const resetChat = (0, import_react6.useCallback)(() => {
      setChat([]);
    }, [setChat]);
    return [chat, resetChat];
  }
  function init3(channelInfo) {
    const opts = {
      channels: [channelInfo.login],
      identity: {
        username: channelInfo.login,
        password: `oauth:${channelInfo.token}`
      },
      options: {
        updateEmotesetsTimer: 0,
        skipUpdatingEmotesets: true
      }
    };
    const client = new import_tmi.default.client(opts);
    if (client.lastJoined)
      client.disconnect();
    function onMessageHandler(target, context2, msg, self2) {
      if (self2) {
        return;
      }
      const tmiTs = Number(context2["tmi-sent-ts"]);
      const data = {
        id: context2.id,
        color: context2.color,
        displayName: context2["display-name"],
        isSubscriber: context2.subscriber,
        turbo: context2.turbo,
        username: context2.username,
        type: context2["message-type"],
        msg,
        returningChatter: context2["returning-chatter"],
        firstMessage: context2["first-msg"],
        isMod: context2["mod"],
        userId: context2["user-id"],
        tmiTs,
        receivedTs: Date.now(),
        formattedTmiTs: format(new Date(tmiTs), "HH:mm:ss")
      };
      chatEmitter.emit(data);
    }
    function onConnectedHandler(addr, port) {
      try {
        Et.success("Connected to chat!", {
          position: "bottom-center",
          style: { fontSize: "0.9rem", padding: "0.2rem" }
        });
      } catch (e3) {
        console.error("[error]", e3);
      }
      console.log(`* Connected to ${addr}:${port}`);
    }
    client.on("message", onMessageHandler);
    client.on("connected", onConnectedHandler);
    client.on("timeout", () => {
      console.info("[timeout]");
    });
    client.connect();
    return client;
  }

  // src/components/hooks/useStorage.ts
  var import_react7 = __toModule(require_react());
  function useStorage(key, initialValue, onInit) {
    const serialize = JSON.stringify;
    const deserialize = JSON.parse;
    const [state, setState] = (0, import_react7.useState)(initialValue);
    const [syncedState, setSyncedState] = (0, import_react7.useState)(state);
    const [initialised, setInitialised] = (0, import_react7.useState)(false);
    const getKey = (0, import_react7.useCallback)((key2) => {
      return `main-${key2}`;
    }, []);
    (0, import_react7.useEffect)(() => {
      const value2 = state;
      (async () => {
        if (syncedState === value2)
          return;
        try {
          console.info("[storage:set]", getKey(key), value2);
          await Neutralino.storage.setData(getKey(key), serialize(value2));
          setSyncedState(value2);
        } catch (e3) {
          console.warn("[storage:error]", e3);
        }
      })();
    }, [state, getKey]);
    (0, import_react7.useEffect)(() => {
      ;
      (async () => {
        let value2 = initialValue;
        try {
          try {
            value2 = deserialize(await Neutralino.storage.getData(getKey(key)));
          } catch (e3) {
            console.warn("[storage:warn]", e3);
          }
          setState(value2);
          console.info("[storage:loaded]", getKey(key), value2);
          try {
            await Neutralino.storage.setData(getKey(key), serialize(value2));
          } catch (e3) {
            console.warn("[storage:warn]", e3);
          }
        } finally {
          if (onInit)
            onInit(value2);
          setInitialised(true);
        }
      })();
    }, [key, getKey]);
    return [state, setState, initialised];
  }

  // src/components/screens/Main.tsx
  var import_react47 = __toModule(require_react());

  // src/utils/types.ts
  var AlertTheme;
  (function(AlertTheme2) {
    AlertTheme2["GW2"] = "gw2";
    AlertTheme2["Custom"] = "custom";
  })(AlertTheme || (AlertTheme = {}));
  var GiveawayType;
  (function(GiveawayType2) {
    GiveawayType2["Instant"] = "Instant";
    GiveawayType2["Chat"] = "Chat";
  })(GiveawayType || (GiveawayType = {}));

  // src/utils/misc.ts
  var ONE_MIN = 1e3 * 60;
  function removeIdx(ar, idx) {
    return ar.slice(0, idx).concat(ar.slice(idx + 1));
  }
  var wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
  function getRandomArrayItem(items) {
    return items[Math.floor(Math.random() * items.length)];
  }
  var specialCommands = {
    $gw2_account$: /(^|\s)\w+\.\d{4}($|\s)/,
    $steam_friend$: /(^|\s)\d{8}($|\s)/,
    $gw2_or_steam$: /(^|\s)(\w+\.\d{4}|\d{8})($|\s)/,
    $gw2_steam_paypal$: /(^|\s)(\w+\.\d{4}|\d{8}|paypal)($|\s)/
  };
  var specialCommandsForCombination = {
    $gw2_account$: "\\w+\\.\\d{4}",
    $steam_friend$: "\\d{8}",
    $gw2_or_steam$: "\\w+\\.\\d{4}|\\d{8}",
    $gw2_steam_paypal$: "\\w+\\.\\d{4}|\\d{8}|paypal"
  };
  function escapeRegExp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  function handleChatCommand(chatItem, command) {
    var _a;
    const cleanCommand = command.trim();
    let translatedCommand = specialCommands[cleanCommand] || cleanCommand;
    const matchingCommand = Object.keys(specialCommandsForCombination).some((k3) => cleanCommand.includes(k3) && cleanCommand !== k3);
    if (matchingCommand) {
      const tranformedCommand = new RegExp(cleanCommand.split(" ").map((c3) => specialCommandsForCombination[c3] || escapeRegExp(c3)).join(" "), "i");
      translatedCommand = tranformedCommand;
    }
    if (typeof translatedCommand === "string") {
      return {
        isMatch: translatedCommand ? chatItem.msg.toLowerCase().includes(translatedCommand.toLowerCase()) : true,
        isSpecial: false,
        match: translatedCommand || ""
      };
    } else {
      const match2 = chatItem.msg.match(translatedCommand);
      return { isMatch: match2 !== null, isSpecial: true, match: match2 ? (_a = match2[0]) == null ? void 0 : _a.trim() : "" };
    }
  }
  var defaultSettings = {
    autoConnect: true,
    subLuck: 2,
    numberOfWinners: 1,
    followersOnly: true,
    chatCommand: "",
    winnerMessage: "PartyHat @name won!",
    sendMessages: false,
    blocklist: [
      "streamelements",
      "streamlabs",
      "nightbot",
      "sery_bot",
      "soundalerts",
      "pretzelrocks",
      "fossabot",
      "moobot"
    ],
    autoScroll: true,
    spamLimit: 1,
    performanceMode: false,
    forfeitCommand: "",
    alertDuration: 4e3,
    alertTheme: AlertTheme.GW2,
    autoAnnounce: true,
    giveawayName: "",
    timerBell: false,
    timerDuration: ONE_MIN,
    alertCustomImageUrl: "",
    timerAlertHidden: false
  };
  var defaultDiscordSettings = {
    guildId: "",
    channelId: "",
    messageColour: "",
    startTitle: "",
    startBody: "",
    startEnabled: true,
    endTitle: "",
    endBody: "",
    endEnabled: true,
    winnerTitle: "",
    winnerBody: "",
    winnerEnabled: true,
    giveawayMinTime: ONE_MIN
  };
  var alertThemeMap = {
    [AlertTheme.GW2]: "Guild Wars 2",
    [AlertTheme.Custom]: "Custom"
  };
  var alertOptions = Object.entries(alertThemeMap).map(([k3, v2]) => {
    return { value: k3, label: v2 };
  }).filter((i3) => Boolean(i3.label));
  function getDiscordColour(discordColour) {
    const colour = Number(`0x${discordColour == null ? void 0 : discordColour.replace("#", "")}`);
    return isNaN(colour) ? void 0 : colour;
  }

  // src/utils/auth.ts
  var import_react8 = __toModule(require_react());
  var AuthEvent = class extends EventTarget {
    emit(type, channelInfo) {
      this.dispatchEvent(new CustomEvent(type, { detail: channelInfo }));
    }
  };
  var authEmitter = new AuthEvent();
  function useAuthEvents(onRefresh) {
    (0, import_react8.useEffect)(() => {
      function handler(e3) {
        onRefresh(e3.detail);
      }
      authEmitter.addEventListener("refresh", handler);
      return () => authEmitter.removeEventListener("refresh", handler);
    }, [authEmitter, onRefresh]);
  }
  async function validateToken(token, refreshToken, isRefreshValidate = false) {
    try {
      const res = await fetch(`https://id.twitch.tv/oauth2/validate`, {
        headers: {
          Authorization: `OAuth ${token}`
        }
      });
      if (res.status === 401 && !isRefreshValidate) {
        console.warn("[validate][refresh]");
        return refreshTokenFlow(refreshToken);
      }
      const data = await res.json();
      console.info("[validate]", data, token, refreshToken);
      return {
        token,
        refreshToken,
        clientId: data.client_id,
        login: data.login,
        userId: data.user_id
      };
    } catch (e3) {
      console.info("[validate][error]", e3);
      return null;
    }
  }
  async function refreshTokenFlow(refreshToken) {
    console.info("[refreshTokenFlow]", refreshToken);
    const channelInfo = await JSON.parse(await Neutralino.storage.getData("main-channelinfo"));
    const details = {
      client_id: channelInfo.clientId || atob(globalThis.NL_TID),
      client_secret: atob(globalThis.NL_TS),
      grant_type: "refresh_token",
      refresh_token: refreshToken
    };
    const formBody = [];
    for (let property in details) {
      const encodedKey = encodeURIComponent(property);
      const encodedValue = encodeURIComponent(details[property]);
      formBody.push(`${encodedKey}=${encodedValue}`);
    }
    const body = formBody.join("&");
    const res = await fetch(`https://id.twitch.tv/oauth2/token`, {
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      method: "POST",
      body
    });
    if (res.status === 403) {
      console.error("[refresh][error]");
      throw Error("Refresh token failed");
    }
    const data = await res.json();
    await Neutralino.storage.setData("main-channelinfo", JSON.stringify(__spreadProps(__spreadValues({}, channelInfo), { token: data.access_token, refreshToken: data.refresh_token })));
    const validated = await validateToken(data.access_token, data.refresh_token);
    if (validated)
      authEmitter.emit("refresh", __spreadProps(__spreadValues({}, validated), { refreshToken: data.refresh_token }));
    return validated;
  }

  // src/utils/twitchCaches.ts
  var CACHE_KEY;
  (function(CACHE_KEY2) {
    CACHE_KEY2["dumbfollows"] = "dumbfollows";
    CACHE_KEY2["dumbsubs"] = "dumbsubs";
  })(CACHE_KEY || (CACHE_KEY = {}));
  var Cache = class {
    constructor(channel, key) {
      this.get = async function get2() {
        try {
          return new Map(JSON.parse(await Neutralino.storage.getData(this.key)));
        } catch (e3) {
          console.info("[CACHE][ERROR]", this.key, e3);
          return new Map();
        }
      };
      this.store = async function store(data) {
        await Neutralino.storage.setData(this.key, JSON.stringify([...data]));
      };
      this.key = `${channel}-${key}`;
    }
  };
  async function watch() {
    const interval = setInterval(async () => {
      console.info("[twitchCache][check]");
      const info = await Neutralino.storage.getData("main-channelInfo");
      if (info) {
        const channelInfo = JSON.parse(info);
        if (!channelInfo.login)
          return;
        await validateToken(channelInfo.token, channelInfo.refreshToken);
        const freshInfo = await Neutralino.storage.getData("main-channelInfo");
        const freshChannelInfo = JSON.parse(freshInfo);
        clearInterval(interval);
        startPollingData(freshChannelInfo, true);
      }
    }, 2e3);
  }
  async function startPollingData(channelInfo, first = false) {
    await Promise.all([getFollowers(channelInfo), getSubs(channelInfo)]);
    Et.success(`${first ? "Loaded initial data, ready" : "Updated"}!`, {
      position: "bottom-right",
      style: { fontSize: "0.8rem", padding: "0.2rem" },
      duration: 3e3
    });
    console.info("[poll][done]");
    await wait(6e4 * 3);
    await startPollingData(channelInfo);
  }

  // src/utils/twitch.ts
  var import_react9 = __toModule(require_react());
  var BOTS = ["streamelements", "streamlabs", "nightbot"];
  var CacheEvents = class extends EventTarget {
    emit(data) {
      this.dispatchEvent(new CustomEvent("update", { detail: data }));
    }
  };
  var cacheEmitter = new CacheEvents();
  function useCacheStats() {
    const [stats, setStats] = import_react9.default.useState({
      followers: { count: 0, total: 0, status: "inprogress", lastUpdated: null },
      subs: { count: 0, total: 0, status: "inprogress", lastUpdated: null }
    });
    import_react9.default.useEffect(() => {
      function handle(e3) {
        const data = e3.detail;
        console.info("[cache:event]", data);
        setStats((s3) => __spreadProps(__spreadValues({}, s3), {
          [data.type]: {
            count: data.count,
            total: data.total,
            status: data.status,
            lastUpdated: data.status !== "done" ? s3[data.type].lastUpdated : data.lastUpdated
          }
        }));
      }
      cacheEmitter.addEventListener("update", handle);
      return () => {
        cacheEmitter.removeEventListener("update", handle);
      };
    }, [setStats]);
    return stats;
  }
  function useCacheHistory(stats) {
    const [followerHistory, setFollowerHistory] = useStorage("followershistory", []);
    const [subsHistory, setSubsHistory] = useStorage("subshistory", []);
    import_react9.default.useEffect(() => {
      if (!stats.followers.lastUpdated)
        return;
      const ts = new Date();
      setFollowerHistory((h2) => h2.concat({
        count: stats.followers.count || 0,
        time: format(ts, "hh:mm"),
        fullTime: format(ts, "dd/MM hh:mm"),
        name: ts.toISOString()
      }));
    }, [stats.followers.lastUpdated]);
    import_react9.default.useEffect(() => {
      if (!stats.subs.lastUpdated)
        return;
      const ts = new Date();
      setSubsHistory((h2) => h2.concat({
        count: stats.subs.count || 0,
        time: format(ts, "hh:mm"),
        fullTime: format(ts, "dd/MM hh:mm"),
        name: ts.toISOString()
      }));
    }, [stats.subs.lastUpdated]);
    return { followers: followerHistory, subs: subsHistory };
  }
  async function callTwitchApi(channelInfo, path2, isRefresh = false) {
    const res = await fetch(`https://api.twitch.tv/helix/${path2}`, {
      headers: {
        Authorization: `Bearer ${channelInfo.token}`,
        "Client-ID": `${channelInfo.clientId}`
      }
    });
    if (res.status === 401 && !isRefresh) {
      console.error("[callTwitchApi][401]");
      const data = await res.json();
      if (data.message.includes("scope")) {
        throw new Error(data.message);
      } else {
        const newwInfo = await refreshTokenFlow(channelInfo.refreshToken);
        return callTwitchApi(newwInfo, path2, true);
      }
    }
    return res;
  }
  async function getViewers(channelInfo) {
    return fetch(`https://discord-slash-commands.vercel.app/api/twitch-chatters?channel=${channelInfo.login}`).then((res) => res.json()).then((d3) => d3.chatters.viewers.concat(d3.chatters.moderators).concat(d3.chatters.vips).concat(d3.chatters.admins).concat(d3.chatters.staff).concat(d3.chatters.global_mods).filter((n3) => !BOTS.includes(n3)));
  }
  var dumbFollowersCache = new Map();
  async function getFollowers(channelInfo) {
    return genericCacher("followers", CACHE_KEY.dumbfollows, channelInfo, "users/follows?to_id=", dumbFollowersCache, (i3) => ({ id: i3.from_id, login: i3.from_login }));
  }
  var dumbSubscriberCache = new Map();
  async function getSubs(channelInfo) {
    return genericCacher("subs", CACHE_KEY.dumbsubs, channelInfo, "subscriptions?broadcaster_id=", dumbSubscriberCache, (i3) => ({ id: i3.user_id, login: i3.user_login }));
  }
  var initialized = {
    followers: false,
    subs: false
  };
  async function genericCacher(type, cacheKey, channelInfo, path2, dumbCache, mapResult) {
    const wasInitialized = !!initialized[type];
    const shouldToast = dumbCache.size === 0 && !initialized[type];
    initialized[type] = true;
    let total = 0;
    try {
      let cursor = "";
      let cache3 = new Cache(channelInfo.login, cacheKey);
      const existingCache = await cache3.get();
      if (dumbCache.size === 0) {
        console.info(`[${type}][existing]`, existingCache.size);
        dumbCache = new Map([...existingCache]);
      }
      if (shouldToast) {
        Et.success(`Loading ${type}...`, {
          position: "bottom-right",
          style: { fontSize: "0.8rem", padding: "0.2rem" }
        });
      }
      do {
        const data = await callTwitchApi(channelInfo, `${path2}${channelInfo.userId}&first=100&after=${cursor}`).then((r) => r.json());
        if (!Array.isArray(data.data)) {
          console.info(`[${type}][expected-data]`, data);
          throw new Error("Unexpected API data");
        }
        const chunk = data.data.map(mapResult);
        const chunkInCachePercent = chunk.filter((i3) => dumbCache.has(i3.id) || dumbCache.has(i3.login)).length / chunk.length;
        const originalActualSize = dumbCache.size / 2;
        chunk.forEach((c3) => {
          dumbCache.set(c3.id, c3.login);
          dumbCache.set(c3.login, c3.id);
        });
        await cache3.store(dumbCache);
        const actualSize = dumbCache.size / 2;
        const foundSeenPages = chunkInCachePercent > 0.5;
        const rightTotalish = actualSize >= data.total;
        if (foundSeenPages && !wasInitialized && rightTotalish || foundSeenPages && wasInitialized) {
          console.info(`[${type}]`, "[caught-up]", { chunkInCachePercent, newItems: data.total - originalActualSize });
          break;
        }
        if (cursor === data.pagination.cursor) {
          throw Error("This is nonsense");
        }
        cursor = data.pagination.cursor;
        total = data.total;
        cacheEmitter.emit({
          type,
          total,
          count: Math.floor(dumbCache.size / 2),
          status: "inprogress",
          lastUpdated: new Date()
        });
        if (cursor)
          await wait(100);
      } while (cursor);
      if (shouldToast)
        Et.success(`Loaded ${type}!`, {
          position: "bottom-right",
          style: { fontSize: "0.8rem", padding: "0.2rem" }
        });
      cacheEmitter.emit({ type, total, count: Math.floor(dumbCache.size / 2), status: "done", lastUpdated: new Date() });
      return dumbCache;
    } catch (e3) {
      console.error(`[${type}]`, e3);
      cacheEmitter.emit({ type, total, count: Math.floor(dumbCache.size / 2), status: "error", lastUpdated: new Date() });
      if (shouldToast)
        Et.error(`Failed to load ${type}!`, {
          position: "bottom-right",
          style: { fontSize: "0.8rem", padding: "0.2rem" }
        });
      return dumbCache;
    }
  }

  // node_modules/engine.io-parser/build/esm/commons.js
  var PACKET_TYPES = Object.create(null);
  PACKET_TYPES["open"] = "0";
  PACKET_TYPES["close"] = "1";
  PACKET_TYPES["ping"] = "2";
  PACKET_TYPES["pong"] = "3";
  PACKET_TYPES["message"] = "4";
  PACKET_TYPES["upgrade"] = "5";
  PACKET_TYPES["noop"] = "6";
  var PACKET_TYPES_REVERSE = Object.create(null);
  Object.keys(PACKET_TYPES).forEach((key) => {
    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
  });
  var ERROR_PACKET = { type: "error", data: "parser error" };

  // node_modules/engine.io-parser/build/esm/encodePacket.browser.js
  var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
  var withNativeArrayBuffer = typeof ArrayBuffer === "function";
  var isView = (obj) => {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
  };
  var encodePacket = ({ type, data }, supportsBinary, callback) => {
    if (withNativeBlob && data instanceof Blob) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(data, callback);
      }
    } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(new Blob([data]), callback);
      }
    }
    return callback(PACKET_TYPES[type] + (data || ""));
  };
  var encodeBlobAsBase64 = (data, callback) => {
    const fileReader = new FileReader();
    fileReader.onload = function() {
      const content = fileReader.result.split(",")[1];
      callback("b" + content);
    };
    return fileReader.readAsDataURL(data);
  };
  var encodePacket_browser_default = encodePacket;

  // node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
  for (let i3 = 0; i3 < chars.length; i3++) {
    lookup[chars.charCodeAt(i3)] = i3;
  }
  var decode = (base64) => {
    let bufferLength = base64.length * 0.75, len = base64.length, i3, p2 = 0, encoded1, encoded2, encoded3, encoded4;
    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }
    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
    for (i3 = 0; i3 < len; i3 += 4) {
      encoded1 = lookup[base64.charCodeAt(i3)];
      encoded2 = lookup[base64.charCodeAt(i3 + 1)];
      encoded3 = lookup[base64.charCodeAt(i3 + 2)];
      encoded4 = lookup[base64.charCodeAt(i3 + 3)];
      bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  };

  // node_modules/engine.io-parser/build/esm/decodePacket.browser.js
  var withNativeArrayBuffer2 = typeof ArrayBuffer === "function";
  var decodePacket = (encodedPacket, binaryType) => {
    if (typeof encodedPacket !== "string") {
      return {
        type: "message",
        data: mapBinary(encodedPacket, binaryType)
      };
    }
    const type = encodedPacket.charAt(0);
    if (type === "b") {
      return {
        type: "message",
        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
      };
    }
    const packetType = PACKET_TYPES_REVERSE[type];
    if (!packetType) {
      return ERROR_PACKET;
    }
    return encodedPacket.length > 1 ? {
      type: PACKET_TYPES_REVERSE[type],
      data: encodedPacket.substring(1)
    } : {
      type: PACKET_TYPES_REVERSE[type]
    };
  };
  var decodeBase64Packet = (data, binaryType) => {
    if (withNativeArrayBuffer2) {
      const decoded = decode(data);
      return mapBinary(decoded, binaryType);
    } else {
      return { base64: true, data };
    }
  };
  var mapBinary = (data, binaryType) => {
    switch (binaryType) {
      case "blob":
        return data instanceof ArrayBuffer ? new Blob([data]) : data;
      case "arraybuffer":
      default:
        return data;
    }
  };
  var decodePacket_browser_default = decodePacket;

  // node_modules/engine.io-parser/build/esm/index.js
  var SEPARATOR = String.fromCharCode(30);
  var encodePayload = (packets, callback) => {
    const length2 = packets.length;
    const encodedPackets = new Array(length2);
    let count = 0;
    packets.forEach((packet, i3) => {
      encodePacket_browser_default(packet, false, (encodedPacket) => {
        encodedPackets[i3] = encodedPacket;
        if (++count === length2) {
          callback(encodedPackets.join(SEPARATOR));
        }
      });
    });
  };
  var decodePayload = (encodedPayload, binaryType) => {
    const encodedPackets = encodedPayload.split(SEPARATOR);
    const packets = [];
    for (let i3 = 0; i3 < encodedPackets.length; i3++) {
      const decodedPacket = decodePacket_browser_default(encodedPackets[i3], binaryType);
      packets.push(decodedPacket);
      if (decodedPacket.type === "error") {
        break;
      }
    }
    return packets;
  };
  var protocol = 4;

  // node_modules/@socket.io/component-emitter/index.mjs
  function Emitter(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }
  Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
    return this;
  };
  Emitter.prototype.once = function(event, fn) {
    function on2() {
      this.off(event, on2);
      fn.apply(this, arguments);
    }
    on2.fn = fn;
    this.on(event, on2);
    return this;
  };
  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    if (arguments.length == 0) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event];
    if (!callbacks)
      return this;
    if (arguments.length == 1) {
      delete this._callbacks["$" + event];
      return this;
    }
    var cb;
    for (var i3 = 0; i3 < callbacks.length; i3++) {
      cb = callbacks[i3];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i3, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event];
    }
    return this;
  };
  Emitter.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for (var i3 = 1; i3 < arguments.length; i3++) {
      args[i3 - 1] = arguments[i3];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i3 = 0, len = callbacks.length; i3 < len; ++i3) {
        callbacks[i3].apply(this, args);
      }
    }
    return this;
  };
  Emitter.prototype.emitReserved = Emitter.prototype.emit;
  Emitter.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
  };
  Emitter.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
  };

  // node_modules/engine.io-client/build/esm/globalThis.browser.js
  var globalThisShim = (() => {
    if (typeof self !== "undefined") {
      return self;
    } else if (typeof window !== "undefined") {
      return window;
    } else {
      return Function("return this")();
    }
  })();

  // node_modules/engine.io-client/build/esm/util.js
  function pick(obj, ...attr) {
    return attr.reduce((acc, k3) => {
      if (obj.hasOwnProperty(k3)) {
        acc[k3] = obj[k3];
      }
      return acc;
    }, {});
  }
  var NATIVE_SET_TIMEOUT = setTimeout;
  var NATIVE_CLEAR_TIMEOUT = clearTimeout;
  function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
    } else {
      obj.setTimeoutFn = setTimeout.bind(globalThisShim);
      obj.clearTimeoutFn = clearTimeout.bind(globalThisShim);
    }
  }
  var BASE64_OVERHEAD = 1.33;
  function byteLength(obj) {
    if (typeof obj === "string") {
      return utf8Length2(obj);
    }
    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
  }
  function utf8Length2(str) {
    let c3 = 0, length2 = 0;
    for (let i3 = 0, l2 = str.length; i3 < l2; i3++) {
      c3 = str.charCodeAt(i3);
      if (c3 < 128) {
        length2 += 1;
      } else if (c3 < 2048) {
        length2 += 2;
      } else if (c3 < 55296 || c3 >= 57344) {
        length2 += 3;
      } else {
        i3++;
        length2 += 4;
      }
    }
    return length2;
  }

  // node_modules/engine.io-client/build/esm/transport.js
  var TransportError = class extends Error {
    constructor(reason, description, context2) {
      super(reason);
      this.description = description;
      this.context = context2;
      this.type = "TransportError";
    }
  };
  var Transport = class extends Emitter {
    constructor(opts) {
      super();
      this.writable = false;
      installTimerFunctions(this, opts);
      this.opts = opts;
      this.query = opts.query;
      this.readyState = "";
      this.socket = opts.socket;
    }
    onError(reason, description, context2) {
      super.emitReserved("error", new TransportError(reason, description, context2));
      return this;
    }
    open() {
      if (this.readyState === "closed" || this.readyState === "") {
        this.readyState = "opening";
        this.doOpen();
      }
      return this;
    }
    close() {
      if (this.readyState === "opening" || this.readyState === "open") {
        this.doClose();
        this.onClose();
      }
      return this;
    }
    send(packets) {
      if (this.readyState === "open") {
        this.write(packets);
      } else {
      }
    }
    onOpen() {
      this.readyState = "open";
      this.writable = true;
      super.emitReserved("open");
    }
    onData(data) {
      const packet = decodePacket_browser_default(data, this.socket.binaryType);
      this.onPacket(packet);
    }
    onPacket(packet) {
      super.emitReserved("packet", packet);
    }
    onClose(details) {
      this.readyState = "closed";
      super.emitReserved("close", details);
    }
  };

  // node_modules/engine.io-client/build/esm/contrib/yeast.js
  "use strict";
  var alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split("");
  var length = 64;
  var map = {};
  var seed = 0;
  var i2 = 0;
  var prev;
  function encode(num) {
    let encoded = "";
    do {
      encoded = alphabet[num % length] + encoded;
      num = Math.floor(num / length);
    } while (num > 0);
    return encoded;
  }
  function yeast() {
    const now2 = encode(+new Date());
    if (now2 !== prev)
      return seed = 0, prev = now2;
    return now2 + "." + encode(seed++);
  }
  for (; i2 < length; i2++)
    map[alphabet[i2]] = i2;

  // node_modules/engine.io-client/build/esm/contrib/parseqs.js
  function encode2(obj) {
    let str = "";
    for (let i3 in obj) {
      if (obj.hasOwnProperty(i3)) {
        if (str.length)
          str += "&";
        str += encodeURIComponent(i3) + "=" + encodeURIComponent(obj[i3]);
      }
    }
    return str;
  }
  function decode2(qs) {
    let qry = {};
    let pairs = qs.split("&");
    for (let i3 = 0, l2 = pairs.length; i3 < l2; i3++) {
      let pair = pairs[i3].split("=");
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  }

  // node_modules/engine.io-client/build/esm/contrib/has-cors.js
  var value = false;
  try {
    value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
  } catch (err) {
  }
  var hasCORS = value;

  // node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js
  function XHR(opts) {
    const xdomain = opts.xdomain;
    try {
      if (typeof XMLHttpRequest !== "undefined" && (!xdomain || hasCORS)) {
        return new XMLHttpRequest();
      }
    } catch (e3) {
    }
    if (!xdomain) {
      try {
        return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
      } catch (e3) {
      }
    }
  }

  // node_modules/engine.io-client/build/esm/transports/polling.js
  function empty() {
  }
  var hasXHR2 = function() {
    const xhr = new XHR({
      xdomain: false
    });
    return xhr.responseType != null;
  }();
  var Polling = class extends Transport {
    constructor(opts) {
      super(opts);
      this.polling = false;
      if (typeof location !== "undefined") {
        const isSSL = location.protocol === "https:";
        let port = location.port;
        if (!port) {
          port = isSSL ? "443" : "80";
        }
        this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
        this.xs = opts.secure !== isSSL;
      }
      const forceBase64 = opts && opts.forceBase64;
      this.supportsBinary = hasXHR2 && !forceBase64;
    }
    get name() {
      return "polling";
    }
    doOpen() {
      this.poll();
    }
    pause(onPause) {
      this.readyState = "pausing";
      const pause = () => {
        this.readyState = "paused";
        onPause();
      };
      if (this.polling || !this.writable) {
        let total = 0;
        if (this.polling) {
          total++;
          this.once("pollComplete", function() {
            --total || pause();
          });
        }
        if (!this.writable) {
          total++;
          this.once("drain", function() {
            --total || pause();
          });
        }
      } else {
        pause();
      }
    }
    poll() {
      this.polling = true;
      this.doPoll();
      this.emitReserved("poll");
    }
    onData(data) {
      const callback = (packet) => {
        if (this.readyState === "opening" && packet.type === "open") {
          this.onOpen();
        }
        if (packet.type === "close") {
          this.onClose({ description: "transport closed by the server" });
          return false;
        }
        this.onPacket(packet);
      };
      decodePayload(data, this.socket.binaryType).forEach(callback);
      if (this.readyState !== "closed") {
        this.polling = false;
        this.emitReserved("pollComplete");
        if (this.readyState === "open") {
          this.poll();
        } else {
        }
      }
    }
    doClose() {
      const close2 = () => {
        this.write([{ type: "close" }]);
      };
      if (this.readyState === "open") {
        close2();
      } else {
        this.once("open", close2);
      }
    }
    write(packets) {
      this.writable = false;
      encodePayload(packets, (data) => {
        this.doWrite(data, () => {
          this.writable = true;
          this.emitReserved("drain");
        });
      });
    }
    uri() {
      let query = this.query || {};
      const schema = this.opts.secure ? "https" : "http";
      let port = "";
      if (this.opts.timestampRequests !== false) {
        query[this.opts.timestampParam] = yeast();
      }
      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }
      if (this.opts.port && (schema === "https" && Number(this.opts.port) !== 443 || schema === "http" && Number(this.opts.port) !== 80)) {
        port = ":" + this.opts.port;
      }
      const encodedQuery = encode2(query);
      const ipv6 = this.opts.hostname.indexOf(":") !== -1;
      return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
    }
    request(opts = {}) {
      Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);
      return new Request2(this.uri(), opts);
    }
    doWrite(data, fn) {
      const req = this.request({
        method: "POST",
        data
      });
      req.on("success", fn);
      req.on("error", (xhrStatus, context2) => {
        this.onError("xhr post error", xhrStatus, context2);
      });
    }
    doPoll() {
      const req = this.request();
      req.on("data", this.onData.bind(this));
      req.on("error", (xhrStatus, context2) => {
        this.onError("xhr poll error", xhrStatus, context2);
      });
      this.pollXhr = req;
    }
  };
  var Request2 = class extends Emitter {
    constructor(uri, opts) {
      super();
      installTimerFunctions(this, opts);
      this.opts = opts;
      this.method = opts.method || "GET";
      this.uri = uri;
      this.async = opts.async !== false;
      this.data = opts.data !== void 0 ? opts.data : null;
      this.create();
    }
    create() {
      const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
      opts.xdomain = !!this.opts.xd;
      opts.xscheme = !!this.opts.xs;
      const xhr = this.xhr = new XHR(opts);
      try {
        xhr.open(this.method, this.uri, this.async);
        try {
          if (this.opts.extraHeaders) {
            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
            for (let i3 in this.opts.extraHeaders) {
              if (this.opts.extraHeaders.hasOwnProperty(i3)) {
                xhr.setRequestHeader(i3, this.opts.extraHeaders[i3]);
              }
            }
          }
        } catch (e3) {
        }
        if (this.method === "POST") {
          try {
            xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch (e3) {
          }
        }
        try {
          xhr.setRequestHeader("Accept", "*/*");
        } catch (e3) {
        }
        if ("withCredentials" in xhr) {
          xhr.withCredentials = this.opts.withCredentials;
        }
        if (this.opts.requestTimeout) {
          xhr.timeout = this.opts.requestTimeout;
        }
        xhr.onreadystatechange = () => {
          if (xhr.readyState !== 4)
            return;
          if (xhr.status === 200 || xhr.status === 1223) {
            this.onLoad();
          } else {
            this.setTimeoutFn(() => {
              this.onError(typeof xhr.status === "number" ? xhr.status : 0);
            }, 0);
          }
        };
        xhr.send(this.data);
      } catch (e3) {
        this.setTimeoutFn(() => {
          this.onError(e3);
        }, 0);
        return;
      }
      if (typeof document !== "undefined") {
        this.index = Request2.requestsCount++;
        Request2.requests[this.index] = this;
      }
    }
    onError(err) {
      this.emitReserved("error", err, this.xhr);
      this.cleanup(true);
    }
    cleanup(fromError) {
      if (typeof this.xhr === "undefined" || this.xhr === null) {
        return;
      }
      this.xhr.onreadystatechange = empty;
      if (fromError) {
        try {
          this.xhr.abort();
        } catch (e3) {
        }
      }
      if (typeof document !== "undefined") {
        delete Request2.requests[this.index];
      }
      this.xhr = null;
    }
    onLoad() {
      const data = this.xhr.responseText;
      if (data !== null) {
        this.emitReserved("data", data);
        this.emitReserved("success");
        this.cleanup();
      }
    }
    abort() {
      this.cleanup();
    }
  };
  Request2.requestsCount = 0;
  Request2.requests = {};
  if (typeof document !== "undefined") {
    if (typeof attachEvent === "function") {
      attachEvent("onunload", unloadHandler);
    } else if (typeof addEventListener === "function") {
      const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }
  function unloadHandler() {
    for (let i3 in Request2.requests) {
      if (Request2.requests.hasOwnProperty(i3)) {
        Request2.requests[i3].abort();
      }
    }
  }

  // node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js
  var nextTick = (() => {
    const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
    if (isPromiseAvailable) {
      return (cb) => Promise.resolve().then(cb);
    } else {
      return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
    }
  })();
  var WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
  var usingBrowserWebSocket = true;
  var defaultBinaryType = "arraybuffer";

  // node_modules/engine.io-client/build/esm/transports/websocket.js
  var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
  var WS = class extends Transport {
    constructor(opts) {
      super(opts);
      this.supportsBinary = !opts.forceBase64;
    }
    get name() {
      return "websocket";
    }
    doOpen() {
      if (!this.check()) {
        return;
      }
      const uri = this.uri();
      const protocols = this.opts.protocols;
      const opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
      if (this.opts.extraHeaders) {
        opts.headers = this.opts.extraHeaders;
      }
      try {
        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
      } catch (err) {
        return this.emitReserved("error", err);
      }
      this.ws.binaryType = this.socket.binaryType || defaultBinaryType;
      this.addEventListeners();
    }
    addEventListeners() {
      this.ws.onopen = () => {
        if (this.opts.autoUnref) {
          this.ws._socket.unref();
        }
        this.onOpen();
      };
      this.ws.onclose = (closeEvent) => this.onClose({
        description: "websocket connection closed",
        context: closeEvent
      });
      this.ws.onmessage = (ev) => this.onData(ev.data);
      this.ws.onerror = (e3) => this.onError("websocket error", e3);
    }
    write(packets) {
      this.writable = false;
      for (let i3 = 0; i3 < packets.length; i3++) {
        const packet = packets[i3];
        const lastPacket = i3 === packets.length - 1;
        encodePacket_browser_default(packet, this.supportsBinary, (data) => {
          const opts = {};
          if (!usingBrowserWebSocket) {
            if (packet.options) {
              opts.compress = packet.options.compress;
            }
            if (this.opts.perMessageDeflate) {
              const len = typeof data === "string" ? Buffer.byteLength(data) : data.length;
              if (len < this.opts.perMessageDeflate.threshold) {
                opts.compress = false;
              }
            }
          }
          try {
            if (usingBrowserWebSocket) {
              this.ws.send(data);
            } else {
              this.ws.send(data, opts);
            }
          } catch (e3) {
          }
          if (lastPacket) {
            nextTick(() => {
              this.writable = true;
              this.emitReserved("drain");
            }, this.setTimeoutFn);
          }
        });
      }
    }
    doClose() {
      if (typeof this.ws !== "undefined") {
        this.ws.close();
        this.ws = null;
      }
    }
    uri() {
      let query = this.query || {};
      const schema = this.opts.secure ? "wss" : "ws";
      let port = "";
      if (this.opts.port && (schema === "wss" && Number(this.opts.port) !== 443 || schema === "ws" && Number(this.opts.port) !== 80)) {
        port = ":" + this.opts.port;
      }
      if (this.opts.timestampRequests) {
        query[this.opts.timestampParam] = yeast();
      }
      if (!this.supportsBinary) {
        query.b64 = 1;
      }
      const encodedQuery = encode2(query);
      const ipv6 = this.opts.hostname.indexOf(":") !== -1;
      return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
    }
    check() {
      return !!WebSocket;
    }
  };

  // node_modules/engine.io-client/build/esm/transports/index.js
  var transports = {
    websocket: WS,
    polling: Polling
  };

  // node_modules/engine.io-client/build/esm/contrib/parseuri.js
  var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
  var parts = [
    "source",
    "protocol",
    "authority",
    "userInfo",
    "user",
    "password",
    "host",
    "port",
    "relative",
    "path",
    "directory",
    "file",
    "query",
    "anchor"
  ];
  function parse(str) {
    const src = str, b2 = str.indexOf("["), e3 = str.indexOf("]");
    if (b2 != -1 && e3 != -1) {
      str = str.substring(0, b2) + str.substring(b2, e3).replace(/:/g, ";") + str.substring(e3, str.length);
    }
    let m3 = re.exec(str || ""), uri = {}, i3 = 14;
    while (i3--) {
      uri[parts[i3]] = m3[i3] || "";
    }
    if (b2 != -1 && e3 != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
      uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
      uri.ipv6uri = true;
    }
    uri.pathNames = pathNames(uri, uri["path"]);
    uri.queryKey = queryKey(uri, uri["query"]);
    return uri;
  }
  function pathNames(obj, path2) {
    const regx = /\/{2,9}/g, names = path2.replace(regx, "/").split("/");
    if (path2.substr(0, 1) == "/" || path2.length === 0) {
      names.splice(0, 1);
    }
    if (path2.substr(path2.length - 1, 1) == "/") {
      names.splice(names.length - 1, 1);
    }
    return names;
  }
  function queryKey(uri, query) {
    const data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
      if ($1) {
        data[$1] = $2;
      }
    });
    return data;
  }

  // node_modules/engine.io-client/build/esm/socket.js
  var Socket = class extends Emitter {
    constructor(uri, opts = {}) {
      super();
      if (uri && typeof uri === "object") {
        opts = uri;
        uri = null;
      }
      if (uri) {
        uri = parse(uri);
        opts.hostname = uri.host;
        opts.secure = uri.protocol === "https" || uri.protocol === "wss";
        opts.port = uri.port;
        if (uri.query)
          opts.query = uri.query;
      } else if (opts.host) {
        opts.hostname = parse(opts.host).host;
      }
      installTimerFunctions(this, opts);
      this.secure = opts.secure != null ? opts.secure : typeof location !== "undefined" && location.protocol === "https:";
      if (opts.hostname && !opts.port) {
        opts.port = this.secure ? "443" : "80";
      }
      this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
      this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
      this.transports = opts.transports || ["polling", "websocket"];
      this.readyState = "";
      this.writeBuffer = [];
      this.prevBufferLen = 0;
      this.opts = Object.assign({
        path: "/engine.io",
        agent: false,
        withCredentials: false,
        upgrade: true,
        timestampParam: "t",
        rememberUpgrade: false,
        rejectUnauthorized: true,
        perMessageDeflate: {
          threshold: 1024
        },
        transportOptions: {},
        closeOnBeforeunload: true
      }, opts);
      this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
      if (typeof this.opts.query === "string") {
        this.opts.query = decode2(this.opts.query);
      }
      this.id = null;
      this.upgrades = null;
      this.pingInterval = null;
      this.pingTimeout = null;
      this.pingTimeoutTimer = null;
      if (typeof addEventListener === "function") {
        if (this.opts.closeOnBeforeunload) {
          addEventListener("beforeunload", () => {
            if (this.transport) {
              this.transport.removeAllListeners();
              this.transport.close();
            }
          }, false);
        }
        if (this.hostname !== "localhost") {
          this.offlineEventListener = () => {
            this.onClose("transport close", {
              description: "network connection lost"
            });
          };
          addEventListener("offline", this.offlineEventListener, false);
        }
      }
      this.open();
    }
    createTransport(name) {
      const query = Object.assign({}, this.opts.query);
      query.EIO = protocol;
      query.transport = name;
      if (this.id)
        query.sid = this.id;
      const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
        query,
        socket: this,
        hostname: this.hostname,
        secure: this.secure,
        port: this.port
      });
      return new transports[name](opts);
    }
    open() {
      let transport;
      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
        transport = "websocket";
      } else if (this.transports.length === 0) {
        this.setTimeoutFn(() => {
          this.emitReserved("error", "No transports available");
        }, 0);
        return;
      } else {
        transport = this.transports[0];
      }
      this.readyState = "opening";
      try {
        transport = this.createTransport(transport);
      } catch (e3) {
        this.transports.shift();
        this.open();
        return;
      }
      transport.open();
      this.setTransport(transport);
    }
    setTransport(transport) {
      if (this.transport) {
        this.transport.removeAllListeners();
      }
      this.transport = transport;
      transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason) => this.onClose("transport close", reason));
    }
    probe(name) {
      let transport = this.createTransport(name);
      let failed = false;
      Socket.priorWebsocketSuccess = false;
      const onTransportOpen = () => {
        if (failed)
          return;
        transport.send([{ type: "ping", data: "probe" }]);
        transport.once("packet", (msg) => {
          if (failed)
            return;
          if (msg.type === "pong" && msg.data === "probe") {
            this.upgrading = true;
            this.emitReserved("upgrading", transport);
            if (!transport)
              return;
            Socket.priorWebsocketSuccess = transport.name === "websocket";
            this.transport.pause(() => {
              if (failed)
                return;
              if (this.readyState === "closed")
                return;
              cleanup();
              this.setTransport(transport);
              transport.send([{ type: "upgrade" }]);
              this.emitReserved("upgrade", transport);
              transport = null;
              this.upgrading = false;
              this.flush();
            });
          } else {
            const err = new Error("probe error");
            err.transport = transport.name;
            this.emitReserved("upgradeError", err);
          }
        });
      };
      function freezeTransport() {
        if (failed)
          return;
        failed = true;
        cleanup();
        transport.close();
        transport = null;
      }
      const onerror = (err) => {
        const error = new Error("probe error: " + err);
        error.transport = transport.name;
        freezeTransport();
        this.emitReserved("upgradeError", error);
      };
      function onTransportClose() {
        onerror("transport closed");
      }
      function onclose() {
        onerror("socket closed");
      }
      function onupgrade(to) {
        if (transport && to.name !== transport.name) {
          freezeTransport();
        }
      }
      const cleanup = () => {
        transport.removeListener("open", onTransportOpen);
        transport.removeListener("error", onerror);
        transport.removeListener("close", onTransportClose);
        this.off("close", onclose);
        this.off("upgrading", onupgrade);
      };
      transport.once("open", onTransportOpen);
      transport.once("error", onerror);
      transport.once("close", onTransportClose);
      this.once("close", onclose);
      this.once("upgrading", onupgrade);
      transport.open();
    }
    onOpen() {
      this.readyState = "open";
      Socket.priorWebsocketSuccess = this.transport.name === "websocket";
      this.emitReserved("open");
      this.flush();
      if (this.readyState === "open" && this.opts.upgrade && this.transport.pause) {
        let i3 = 0;
        const l2 = this.upgrades.length;
        for (; i3 < l2; i3++) {
          this.probe(this.upgrades[i3]);
        }
      }
    }
    onPacket(packet) {
      if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
        this.emitReserved("packet", packet);
        this.emitReserved("heartbeat");
        switch (packet.type) {
          case "open":
            this.onHandshake(JSON.parse(packet.data));
            break;
          case "ping":
            this.resetPingTimeout();
            this.sendPacket("pong");
            this.emitReserved("ping");
            this.emitReserved("pong");
            break;
          case "error":
            const err = new Error("server error");
            err.code = packet.data;
            this.onError(err);
            break;
          case "message":
            this.emitReserved("data", packet.data);
            this.emitReserved("message", packet.data);
            break;
        }
      } else {
      }
    }
    onHandshake(data) {
      this.emitReserved("handshake", data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this.upgrades = this.filterUpgrades(data.upgrades);
      this.pingInterval = data.pingInterval;
      this.pingTimeout = data.pingTimeout;
      this.maxPayload = data.maxPayload;
      this.onOpen();
      if (this.readyState === "closed")
        return;
      this.resetPingTimeout();
    }
    resetPingTimeout() {
      this.clearTimeoutFn(this.pingTimeoutTimer);
      this.pingTimeoutTimer = this.setTimeoutFn(() => {
        this.onClose("ping timeout");
      }, this.pingInterval + this.pingTimeout);
      if (this.opts.autoUnref) {
        this.pingTimeoutTimer.unref();
      }
    }
    onDrain() {
      this.writeBuffer.splice(0, this.prevBufferLen);
      this.prevBufferLen = 0;
      if (this.writeBuffer.length === 0) {
        this.emitReserved("drain");
      } else {
        this.flush();
      }
    }
    flush() {
      if (this.readyState !== "closed" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        const packets = this.getWritablePackets();
        this.transport.send(packets);
        this.prevBufferLen = packets.length;
        this.emitReserved("flush");
      }
    }
    getWritablePackets() {
      const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
      if (!shouldCheckPayloadSize) {
        return this.writeBuffer;
      }
      let payloadSize = 1;
      for (let i3 = 0; i3 < this.writeBuffer.length; i3++) {
        const data = this.writeBuffer[i3].data;
        if (data) {
          payloadSize += byteLength(data);
        }
        if (i3 > 0 && payloadSize > this.maxPayload) {
          return this.writeBuffer.slice(0, i3);
        }
        payloadSize += 2;
      }
      return this.writeBuffer;
    }
    write(msg, options2, fn) {
      this.sendPacket("message", msg, options2, fn);
      return this;
    }
    send(msg, options2, fn) {
      this.sendPacket("message", msg, options2, fn);
      return this;
    }
    sendPacket(type, data, options2, fn) {
      if (typeof data === "function") {
        fn = data;
        data = void 0;
      }
      if (typeof options2 === "function") {
        fn = options2;
        options2 = null;
      }
      if (this.readyState === "closing" || this.readyState === "closed") {
        return;
      }
      options2 = options2 || {};
      options2.compress = options2.compress !== false;
      const packet = {
        type,
        data,
        options: options2
      };
      this.emitReserved("packetCreate", packet);
      this.writeBuffer.push(packet);
      if (fn)
        this.once("flush", fn);
      this.flush();
    }
    close() {
      const close2 = () => {
        this.onClose("forced close");
        this.transport.close();
      };
      const cleanupAndClose = () => {
        this.off("upgrade", cleanupAndClose);
        this.off("upgradeError", cleanupAndClose);
        close2();
      };
      const waitForUpgrade = () => {
        this.once("upgrade", cleanupAndClose);
        this.once("upgradeError", cleanupAndClose);
      };
      if (this.readyState === "opening" || this.readyState === "open") {
        this.readyState = "closing";
        if (this.writeBuffer.length) {
          this.once("drain", () => {
            if (this.upgrading) {
              waitForUpgrade();
            } else {
              close2();
            }
          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close2();
        }
      }
      return this;
    }
    onError(err) {
      Socket.priorWebsocketSuccess = false;
      this.emitReserved("error", err);
      this.onClose("transport error", err);
    }
    onClose(reason, description) {
      if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.transport.removeAllListeners("close");
        this.transport.close();
        this.transport.removeAllListeners();
        if (typeof removeEventListener === "function") {
          removeEventListener("offline", this.offlineEventListener, false);
        }
        this.readyState = "closed";
        this.id = null;
        this.emitReserved("close", reason, description);
        this.writeBuffer = [];
        this.prevBufferLen = 0;
      }
    }
    filterUpgrades(upgrades) {
      const filteredUpgrades = [];
      let i3 = 0;
      const j3 = upgrades.length;
      for (; i3 < j3; i3++) {
        if (~this.transports.indexOf(upgrades[i3]))
          filteredUpgrades.push(upgrades[i3]);
      }
      return filteredUpgrades;
    }
  };
  Socket.protocol = protocol;

  // node_modules/engine.io-client/build/esm/index.js
  var protocol2 = Socket.protocol;

  // node_modules/socket.io-client/build/esm/url.js
  function url(uri, path2 = "", loc) {
    let obj = uri;
    loc = loc || typeof location !== "undefined" && location;
    if (uri == null)
      uri = loc.protocol + "//" + loc.host;
    if (typeof uri === "string") {
      if (uri.charAt(0) === "/") {
        if (uri.charAt(1) === "/") {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }
      if (!/^(https?|wss?):\/\//.test(uri)) {
        if (typeof loc !== "undefined") {
          uri = loc.protocol + "//" + uri;
        } else {
          uri = "https://" + uri;
        }
      }
      obj = parse(uri);
    }
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = "80";
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = "443";
      }
    }
    obj.path = obj.path || "/";
    const ipv6 = obj.host.indexOf(":") !== -1;
    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path2;
    obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
  }

  // node_modules/socket.io-parser/build/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    Decoder: () => Decoder,
    Encoder: () => Encoder,
    PacketType: () => PacketType,
    protocol: () => protocol3
  });

  // node_modules/socket.io-parser/build/esm/is-binary.js
  var withNativeArrayBuffer3 = typeof ArrayBuffer === "function";
  var isView2 = (obj) => {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
  };
  var toString = Object.prototype.toString;
  var withNativeBlob2 = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
  var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
  function isBinary(obj) {
    return withNativeArrayBuffer3 && (obj instanceof ArrayBuffer || isView2(obj)) || withNativeBlob2 && obj instanceof Blob || withNativeFile && obj instanceof File;
  }
  function hasBinary(obj, toJSON) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    if (Array.isArray(obj)) {
      for (let i3 = 0, l2 = obj.length; i3 < l2; i3++) {
        if (hasBinary(obj[i3])) {
          return true;
        }
      }
      return false;
    }
    if (isBinary(obj)) {
      return true;
    }
    if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }
    return false;
  }

  // node_modules/socket.io-parser/build/esm/binary.js
  function deconstructPacket(packet) {
    const buffers = [];
    const packetData = packet.data;
    const pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length;
    return { packet: pack, buffers };
  }
  function _deconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (isBinary(data)) {
      const placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (Array.isArray(data)) {
      const newData = new Array(data.length);
      for (let i3 = 0; i3 < data.length; i3++) {
        newData[i3] = _deconstructPacket(data[i3], buffers);
      }
      return newData;
    } else if (typeof data === "object" && !(data instanceof Date)) {
      const newData = {};
      for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          newData[key] = _deconstructPacket(data[key], buffers);
        }
      }
      return newData;
    }
    return data;
  }
  function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    packet.attachments = void 0;
    return packet;
  }
  function _reconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (data && data._placeholder === true) {
      const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
      if (isIndexValid) {
        return buffers[data.num];
      } else {
        throw new Error("illegal attachments");
      }
    } else if (Array.isArray(data)) {
      for (let i3 = 0; i3 < data.length; i3++) {
        data[i3] = _reconstructPacket(data[i3], buffers);
      }
    } else if (typeof data === "object") {
      for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          data[key] = _reconstructPacket(data[key], buffers);
        }
      }
    }
    return data;
  }

  // node_modules/socket.io-parser/build/esm/index.js
  var protocol3 = 5;
  var PacketType;
  (function(PacketType2) {
    PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
    PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
    PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
    PacketType2[PacketType2["ACK"] = 3] = "ACK";
    PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
    PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
    PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
  })(PacketType || (PacketType = {}));
  var Encoder = class {
    constructor(replacer) {
      this.replacer = replacer;
    }
    encode(obj) {
      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
        if (hasBinary(obj)) {
          obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;
          return this.encodeAsBinary(obj);
        }
      }
      return [this.encodeAsString(obj)];
    }
    encodeAsString(obj) {
      let str = "" + obj.type;
      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
        str += obj.attachments + "-";
      }
      if (obj.nsp && obj.nsp !== "/") {
        str += obj.nsp + ",";
      }
      if (obj.id != null) {
        str += obj.id;
      }
      if (obj.data != null) {
        str += JSON.stringify(obj.data, this.replacer);
      }
      return str;
    }
    encodeAsBinary(obj) {
      const deconstruction = deconstructPacket(obj);
      const pack = this.encodeAsString(deconstruction.packet);
      const buffers = deconstruction.buffers;
      buffers.unshift(pack);
      return buffers;
    }
  };
  var Decoder = class extends Emitter {
    constructor(reviver) {
      super();
      this.reviver = reviver;
    }
    add(obj) {
      let packet;
      if (typeof obj === "string") {
        if (this.reconstructor) {
          throw new Error("got plaintext data when reconstructing a packet");
        }
        packet = this.decodeString(obj);
        if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {
          this.reconstructor = new BinaryReconstructor(packet);
          if (packet.attachments === 0) {
            super.emitReserved("decoded", packet);
          }
        } else {
          super.emitReserved("decoded", packet);
        }
      } else if (isBinary(obj) || obj.base64) {
        if (!this.reconstructor) {
          throw new Error("got binary data when not reconstructing a packet");
        } else {
          packet = this.reconstructor.takeBinaryData(obj);
          if (packet) {
            this.reconstructor = null;
            super.emitReserved("decoded", packet);
          }
        }
      } else {
        throw new Error("Unknown type: " + obj);
      }
    }
    decodeString(str) {
      let i3 = 0;
      const p2 = {
        type: Number(str.charAt(0))
      };
      if (PacketType[p2.type] === void 0) {
        throw new Error("unknown packet type " + p2.type);
      }
      if (p2.type === PacketType.BINARY_EVENT || p2.type === PacketType.BINARY_ACK) {
        const start = i3 + 1;
        while (str.charAt(++i3) !== "-" && i3 != str.length) {
        }
        const buf = str.substring(start, i3);
        if (buf != Number(buf) || str.charAt(i3) !== "-") {
          throw new Error("Illegal attachments");
        }
        p2.attachments = Number(buf);
      }
      if (str.charAt(i3 + 1) === "/") {
        const start = i3 + 1;
        while (++i3) {
          const c3 = str.charAt(i3);
          if (c3 === ",")
            break;
          if (i3 === str.length)
            break;
        }
        p2.nsp = str.substring(start, i3);
      } else {
        p2.nsp = "/";
      }
      const next = str.charAt(i3 + 1);
      if (next !== "" && Number(next) == next) {
        const start = i3 + 1;
        while (++i3) {
          const c3 = str.charAt(i3);
          if (c3 == null || Number(c3) != c3) {
            --i3;
            break;
          }
          if (i3 === str.length)
            break;
        }
        p2.id = Number(str.substring(start, i3 + 1));
      }
      if (str.charAt(++i3)) {
        const payload = this.tryParse(str.substr(i3));
        if (Decoder.isPayloadValid(p2.type, payload)) {
          p2.data = payload;
        } else {
          throw new Error("invalid payload");
        }
      }
      return p2;
    }
    tryParse(str) {
      try {
        return JSON.parse(str, this.reviver);
      } catch (e3) {
        return false;
      }
    }
    static isPayloadValid(type, payload) {
      switch (type) {
        case PacketType.CONNECT:
          return typeof payload === "object";
        case PacketType.DISCONNECT:
          return payload === void 0;
        case PacketType.CONNECT_ERROR:
          return typeof payload === "string" || typeof payload === "object";
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          return Array.isArray(payload) && payload.length > 0;
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          return Array.isArray(payload);
      }
    }
    destroy() {
      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
      }
    }
  };
  var BinaryReconstructor = class {
    constructor(packet) {
      this.packet = packet;
      this.buffers = [];
      this.reconPack = packet;
    }
    takeBinaryData(binData) {
      this.buffers.push(binData);
      if (this.buffers.length === this.reconPack.attachments) {
        const packet = reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
        return packet;
      }
      return null;
    }
    finishedReconstruction() {
      this.reconPack = null;
      this.buffers = [];
    }
  };

  // node_modules/socket.io-client/build/esm/on.js
  function on(obj, ev, fn) {
    obj.on(ev, fn);
    return function subDestroy() {
      obj.off(ev, fn);
    };
  }

  // node_modules/socket.io-client/build/esm/socket.js
  var RESERVED_EVENTS = Object.freeze({
    connect: 1,
    connect_error: 1,
    disconnect: 1,
    disconnecting: 1,
    newListener: 1,
    removeListener: 1
  });
  var Socket2 = class extends Emitter {
    constructor(io, nsp, opts) {
      super();
      this.connected = false;
      this.receiveBuffer = [];
      this.sendBuffer = [];
      this.ids = 0;
      this.acks = {};
      this.flags = {};
      this.io = io;
      this.nsp = nsp;
      if (opts && opts.auth) {
        this.auth = opts.auth;
      }
      if (this.io._autoConnect)
        this.open();
    }
    get disconnected() {
      return !this.connected;
    }
    subEvents() {
      if (this.subs)
        return;
      const io = this.io;
      this.subs = [
        on(io, "open", this.onopen.bind(this)),
        on(io, "packet", this.onpacket.bind(this)),
        on(io, "error", this.onerror.bind(this)),
        on(io, "close", this.onclose.bind(this))
      ];
    }
    get active() {
      return !!this.subs;
    }
    connect() {
      if (this.connected)
        return this;
      this.subEvents();
      if (!this.io["_reconnecting"])
        this.io.open();
      if (this.io._readyState === "open")
        this.onopen();
      return this;
    }
    open() {
      return this.connect();
    }
    send(...args) {
      args.unshift("message");
      this.emit.apply(this, args);
      return this;
    }
    emit(ev, ...args) {
      if (RESERVED_EVENTS.hasOwnProperty(ev)) {
        throw new Error('"' + ev + '" is a reserved event name');
      }
      args.unshift(ev);
      const packet = {
        type: PacketType.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = this.flags.compress !== false;
      if (typeof args[args.length - 1] === "function") {
        const id = this.ids++;
        const ack = args.pop();
        this._registerAckCallback(id, ack);
        packet.id = id;
      }
      const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
      const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
      if (discardPacket) {
      } else if (this.connected) {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }
      this.flags = {};
      return this;
    }
    _registerAckCallback(id, ack) {
      const timeout = this.flags.timeout;
      if (timeout === void 0) {
        this.acks[id] = ack;
        return;
      }
      const timer = this.io.setTimeoutFn(() => {
        delete this.acks[id];
        for (let i3 = 0; i3 < this.sendBuffer.length; i3++) {
          if (this.sendBuffer[i3].id === id) {
            this.sendBuffer.splice(i3, 1);
          }
        }
        ack.call(this, new Error("operation has timed out"));
      }, timeout);
      this.acks[id] = (...args) => {
        this.io.clearTimeoutFn(timer);
        ack.apply(this, [null, ...args]);
      };
    }
    packet(packet) {
      packet.nsp = this.nsp;
      this.io._packet(packet);
    }
    onopen() {
      if (typeof this.auth == "function") {
        this.auth((data) => {
          this.packet({ type: PacketType.CONNECT, data });
        });
      } else {
        this.packet({ type: PacketType.CONNECT, data: this.auth });
      }
    }
    onerror(err) {
      if (!this.connected) {
        this.emitReserved("connect_error", err);
      }
    }
    onclose(reason, description) {
      this.connected = false;
      delete this.id;
      this.emitReserved("disconnect", reason, description);
    }
    onpacket(packet) {
      const sameNamespace = packet.nsp === this.nsp;
      if (!sameNamespace)
        return;
      switch (packet.type) {
        case PacketType.CONNECT:
          if (packet.data && packet.data.sid) {
            const id = packet.data.sid;
            this.onconnect(id);
          } else {
            this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          }
          break;
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          this.onevent(packet);
          break;
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          this.onack(packet);
          break;
        case PacketType.DISCONNECT:
          this.ondisconnect();
          break;
        case PacketType.CONNECT_ERROR:
          this.destroy();
          const err = new Error(packet.data.message);
          err.data = packet.data.data;
          this.emitReserved("connect_error", err);
          break;
      }
    }
    onevent(packet) {
      const args = packet.data || [];
      if (packet.id != null) {
        args.push(this.ack(packet.id));
      }
      if (this.connected) {
        this.emitEvent(args);
      } else {
        this.receiveBuffer.push(Object.freeze(args));
      }
    }
    emitEvent(args) {
      if (this._anyListeners && this._anyListeners.length) {
        const listeners = this._anyListeners.slice();
        for (const listener of listeners) {
          listener.apply(this, args);
        }
      }
      super.emit.apply(this, args);
    }
    ack(id) {
      const self2 = this;
      let sent = false;
      return function(...args) {
        if (sent)
          return;
        sent = true;
        self2.packet({
          type: PacketType.ACK,
          id,
          data: args
        });
      };
    }
    onack(packet) {
      const ack = this.acks[packet.id];
      if (typeof ack === "function") {
        ack.apply(this, packet.data);
        delete this.acks[packet.id];
      } else {
      }
    }
    onconnect(id) {
      this.id = id;
      this.connected = true;
      this.emitBuffered();
      this.emitReserved("connect");
    }
    emitBuffered() {
      this.receiveBuffer.forEach((args) => this.emitEvent(args));
      this.receiveBuffer = [];
      this.sendBuffer.forEach((packet) => {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      });
      this.sendBuffer = [];
    }
    ondisconnect() {
      this.destroy();
      this.onclose("io server disconnect");
    }
    destroy() {
      if (this.subs) {
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs = void 0;
      }
      this.io["_destroy"](this);
    }
    disconnect() {
      if (this.connected) {
        this.packet({ type: PacketType.DISCONNECT });
      }
      this.destroy();
      if (this.connected) {
        this.onclose("io client disconnect");
      }
      return this;
    }
    close() {
      return this.disconnect();
    }
    compress(compress) {
      this.flags.compress = compress;
      return this;
    }
    get volatile() {
      this.flags.volatile = true;
      return this;
    }
    timeout(timeout) {
      this.flags.timeout = timeout;
      return this;
    }
    onAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.push(listener);
      return this;
    }
    prependAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.unshift(listener);
      return this;
    }
    offAny(listener) {
      if (!this._anyListeners) {
        return this;
      }
      if (listener) {
        const listeners = this._anyListeners;
        for (let i3 = 0; i3 < listeners.length; i3++) {
          if (listener === listeners[i3]) {
            listeners.splice(i3, 1);
            return this;
          }
        }
      } else {
        this._anyListeners = [];
      }
      return this;
    }
    listenersAny() {
      return this._anyListeners || [];
    }
    onAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.push(listener);
      return this;
    }
    prependAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.unshift(listener);
      return this;
    }
    offAnyOutgoing(listener) {
      if (!this._anyOutgoingListeners) {
        return this;
      }
      if (listener) {
        const listeners = this._anyOutgoingListeners;
        for (let i3 = 0; i3 < listeners.length; i3++) {
          if (listener === listeners[i3]) {
            listeners.splice(i3, 1);
            return this;
          }
        }
      } else {
        this._anyOutgoingListeners = [];
      }
      return this;
    }
    listenersAnyOutgoing() {
      return this._anyOutgoingListeners || [];
    }
    notifyOutgoingListeners(packet) {
      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
        const listeners = this._anyOutgoingListeners.slice();
        for (const listener of listeners) {
          listener.apply(this, packet.data);
        }
      }
    }
  };

  // node_modules/socket.io-client/build/esm/contrib/backo2.js
  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 1e4;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }
  Backoff.prototype.duration = function() {
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand = Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };
  Backoff.prototype.reset = function() {
    this.attempts = 0;
  };
  Backoff.prototype.setMin = function(min2) {
    this.ms = min2;
  };
  Backoff.prototype.setMax = function(max2) {
    this.max = max2;
  };
  Backoff.prototype.setJitter = function(jitter) {
    this.jitter = jitter;
  };

  // node_modules/socket.io-client/build/esm/manager.js
  var Manager = class extends Emitter {
    constructor(uri, opts) {
      var _a;
      super();
      this.nsps = {};
      this.subs = [];
      if (uri && typeof uri === "object") {
        opts = uri;
        uri = void 0;
      }
      opts = opts || {};
      opts.path = opts.path || "/socket.io";
      this.opts = opts;
      installTimerFunctions(this, opts);
      this.reconnection(opts.reconnection !== false);
      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      this.reconnectionDelay(opts.reconnectionDelay || 1e3);
      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
      this.backoff = new Backoff({
        min: this.reconnectionDelay(),
        max: this.reconnectionDelayMax(),
        jitter: this.randomizationFactor()
      });
      this.timeout(opts.timeout == null ? 2e4 : opts.timeout);
      this._readyState = "closed";
      this.uri = uri;
      const _parser = opts.parser || esm_exports;
      this.encoder = new _parser.Encoder();
      this.decoder = new _parser.Decoder();
      this._autoConnect = opts.autoConnect !== false;
      if (this._autoConnect)
        this.open();
    }
    reconnection(v2) {
      if (!arguments.length)
        return this._reconnection;
      this._reconnection = !!v2;
      return this;
    }
    reconnectionAttempts(v2) {
      if (v2 === void 0)
        return this._reconnectionAttempts;
      this._reconnectionAttempts = v2;
      return this;
    }
    reconnectionDelay(v2) {
      var _a;
      if (v2 === void 0)
        return this._reconnectionDelay;
      this._reconnectionDelay = v2;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v2);
      return this;
    }
    randomizationFactor(v2) {
      var _a;
      if (v2 === void 0)
        return this._randomizationFactor;
      this._randomizationFactor = v2;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v2);
      return this;
    }
    reconnectionDelayMax(v2) {
      var _a;
      if (v2 === void 0)
        return this._reconnectionDelayMax;
      this._reconnectionDelayMax = v2;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v2);
      return this;
    }
    timeout(v2) {
      if (!arguments.length)
        return this._timeout;
      this._timeout = v2;
      return this;
    }
    maybeReconnectOnOpen() {
      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
        this.reconnect();
      }
    }
    open(fn) {
      if (~this._readyState.indexOf("open"))
        return this;
      this.engine = new Socket(this.uri, this.opts);
      const socket2 = this.engine;
      const self2 = this;
      this._readyState = "opening";
      this.skipReconnect = false;
      const openSubDestroy = on(socket2, "open", function() {
        self2.onopen();
        fn && fn();
      });
      const errorSub = on(socket2, "error", (err) => {
        self2.cleanup();
        self2._readyState = "closed";
        this.emitReserved("error", err);
        if (fn) {
          fn(err);
        } else {
          self2.maybeReconnectOnOpen();
        }
      });
      if (this._timeout !== false) {
        const timeout = this._timeout;
        if (timeout === 0) {
          openSubDestroy();
        }
        const timer = this.setTimeoutFn(() => {
          openSubDestroy();
          socket2.close();
          socket2.emit("error", new Error("timeout"));
        }, timeout);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(function subDestroy() {
          clearTimeout(timer);
        });
      }
      this.subs.push(openSubDestroy);
      this.subs.push(errorSub);
      return this;
    }
    connect(fn) {
      return this.open(fn);
    }
    onopen() {
      this.cleanup();
      this._readyState = "open";
      this.emitReserved("open");
      const socket2 = this.engine;
      this.subs.push(on(socket2, "ping", this.onping.bind(this)), on(socket2, "data", this.ondata.bind(this)), on(socket2, "error", this.onerror.bind(this)), on(socket2, "close", this.onclose.bind(this)), on(this.decoder, "decoded", this.ondecoded.bind(this)));
    }
    onping() {
      this.emitReserved("ping");
    }
    ondata(data) {
      this.decoder.add(data);
    }
    ondecoded(packet) {
      this.emitReserved("packet", packet);
    }
    onerror(err) {
      this.emitReserved("error", err);
    }
    socket(nsp, opts) {
      let socket2 = this.nsps[nsp];
      if (!socket2) {
        socket2 = new Socket2(this, nsp, opts);
        this.nsps[nsp] = socket2;
      }
      return socket2;
    }
    _destroy(socket2) {
      const nsps = Object.keys(this.nsps);
      for (const nsp of nsps) {
        const socket3 = this.nsps[nsp];
        if (socket3.active) {
          return;
        }
      }
      this._close();
    }
    _packet(packet) {
      const encodedPackets = this.encoder.encode(packet);
      for (let i3 = 0; i3 < encodedPackets.length; i3++) {
        this.engine.write(encodedPackets[i3], packet.options);
      }
    }
    cleanup() {
      this.subs.forEach((subDestroy) => subDestroy());
      this.subs.length = 0;
      this.decoder.destroy();
    }
    _close() {
      this.skipReconnect = true;
      this._reconnecting = false;
      this.onclose("forced close");
      if (this.engine)
        this.engine.close();
    }
    disconnect() {
      return this._close();
    }
    onclose(reason, description) {
      this.cleanup();
      this.backoff.reset();
      this._readyState = "closed";
      this.emitReserved("close", reason, description);
      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
    }
    reconnect() {
      if (this._reconnecting || this.skipReconnect)
        return this;
      const self2 = this;
      if (this.backoff.attempts >= this._reconnectionAttempts) {
        this.backoff.reset();
        this.emitReserved("reconnect_failed");
        this._reconnecting = false;
      } else {
        const delay = this.backoff.duration();
        this._reconnecting = true;
        const timer = this.setTimeoutFn(() => {
          if (self2.skipReconnect)
            return;
          this.emitReserved("reconnect_attempt", self2.backoff.attempts);
          if (self2.skipReconnect)
            return;
          self2.open((err) => {
            if (err) {
              self2._reconnecting = false;
              self2.reconnect();
              this.emitReserved("reconnect_error", err);
            } else {
              self2.onreconnect();
            }
          });
        }, delay);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(function subDestroy() {
          clearTimeout(timer);
        });
      }
    }
    onreconnect() {
      const attempt = this.backoff.attempts;
      this._reconnecting = false;
      this.backoff.reset();
      this.emitReserved("reconnect", attempt);
    }
  };

  // node_modules/socket.io-client/build/esm/index.js
  var cache2 = {};
  function lookup2(uri, opts) {
    if (typeof uri === "object") {
      opts = uri;
      uri = void 0;
    }
    opts = opts || {};
    const parsed = url(uri, opts.path || "/socket.io");
    const source = parsed.source;
    const id = parsed.id;
    const path2 = parsed.path;
    const sameNamespace = cache2[id] && path2 in cache2[id]["nsps"];
    const newConnection = opts.forceNew || opts["force new connection"] || opts.multiplex === false || sameNamespace;
    let io;
    if (newConnection) {
      io = new Manager(source, opts);
    } else {
      if (!cache2[id]) {
        cache2[id] = new Manager(source, opts);
      }
      io = cache2[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.queryKey;
    }
    return io.socket(parsed.path, opts);
  }
  Object.assign(lookup2, {
    Manager,
    Socket: Socket2,
    io: lookup2,
    connect: lookup2
  });

  // src/utils/relay.ts
  var socket = lookup2("wss://giveaway-o-tron-relay.onrender.com", {
    transports: ["websocket", "polling"]
  });
  socket.on("connect", function() {
    console.info("[relay][connect]");
  });
  socket.on("connect_error", function(e3) {
    console.info("[relay][connect_error]", e3);
  });
  socket.on("disconnect", function(e3) {
    console.info("[relay][disconnect]", e3);
  });
  var relay_default = socket;

  // src/utils/giveaways.ts
  var pastWinners = new Set();
  function prepareStats() {
    const stats = {
      users: 0,
      followers: 0,
      subs: 0,
      finalEntries: 0,
      entries: 0,
      toast: () => {
      },
      data: () => {
        return {};
      }
    };
    stats.toast = function() {
      Et.success(`${stats.users} users, ${stats.subs} subs, ${stats.followers} followers, ${stats.finalEntries} entries`, {
        position: "bottom-center",
        style: { fontSize: "1rem", padding: "0.2rem" }
      });
    };
    stats.data = function() {
      return {
        users: stats.users,
        followers: stats.followers,
        subs: stats.subs,
        finalEntries: stats.finalEntries,
        entries: stats.entries
      };
    };
    return stats;
  }
  async function getChatGiveaway(chatClient, channelInfo, chatItems, chatCommand, settings, discordSettings, forfeits) {
    const forfeitSet = new Set([...forfeits]);
    const matchMap = new Map();
    const userMatchMap = new Map();
    const giveawayUserStats = prepareStats();
    console.info("[giveaway][chat][start]");
    let subCount = 0;
    let subEntries = 0;
    const nonblockedChatItems = chatItems.filter((u3) => !settings.blocklist.map((b2) => b2.trim()).includes(u3.displayName) && !settings.blocklist.map((b2) => b2.trim()).includes(u3.username));
    const chatCommandEvents = nonblockedChatItems.filter((c3) => {
      const chatResult = handleChatCommand(c3, chatCommand);
      if (chatResult.isSpecial) {
        matchMap.set(chatResult.match, (matchMap.get(chatResult.match) || new Set()).add(c3.username));
        userMatchMap.set(c3.username, chatResult.match);
      }
      return chatResult.isMatch;
    });
    giveawayUserStats.entries = chatCommandEvents.length;
    const spamCounts = chatCommandEvents.reduce((acc, u3) => {
      acc.set(u3.username, (acc.get(u3.username) || 0) + 1);
      return acc;
    }, new Map());
    let users = chatCommandEvents.reduce((acc, c3) => acc.some((i3) => i3.username === c3.username) ? acc : acc.concat(c3), []);
    giveawayUserStats.users = users.length;
    users = users.filter((i3) => {
      var _a;
      if (!((_a = settings.chatCommand) == null ? void 0 : _a.trim()))
        return true;
      if (!settings.spamLimit || settings.spamLimit === 1)
        return true;
      const count = spamCounts.get(i3.username);
      if (count === void 0)
        return;
      const didSpam = count > settings.spamLimit;
      return !didSpam;
    });
    const followers = await getFollowers(channelInfo);
    const filteredFollowers = users.filter((u3) => followers.has(u3.username));
    giveawayUserStats.followers = filteredFollowers.length;
    if (settings.followersOnly) {
      users = filteredFollowers;
    }
    giveawayUserStats.subs = users.filter((u3) => u3.isSubscriber).length;
    users = users.flatMap((c3) => {
      if (c3.isSubscriber) {
        subCount += 1;
        subEntries += settings.subLuck;
        return Array.from({ length: settings.subLuck }, () => c3);
      }
      return c3;
    });
    giveawayUserStats.finalEntries = users.length;
    giveawayUserStats.toast();
    console.info("[giveaway][chat][end]");
    const winners = Array.from({ length: settings.numberOfWinners }, () => {
      const winner = getRandomArrayItem(users.filter((u3) => !pastWinners.has(u3.username) && !forfeitSet.has(u3.username)));
      if (!winner)
        return;
      pastWinners.add(winner.username);
      announceWinner({
        giveawayType: "chat",
        chatClient,
        channelInfo,
        settings,
        winner: winner.username,
        discordSettings
      });
      return {
        login: winner.username,
        wasSubscriber: winner.isSubscriber,
        wasFollower: followers == null ? void 0 : followers.has(winner.username),
        otherUsersWithEntry: [...matchMap.get(userMatchMap.get(winner.username) || "") || new Set()].filter((u3) => u3 !== winner.username),
        source: "chat"
      };
    }).filter(Boolean);
    return {
      winners,
      giveawayStats: giveawayUserStats.data()
    };
  }
  async function getInstantGiveaway(chatClient, channelInfo, settings, discordSettings, forfeits) {
    const forfeitSet = new Set([...forfeits]);
    const giveawayUserStats = prepareStats();
    console.info("[giveaway][instant][start]");
    let viewers = await getViewers(channelInfo);
    viewers = viewers.filter((u3) => !settings.blocklist.map((b2) => b2.trim()).includes(u3));
    console.info({ viewers: viewers.length });
    const [followersList, subsList] = await Promise.all([getFollowers(channelInfo), getSubs(channelInfo)]);
    giveawayUserStats.users = viewers.length;
    giveawayUserStats.entries = viewers.length;
    let mappedViewers = viewers.map((v2) => ({
      login: v2,
      follows: followersList.has(v2),
      isSubscriber: subsList.has(v2),
      source: "instant"
    }));
    let filteredFollowers = mappedViewers.filter((v2) => v2.follows);
    let filteredSubs = mappedViewers.filter((v2) => v2.isSubscriber);
    giveawayUserStats.followers = filteredFollowers.length;
    giveawayUserStats.subs = filteredSubs.length;
    if (settings.followersOnly) {
      mappedViewers = filteredFollowers;
    }
    viewers = mappedViewers.flatMap((c3) => {
      if (c3.isSubscriber) {
        return Array.from({ length: settings.subLuck }, () => c3);
      }
      return c3;
    }).map((i3) => i3.login);
    giveawayUserStats.finalEntries = viewers.length;
    console.info("[giveaway][instant]", giveawayUserStats);
    giveawayUserStats.toast();
    console.info("[giveaway][instant][end]");
    const winners = Array.from({ length: settings.numberOfWinners }, () => {
      const winner = getRandomArrayItem(mappedViewers.filter((u3) => !pastWinners.has(u3.login) && !forfeitSet.has(u3.login)));
      if (!winner)
        return;
      pastWinners.add(winner.login);
      announceWinner({
        giveawayType: "instant",
        chatClient,
        channelInfo,
        settings,
        winner: winner.login,
        discordSettings
      });
      return winner.login ? { login: winner.login, wasSubscriber: winner.isSubscriber, wasFollower: winner.follows } : void 0;
    }).filter(Boolean);
    return {
      winners,
      giveawayStats: giveawayUserStats.data()
    };
  }
  function announceWinner({
    giveawayType,
    chatClient,
    channelInfo,
    settings,
    discordSettings,
    winner,
    force
  }) {
    if (force !== true && settings.autoAnnounce !== void 0 && settings.autoAnnounce === false)
      return;
    const discordTimerNotAllowed = giveawayType === "chat" && discordSettings.giveawayMinTime && settings.timerDuration && settings.timerDuration < discordSettings.giveawayMinTime;
    const colour = getDiscordColour(discordSettings.messageColour);
    const eventData = {
      type: "winner",
      winner,
      channelId: channelInfo.userId,
      login: channelInfo.login,
      alertDuration: settings.alertDuration,
      alertTheme: settings.alertTheme,
      alertCustomImageUrl: settings.alertCustomImageUrl,
      discordGuildId: discordSettings.guildId,
      discordChannelId: discordSettings.channelId,
      discordColour: colour,
      discordTitle: discordSettings.winnerTitle,
      discordBody: discordSettings.winnerBody,
      discordEnabled: discordTimerNotAllowed ? false : discordSettings.winnerEnabled === void 0 ? true : discordSettings.winnerEnabled,
      giveawayName: ""
    };
    console.info("[relay][event]", eventData);
    relay_default.emit("event", eventData);
    if (settings.sendMessages) {
      chatClient == null ? void 0 : chatClient.say(channelInfo.login, settings.winnerMessage.replace("@name", `@${winner}`));
    }
  }

  // src/components/primitives/Settings.tsx
  var import_react14 = __toModule(require_react());

  // node_modules/react-icons/lib/esm/iconBase.js
  var import_react11 = __toModule(require_react());

  // node_modules/react-icons/lib/esm/iconContext.js
  var import_react10 = __toModule(require_react());
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = import_react10.default.createContext && import_react10.default.createContext(DefaultContext);

  // node_modules/react-icons/lib/esm/iconBase.js
  var __assign = function() {
    __assign = Object.assign || function(t2) {
      for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
        s3 = arguments[i3];
        for (var p2 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p2))
            t2[p2] = s3[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  var __rest = function(s3, e3) {
    var t2 = {};
    for (var p2 in s3)
      if (Object.prototype.hasOwnProperty.call(s3, p2) && e3.indexOf(p2) < 0)
        t2[p2] = s3[p2];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s3); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p2[i3]))
          t2[p2[i3]] = s3[p2[i3]];
      }
    return t2;
  };
  function Tree2Element(tree) {
    return tree && tree.map(function(node, i3) {
      return import_react11.default.createElement(node.tag, __assign({
        key: i3
      }, node.attr), Tree2Element(node.child));
    });
  }
  function GenIcon(data) {
    return function(props) {
      return import_react11.default.createElement(IconBase, __assign({
        attr: __assign({}, data.attr)
      }, props), Tree2Element(data.child));
    };
  }
  function IconBase(props) {
    var elem = function(conf) {
      var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
      var computedSize = size || conf.size || "1em";
      var className;
      if (conf.className)
        className = conf.className;
      if (props.className)
        className = (className ? className + " " : "") + props.className;
      return import_react11.default.createElement("svg", __assign({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: __assign(__assign({
          color: props.color || conf.color
        }, conf.style), props.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && import_react11.default.createElement("title", null, title), props.children);
    };
    return IconContext !== void 0 ? import_react11.default.createElement(IconContext.Consumer, null, function(conf) {
      return elem(conf);
    }) : elem(DefaultContext);
  }

  // node_modules/react-icons/fa/index.esm.js
  function FaDiscord(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 640 512" }, "child": [{ "tag": "path", "attr": { "d": "M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z" } }] })(props);
  }
  function FaTwitch(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M391.17,103.47H352.54v109.7h38.63ZM285,103H246.37V212.75H285ZM120.83,0,24.31,91.42V420.58H140.14V512l96.53-91.42h77.25L487.69,256V0ZM449.07,237.75l-77.22,73.12H294.61l-67.6,64v-64H140.14V36.58H449.07Z" } }] })(props);
  }
  function FaAngleDown(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 320 512" }, "child": [{ "tag": "path", "attr": { "d": "M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z" } }] })(props);
  }
  function FaAngleLeft(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 256 512" }, "child": [{ "tag": "path", "attr": { "d": "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z" } }] })(props);
  }
  function FaAngleUp(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 320 512" }, "child": [{ "tag": "path", "attr": { "d": "M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z" } }] })(props);
  }
  function FaBellSlash(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 640 512" }, "child": [{ "tag": "path", "attr": { "d": "M633.82 458.1l-90.62-70.05c.19-1.38.8-2.66.8-4.06.05-7.55-2.61-15.27-8.61-21.71-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84c-40.33 8.38-74.66 31.07-97.59 62.57L45.47 3.37C38.49-2.05 28.43-.8 23.01 6.18L3.37 31.45C-2.05 38.42-.8 48.47 6.18 53.9l588.35 454.73c6.98 5.43 17.03 4.17 22.46-2.81l19.64-25.27c5.42-6.97 4.17-17.02-2.81-22.45zM157.23 251.54c-8.61 67.96-36.41 93.33-52.62 110.75-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h241.92L157.23 251.54zM320 512c35.32 0 63.97-28.65 63.97-64H256.03c0 35.35 28.65 64 63.97 64z" } }] })(props);
  }
  function FaBell(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M224 512c35.32 0 63.97-28.65 63.97-64H160.03c0 35.35 28.65 64 63.97 64zm215.39-149.71c-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84C118.56 68.1 64.08 130.3 64.08 208c0 102.3-36.15 133.53-55.47 154.29-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h383.8c19.12 0 32-15.6 32.1-32 .05-7.55-2.61-15.27-8.61-21.71z" } }] })(props);
  }
  function FaBullhorn(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 576 512" }, "child": [{ "tag": "path", "attr": { "d": "M576 240c0-23.63-12.95-44.04-32-55.12V32.01C544 23.26 537.02 0 512 0c-7.12 0-14.19 2.38-19.98 7.02l-85.03 68.03C364.28 109.19 310.66 128 256 128H64c-35.35 0-64 28.65-64 64v96c0 35.35 28.65 64 64 64h33.7c-1.39 10.48-2.18 21.14-2.18 32 0 39.77 9.26 77.35 25.56 110.94 5.19 10.69 16.52 17.06 28.4 17.06h74.28c26.05 0 41.69-29.84 25.9-50.56-16.4-21.52-26.15-48.36-26.15-77.44 0-11.11 1.62-21.79 4.41-32H256c54.66 0 108.28 18.81 150.98 52.95l85.03 68.03a32.023 32.023 0 0 0 19.98 7.02c24.92 0 32-22.78 32-32V295.13C563.05 284.04 576 263.63 576 240zm-96 141.42l-33.05-26.44C392.95 311.78 325.12 288 256 288v-96c69.12 0 136.95-23.78 190.95-66.98L480 98.58v282.84z" } }] })(props);
  }
  function FaCheckCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z" } }] })(props);
  }
  function FaCheck(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z" } }] })(props);
  }
  function FaClock(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256,8C119,8,8,119,8,256S119,504,256,504,504,393,504,256,393,8,256,8Zm92.49,313h0l-20,25a16,16,0,0,1-22.49,2.5h0l-67-49.72a40,40,0,0,1-15-31.23V112a16,16,0,0,1,16-16h32a16,16,0,0,1,16,16V256l58,42.5A16,16,0,0,1,348.49,321Z" } }] })(props);
  }
  function FaCogs(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 640 512" }, "child": [{ "tag": "path", "attr": { "d": "M512.1 191l-8.2 14.3c-3 5.3-9.4 7.5-15.1 5.4-11.8-4.4-22.6-10.7-32.1-18.6-4.6-3.8-5.8-10.5-2.8-15.7l8.2-14.3c-6.9-8-12.3-17.3-15.9-27.4h-16.5c-6 0-11.2-4.3-12.2-10.3-2-12-2.1-24.6 0-37.1 1-6 6.2-10.4 12.2-10.4h16.5c3.6-10.1 9-19.4 15.9-27.4l-8.2-14.3c-3-5.2-1.9-11.9 2.8-15.7 9.5-7.9 20.4-14.2 32.1-18.6 5.7-2.1 12.1.1 15.1 5.4l8.2 14.3c10.5-1.9 21.2-1.9 31.7 0L552 6.3c3-5.3 9.4-7.5 15.1-5.4 11.8 4.4 22.6 10.7 32.1 18.6 4.6 3.8 5.8 10.5 2.8 15.7l-8.2 14.3c6.9 8 12.3 17.3 15.9 27.4h16.5c6 0 11.2 4.3 12.2 10.3 2 12 2.1 24.6 0 37.1-1 6-6.2 10.4-12.2 10.4h-16.5c-3.6 10.1-9 19.4-15.9 27.4l8.2 14.3c3 5.2 1.9 11.9-2.8 15.7-9.5 7.9-20.4 14.2-32.1 18.6-5.7 2.1-12.1-.1-15.1-5.4l-8.2-14.3c-10.4 1.9-21.2 1.9-31.7 0zm-10.5-58.8c38.5 29.6 82.4-14.3 52.8-52.8-38.5-29.7-82.4 14.3-52.8 52.8zM386.3 286.1l33.7 16.8c10.1 5.8 14.5 18.1 10.5 29.1-8.9 24.2-26.4 46.4-42.6 65.8-7.4 8.9-20.2 11.1-30.3 5.3l-29.1-16.8c-16 13.7-34.6 24.6-54.9 31.7v33.6c0 11.6-8.3 21.6-19.7 23.6-24.6 4.2-50.4 4.4-75.9 0-11.5-2-20-11.9-20-23.6V418c-20.3-7.2-38.9-18-54.9-31.7L74 403c-10 5.8-22.9 3.6-30.3-5.3-16.2-19.4-33.3-41.6-42.2-65.7-4-10.9.4-23.2 10.5-29.1l33.3-16.8c-3.9-20.9-3.9-42.4 0-63.4L12 205.8c-10.1-5.8-14.6-18.1-10.5-29 8.9-24.2 26-46.4 42.2-65.8 7.4-8.9 20.2-11.1 30.3-5.3l29.1 16.8c16-13.7 34.6-24.6 54.9-31.7V57.1c0-11.5 8.2-21.5 19.6-23.5 24.6-4.2 50.5-4.4 76-.1 11.5 2 20 11.9 20 23.6v33.6c20.3 7.2 38.9 18 54.9 31.7l29.1-16.8c10-5.8 22.9-3.6 30.3 5.3 16.2 19.4 33.2 41.6 42.1 65.8 4 10.9.1 23.2-10 29.1l-33.7 16.8c3.9 21 3.9 42.5 0 63.5zm-117.6 21.1c59.2-77-28.7-164.9-105.7-105.7-59.2 77 28.7 164.9 105.7 105.7zm243.4 182.7l-8.2 14.3c-3 5.3-9.4 7.5-15.1 5.4-11.8-4.4-22.6-10.7-32.1-18.6-4.6-3.8-5.8-10.5-2.8-15.7l8.2-14.3c-6.9-8-12.3-17.3-15.9-27.4h-16.5c-6 0-11.2-4.3-12.2-10.3-2-12-2.1-24.6 0-37.1 1-6 6.2-10.4 12.2-10.4h16.5c3.6-10.1 9-19.4 15.9-27.4l-8.2-14.3c-3-5.2-1.9-11.9 2.8-15.7 9.5-7.9 20.4-14.2 32.1-18.6 5.7-2.1 12.1.1 15.1 5.4l8.2 14.3c10.5-1.9 21.2-1.9 31.7 0l8.2-14.3c3-5.3 9.4-7.5 15.1-5.4 11.8 4.4 22.6 10.7 32.1 18.6 4.6 3.8 5.8 10.5 2.8 15.7l-8.2 14.3c6.9 8 12.3 17.3 15.9 27.4h16.5c6 0 11.2 4.3 12.2 10.3 2 12 2.1 24.6 0 37.1-1 6-6.2 10.4-12.2 10.4h-16.5c-3.6 10.1-9 19.4-15.9 27.4l8.2 14.3c3 5.2 1.9 11.9-2.8 15.7-9.5 7.9-20.4 14.2-32.1 18.6-5.7 2.1-12.1-.1-15.1-5.4l-8.2-14.3c-10.4 1.9-21.2 1.9-31.7 0zM501.6 431c38.5 29.6 82.4-14.3 52.8-52.8-38.5-29.6-82.4 14.3-52.8 52.8z" } }] })(props);
  }
  function FaDice(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 640 512" }, "child": [{ "tag": "path", "attr": { "d": "M592 192H473.26c12.69 29.59 7.12 65.2-17 89.32L320 417.58V464c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48V240c0-26.51-21.49-48-48-48zM480 376c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm-46.37-186.7L258.7 14.37c-19.16-19.16-50.23-19.16-69.39 0L14.37 189.3c-19.16 19.16-19.16 50.23 0 69.39L189.3 433.63c19.16 19.16 50.23 19.16 69.39 0L433.63 258.7c19.16-19.17 19.16-50.24 0-69.4zM96 248c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z" } }] })(props);
  }
  function FaDownload(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z" } }] })(props);
  }
  function FaEnvelope(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z" } }] })(props);
  }
  function FaExclamationCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z" } }] })(props);
  }
  function FaExclamationTriangle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 576 512" }, "child": [{ "tag": "path", "attr": { "d": "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z" } }] })(props);
  }
  function FaEyeSlash(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 640 512" }, "child": [{ "tag": "path", "attr": { "d": "M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z" } }] })(props);
  }
  function FaEye(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 576 512" }, "child": [{ "tag": "path", "attr": { "d": "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z" } }] })(props);
  }
  function FaPauseCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm-16 328c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160zm112 0c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160z" } }] })(props);
  }
  function FaPlayCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z" } }] })(props);
  }
  function FaPlus(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z" } }] })(props);
  }
  function FaQuestion(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z" } }] })(props);
  }
  function FaRobot(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 640 512" }, "child": [{ "tag": "path", "attr": { "d": "M32,224H64V416H32A31.96166,31.96166,0,0,1,0,384V256A31.96166,31.96166,0,0,1,32,224Zm512-48V448a64.06328,64.06328,0,0,1-64,64H160a64.06328,64.06328,0,0,1-64-64V176a79.974,79.974,0,0,1,80-80H288V32a32,32,0,0,1,64,0V96H464A79.974,79.974,0,0,1,544,176ZM264,256a40,40,0,1,0-40,40A39.997,39.997,0,0,0,264,256Zm-8,128H192v32h64Zm96,0H288v32h64ZM456,256a40,40,0,1,0-40,40A39.997,39.997,0,0,0,456,256Zm-8,128H384v32h64ZM640,256V384a31.96166,31.96166,0,0,1-32,32H576V224h32A31.96166,31.96166,0,0,1,640,256Z" } }] })(props);
  }
  function FaSave(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z" } }] })(props);
  }
  function FaSearch(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z" } }] })(props);
  }
  function FaSpinner(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z" } }] })(props);
  }
  function FaTimesCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z" } }] })(props);
  }
  function FaTimes(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 352 512" }, "child": [{ "tag": "path", "attr": { "d": "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z" } }] })(props);
  }
  function FaTrophy(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 576 512" }, "child": [{ "tag": "path", "attr": { "d": "M552 64H448V24c0-13.3-10.7-24-24-24H152c-13.3 0-24 10.7-24 24v40H24C10.7 64 0 74.7 0 88v56c0 35.7 22.5 72.4 61.9 100.7 31.5 22.7 69.8 37.1 110 41.7C203.3 338.5 240 360 240 360v72h-48c-35.3 0-64 20.7-64 56v12c0 6.6 5.4 12 12 12h296c6.6 0 12-5.4 12-12v-12c0-35.3-28.7-56-64-56h-48v-72s36.7-21.5 68.1-73.6c40.3-4.6 78.6-19 110-41.7 39.3-28.3 61.9-65 61.9-100.7V88c0-13.3-10.7-24-24-24zM99.3 192.8C74.9 175.2 64 155.6 64 144v-16h64.2c1 32.6 5.8 61.2 12.8 86.2-15.1-5.2-29.2-12.4-41.7-21.4zM512 144c0 16.1-17.7 36.1-35.3 48.8-12.5 9-26.7 16.2-41.8 21.4 7-25 11.8-53.6 12.8-86.2H512v16z" } }] })(props);
  }

  // node_modules/react-countdown/dist/index.es.js
  var import_react12 = __toModule(require_react());
  var import_prop_types4 = __toModule(require_prop_types());
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      _setPrototypeOf2(subClass, superClass);
  }
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf(o2);
  }
  function _setPrototypeOf2(o2, p2) {
    _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf2(o2, p2);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
      arr2[i3] = arr[i3];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function zeroPad(value2) {
    var length2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
    var strValue = String(value2);
    if (length2 === 0)
      return strValue;
    var match2 = strValue.match(/(.*?)([0-9]+)(.*)/);
    var prefix2 = match2 ? match2[1] : "";
    var suffix = match2 ? match2[3] : "";
    var strNo = match2 ? match2[2] : strValue;
    var paddedNo = strNo.length >= length2 ? strNo : (_toConsumableArray(Array(length2)).map(function() {
      return "0";
    }).join("") + strNo).slice(length2 * -1);
    return "".concat(prefix2).concat(paddedNo).concat(suffix);
  }
  var timeDeltaFormatOptionsDefaults = {
    daysInHours: false,
    zeroPadTime: 2
  };
  function calcTimeDelta(date2) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _options$now = options2.now, now2 = _options$now === void 0 ? Date.now : _options$now, _options$precision = options2.precision, precision = _options$precision === void 0 ? 0 : _options$precision, controlled = options2.controlled, _options$offsetTime = options2.offsetTime, offsetTime = _options$offsetTime === void 0 ? 0 : _options$offsetTime, overtime = options2.overtime;
    var startTimestamp;
    if (typeof date2 === "string") {
      startTimestamp = new Date(date2).getTime();
    } else if (date2 instanceof Date) {
      startTimestamp = date2.getTime();
    } else {
      startTimestamp = date2;
    }
    if (!controlled) {
      startTimestamp += offsetTime;
    }
    var timeLeft = controlled ? startTimestamp : startTimestamp - now2();
    var clampedPrecision = Math.min(20, Math.max(0, precision));
    var total = Math.round(parseFloat(((overtime ? timeLeft : Math.max(0, timeLeft)) / 1e3).toFixed(clampedPrecision)) * 1e3);
    var seconds2 = Math.abs(total) / 1e3;
    return {
      total,
      days: Math.floor(seconds2 / (3600 * 24)),
      hours: Math.floor(seconds2 / 3600 % 24),
      minutes: Math.floor(seconds2 / 60 % 60),
      seconds: Math.floor(seconds2 % 60),
      milliseconds: Number((seconds2 % 1 * 1e3).toFixed()),
      completed: total <= 0
    };
  }
  function formatTimeDelta(timeDelta, options2) {
    var days2 = timeDelta.days, hours2 = timeDelta.hours, minutes2 = timeDelta.minutes, seconds2 = timeDelta.seconds;
    var _Object$assign = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), options2), daysInHours = _Object$assign.daysInHours, zeroPadTime = _Object$assign.zeroPadTime, _Object$assign$zeroPa = _Object$assign.zeroPadDays, zeroPadDays = _Object$assign$zeroPa === void 0 ? zeroPadTime : _Object$assign$zeroPa;
    var zeroPadTimeLength = Math.min(2, zeroPadTime);
    var formattedHours = daysInHours ? zeroPad(hours2 + days2 * 24, zeroPadTime) : zeroPad(hours2, zeroPadTimeLength);
    return {
      days: daysInHours ? "" : zeroPad(days2, zeroPadDays),
      hours: formattedHours,
      minutes: zeroPad(minutes2, zeroPadTimeLength),
      seconds: zeroPad(seconds2, zeroPadTimeLength)
    };
  }
  var Countdown = function(_React$Component) {
    _inherits(Countdown2, _React$Component);
    var _super = _createSuper(Countdown2);
    function Countdown2() {
      var _this;
      _classCallCheck(this, Countdown2);
      _this = _super.apply(this, arguments);
      _this.state = {
        count: _this.props.count || 3
      };
      _this.startCountdown = function() {
        _this.interval = window.setInterval(function() {
          var count = _this.state.count - 1;
          if (count === 0) {
            _this.stopCountdown();
            _this.props.onComplete && _this.props.onComplete();
          } else {
            _this.setState(function(prevState) {
              return {
                count: prevState.count - 1
              };
            });
          }
        }, 1e3);
      };
      _this.stopCountdown = function() {
        clearInterval(_this.interval);
      };
      _this.addTime = function(seconds2) {
        _this.stopCountdown();
        _this.setState(function(prevState) {
          return {
            count: prevState.count + seconds2
          };
        }, _this.startCountdown);
      };
      return _this;
    }
    _createClass(Countdown2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startCountdown();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearInterval(this.interval);
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children ? (0, import_react12.cloneElement)(this.props.children, {
          count: this.state.count
        }) : null;
      }
    }]);
    return Countdown2;
  }(import_react12.Component);
  Countdown.propTypes = {
    count: import_prop_types4.number,
    children: import_prop_types4.element,
    onComplete: import_prop_types4.func
  };
  var Countdown$1 = function(_React$Component) {
    _inherits(Countdown$12, _React$Component);
    var _super = _createSuper(Countdown$12);
    function Countdown$12(props) {
      var _this;
      _classCallCheck(this, Countdown$12);
      _this = _super.call(this, props);
      _this.mounted = false;
      _this.initialTimestamp = _this.calcOffsetStartTimestamp();
      _this.offsetStartTimestamp = _this.props.autoStart ? 0 : _this.initialTimestamp;
      _this.offsetTime = 0;
      _this.legacyMode = false;
      _this.legacyCountdownRef = (0, import_react12.createRef)();
      _this.tick = function() {
        var timeDelta2 = _this.calcTimeDelta();
        var callback = timeDelta2.completed && !_this.props.overtime ? void 0 : _this.props.onTick;
        _this.setTimeDeltaState(timeDelta2, void 0, callback);
      };
      _this.start = function() {
        if (_this.isStarted())
          return;
        var prevOffsetStartTimestamp = _this.offsetStartTimestamp;
        _this.offsetStartTimestamp = 0;
        _this.offsetTime += prevOffsetStartTimestamp ? _this.calcOffsetStartTimestamp() - prevOffsetStartTimestamp : 0;
        var timeDelta2 = _this.calcTimeDelta();
        _this.setTimeDeltaState(timeDelta2, "STARTED", _this.props.onStart);
        if (!_this.props.controlled && (!timeDelta2.completed || _this.props.overtime)) {
          _this.clearTimer();
          _this.interval = window.setInterval(_this.tick, _this.props.intervalDelay);
        }
      };
      _this.pause = function() {
        if (_this.isPaused())
          return;
        _this.clearTimer();
        _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();
        _this.setTimeDeltaState(_this.state.timeDelta, "PAUSED", _this.props.onPause);
      };
      _this.stop = function() {
        if (_this.isStopped())
          return;
        _this.clearTimer();
        _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();
        _this.offsetTime = _this.offsetStartTimestamp - _this.initialTimestamp;
        _this.setTimeDeltaState(_this.calcTimeDelta(), "STOPPED", _this.props.onStop);
      };
      _this.isStarted = function() {
        return _this.isStatus("STARTED");
      };
      _this.isPaused = function() {
        return _this.isStatus("PAUSED");
      };
      _this.isStopped = function() {
        return _this.isStatus("STOPPED");
      };
      _this.isCompleted = function() {
        return _this.isStatus("COMPLETED");
      };
      _this.handleOnComplete = function(timeDelta2) {
        if (_this.props.onComplete)
          _this.props.onComplete(timeDelta2);
      };
      if (props.date) {
        var timeDelta = _this.calcTimeDelta();
        _this.state = {
          timeDelta,
          status: timeDelta.completed ? "COMPLETED" : "STOPPED"
        };
      } else {
        _this.legacyMode = true;
      }
      return _this;
    }
    _createClass(Countdown$12, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.legacyMode) {
          return;
        }
        this.mounted = true;
        if (this.props.onMount)
          this.props.onMount(this.calcTimeDelta());
        if (this.props.autoStart)
          this.start();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.legacyMode) {
          return;
        }
        if (this.props.date !== prevProps.date) {
          this.initialTimestamp = this.calcOffsetStartTimestamp();
          this.offsetStartTimestamp = this.initialTimestamp;
          this.offsetTime = 0;
          this.setTimeDeltaState(this.calcTimeDelta());
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.legacyMode) {
          return;
        }
        this.mounted = false;
        this.clearTimer();
      }
    }, {
      key: "calcTimeDelta",
      value: function calcTimeDelta$1() {
        var _this$props = this.props, date2 = _this$props.date, now2 = _this$props.now, precision = _this$props.precision, controlled = _this$props.controlled, overtime = _this$props.overtime;
        return calcTimeDelta(date2, {
          now: now2,
          precision,
          controlled,
          offsetTime: this.offsetTime,
          overtime
        });
      }
    }, {
      key: "calcOffsetStartTimestamp",
      value: function calcOffsetStartTimestamp() {
        return Date.now();
      }
    }, {
      key: "addTime",
      value: function addTime(seconds2) {
        this.legacyCountdownRef.current.addTime(seconds2);
      }
    }, {
      key: "clearTimer",
      value: function clearTimer() {
        window.clearInterval(this.interval);
      }
    }, {
      key: "isStatus",
      value: function isStatus(status) {
        return this.state.status === status;
      }
    }, {
      key: "setTimeDeltaState",
      value: function setTimeDeltaState(timeDelta, status, callback) {
        var _this2 = this;
        if (!this.mounted)
          return;
        var completedCallback;
        if (!this.state.timeDelta.completed && timeDelta.completed) {
          if (!this.props.overtime)
            this.clearTimer();
          completedCallback = this.handleOnComplete;
        }
        var onDone = function onDone2() {
          if (callback)
            callback(_this2.state.timeDelta);
          if (completedCallback)
            completedCallback(_this2.state.timeDelta);
        };
        return this.setState(function(prevState) {
          var newStatus = status || prevState.status;
          if (timeDelta.completed && !_this2.props.overtime) {
            newStatus = "COMPLETED";
          } else if (!status && newStatus === "COMPLETED") {
            newStatus = "STOPPED";
          }
          return {
            timeDelta,
            status: newStatus
          };
        }, onDone);
      }
    }, {
      key: "getApi",
      value: function getApi() {
        return this.api = this.api || {
          start: this.start,
          pause: this.pause,
          stop: this.stop,
          isStarted: this.isStarted,
          isPaused: this.isPaused,
          isStopped: this.isStopped,
          isCompleted: this.isCompleted
        };
      }
    }, {
      key: "getRenderProps",
      value: function getRenderProps() {
        var _this$props2 = this.props, daysInHours = _this$props2.daysInHours, zeroPadTime = _this$props2.zeroPadTime, zeroPadDays = _this$props2.zeroPadDays;
        var timeDelta = this.state.timeDelta;
        return Object.assign(Object.assign({}, timeDelta), {
          api: this.getApi(),
          props: this.props,
          formatted: formatTimeDelta(timeDelta, {
            daysInHours,
            zeroPadTime,
            zeroPadDays
          })
        });
      }
    }, {
      key: "render",
      value: function render() {
        if (this.legacyMode) {
          var _this$props3 = this.props, count = _this$props3.count, _children = _this$props3.children, onComplete = _this$props3.onComplete;
          return (0, import_react12.createElement)(Countdown, {
            ref: this.legacyCountdownRef,
            count,
            onComplete
          }, _children);
        }
        var _this$props4 = this.props, className = _this$props4.className, overtime = _this$props4.overtime, children = _this$props4.children, renderer = _this$props4.renderer;
        var renderProps = this.getRenderProps();
        if (renderer) {
          return renderer(renderProps);
        }
        if (children && this.state.timeDelta.completed && !overtime) {
          return (0, import_react12.cloneElement)(children, {
            countdown: renderProps
          });
        }
        var _renderProps$formatte = renderProps.formatted, days2 = _renderProps$formatte.days, hours2 = _renderProps$formatte.hours, minutes2 = _renderProps$formatte.minutes, seconds2 = _renderProps$formatte.seconds;
        return (0, import_react12.createElement)("span", {
          className
        }, renderProps.total < 0 ? "-" : "", days2, days2 ? ":" : "", hours2, ":", minutes2, ":", seconds2);
      }
    }]);
    return Countdown$12;
  }(import_react12.Component);
  Countdown$1.defaultProps = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), {
    controlled: false,
    intervalDelay: 1e3,
    precision: 0,
    autoStart: true
  });
  Countdown$1.propTypes = {
    date: (0, import_prop_types4.oneOfType)([(0, import_prop_types4.instanceOf)(Date), import_prop_types4.string, import_prop_types4.number]),
    daysInHours: import_prop_types4.bool,
    zeroPadTime: import_prop_types4.number,
    zeroPadDays: import_prop_types4.number,
    controlled: import_prop_types4.bool,
    intervalDelay: import_prop_types4.number,
    precision: import_prop_types4.number,
    autoStart: import_prop_types4.bool,
    overtime: import_prop_types4.bool,
    className: import_prop_types4.string,
    children: import_prop_types4.element,
    renderer: import_prop_types4.func,
    now: import_prop_types4.func,
    onMount: import_prop_types4.func,
    onStart: import_prop_types4.func,
    onPause: import_prop_types4.func,
    onStop: import_prop_types4.func,
    onTick: import_prop_types4.func,
    onComplete: import_prop_types4.func
  };
  var index_es_default = Countdown$1;

  // src/components/primitives/Settings.tsx
  var import_howler = __toModule(require_howler());

  // src/components/primitives/Slider.tsx
  var import_react13 = __toModule(require_react());
  var import_react_range = __toModule(require_lib());
  var ONE_S = 1e3;
  function SliderOuter(props) {
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: props.title
    }, props.label), /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "px-2 flex-1 flex justify-center items-center"
    }, /* @__PURE__ */ import_react13.default.createElement(SliderInner, __spreadValues({}, props))), /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "justify-center items-center text-center flex pr-4"
    }, props.renderValue ? props.renderValue(props.value) : props.value));
  }
  function SliderInner({ value: value2, label, min: min2, max: max2, step = 1, onChange: onChange2 }) {
    const values = [value2];
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "flex-1 px-3"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "my-3"
    }, /* @__PURE__ */ import_react13.default.createElement(import_react_range.Range, {
      min: min2,
      max: max2,
      step,
      values,
      onChange: (values2) => onChange2(values2[0]),
      renderTrack: ({ props, children }) => /* @__PURE__ */ import_react13.default.createElement("div", __spreadProps(__spreadValues({}, props), {
        style: __spreadProps(__spreadValues({}, props.style), {
          height: "6px",
          width: "100%",
          borderRadius: "4px",
          background: (0, import_react_range.getTrackBackground)({
            values,
            colors: ["#7c3aed", "#9ca3af"],
            min: min2,
            max: max2,
            rtl: false
          })
        })
      }), children),
      renderThumb: ({ props }) => /* @__PURE__ */ import_react13.default.createElement("div", __spreadProps(__spreadValues({}, props), {
        style: __spreadProps(__spreadValues({}, props.style), {
          height: "20px",
          width: "20px",
          borderRadius: "4px",
          backgroundColor: "#FFF",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          boxShadow: "0px 2px 6px #AAA"
        })
      }))
    })));
  }

  // src/components/primitives/Settings.tsx
  var bell = new import_howler.Howl({
    src: ["sounds/pleasing-bell.ogg"]
  });
  var countDownRenderer = ({ hours: hours2, minutes: minutes2, seconds: seconds2, completed }) => {
    if (completed) {
      return /* @__PURE__ */ import_react14.default.createElement("div", {
        className: "animate-pulse"
      }, "Finished! Chat is paused, do the giveaway!");
    } else {
      return /* @__PURE__ */ import_react14.default.createElement("span", null, zeroPad(hours2, 2), " : ", zeroPad(minutes2, 2), " : ", zeroPad(seconds2, 2));
    }
  };
  var ONE_MIN2 = 1e3 * 60;
  var StableCountdown = import_react14.default.memo(function StableCountdown2({
    value: value2,
    onComplete
  }) {
    return /* @__PURE__ */ import_react14.default.createElement(index_es_default, {
      renderer: countDownRenderer,
      date: Date.now() + value2,
      onComplete
    });
  });
  var Time = import_react14.default.memo(function Time2({
    alertTheme,
    alertCustomImageUrl,
    followersOnly,
    setChatPaused,
    resetChat,
    chatCommand,
    channelId,
    timerBell,
    setSettings,
    discordSettings,
    duration,
    alertHidden
  }) {
    const [active, setActive] = import_react14.default.useState(false);
    const value2 = duration || ONE_MIN2;
    const onComplete = import_react14.default.useCallback(() => {
      Et.success("Timer finished! Chat paused, do a giveaway...", { position: "bottom-center" });
      const disabledDueToTimer = duration && discordSettings.giveawayMinTime && duration < discordSettings.giveawayMinTime;
      relay_default.emit("event", {
        type: "timer-end",
        channelId,
        ts: new Date().toISOString(),
        discordGuildId: discordSettings.guildId,
        discordChannelId: discordSettings.channelId,
        discordColour: getDiscordColour(discordSettings.messageColour),
        discordTitle: discordSettings.endTitle,
        discordBody: discordSettings.endBody,
        discordEnabled: disabledDueToTimer ? false : discordSettings.endEnabled === void 0 ? true : discordSettings.endEnabled,
        alertTheme,
        alertCustomImageUrl,
        followersOnly
      });
      setChatPaused(true);
      if (timerBell)
        bell.play();
    }, [channelId, timerBell, discordSettings, duration]);
    return active ? /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex justify-center items-center text-center relative"
    }, /* @__PURE__ */ import_react14.default.createElement(StableCountdown, {
      value: value2,
      onComplete
    }), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "absolute right-8 top-2 text-white text-opacity-60 hover:text-opacity-100 select-none cursor-pointer"
    }, alertHidden ? /* @__PURE__ */ import_react14.default.createElement(FaEye, {
      onClick: () => {
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { timerAlertHidden: !s3.timerAlertHidden }));
        relay_default.emit("event", { type: "timer-hide", hidden: false, channelId });
      },
      title: "Show the timer alert"
    }) : /* @__PURE__ */ import_react14.default.createElement(FaEyeSlash, {
      onClick: () => {
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { timerAlertHidden: !s3.timerAlertHidden }));
        relay_default.emit("event", { type: "timer-hide", hidden: true, channelId });
      },
      title: "Hide the timer alert"
    })), /* @__PURE__ */ import_react14.default.createElement(FaTimes, {
      className: "absolute right-3 top-2 text-red-500 select-none cursor-pointer",
      onClick: () => {
        setActive(false);
        relay_default.emit("event", { type: "timer-cancel", channelId });
      },
      title: "Cancel the timer"
    })) : /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "Will clear chat, and then pause it after the time, to enable a giveaway with cut off"
    }, "Timer"), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "px-2 flex-1 flex justify-center items-center"
    }, /* @__PURE__ */ import_react14.default.createElement(SliderInner, {
      min: ONE_MIN2,
      max: ONE_MIN2 * 30,
      value: value2,
      step: ONE_MIN2,
      onChange: (v2) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { timerDuration: v2 }))
    })), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-1 justify-center items-center text-center flex"
    }, formatDistanceStrict(Date.now() + value2, new Date())), /* @__PURE__ */ import_react14.default.createElement("button", {
      title: "If enabled will play a sound at the end of the timer",
      className: "flex justify-center items-center pr-3",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { timerBell: !s3.timerBell }))
    }, timerBell ? /* @__PURE__ */ import_react14.default.createElement(FaBell, null) : /* @__PURE__ */ import_react14.default.createElement(FaBellSlash, null)), /* @__PURE__ */ import_react14.default.createElement("button", {
      className: "bg-purple-600 px-2 py-1 flex-0 select-none cursor-pointer flex flex-row justify-center items-center gap-1 transition-colors hover:bg-purple-700",
      onClick: () => {
        resetChat();
        setChatPaused(false);
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { timerAlertHidden: false }));
        setActive(true);
        const disabledDueToTimer = duration && discordSettings.giveawayMinTime && duration < discordSettings.giveawayMinTime;
        relay_default.emit("event", {
          type: "timer-start",
          channelId,
          ts: new Date().toISOString(),
          duration,
          chatCommand: chatCommand == null ? void 0 : chatCommand.trim(),
          discordGuildId: discordSettings.guildId,
          discordChannelId: discordSettings.channelId,
          discordColour: getDiscordColour(discordSettings.messageColour),
          discordTitle: discordSettings.startTitle,
          discordBody: discordSettings.startBody,
          discordEnabled: disabledDueToTimer ? false : discordSettings.startEnabled === void 0 ? true : discordSettings.startEnabled,
          alertTheme,
          alertCustomImageUrl,
          followersOnly
        });
      },
      title: "Warning: will clear chat"
    }, /* @__PURE__ */ import_react14.default.createElement(FaClock, null), " Start"));
  });
  function ChatCommandPicker({ setSettings }) {
    const [open, setOpen] = import_react14.default.useState(false);
    return /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "relative bg-purple-600 rounded-r-md text-sm h-full flex items-center justify-center  cursor-pointer select-none"
    }, /* @__PURE__ */ import_react14.default.createElement("button", {
      className: "w-full h-full px-2 py-1",
      onClick: () => setOpen((o2) => !o2)
    }, open ? /* @__PURE__ */ import_react14.default.createElement(FaAngleUp, null) : /* @__PURE__ */ import_react14.default.createElement(FaAngleDown, null)), open ? /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "absolute top-9 right-1 z-50 bg-gray-700 border border-purple-600 w-44 rounded-md text-center shadow-lg"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "hover:bg-purple-600 px-2",
      onClick: () => {
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { chatCommand: "$gw2_account$" }));
        setOpen(false);
      },
      title: "Counts messages with Guild Wars 2 Account names like XXX.1234 as entries"
    }, "GW2 Account Name"), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "hover:bg-purple-600 px-2",
      onClick: () => {
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { chatCommand: "$steam_friend$" }));
        setOpen(false);
      },
      title: "Counts messages with Steam Friend codes like 12345678 as entries"
    }, "Steam Friend Code"), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "hover:bg-purple-600 px-2",
      onClick: () => {
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { chatCommand: "$gw2_or_steam$" }));
        setOpen(false);
      },
      title: "Counts messages that include either a GW2 Account or Steam Friend Code as entries"
    }, "GW2 or Steam")) : null);
  }
  function SettingsComponent({
    channelId,
    settings,
    setSettings,
    setChatPaused,
    resetChat,
    discordSettings
  }) {
    return /* @__PURE__ */ import_react14.default.createElement(import_react14.default.Fragment, null, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-row gap-2 mt-2"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-row justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md",
      title: "This will be sent to chat by your account to tell winners, if Send Message is enabled below"
    }, "Winner Message"), /* @__PURE__ */ import_react14.default.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-r-md border-b border-purple-600 flex-1",
      placeholder: "Winner Message...",
      value: settings.winnerMessage,
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { winnerMessage: e3.target.value })),
      title: "Chat command to enter - leave empty for none"
    })), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-row justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md",
      title: "Filters messages to include this"
    }, "Chat Command"), /* @__PURE__ */ import_react14.default.createElement("input", {
      className: "bg-gray-700 px-2 py-1 border-b border-purple-600 flex-1",
      placeholder: "Empty means any message...",
      value: settings.chatCommand,
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { chatCommand: e3.target.value })),
      title: "Chat command to enter - leave empty for none"
    }), /* @__PURE__ */ import_react14.default.createElement(ChatCommandPicker, {
      setSettings
    }))), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-row gap-2 mt-2 text-sm"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-1 flex-row gap-2"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "Will limit winners to those who follow you, will slow down giveaways"
    }, "Followers Only"), /* @__PURE__ */ import_react14.default.createElement("button", {
      className: "flex-1 text-2xl text-center justify-center items-center flex transition-opacity hover:opacity-60",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { followersOnly: !s3.followersOnly }))
    }, settings.followersOnly ? /* @__PURE__ */ import_react14.default.createElement(FaCheck, null) : /* @__PURE__ */ import_react14.default.createElement(FaTimes, null))), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "If enabled, will send messages tagging winners in Twitch chat"
    }, "Send Message"), /* @__PURE__ */ import_react14.default.createElement("button", {
      className: "flex-1 text-2xl text-center justify-center items-center flex transition-opacity hover:opacity-60",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { sendMessages: !s3.sendMessages }))
    }, settings.sendMessages ? /* @__PURE__ */ import_react14.default.createElement(FaCheck, null) : /* @__PURE__ */ import_react14.default.createElement(FaTimes, null)))), /* @__PURE__ */ import_react14.default.createElement(Time, {
      setChatPaused,
      resetChat: () => resetChat(),
      channelId,
      chatCommand: settings.chatCommand,
      timerBell: settings.timerBell,
      setSettings,
      discordSettings,
      duration: settings.timerDuration,
      alertTheme: settings.alertTheme,
      alertCustomImageUrl: settings.alertCustomImageUrl,
      followersOnly: settings.followersOnly,
      alertHidden: settings.timerAlertHidden
    })), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-row gap-2 mt-2 text-sm"
    }, /* @__PURE__ */ import_react14.default.createElement(SliderOuter, {
      label: "Sub Luck",
      title: "Will enter subscribers this amount of times into the giveaways",
      value: settings.subLuck,
      min: 1,
      max: 10,
      onChange: (val) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { subLuck: val }))
    }), /* @__PURE__ */ import_react14.default.createElement(SliderOuter, {
      label: "Winners",
      title: "How many winners to draw per giveaway",
      value: settings.numberOfWinners,
      min: 1,
      max: 10,
      onChange: (val) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { numberOfWinners: val }))
    }), /* @__PURE__ */ import_react14.default.createElement(SliderOuter, {
      label: "Spam Limit",
      title: "How many messages of chat command if present before being removed from selection",
      value: settings.spamLimit || 1,
      min: 1,
      max: 10,
      onChange: (val) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { spamLimit: val })),
      renderValue: (val) => /* @__PURE__ */ import_react14.default.createElement(import_react14.default.Fragment, null, val === 1 ? "Off" : `${val}+`)
    })));
  }

  // src/components/primitives/giveaways.tsx
  var import_react15 = __toModule(require_react());

  // node_modules/react-icons/gi/index.esm.js
  function GiPartyPopper(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M122.7 23.32l1.7 21.87-16.7 14.25 21.4 5.17 8.4 20.25L149 66.18l21.8-1.75-14.2-16.71 5.1-21.32-20.3 8.35-18.7-11.43zM464 32a16 16 0 0 0-16 16 16 16 0 0 0 16 16 16 16 0 0 0 16-16 16 16 0 0 0-16-16zM239.8 42.5a16 16 0 0 0-16 16 16 16 0 0 0 16 16 16 16 0 0 0 16-16 16 16 0 0 0-16-16zm183.9 6.84c-9.2 1.74-17.7 7.18-25.9 14.28-7.6 6.53-14.7 14.66-20.7 23.45-18.8 3.01-37.6 10.67-50.2 21.13-16.1 13.2-30.4 35.8-38.2 59.1-7.4 3.1-14.4 6.8-20.1 10.8-15.5 10.9-23.5 31.8-29.4 50-5.9 18.3-8.8 34.3-8.8 34.3l17.8 3.2s2.7-15 8.1-31.9c5.5-16.9 14.8-35.3 22.7-40.8 1.3-.9 3-1.9 4.5-2.8-.6 5.7-.6 11.4.3 16.8 1.8 11.4 8 22.3 19 28.2 7.8 4.2 16.6 3.2 24 .2 7.4-3.1 14-8.2 19.7-14.2 5.7-6 10.4-13.1 13.2-20.6 2.8-7.5 3.8-16 .2-23.9h-.1c-3.9-8.4-11.4-13.8-19.4-16.1-8-2.3-16.6-2.2-25.2-.9-1.5.2-2.9.7-4.4 1 7.4-15.8 18-30.7 27.5-38.6 6.2-5.1 16.6-10 27.7-13.6-1.4 3.8-2.5 7.6-3 11.5-1.6 10.5.7 21.9 9.1 29.7 6.1 5.6 14.3 6.5 21.5 5.3 7.1-1.2 14-4.4 20.2-8.5 6.2-4.2 11.7-9.4 15.6-15.5 3.9-6.1 6.5-13.9 4-21.7v-.1c-3.3-10.07-11.5-16.99-20.6-20.27-3.9-1.4-8-2.19-12.2-2.66 2.9-3.26 5.9-6.31 8.9-8.92 6.8-5.84 13.7-9.5 17.6-10.23l-3.4-17.68zM174.8 84.39l-15.2 9.56 34.5 55.25-56.4 2.9 26.5 57.8 16.4-7.6-15.5-33.6 60.6-3.1-50.9-81.21zm216.4 19.31c6.1-.1 11.5.6 15.5 2.1 5.4 1.9 8.1 4.3 9.5 8.8.4 1.1.2 3.3-1.9 6.6-2.2 3.4-6.1 7.2-10.5 10.2-4.5 3-9.5 5.1-13.2 5.7-3.8.7-5.5 0-6.3-.7-3.5-3.2-4.5-7.2-3.5-13.9.8-5.4 3.3-11.9 7-18.6 1.2 0 2.3-.2 3.4-.2zM94.99 123a16 16 0 0 0-16 16 16 16 0 0 0 16 16A16 16 0 0 0 111 139a16 16 0 0 0-16.01-16zm356.11 37.2l-14.4 16.6-21.8-1.8 11.4 18.8-8.5 20.2 21.4-5 16.6 14.3 1.9-21.9 18.7-11.4-20.2-8.5-5.1-21.3zm-123.5 16.5c2.9.1 5.6.5 7.7 1.1 4.3 1.2 6.6 3 8.2 6.4.9 1.9 1 5.4-.7 10-1.7 4.7-5.2 10.1-9.4 14.6s-9.3 8.1-13.5 9.8c-4.2 1.7-6.8 1.6-8.5.7h-.1c-5.8-3.2-8.6-7.8-9.7-15.2-1-6.3-.3-14.3 1.8-22.9 4.9-1.7 9.8-3.1 14.5-3.8 3.5-.5 6.7-.7 9.7-.7zm-202.4 51.9c-7.2-.2-11.7 1.5-14.5 4.3-2.8 2.8-4.5 7.3-4.3 14.5.2 7.3 2.6 16.9 7.2 27.6 9.2 21.5 27.3 47.4 51.6 71.8 24.3 24.3 50.3 42.3 71.8 51.5 10.6 4.6 20.2 7 27.5 7.2 7.3.3 11.7-1.5 14.5-4.3 2.8-2.8 4.6-7.2 4.3-14.5-.2-7.3-2.6-16.9-7.2-27.6-9.2-21.4-27.2-47.4-51.5-71.7-24.3-24.4-50.3-42.4-71.8-51.6-10.7-4.6-20.3-7-27.6-7.2zm232 31.3l-33 54-29.1-27.9-12.4 13 45.1 43.3 33.8-55.2 38.7 32.3 89.3-38.2-7-16.6-79.3 34-46.1-38.7zM93.43 272.6l-17.64 57.9c41.41 49.1 89.71 76.7 142.11 94.7l21.6-6.6c-3.1-1.1-6.4-2.4-9.7-3.8-24.4-10.4-51.7-29.6-77.3-55.3-25.7-25.7-44.9-53-55.34-77.4-1.41-3.2-2.65-6.4-3.73-9.5zm-23.82 78.2l-14.01 46c28.89 27 59 39.2 90.6 50.2l43.4-13.2c-43.2-17.6-84-43.3-119.99-83zM368 352a16 16 0 0 0-16 16 16 16 0 0 0 16 16 16 16 0 0 0 16-16 16 16 0 0 0-16-16zM49.81 415.9l-20.29 66.6 88.28-26.9c-22.77-9.1-45.78-20.7-67.99-39.7z" } }] })(props);
  }

  // src/components/primitives/giveaways.tsx
  var import_classnames = __toModule(require_classnames());
  function filterSettings(s3) {
    const { subLuck, numberOfWinners, followersOnly, sendMessages, chatCommand, winnerMessage } = s3;
    return {
      subLuck,
      numberOfWinners,
      followersOnly,
      sendMessages,
      chatCommand,
      winnerMessage
    };
  }
  function InstantGiveaway({
    setWinners,
    channelInfo,
    discordSettings,
    settings,
    client,
    setPastGiveaways,
    forfeits
  }) {
    const [thinking, setThinking] = import_react15.default.useState(false);
    return /* @__PURE__ */ import_react15.default.createElement("button", {
      title: "A giveaway that includes all viewers, regardless of if they've chatted or not",
      className: "bg-purple-600 px-2 py-4 text-white rounded-md mt-2 overflow-hidden flex flex-row items-center justify-center text-center gap-1 flex-1 select-none transform transition-all hover:translate-y-0.5 hover:scale-95 hover:bg-purple-700",
      onClick: async () => {
        if (!channelInfo.login)
          return;
        try {
          setThinking(true);
          const { winners: giveawayWinner, giveawayStats } = await getInstantGiveaway(client, channelInfo, settings, discordSettings, forfeits);
          if (!giveawayWinner.length) {
            Et.error("No winners found that match conditions!", {
              position: "bottom-center",
              style: { fontSize: "1rem", padding: "0.2rem" }
            });
            return;
          }
          setWinners((w2) => w2.concat(giveawayWinner.map((u3) => ({ username: u3.login }))));
          setPastGiveaways((p2) => [
            {
              type: GiveawayType.Instant,
              createdAt: new Date().toISOString(),
              winners: giveawayWinner,
              settings: filterSettings(settings),
              giveawayStats,
              notes: ""
            }
          ].concat(p2));
        } finally {
          setThinking(false);
        }
      }
    }, thinking ? /* @__PURE__ */ import_react15.default.createElement(FaSpinner, {
      className: "animate-spin"
    }) : /* @__PURE__ */ import_react15.default.createElement(FaDice, {
      className: "text-2xl"
    }), " Viewers Instant Giveaway");
  }
  function ChatGiveaway({
    chatEvents,
    setWinners,
    channelInfo,
    discordSettings,
    settings,
    client,
    setPastGiveaways,
    forfeits
  }) {
    const [thinking, setThinking] = import_react15.default.useState(false);
    return /* @__PURE__ */ import_react15.default.createElement("button", {
      title: "A giveaway that includes all viewers who have chatted, optionally with a chat command if set",
      className: "bg-purple-600 px-2 py-4 text-white rounded-md mt-2 overflow-hidden flex flex-row items-center justify-center text-center gap-1 flex-1 select-none transform transition-transform hover:translate-y-0.5 hover:scale-95 hover:bg-purple-700",
      onClick: async () => {
        try {
          setThinking(true);
          const { winners: giveawayWinner, giveawayStats } = await getChatGiveaway(client, channelInfo, chatEvents, settings.chatCommand, settings, discordSettings, forfeits);
          if (!giveawayWinner.length) {
            Et.error("No winners found that match conditions!", {
              position: "bottom-center",
              style: { fontSize: "1rem", padding: "0.2rem" }
            });
            return;
          }
          setWinners((w2) => w2.concat(giveawayWinner.map((w3) => ({
            username: w3.login,
            isFollower: !!w3.wasFollower,
            isSubscriber: !!w3.wasSubscriber,
            otherUsersWithEntry: w3.otherUsersWithEntry
          }))));
          setPastGiveaways((p2) => [
            {
              type: GiveawayType.Chat,
              createdAt: new Date().toISOString(),
              winners: giveawayWinner,
              settings: filterSettings(settings),
              giveawayStats,
              notes: ""
            }
          ].concat(p2));
        } finally {
          setThinking(false);
        }
      }
    }, thinking ? /* @__PURE__ */ import_react15.default.createElement(FaSpinner, {
      className: "animate-spin"
    }) : /* @__PURE__ */ import_react15.default.createElement(FaDice, {
      className: "text-2xl"
    }), " Active Chatter Giveaway");
  }
  function Winner(_a) {
    var _b = _a, {
      winners,
      onClear
    } = _b, anounceArgs = __objRest(_b, [
      "winners",
      "onClear"
    ]);
    return winners.length ? /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "grid gap-2 grid-cols-2 mt-3"
    }, winners.map((winner, i3) => {
      var _a2;
      const hasWarning = (winner.otherUsersWithEntry || []).length !== 0;
      return /* @__PURE__ */ import_react15.default.createElement("div", {
        key: winner.username,
        className: (0, import_classnames.default)("bg-gray-600 border border-gray-600 text-white rounded-md overflow-hidden flex flex-row items-center justify-center px-2 py-4 text-center relative", { "border-yellow-500": hasWarning })
      }, /* @__PURE__ */ import_react15.default.createElement("div", {
        className: (0, import_classnames.default)("flex flex-row items-center relative", { "-top-2": hasWarning })
      }, /* @__PURE__ */ import_react15.default.createElement(GiPartyPopper, {
        className: "text-purple-300 text-xl"
      }), " ", /* @__PURE__ */ import_react15.default.createElement("div", {
        className: "px-2"
      }, winner.username, " wins!"), " ", /* @__PURE__ */ import_react15.default.createElement(GiPartyPopper, {
        className: "text-purple-300 text-xl"
      })), /* @__PURE__ */ import_react15.default.createElement(FaBullhorn, {
        className: (0, import_classnames.default)("text-2xl absolute right-12 cursor-pointer select-none transform opacity-80 transition-opacity hover:opacity-100 hover:scale-105", { "-mt-4": hasWarning }),
        onClick: () => announceWinner(__spreadProps(__spreadValues({}, anounceArgs), {
          giveawayType: winner.source,
          winner: winner.username,
          force: true
        }))
      }), /* @__PURE__ */ import_react15.default.createElement(FaTimes, {
        className: (0, import_classnames.default)("text-2xl absolute right-5 text-red-500 cursor-pointer transform opacity-80 transition-opacity hover:opacity-100 select-none hover:scale-105", { "-mt-4": hasWarning }),
        onClick: () => onClear(i3)
      }), hasWarning ? /* @__PURE__ */ import_react15.default.createElement("div", {
        className: "text-xs text-yellow-500 pt-2 absolute bottom-1 right-0 left-0 flex flex-row gap-1 text-center justify-center items-center"
      }, /* @__PURE__ */ import_react15.default.createElement(FaExclamationTriangle, null), " ", (_a2 = winner.otherUsersWithEntry) == null ? void 0 : _a2.length, " other Twitch users submitted same entry, shown in chat") : null);
    })) : null;
  }

  // src/components/primitives/ChatBox.tsx
  var import_react16 = __toModule(require_react());
  var import_classnames2 = __toModule(require_classnames());
  function isVisibleIn(ele, container, buffer = 50) {
    const eleTop = ele.offsetTop;
    const eleBottom = eleTop + ele.clientHeight;
    const containerTop = container.scrollTop;
    const containerBottom = containerTop + container.clientHeight + buffer;
    return eleTop >= containerTop && eleBottom <= containerBottom || eleTop < containerTop && containerTop < eleBottom || eleTop < containerBottom && containerBottom < eleBottom;
  }
  function ChatControls({
    chatEvents,
    paused,
    setPaused,
    clear
  }) {
    return /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, paused ? /* @__PURE__ */ import_react16.default.createElement(FaPlayCircle, {
      className: "select-none cursor-pointer transition-opacity hover:opacity-70",
      onClick: () => setPaused((p2) => !p2),
      title: "Resume chat"
    }) : /* @__PURE__ */ import_react16.default.createElement(FaPauseCircle, {
      className: "select-none cursor-pointer  transition-opacity hover:opacity-70",
      onClick: () => setPaused((p2) => !p2),
      title: "Pause chat, misses messages while paused"
    }), /* @__PURE__ */ import_react16.default.createElement(FaTimesCircle, {
      className: "text-red-500 select-none cursor-pointer  transition-opacity hover:opacity-70",
      onClick: () => clear(),
      title: "Clear chat"
    }), /* @__PURE__ */ import_react16.default.createElement(FaSave, {
      className: "select-none cursor-pointer  transition-opacity hover:opacity-70",
      title: "Saves all messages (not just those shown)",
      onClick: async () => {
        const ts = format(new Date(), "yyyy-MM-dd--HH-mm-ss");
        await Neutralino.storage.setData(`${ts}-chat`, JSON.stringify(chatEvents, void 0, 2));
        Et.success(`Saved ${chatEvents.length} messages`, { position: "bottom-right" });
      }
    }));
  }
  function ChatBox({
    chatEvents,
    winners,
    paused,
    setPaused,
    clear,
    settings,
    setSettings,
    messageDelay
  }) {
    var _a;
    const shouldAutoScroll = (_a = settings.autoScroll) != null ? _a : true;
    const limitedMessages = chatEvents.filter((c3) => winners.length ? winners.flatMap((c4) => [c4.username].concat(c4.otherUsersWithEntry || [])).includes(c3.username) : true);
    const chatBottomRef = import_react16.default.useRef(null);
    const chatRef = import_react16.default.useRef(null);
    import_react16.default.useLayoutEffect(() => {
      var _a2;
      if (chatRef.current && chatBottomRef.current) {
        const shouldScroll = isVisibleIn(chatBottomRef.current, chatRef.current);
        if (shouldScroll && shouldAutoScroll) {
          (_a2 = chatBottomRef.current) == null ? void 0 : _a2.scrollIntoView({
            behavior: "smooth",
            block: "start"
          });
        }
      }
    }, [limitedMessages, shouldAutoScroll]);
    const [search, setSearch] = import_react16.default.useState("");
    const searchedMessages = search ? limitedMessages.filter((m3) => m3.username.toLowerCase().includes(search.toLowerCase()) || m3.msg.toLowerCase().includes(search.toLowerCase())) : limitedMessages;
    return /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "mt-2 rounded-md bg-gray-700 flex-1 flex flex-col relative overflow-hidden"
    }, /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "bg-gray-600 h-8 gap-2 flex justify-between px-5 items-center text-white z-50"
    }, /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "flex flex-row justify-center items-center flex-1 text-xs"
    }, /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1.5 border border-purple-600 rounded-l-md",
      title: "This will be sent to chat by your account to tell winners, if Send Message is enabled below"
    }, /* @__PURE__ */ import_react16.default.createElement(FaSearch, null)), /* @__PURE__ */ import_react16.default.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-r-md border-b border-purple-600 flex-1",
      placeholder: "Search...",
      value: search,
      onChange: (e3) => setSearch(e3.target.value),
      title: "Search chat"
    })), /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "flex-1"
    }, chatEvents.length, " message", chatEvents.length === 1 ? "" : "s"), /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "flex-1 text-yellow-600 text-xs"
    }, winners.length ? /* @__PURE__ */ import_react16.default.createElement(import_react16.default.Fragment, null, limitedMessages.length, " winner message", limitedMessages.length === 1 ? "" : "s") : null), /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "flex flex-row justify-center items-center gap-2 text-xl flex-2"
    }, /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "text-xs text-center"
    }, messageDelay), /* @__PURE__ */ import_react16.default.createElement("button", {
      className: (0, import_classnames2.default)("text-xs flex justify-center items-center gap-1 border border-purple-600 px-2 py-1 rounded-md", {
        "bg-purple-600": shouldAutoScroll
      }),
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { autoScroll: !s3.autoScroll }))
    }, shouldAutoScroll ? /* @__PURE__ */ import_react16.default.createElement(FaCheck, null) : /* @__PURE__ */ import_react16.default.createElement(FaTimes, null), " Following"), /* @__PURE__ */ import_react16.default.createElement(ChatControls, {
      chatEvents,
      paused,
      setPaused,
      clear
    }))), /* @__PURE__ */ import_react16.default.createElement("div", {
      className: "relative flex-1"
    }, chatEvents.length === 0 ? /* @__PURE__ */ import_react16.default.createElement("span", {
      className: (0, import_classnames2.default)("absolute inset-0 text-center flex justify-center items-center")
    }, "Logs will appear here...") : /* @__PURE__ */ import_react16.default.createElement("div", {
      className: (0, import_classnames2.default)("absolute overflow-y-auto inset-0 px-2 pt-1 pb-3 flex flex-col gap-1 h-full"),
      ref: chatRef
    }, searchedMessages.map((c3) => {
      const hasWarning = winners.length > 0 && winners.some((w2) => (w2.otherUsersWithEntry || []).includes(c3.username));
      return /* @__PURE__ */ import_react16.default.createElement("div", {
        key: c3.id,
        className: (0, import_classnames2.default)("relative", { "bg-yellow-500 bg-opacity-60 rounded-md px-1": hasWarning })
      }, /* @__PURE__ */ import_react16.default.createElement("span", {
        className: "text-xs mr-0.5"
      }, "[", c3.formattedTmiTs, "]"), /* @__PURE__ */ import_react16.default.createElement("span", {
        className: (0, import_classnames2.default)("rounded-full bg-gray-300 h-4 w-4 inline-block relative", {
          "bg-yellow-500": c3.isSubscriber,
          "bg-purple-600": c3.isMod,
          "top-1": !c3.isSubscriber && !c3.isMod
        })
      }, c3.isMod ? /* @__PURE__ */ import_react16.default.createElement("span", {
        className: "flex justify-center items-center text-xs cursor-default select-none",
        title: "Mod"
      }, "M") : c3.isSubscriber ? /* @__PURE__ */ import_react16.default.createElement("span", {
        className: "flex justify-center items-center text-xs cursor-default select-none",
        title: "Subscriber"
      }, "S") : null), /* @__PURE__ */ import_react16.default.createElement("span", {
        className: "mx-0.5",
        style: { color: c3.color }
      }, "[", c3.displayName, "]"), " ", c3.msg, hasWarning ? /* @__PURE__ */ import_react16.default.createElement(FaExclamationTriangle, {
        className: "text-lg top-0.5 right-1.5 absolute cursor-help",
        title: "This user submitted an entry matching a winner"
      }) : null);
    }), /* @__PURE__ */ import_react16.default.createElement("div", {
      ref: chatBottomRef
    })))));
  }

  // src/components/primitives/Stats.tsx
  var import_react46 = __toModule(require_react());

  // node_modules/recharts/es6/container/Surface.js
  var import_react18 = __toModule(require_react());
  var import_classnames3 = __toModule(require_classnames());

  // node_modules/recharts/es6/util/types.js
  var import_isObject = __toModule(require_isObject());
  var import_react17 = __toModule(require_react());
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  var SVGContainerPropKeys = ["viewBox", "children"];
  var SVGElementPropKeys = ["aria-activedescendant", "aria-atomic", "aria-autocomplete", "aria-busy", "aria-checked", "aria-colcount", "aria-colindex", "aria-colspan", "aria-controls", "aria-current", "aria-describedby", "aria-details", "aria-disabled", "aria-errormessage", "aria-expanded", "aria-flowto", "aria-haspopup", "aria-hidden", "aria-invalid", "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-level", "aria-live", "aria-modal", "aria-multiline", "aria-multiselectable", "aria-orientation", "aria-owns", "aria-placeholder", "aria-posinset", "aria-pressed", "aria-readonly", "aria-relevant", "aria-required", "aria-roledescription", "aria-rowcount", "aria-rowindex", "aria-rowspan", "aria-selected", "aria-setsize", "aria-sort", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "className", "color", "height", "id", "lang", "max", "media", "method", "min", "name", "style", "target", "type", "width", "role", "tabIndex", "accentHeight", "accumulate", "additive", "alignmentBaseline", "allowReorder", "alphabetic", "amplitude", "arabicForm", "ascent", "attributeName", "attributeType", "autoReverse", "azimuth", "baseFrequency", "baselineShift", "baseProfile", "bbox", "begin", "bias", "by", "calcMode", "capHeight", "clip", "clipPath", "clipPathUnits", "clipRule", "colorInterpolation", "colorInterpolationFilters", "colorProfile", "colorRendering", "contentScriptType", "contentStyleType", "cursor", "cx", "cy", "d", "decelerate", "descent", "diffuseConstant", "direction", "display", "divisor", "dominantBaseline", "dur", "dx", "dy", "edgeMode", "elevation", "enableBackground", "end", "exponent", "externalResourcesRequired", "fill", "fillOpacity", "fillRule", "filter", "filterRes", "filterUnits", "floodColor", "floodOpacity", "focusable", "fontFamily", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontWeight", "format", "from", "fx", "fy", "g1", "g2", "glyphName", "glyphOrientationHorizontal", "glyphOrientationVertical", "glyphRef", "gradientTransform", "gradientUnits", "hanging", "horizAdvX", "horizOriginX", "href", "ideographic", "imageRendering", "in2", "in", "intercept", "k1", "k2", "k3", "k4", "k", "kernelMatrix", "kernelUnitLength", "kerning", "keyPoints", "keySplines", "keyTimes", "lengthAdjust", "letterSpacing", "lightingColor", "limitingConeAngle", "local", "markerEnd", "markerHeight", "markerMid", "markerStart", "markerUnits", "markerWidth", "mask", "maskContentUnits", "maskUnits", "mathematical", "mode", "numOctaves", "offset", "opacity", "operator", "order", "orient", "orientation", "origin", "overflow", "overlinePosition", "overlineThickness", "paintOrder", "panose1", "pathLength", "patternContentUnits", "patternTransform", "patternUnits", "pointerEvents", "points", "pointsAtX", "pointsAtY", "pointsAtZ", "preserveAlpha", "preserveAspectRatio", "primitiveUnits", "r", "radius", "refX", "refY", "renderingIntent", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "result", "rotate", "rx", "ry", "seed", "shapeRendering", "slope", "spacing", "specularConstant", "specularExponent", "speed", "spreadMethod", "startOffset", "stdDeviation", "stemh", "stemv", "stitchTiles", "stopColor", "stopOpacity", "strikethroughPosition", "strikethroughThickness", "string", "stroke", "strokeDasharray", "strokeDashoffset", "strokeLinecap", "strokeLinejoin", "strokeMiterlimit", "strokeOpacity", "strokeWidth", "surfaceScale", "systemLanguage", "tableValues", "targetX", "targetY", "textAnchor", "textDecoration", "textLength", "textRendering", "to", "transform", "u1", "u2", "underlinePosition", "underlineThickness", "unicode", "unicodeBidi", "unicodeRange", "unitsPerEm", "vAlphabetic", "values", "vectorEffect", "version", "vertAdvY", "vertOriginX", "vertOriginY", "vHanging", "vIdeographic", "viewTarget", "visibility", "vMathematical", "widths", "wordSpacing", "writingMode", "x1", "x2", "x", "xChannelSelector", "xHeight", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlns", "xmlnsXlink", "xmlSpace", "y1", "y2", "y", "yChannelSelector", "z", "zoomAndPan", "ref", "key", "angle"];
  var EventKeys = ["dangerouslySetInnerHTML", "onCopy", "onCopyCapture", "onCut", "onCutCapture", "onPaste", "onPasteCapture", "onCompositionEnd", "onCompositionEndCapture", "onCompositionStart", "onCompositionStartCapture", "onCompositionUpdate", "onCompositionUpdateCapture", "onFocus", "onFocusCapture", "onBlur", "onBlurCapture", "onChange", "onChangeCapture", "onBeforeInput", "onBeforeInputCapture", "onInput", "onInputCapture", "onReset", "onResetCapture", "onSubmit", "onSubmitCapture", "onInvalid", "onInvalidCapture", "onLoad", "onLoadCapture", "onError", "onErrorCapture", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyPressCapture", "onKeyUp", "onKeyUpCapture", "onAbort", "onAbortCapture", "onCanPlay", "onCanPlayCapture", "onCanPlayThrough", "onCanPlayThroughCapture", "onDurationChange", "onDurationChangeCapture", "onEmptied", "onEmptiedCapture", "onEncrypted", "onEncryptedCapture", "onEnded", "onEndedCapture", "onLoadedData", "onLoadedDataCapture", "onLoadedMetadata", "onLoadedMetadataCapture", "onLoadStart", "onLoadStartCapture", "onPause", "onPauseCapture", "onPlay", "onPlayCapture", "onPlaying", "onPlayingCapture", "onProgress", "onProgressCapture", "onRateChange", "onRateChangeCapture", "onSeeked", "onSeekedCapture", "onSeeking", "onSeekingCapture", "onStalled", "onStalledCapture", "onSuspend", "onSuspendCapture", "onTimeUpdate", "onTimeUpdateCapture", "onVolumeChange", "onVolumeChangeCapture", "onWaiting", "onWaitingCapture", "onAuxClick", "onAuxClickCapture", "onClick", "onClickCapture", "onContextMenu", "onContextMenuCapture", "onDoubleClick", "onDoubleClickCapture", "onDrag", "onDragCapture", "onDragEnd", "onDragEndCapture", "onDragEnter", "onDragEnterCapture", "onDragExit", "onDragExitCapture", "onDragLeave", "onDragLeaveCapture", "onDragOver", "onDragOverCapture", "onDragStart", "onDragStartCapture", "onDrop", "onDropCapture", "onMouseDown", "onMouseDownCapture", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseMoveCapture", "onMouseOut", "onMouseOutCapture", "onMouseOver", "onMouseOverCapture", "onMouseUp", "onMouseUpCapture", "onSelect", "onSelectCapture", "onTouchCancel", "onTouchCancelCapture", "onTouchEnd", "onTouchEndCapture", "onTouchMove", "onTouchMoveCapture", "onTouchStart", "onTouchStartCapture", "onPointerDown", "onPointerDownCapture", "onPointerMove", "onPointerMoveCapture", "onPointerUp", "onPointerUpCapture", "onPointerCancel", "onPointerCancelCapture", "onPointerEnter", "onPointerEnterCapture", "onPointerLeave", "onPointerLeaveCapture", "onPointerOver", "onPointerOverCapture", "onPointerOut", "onPointerOutCapture", "onGotPointerCapture", "onGotPointerCaptureCapture", "onLostPointerCapture", "onLostPointerCaptureCapture", "onScroll", "onScrollCapture", "onWheel", "onWheelCapture", "onAnimationStart", "onAnimationStartCapture", "onAnimationEnd", "onAnimationEndCapture", "onAnimationIteration", "onAnimationIterationCapture", "onTransitionEnd", "onTransitionEndCapture"];
  var filterProps = function filterProps2(props, includeEvents, isSvg) {
    if (!props || typeof props === "function" || typeof props === "boolean") {
      return null;
    }
    var inputProps = props;
    if (/* @__PURE__ */ (0, import_react17.isValidElement)(props)) {
      inputProps = props.props;
    }
    if (!(0, import_isObject.default)(inputProps)) {
      return null;
    }
    var out = {};
    Object.keys(inputProps).forEach(function(key) {
      if (SVGElementPropKeys.includes(key) || isSvg && SVGContainerPropKeys.includes(key) || includeEvents && EventKeys.includes(key)) {
        out[key] = inputProps[key];
      }
    });
    return out;
  };
  var adaptEventHandlers = function adaptEventHandlers2(props, newHandler) {
    if (!props || typeof props === "function" || typeof props === "boolean") {
      return null;
    }
    var inputProps = props;
    if (/* @__PURE__ */ (0, import_react17.isValidElement)(props)) {
      inputProps = props.props;
    }
    if (!(0, import_isObject.default)(inputProps)) {
      return null;
    }
    var out = {};
    Object.keys(inputProps).forEach(function(key) {
      if (EventKeys.includes(key)) {
        out[key] = newHandler || function(e3) {
          return inputProps[key](inputProps, e3);
        };
      }
    });
    return out;
  };
  var getEventHandlerOfChild = function getEventHandlerOfChild2(originalHandler, data, index2) {
    return function(e3) {
      originalHandler(data, index2, e3);
      return null;
    };
  };
  var adaptEventsOfChild = function adaptEventsOfChild2(props, data, index2) {
    if (!(0, import_isObject.default)(props) || _typeof(props) !== "object") {
      return null;
    }
    var out = null;
    Object.keys(props).forEach(function(key) {
      var item = props[key];
      if (EventKeys.includes(key) && typeof item === "function") {
        if (!out)
          out = {};
        out[key] = getEventHandlerOfChild(item, data, index2);
      }
    });
    return out;
  };

  // node_modules/recharts/es6/container/Surface.js
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Surface(props) {
    var children = props.children, width = props.width, height = props.height, viewBox = props.viewBox, className = props.className, style = props.style, others = _objectWithoutProperties(props, ["children", "width", "height", "viewBox", "className", "style"]);
    var svgView = viewBox || {
      width,
      height,
      x: 0,
      y: 0
    };
    var layerClass = (0, import_classnames3.default)("recharts-surface", className);
    return /* @__PURE__ */ import_react18.default.createElement("svg", _extends2({}, filterProps(others, true, true), {
      className: layerClass,
      width,
      height,
      style,
      viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height),
      version: "1.1"
    }), children);
  }

  // node_modules/recharts/es6/container/Layer.js
  var import_react19 = __toModule(require_react());
  var import_classnames4 = __toModule(require_classnames());
  function _extends3() {
    _extends3 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutProperties2(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose3(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function Layer(props) {
    var children = props.children, className = props.className, others = _objectWithoutProperties2(props, ["children", "className"]);
    var layerClass = (0, import_classnames4.default)("recharts-layer", className);
    return /* @__PURE__ */ import_react19.default.createElement("g", _extends3({
      className: layerClass
    }, filterProps(others, true)), children);
  }

  // node_modules/recharts/es6/component/Legend.js
  var import_isFunction = __toModule(require_isFunction());
  var import_uniqBy = __toModule(require_uniqBy());
  var import_react22 = __toModule(require_react());

  // node_modules/recharts/es6/component/DefaultLegendContent.js
  var import_react21 = __toModule(require_react());
  var import_classnames6 = __toModule(require_classnames());

  // node_modules/recharts/es6/shape/Symbols.js
  var import_upperFirst = __toModule(require_upperFirst());
  var import_react20 = __toModule(require_react());

  // node_modules/d3-path/src/path.js
  var pi = Math.PI;
  var tau = 2 * pi;
  var epsilon = 1e-6;
  var tauEpsilon = tau - epsilon;
  function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null;
    this._ = "";
  }
  function path() {
    return new Path();
  }
  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function(x3, y2) {
      this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y2);
    },
    closePath: function() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    },
    lineTo: function(x3, y2) {
      this._ += "L" + (this._x1 = +x3) + "," + (this._y1 = +y2);
    },
    quadraticCurveTo: function(x1, y1, x3, y2) {
      this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x3) + "," + (this._y1 = +y2);
    },
    bezierCurveTo: function(x1, y1, x22, y2, x3, y3) {
      this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y2 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
    },
    arcTo: function(x1, y1, x22, y2, r) {
      x1 = +x1, y1 = +y1, x22 = +x22, y2 = +y2, r = +r;
      var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (r < 0)
        throw new Error("negative radius: " + r);
      if (this._x1 === null) {
        this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
      } else if (!(l01_2 > epsilon))
        ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
        this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
      } else {
        var x20 = x22 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l2 = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l2 / l01, t21 = l2 / l21;
        if (Math.abs(t01 - 1) > epsilon) {
          this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
        }
        this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
      }
    },
    arc: function(x3, y2, r, a0, a1, ccw) {
      x3 = +x3, y2 = +y2, r = +r, ccw = !!ccw;
      var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x3 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      if (r < 0)
        throw new Error("negative radius: " + r);
      if (this._x1 === null) {
        this._ += "M" + x0 + "," + y0;
      } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      }
      if (!r)
        return;
      if (da < 0)
        da = da % tau + tau;
      if (da > tauEpsilon) {
        this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x3 - dx) + "," + (y2 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
      } else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x3 + r * Math.cos(a1)) + "," + (this._y1 = y2 + r * Math.sin(a1));
      }
    },
    rect: function(x3, y2, w2, h2) {
      this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y2) + "h" + +w2 + "v" + +h2 + "h" + -w2 + "Z";
    },
    toString: function() {
      return this._;
    }
  };
  var path_default = path;

  // node_modules/d3-shape/src/constant.js
  function constant_default(x3) {
    return function constant() {
      return x3;
    };
  }

  // node_modules/d3-shape/src/math.js
  var cos = Math.cos;
  var sin = Math.sin;
  var sqrt = Math.sqrt;
  var pi2 = Math.PI;
  var halfPi = pi2 / 2;
  var tau2 = 2 * pi2;

  // node_modules/d3-shape/src/array.js
  var slice = Array.prototype.slice;
  function array_default(x3) {
    return typeof x3 === "object" && "length" in x3 ? x3 : Array.from(x3);
  }

  // node_modules/d3-shape/src/curve/linear.js
  function Linear(context2) {
    this._context = context2;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y2) {
      x3 = +x3, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y2) : this._context.moveTo(x3, y2);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x3, y2);
          break;
      }
    }
  };
  function linear_default(context2) {
    return new Linear(context2);
  }

  // node_modules/d3-shape/src/point.js
  function x2(p2) {
    return p2[0];
  }
  function y(p2) {
    return p2[1];
  }

  // node_modules/d3-shape/src/line.js
  function line_default(x3, y2) {
    var defined3 = constant_default(true), context2 = null, curve = linear_default, output = null;
    x3 = typeof x3 === "function" ? x3 : x3 === void 0 ? x2 : constant_default(x3);
    y2 = typeof y2 === "function" ? y2 : y2 === void 0 ? y : constant_default(y2);
    function line(data) {
      var i3, n3 = (data = array_default(data)).length, d3, defined0 = false, buffer;
      if (context2 == null)
        output = curve(buffer = path_default());
      for (i3 = 0; i3 <= n3; ++i3) {
        if (!(i3 < n3 && defined3(d3 = data[i3], i3, data)) === defined0) {
          if (defined0 = !defined0)
            output.lineStart();
          else
            output.lineEnd();
        }
        if (defined0)
          output.point(+x3(d3, i3, data), +y2(d3, i3, data));
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    line.x = function(_2) {
      return arguments.length ? (x3 = typeof _2 === "function" ? _2 : constant_default(+_2), line) : x3;
    };
    line.y = function(_2) {
      return arguments.length ? (y2 = typeof _2 === "function" ? _2 : constant_default(+_2), line) : y2;
    };
    line.defined = function(_2) {
      return arguments.length ? (defined3 = typeof _2 === "function" ? _2 : constant_default(!!_2), line) : defined3;
    };
    line.curve = function(_2) {
      return arguments.length ? (curve = _2, context2 != null && (output = curve(context2)), line) : curve;
    };
    line.context = function(_2) {
      return arguments.length ? (_2 == null ? context2 = output = null : output = curve(context2 = _2), line) : context2;
    };
    return line;
  }

  // node_modules/d3-shape/src/area.js
  function area_default(x0, y0, y1) {
    var x1 = null, defined3 = constant_default(true), context2 = null, curve = linear_default, output = null;
    x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x2 : constant_default(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default(0) : constant_default(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant_default(+y1);
    function area(data) {
      var i3, j3, k3, n3 = (data = array_default(data)).length, d3, defined0 = false, buffer, x0z = new Array(n3), y0z = new Array(n3);
      if (context2 == null)
        output = curve(buffer = path_default());
      for (i3 = 0; i3 <= n3; ++i3) {
        if (!(i3 < n3 && defined3(d3 = data[i3], i3, data)) === defined0) {
          if (defined0 = !defined0) {
            j3 = i3;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();
            for (k3 = i3 - 1; k3 >= j3; --k3) {
              output.point(x0z[k3], y0z[k3]);
            }
            output.lineEnd();
            output.areaEnd();
          }
        }
        if (defined0) {
          x0z[i3] = +x0(d3, i3, data), y0z[i3] = +y0(d3, i3, data);
          output.point(x1 ? +x1(d3, i3, data) : x0z[i3], y1 ? +y1(d3, i3, data) : y0z[i3]);
        }
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    function arealine() {
      return line_default().defined(defined3).curve(curve).context(context2);
    }
    area.x = function(_2) {
      return arguments.length ? (x0 = typeof _2 === "function" ? _2 : constant_default(+_2), x1 = null, area) : x0;
    };
    area.x0 = function(_2) {
      return arguments.length ? (x0 = typeof _2 === "function" ? _2 : constant_default(+_2), area) : x0;
    };
    area.x1 = function(_2) {
      return arguments.length ? (x1 = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default(+_2), area) : x1;
    };
    area.y = function(_2) {
      return arguments.length ? (y0 = typeof _2 === "function" ? _2 : constant_default(+_2), y1 = null, area) : y0;
    };
    area.y0 = function(_2) {
      return arguments.length ? (y0 = typeof _2 === "function" ? _2 : constant_default(+_2), area) : y0;
    };
    area.y1 = function(_2) {
      return arguments.length ? (y1 = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default(+_2), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
      return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
      return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
      return arealine().x(x1).y(y0);
    };
    area.defined = function(_2) {
      return arguments.length ? (defined3 = typeof _2 === "function" ? _2 : constant_default(!!_2), area) : defined3;
    };
    area.curve = function(_2) {
      return arguments.length ? (curve = _2, context2 != null && (output = curve(context2)), area) : curve;
    };
    area.context = function(_2) {
      return arguments.length ? (_2 == null ? context2 = output = null : output = curve(context2 = _2), area) : context2;
    };
    return area;
  }

  // node_modules/d3-shape/src/symbol/circle.js
  var circle_default = {
    draw(context2, size) {
      const r = sqrt(size / pi2);
      context2.moveTo(r, 0);
      context2.arc(0, 0, r, 0, tau2);
    }
  };

  // node_modules/d3-shape/src/symbol/cross.js
  var cross_default = {
    draw(context2, size) {
      const r = sqrt(size / 5) / 2;
      context2.moveTo(-3 * r, -r);
      context2.lineTo(-r, -r);
      context2.lineTo(-r, -3 * r);
      context2.lineTo(r, -3 * r);
      context2.lineTo(r, -r);
      context2.lineTo(3 * r, -r);
      context2.lineTo(3 * r, r);
      context2.lineTo(r, r);
      context2.lineTo(r, 3 * r);
      context2.lineTo(-r, 3 * r);
      context2.lineTo(-r, r);
      context2.lineTo(-3 * r, r);
      context2.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/diamond.js
  var tan30 = sqrt(1 / 3);
  var tan30_2 = tan30 * 2;
  var diamond_default = {
    draw(context2, size) {
      const y2 = sqrt(size / tan30_2);
      const x3 = y2 * tan30;
      context2.moveTo(0, -y2);
      context2.lineTo(x3, 0);
      context2.lineTo(0, y2);
      context2.lineTo(-x3, 0);
      context2.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/square.js
  var square_default = {
    draw(context2, size) {
      const w2 = sqrt(size);
      const x3 = -w2 / 2;
      context2.rect(x3, x3, w2, w2);
    }
  };

  // node_modules/d3-shape/src/symbol/star.js
  var ka = 0.8908130915292852;
  var kr = sin(pi2 / 10) / sin(7 * pi2 / 10);
  var kx = sin(tau2 / 10) * kr;
  var ky = -cos(tau2 / 10) * kr;
  var star_default = {
    draw(context2, size) {
      const r = sqrt(size * ka);
      const x3 = kx * r;
      const y2 = ky * r;
      context2.moveTo(0, -r);
      context2.lineTo(x3, y2);
      for (let i3 = 1; i3 < 5; ++i3) {
        const a3 = tau2 * i3 / 5;
        const c3 = cos(a3);
        const s3 = sin(a3);
        context2.lineTo(s3 * r, -c3 * r);
        context2.lineTo(c3 * x3 - s3 * y2, s3 * x3 + c3 * y2);
      }
      context2.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/triangle.js
  var sqrt3 = sqrt(3);
  var triangle_default = {
    draw(context2, size) {
      const y2 = -sqrt(size / (sqrt3 * 3));
      context2.moveTo(0, y2 * 2);
      context2.lineTo(-sqrt3 * y2, -y2);
      context2.lineTo(sqrt3 * y2, -y2);
      context2.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/wye.js
  var c2 = -0.5;
  var s2 = sqrt(3) / 2;
  var k2 = 1 / sqrt(12);
  var a2 = (k2 / 2 + 1) * 3;
  var wye_default = {
    draw(context2, size) {
      const r = sqrt(size / a2);
      const x0 = r / 2, y0 = r * k2;
      const x1 = x0, y1 = r * k2 + r;
      const x22 = -x1, y2 = y1;
      context2.moveTo(x0, y0);
      context2.lineTo(x1, y1);
      context2.lineTo(x22, y2);
      context2.lineTo(c2 * x0 - s2 * y0, s2 * x0 + c2 * y0);
      context2.lineTo(c2 * x1 - s2 * y1, s2 * x1 + c2 * y1);
      context2.lineTo(c2 * x22 - s2 * y2, s2 * x22 + c2 * y2);
      context2.lineTo(c2 * x0 + s2 * y0, c2 * y0 - s2 * x0);
      context2.lineTo(c2 * x1 + s2 * y1, c2 * y1 - s2 * x1);
      context2.lineTo(c2 * x22 + s2 * y2, c2 * y2 - s2 * x22);
      context2.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol.js
  function Symbol2(type, size) {
    let context2 = null;
    type = typeof type === "function" ? type : constant_default(type || circle_default);
    size = typeof size === "function" ? size : constant_default(size === void 0 ? 64 : +size);
    function symbol() {
      let buffer;
      if (!context2)
        context2 = buffer = path_default();
      type.apply(this, arguments).draw(context2, +size.apply(this, arguments));
      if (buffer)
        return context2 = null, buffer + "" || null;
    }
    symbol.type = function(_2) {
      return arguments.length ? (type = typeof _2 === "function" ? _2 : constant_default(_2), symbol) : type;
    };
    symbol.size = function(_2) {
      return arguments.length ? (size = typeof _2 === "function" ? _2 : constant_default(+_2), symbol) : size;
    };
    symbol.context = function(_2) {
      return arguments.length ? (context2 = _2 == null ? null : _2, symbol) : context2;
    };
    return symbol;
  }

  // node_modules/d3-shape/src/noop.js
  function noop_default() {
  }

  // node_modules/d3-shape/src/curve/basis.js
  function point(that, x3, y2) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x3) / 6, (that._y0 + 4 * that._y1 + y2) / 6);
  }
  function Basis(context2) {
    this._context = context2;
  }
  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3:
          point(this, this._x1, this._y1);
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y2) {
      x3 = +x3, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y2) : this._context.moveTo(x3, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
          point(this, x3, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basis_default(context2) {
    return new Basis(context2);
  }

  // node_modules/d3-shape/src/curve/basisClosed.js
  function BasisClosed(context2) {
    this._context = context2;
  }
  BasisClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x3, y2) {
      x3 = +x3, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x3, this._y2 = y2;
          break;
        case 1:
          this._point = 2;
          this._x3 = x3, this._y3 = y2;
          break;
        case 2:
          this._point = 3;
          this._x4 = x3, this._y4 = y2;
          this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
          break;
        default:
          point(this, x3, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basisClosed_default(context2) {
    return new BasisClosed(context2);
  }

  // node_modules/d3-shape/src/curve/basisOpen.js
  function BasisOpen(context2) {
    this._context = context2;
  }
  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y2) {
      x3 = +x3, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x3) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;
        case 3:
          this._point = 4;
        default:
          point(this, x3, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basisOpen_default(context2) {
    return new BasisOpen(context2);
  }

  // node_modules/d3-shape/src/curve/linearClosed.js
  function LinearClosed(context2) {
    this._context = context2;
  }
  LinearClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point)
        this._context.closePath();
    },
    point: function(x3, y2) {
      x3 = +x3, y2 = +y2;
      if (this._point)
        this._context.lineTo(x3, y2);
      else
        this._point = 1, this._context.moveTo(x3, y2);
    }
  };
  function linearClosed_default(context2) {
    return new LinearClosed(context2);
  }

  // node_modules/d3-shape/src/curve/monotone.js
  function sign(x3) {
    return x3 < 0 ? -1 : 1;
  }
  function slope3(that, x22, y2) {
    var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
  }
  function slope2(that, t2) {
    var h2 = that._x1 - that._x0;
    return h2 ? (3 * (that._y1 - that._y0) / h2 - t2) / 2 : t2;
  }
  function point2(that, t02, t12) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
  }
  function MonotoneX(context2) {
    this._context = context2;
  }
  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point2(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x3, y2) {
      var t12 = NaN;
      x3 = +x3, y2 = +y2;
      if (x3 === this._x1 && y2 === this._y1)
        return;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y2) : this._context.moveTo(x3, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point2(this, slope2(this, t12 = slope3(this, x3, y2)), t12);
          break;
        default:
          point2(this, this._t0, t12 = slope3(this, x3, y2));
          break;
      }
      this._x0 = this._x1, this._x1 = x3;
      this._y0 = this._y1, this._y1 = y2;
      this._t0 = t12;
    }
  };
  function MonotoneY(context2) {
    this._context = new ReflectContext(context2);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y2) {
    MonotoneX.prototype.point.call(this, y2, x3);
  };
  function ReflectContext(context2) {
    this._context = context2;
  }
  ReflectContext.prototype = {
    moveTo: function(x3, y2) {
      this._context.moveTo(y2, x3);
    },
    closePath: function() {
      this._context.closePath();
    },
    lineTo: function(x3, y2) {
      this._context.lineTo(y2, x3);
    },
    bezierCurveTo: function(x1, y1, x22, y2, x3, y3) {
      this._context.bezierCurveTo(y1, x1, y2, x22, y3, x3);
    }
  };
  function monotoneX(context2) {
    return new MonotoneX(context2);
  }
  function monotoneY(context2) {
    return new MonotoneY(context2);
  }

  // node_modules/d3-shape/src/curve/natural.js
  function Natural(context2) {
    this._context = context2;
  }
  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x3 = this._x, y2 = this._y, n3 = x3.length;
      if (n3) {
        this._line ? this._context.lineTo(x3[0], y2[0]) : this._context.moveTo(x3[0], y2[0]);
        if (n3 === 2) {
          this._context.lineTo(x3[1], y2[1]);
        } else {
          var px = controlPoints(x3), py = controlPoints(y2);
          for (var i0 = 0, i1 = 1; i1 < n3; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y2[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n3 === 1)
        this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x3, y2) {
      this._x.push(+x3);
      this._y.push(+y2);
    }
  };
  function controlPoints(x3) {
    var i3, n3 = x3.length - 1, m3, a3 = new Array(n3), b2 = new Array(n3), r = new Array(n3);
    a3[0] = 0, b2[0] = 2, r[0] = x3[0] + 2 * x3[1];
    for (i3 = 1; i3 < n3 - 1; ++i3)
      a3[i3] = 1, b2[i3] = 4, r[i3] = 4 * x3[i3] + 2 * x3[i3 + 1];
    a3[n3 - 1] = 2, b2[n3 - 1] = 7, r[n3 - 1] = 8 * x3[n3 - 1] + x3[n3];
    for (i3 = 1; i3 < n3; ++i3)
      m3 = a3[i3] / b2[i3 - 1], b2[i3] -= m3, r[i3] -= m3 * r[i3 - 1];
    a3[n3 - 1] = r[n3 - 1] / b2[n3 - 1];
    for (i3 = n3 - 2; i3 >= 0; --i3)
      a3[i3] = (r[i3] - a3[i3 + 1]) / b2[i3];
    b2[n3 - 1] = (x3[n3] + a3[n3 - 1]) / 2;
    for (i3 = 0; i3 < n3 - 1; ++i3)
      b2[i3] = 2 * x3[i3 + 1] - a3[i3 + 1];
    return [a3, b2];
  }
  function natural_default(context2) {
    return new Natural(context2);
  }

  // node_modules/d3-shape/src/curve/step.js
  function Step(context2, t2) {
    this._context = context2;
    this._t = t2;
  }
  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2)
        this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      if (this._line >= 0)
        this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x3, y2) {
      x3 = +x3, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x3, y2) : this._context.moveTo(x3, y2);
          break;
        case 1:
          this._point = 2;
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y2);
            this._context.lineTo(x3, y2);
          } else {
            var x1 = this._x * (1 - this._t) + x3 * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y2);
          }
          break;
        }
      }
      this._x = x3, this._y = y2;
    }
  };
  function step_default(context2) {
    return new Step(context2, 0.5);
  }
  function stepBefore(context2) {
    return new Step(context2, 0);
  }
  function stepAfter(context2) {
    return new Step(context2, 1);
  }

  // node_modules/d3-shape/src/offset/none.js
  function none_default(series, order) {
    if (!((n3 = series.length) > 1))
      return;
    for (var i3 = 1, j3, s0, s1 = series[order[0]], n3, m3 = s1.length; i3 < n3; ++i3) {
      s0 = s1, s1 = series[order[i3]];
      for (j3 = 0; j3 < m3; ++j3) {
        s1[j3][1] += s1[j3][0] = isNaN(s0[j3][1]) ? s0[j3][0] : s0[j3][1];
      }
    }
  }

  // node_modules/d3-shape/src/order/none.js
  function none_default2(series) {
    var n3 = series.length, o2 = new Array(n3);
    while (--n3 >= 0)
      o2[n3] = n3;
    return o2;
  }

  // node_modules/d3-shape/src/stack.js
  function stackValue(d3, key) {
    return d3[key];
  }
  function stackSeries(key) {
    const series = [];
    series.key = key;
    return series;
  }
  function stack_default() {
    var keys = constant_default([]), order = none_default2, offset = none_default, value2 = stackValue;
    function stack(data) {
      var sz = Array.from(keys.apply(this, arguments), stackSeries), i3, n3 = sz.length, j3 = -1, oz;
      for (const d3 of data) {
        for (i3 = 0, ++j3; i3 < n3; ++i3) {
          (sz[i3][j3] = [0, +value2(d3, sz[i3].key, j3, data)]).data = d3;
        }
      }
      for (i3 = 0, oz = array_default(order(sz)); i3 < n3; ++i3) {
        sz[oz[i3]].index = i3;
      }
      offset(sz, oz);
      return sz;
    }
    stack.keys = function(_2) {
      return arguments.length ? (keys = typeof _2 === "function" ? _2 : constant_default(Array.from(_2)), stack) : keys;
    };
    stack.value = function(_2) {
      return arguments.length ? (value2 = typeof _2 === "function" ? _2 : constant_default(+_2), stack) : value2;
    };
    stack.order = function(_2) {
      return arguments.length ? (order = _2 == null ? none_default2 : typeof _2 === "function" ? _2 : constant_default(Array.from(_2)), stack) : order;
    };
    stack.offset = function(_2) {
      return arguments.length ? (offset = _2 == null ? none_default : _2, stack) : offset;
    };
    return stack;
  }

  // node_modules/d3-shape/src/offset/expand.js
  function expand_default(series, order) {
    if (!((n3 = series.length) > 0))
      return;
    for (var i3, n3, j3 = 0, m3 = series[0].length, y2; j3 < m3; ++j3) {
      for (y2 = i3 = 0; i3 < n3; ++i3)
        y2 += series[i3][j3][1] || 0;
      if (y2)
        for (i3 = 0; i3 < n3; ++i3)
          series[i3][j3][1] /= y2;
    }
    none_default(series, order);
  }

  // node_modules/d3-shape/src/offset/silhouette.js
  function silhouette_default(series, order) {
    if (!((n3 = series.length) > 0))
      return;
    for (var j3 = 0, s0 = series[order[0]], n3, m3 = s0.length; j3 < m3; ++j3) {
      for (var i3 = 0, y2 = 0; i3 < n3; ++i3)
        y2 += series[i3][j3][1] || 0;
      s0[j3][1] += s0[j3][0] = -y2 / 2;
    }
    none_default(series, order);
  }

  // node_modules/d3-shape/src/offset/wiggle.js
  function wiggle_default(series, order) {
    if (!((n3 = series.length) > 0) || !((m3 = (s0 = series[order[0]]).length) > 0))
      return;
    for (var y2 = 0, j3 = 1, s0, m3, n3; j3 < m3; ++j3) {
      for (var i3 = 0, s1 = 0, s22 = 0; i3 < n3; ++i3) {
        var si = series[order[i3]], sij0 = si[j3][1] || 0, sij1 = si[j3 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
        for (var k3 = 0; k3 < i3; ++k3) {
          var sk = series[order[k3]], skj0 = sk[j3][1] || 0, skj1 = sk[j3 - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        s1 += sij0, s22 += s3 * sij0;
      }
      s0[j3 - 1][1] += s0[j3 - 1][0] = y2;
      if (s1)
        y2 -= s22 / s1;
    }
    s0[j3 - 1][1] += s0[j3 - 1][0] = y2;
    none_default(series, order);
  }

  // node_modules/recharts/es6/shape/Symbols.js
  var import_classnames5 = __toModule(require_classnames());
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function _extends4() {
    _extends4 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf3(subClass, superClass);
  }
  function _setPrototypeOf3(o2, p2) {
    _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf3(o2, p2);
  }
  function _createSuper2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf2(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf2(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn2(this, result);
    };
  }
  function _possibleConstructorReturn2(self2, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized2(self2);
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf2(o2) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf2(o2);
  }
  var symbolFactories = {
    symbolCircle: circle_default,
    symbolCross: cross_default,
    symbolDiamond: diamond_default,
    symbolSquare: square_default,
    symbolStar: star_default,
    symbolTriangle: triangle_default,
    symbolWye: wye_default
  };
  var RADIAN = Math.PI / 180;
  var getSymbolFactory = function getSymbolFactory2(type) {
    var name = "symbol".concat((0, import_upperFirst.default)(type));
    return symbolFactories[name] || circle_default;
  };
  var calculateAreaSize = function calculateAreaSize2(size, sizeType, type) {
    if (sizeType === "area") {
      return size;
    }
    switch (type) {
      case "cross":
        return 5 * size * size / 9;
      case "diamond":
        return 0.5 * size * size / Math.sqrt(3);
      case "square":
        return size * size;
      case "star": {
        var angle = 18 * RADIAN;
        return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.pow(Math.tan(angle), 2));
      }
      case "triangle":
        return Math.sqrt(3) * size * size / 4;
      case "wye":
        return (21 - 10 * Math.sqrt(3)) * size * size / 8;
      default:
        return Math.PI * size * size / 4;
    }
  };
  var Symbols = /* @__PURE__ */ function(_PureComponent) {
    _inherits2(Symbols2, _PureComponent);
    var _super = _createSuper2(Symbols2);
    function Symbols2() {
      _classCallCheck2(this, Symbols2);
      return _super.apply(this, arguments);
    }
    _createClass2(Symbols2, [{
      key: "getPath",
      value: function getPath() {
        var _this$props = this.props, size = _this$props.size, sizeType = _this$props.sizeType, type = _this$props.type;
        var symbolFactory = getSymbolFactory(type);
        var symbol = Symbol2().type(symbolFactory).size(calculateAreaSize(size, sizeType, type));
        return symbol();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props, className = _this$props2.className, cx = _this$props2.cx, cy = _this$props2.cy, size = _this$props2.size;
        if (cx === +cx && cy === +cy && size === +size) {
          return /* @__PURE__ */ import_react20.default.createElement("path", _extends4({}, filterProps(this.props, true), {
            className: (0, import_classnames5.default)("recharts-symbols", className),
            transform: "translate(".concat(cx, ", ").concat(cy, ")"),
            d: this.getPath()
          }));
        }
        return null;
      }
    }]);
    return Symbols2;
  }(import_react20.PureComponent);
  Symbols.defaultProps = {
    type: "circle",
    size: 64,
    sizeType: "area"
  };
  Symbols.registerSymbol = function(key, factory) {
    symbolFactories["symbol".concat((0, import_upperFirst.default)(key))] = factory;
  };

  // node_modules/recharts/es6/component/DefaultLegendContent.js
  function _typeof3(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof3 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof3 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof3(obj);
  }
  function _extends5() {
    _extends5 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties3(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass3(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties3(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties3(Constructor, staticProps);
    return Constructor;
  }
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf4(subClass, superClass);
  }
  function _setPrototypeOf4(o2, p2) {
    _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf4(o2, p2);
  }
  function _createSuper3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf3(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf3(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn3(this, result);
    };
  }
  function _possibleConstructorReturn3(self2, call) {
    if (call && (_typeof3(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized3(self2);
  }
  function _assertThisInitialized3(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct3() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf3(o2) {
    _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf3(o2);
  }
  var SIZE = 32;
  var DefaultLegendContent = /* @__PURE__ */ function(_PureComponent) {
    _inherits3(DefaultLegendContent2, _PureComponent);
    var _super = _createSuper3(DefaultLegendContent2);
    function DefaultLegendContent2() {
      _classCallCheck3(this, DefaultLegendContent2);
      return _super.apply(this, arguments);
    }
    _createClass3(DefaultLegendContent2, [{
      key: "renderIcon",
      value: function renderIcon(data) {
        var inactiveColor = this.props.inactiveColor;
        var halfSize = SIZE / 2;
        var sixthSize = SIZE / 6;
        var thirdSize = SIZE / 3;
        var color2 = data.inactive ? inactiveColor : data.color;
        if (data.type === "plainline") {
          return /* @__PURE__ */ import_react21.default.createElement("line", {
            strokeWidth: 4,
            fill: "none",
            stroke: color2,
            strokeDasharray: data.payload.strokeDasharray,
            x1: 0,
            y1: halfSize,
            x2: SIZE,
            y2: halfSize,
            className: "recharts-legend-icon"
          });
        }
        if (data.type === "line") {
          return /* @__PURE__ */ import_react21.default.createElement("path", {
            strokeWidth: 4,
            fill: "none",
            stroke: color2,
            d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
            className: "recharts-legend-icon"
          });
        }
        if (data.type === "rect") {
          return /* @__PURE__ */ import_react21.default.createElement("path", {
            stroke: "none",
            fill: color2,
            d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-SIZE, "z"),
            className: "recharts-legend-icon"
          });
        }
        if (/* @__PURE__ */ import_react21.default.isValidElement(data.legendIcon)) {
          var iconProps = _objectSpread({}, data);
          delete iconProps.legendIcon;
          return /* @__PURE__ */ import_react21.default.cloneElement(data.legendIcon, iconProps);
        }
        return /* @__PURE__ */ import_react21.default.createElement(Symbols, {
          fill: color2,
          cx: halfSize,
          cy: halfSize,
          size: SIZE,
          sizeType: "diameter",
          type: data.type
        });
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        var _this = this;
        var _this$props = this.props, payload = _this$props.payload, iconSize = _this$props.iconSize, layout = _this$props.layout, formatter = _this$props.formatter, inactiveColor = _this$props.inactiveColor;
        var viewBox = {
          x: 0,
          y: 0,
          width: SIZE,
          height: SIZE
        };
        var itemStyle = {
          display: layout === "horizontal" ? "inline-block" : "block",
          marginRight: 10
        };
        var svgStyle = {
          display: "inline-block",
          verticalAlign: "middle",
          marginRight: 4
        };
        return payload.map(function(entry, i3) {
          var _classNames;
          var finalFormatter = entry.formatter || formatter;
          var className = (0, import_classnames6.default)((_classNames = {
            "recharts-legend-item": true
          }, _defineProperty(_classNames, "legend-item-".concat(i3), true), _defineProperty(_classNames, "inactive", entry.inactive), _classNames));
          if (entry.type === "none") {
            return null;
          }
          var color2 = entry.inactive ? inactiveColor : entry.color;
          return /* @__PURE__ */ import_react21.default.createElement("li", _extends5({
            className,
            style: itemStyle,
            key: "legend-item-".concat(i3)
          }, adaptEventsOfChild(_this.props, entry, i3)), /* @__PURE__ */ import_react21.default.createElement(Surface, {
            width: iconSize,
            height: iconSize,
            viewBox,
            style: svgStyle
          }, _this.renderIcon(entry)), /* @__PURE__ */ import_react21.default.createElement("span", {
            className: "recharts-legend-item-text",
            style: {
              color: color2
            }
          }, finalFormatter ? finalFormatter(entry.value, entry, i3) : entry.value));
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props, payload = _this$props2.payload, layout = _this$props2.layout, align = _this$props2.align;
        if (!payload || !payload.length) {
          return null;
        }
        var finalStyle = {
          padding: 0,
          margin: 0,
          textAlign: layout === "horizontal" ? align : "left"
        };
        return /* @__PURE__ */ import_react21.default.createElement("ul", {
          className: "recharts-default-legend",
          style: finalStyle
        }, this.renderItems());
      }
    }]);
    return DefaultLegendContent2;
  }(import_react21.PureComponent);
  DefaultLegendContent.displayName = "Legend";
  DefaultLegendContent.defaultProps = {
    iconSize: 14,
    layout: "horizontal",
    align: "center",
    verticalAlign: "middle",
    inactiveColor: "#ccc"
  };

  // node_modules/recharts/es6/util/DataUtils.js
  var import_get = __toModule(require_get());
  var import_isArray = __toModule(require_isArray());
  var import_isNaN = __toModule(require_isNaN());
  var import_isNumber = __toModule(require_isNumber());
  var import_isString = __toModule(require_isString());
  var mathSign = function mathSign2(value2) {
    if (value2 === 0) {
      return 0;
    }
    if (value2 > 0) {
      return 1;
    }
    return -1;
  };
  var isPercent = function isPercent2(value2) {
    return (0, import_isString.default)(value2) && value2.indexOf("%") === value2.length - 1;
  };
  var isNumber = function isNumber2(value2) {
    return (0, import_isNumber.default)(value2) && !(0, import_isNaN.default)(value2);
  };
  var isNumOrStr = function isNumOrStr2(value2) {
    return isNumber(value2) || (0, import_isString.default)(value2);
  };
  var idCounter = 0;
  var uniqueId = function uniqueId2(prefix2) {
    var id = ++idCounter;
    return "".concat(prefix2 || "").concat(id);
  };
  var getPercentValue = function getPercentValue2(percent, totalValue) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var validate = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (!isNumber(percent) && !(0, import_isString.default)(percent)) {
      return defaultValue;
    }
    var value2;
    if (isPercent(percent)) {
      var index2 = percent.indexOf("%");
      value2 = totalValue * parseFloat(percent.slice(0, index2)) / 100;
    } else {
      value2 = +percent;
    }
    if ((0, import_isNaN.default)(value2)) {
      value2 = defaultValue;
    }
    if (validate && value2 > totalValue) {
      value2 = totalValue;
    }
    return value2;
  };
  var getAnyElementOfObject = function getAnyElementOfObject2(obj) {
    if (!obj) {
      return null;
    }
    var keys = Object.keys(obj);
    if (keys && keys.length) {
      return obj[keys[0]];
    }
    return null;
  };
  var hasDuplicate = function hasDuplicate2(ary) {
    if (!(0, import_isArray.default)(ary)) {
      return false;
    }
    var len = ary.length;
    var cache3 = {};
    for (var i3 = 0; i3 < len; i3++) {
      if (!cache3[ary[i3]]) {
        cache3[ary[i3]] = true;
      } else {
        return true;
      }
    }
    return false;
  };
  var interpolateNumber = function interpolateNumber2(numberA, numberB) {
    if (isNumber(numberA) && isNumber(numberB)) {
      return function(t2) {
        return numberA + t2 * (numberB - numberA);
      };
    }
    return function() {
      return numberB;
    };
  };
  function findEntryInArray(ary, specifiedKey, specifiedValue) {
    if (!ary || !ary.length) {
      return null;
    }
    return ary.find(function(entry) {
      return entry && (typeof specifiedKey === "function" ? specifiedKey(entry) : (0, import_get.default)(entry, specifiedKey)) === specifiedValue;
    });
  }

  // node_modules/recharts/es6/component/Legend.js
  function _typeof4(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof4 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof4 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof4(obj);
  }
  function ownKeys2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys2(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty2(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties4(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass4(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties4(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties4(Constructor, staticProps);
    return Constructor;
  }
  function _inherits4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf5(subClass, superClass);
  }
  function _setPrototypeOf5(o2, p2) {
    _setPrototypeOf5 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf5(o2, p2);
  }
  function _createSuper4(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct4();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf4(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf4(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn4(this, result);
    };
  }
  function _possibleConstructorReturn4(self2, call) {
    if (call && (_typeof4(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized4(self2);
  }
  function _assertThisInitialized4(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct4() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf4(o2) {
    _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf4(o2);
  }
  function _objectWithoutProperties3(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose4(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose4(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function defaultUniqBy(entry) {
    return entry.value;
  }
  function getUniqPayload(option, payload) {
    if (option === true) {
      return (0, import_uniqBy.default)(payload, defaultUniqBy);
    }
    if ((0, import_isFunction.default)(option)) {
      return (0, import_uniqBy.default)(payload, option);
    }
    return payload;
  }
  function renderContent(content, props) {
    if (/* @__PURE__ */ import_react22.default.isValidElement(content)) {
      return /* @__PURE__ */ import_react22.default.cloneElement(content, props);
    }
    if ((0, import_isFunction.default)(content)) {
      return /* @__PURE__ */ import_react22.default.createElement(content, props);
    }
    var ref = props.ref, otherProps = _objectWithoutProperties3(props, ["ref"]);
    return /* @__PURE__ */ import_react22.default.createElement(DefaultLegendContent, otherProps);
  }
  var EPS = 1;
  var Legend = /* @__PURE__ */ function(_PureComponent) {
    _inherits4(Legend2, _PureComponent);
    var _super = _createSuper4(Legend2);
    function Legend2() {
      var _this;
      _classCallCheck4(this, Legend2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.wrapperNode = void 0;
      _this.state = {
        boxWidth: -1,
        boxHeight: -1
      };
      return _this;
    }
    _createClass4(Legend2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateBBox();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.updateBBox();
      }
    }, {
      key: "getBBox",
      value: function getBBox() {
        if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
          return this.wrapperNode.getBoundingClientRect();
        }
        return null;
      }
    }, {
      key: "getBBoxSnapshot",
      value: function getBBoxSnapshot() {
        var _this$state = this.state, boxWidth = _this$state.boxWidth, boxHeight = _this$state.boxHeight;
        if (boxWidth >= 0 && boxHeight >= 0) {
          return {
            width: boxWidth,
            height: boxHeight
          };
        }
        return null;
      }
    }, {
      key: "getDefaultPosition",
      value: function getDefaultPosition(style) {
        var _this$props = this.props, layout = _this$props.layout, align = _this$props.align, verticalAlign = _this$props.verticalAlign, margin = _this$props.margin, chartWidth = _this$props.chartWidth, chartHeight = _this$props.chartHeight;
        var hPos, vPos;
        if (!style || (style.left === void 0 || style.left === null) && (style.right === void 0 || style.right === null)) {
          if (align === "center" && layout === "vertical") {
            var _box = this.getBBoxSnapshot() || {
              width: 0
            };
            hPos = {
              left: ((chartWidth || 0) - _box.width) / 2
            };
          } else {
            hPos = align === "right" ? {
              right: margin && margin.right || 0
            } : {
              left: margin && margin.left || 0
            };
          }
        }
        if (!style || (style.top === void 0 || style.top === null) && (style.bottom === void 0 || style.bottom === null)) {
          if (verticalAlign === "middle") {
            var _box2 = this.getBBoxSnapshot() || {
              height: 0
            };
            vPos = {
              top: ((chartHeight || 0) - _box2.height) / 2
            };
          } else {
            vPos = verticalAlign === "bottom" ? {
              bottom: margin && margin.bottom || 0
            } : {
              top: margin && margin.top || 0
            };
          }
        }
        return _objectSpread2(_objectSpread2({}, hPos), vPos);
      }
    }, {
      key: "updateBBox",
      value: function updateBBox() {
        var _this$state2 = this.state, boxWidth = _this$state2.boxWidth, boxHeight = _this$state2.boxHeight;
        var onBBoxUpdate = this.props.onBBoxUpdate;
        if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
          var _box3 = this.wrapperNode.getBoundingClientRect();
          if (Math.abs(_box3.width - boxWidth) > EPS || Math.abs(_box3.height - boxHeight) > EPS) {
            this.setState({
              boxWidth: _box3.width,
              boxHeight: _box3.height
            }, function() {
              if (onBBoxUpdate) {
                onBBoxUpdate(_box3);
              }
            });
          }
        } else if (boxWidth !== -1 || boxHeight !== -1) {
          this.setState({
            boxWidth: -1,
            boxHeight: -1
          }, function() {
            if (onBBoxUpdate) {
              onBBoxUpdate(null);
            }
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var _this$props2 = this.props, content = _this$props2.content, width = _this$props2.width, height = _this$props2.height, wrapperStyle = _this$props2.wrapperStyle, payloadUniqBy = _this$props2.payloadUniqBy, payload = _this$props2.payload;
        var outerStyle = _objectSpread2(_objectSpread2({
          position: "absolute",
          width: width || "auto",
          height: height || "auto"
        }, this.getDefaultPosition(wrapperStyle)), wrapperStyle);
        return /* @__PURE__ */ import_react22.default.createElement("div", {
          className: "recharts-legend-wrapper",
          style: outerStyle,
          ref: function ref(node) {
            _this2.wrapperNode = node;
          }
        }, renderContent(content, _objectSpread2(_objectSpread2({}, this.props), {}, {
          payload: getUniqPayload(payloadUniqBy, payload)
        })));
      }
    }], [{
      key: "getWithHeight",
      value: function getWithHeight(item, chartWidth) {
        var layout = item.props.layout;
        if (layout === "vertical" && isNumber(item.props.height)) {
          return {
            height: item.props.height
          };
        }
        if (layout === "horizontal") {
          return {
            width: item.props.width || chartWidth
          };
        }
        return null;
      }
    }]);
    return Legend2;
  }(import_react22.PureComponent);
  Legend.displayName = "Legend";
  Legend.defaultProps = {
    iconSize: 14,
    layout: "horizontal",
    align: "center",
    verticalAlign: "bottom"
  };

  // node_modules/recharts/es6/component/Tooltip.js
  var import_isNil2 = __toModule(require_isNil());
  var import_isFunction2 = __toModule(require_isFunction());
  var import_uniqBy2 = __toModule(require_uniqBy());
  var import_react27 = __toModule(require_react());

  // node_modules/react-smooth/es6/Animate.js
  var import_react23 = __toModule(require_react());
  var import_prop_types5 = __toModule(require_prop_types());
  var import_fast_equals = __toModule(require_fast_equals());

  // node_modules/react-smooth/es6/setRafTimeout.js
  function setRafTimeout(callback) {
    var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var currTime = -1;
    var shouldUpdate = function shouldUpdate2(now2) {
      if (currTime < 0) {
        currTime = now2;
      }
      if (now2 - currTime > timeout) {
        callback(now2);
        currTime = -1;
      } else {
        requestAnimationFrame(shouldUpdate2);
      }
    };
    requestAnimationFrame(shouldUpdate);
  }

  // node_modules/react-smooth/es6/AnimateManager.js
  function _typeof5(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof5 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof5 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof5(obj);
  }
  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray2(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray2(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray2(o2, minLen);
  }
  function _arrayLikeToArray2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArray2(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function createAnimateManager() {
    var currStyle = {};
    var handleChange = function handleChange2() {
      return null;
    };
    var shouldStop = false;
    var setStyle = function setStyle2(_style) {
      if (shouldStop) {
        return;
      }
      if (Array.isArray(_style)) {
        if (!_style.length) {
          return;
        }
        var styles = _style;
        var _styles = _toArray(styles), curr = _styles[0], restStyles = _styles.slice(1);
        if (typeof curr === "number") {
          setRafTimeout(setStyle2.bind(null, restStyles), curr);
          return;
        }
        setStyle2(curr);
        setRafTimeout(setStyle2.bind(null, restStyles));
        return;
      }
      if (_typeof5(_style) === "object") {
        currStyle = _style;
        handleChange(currStyle);
      }
      if (typeof _style === "function") {
        _style();
      }
    };
    return {
      stop: function stop() {
        shouldStop = true;
      },
      start: function start(style) {
        shouldStop = false;
        setStyle(style);
      },
      subscribe: function subscribe(_handleChange) {
        handleChange = _handleChange;
        return function() {
          handleChange = function handleChange2() {
            return null;
          };
        };
      }
    };
  }

  // node_modules/react-smooth/es6/util.js
  function ownKeys3(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread3(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys3(Object(source), true).forEach(function(key) {
          _defineProperty3(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty3(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var PREFIX_LIST = ["Webkit", "Moz", "O", "ms"];
  var IN_LINE_PREFIX_LIST = ["-webkit-", "-moz-", "-o-", "-ms-"];
  var IN_COMPATIBLE_PROPERTY = ["transform", "transformOrigin", "transition"];
  var getIntersectionKeys = function getIntersectionKeys2(preObj, nextObj) {
    return [Object.keys(preObj), Object.keys(nextObj)].reduce(function(a3, b2) {
      return a3.filter(function(c3) {
        return b2.includes(c3);
      });
    });
  };
  var identity = function identity2(param) {
    return param;
  };
  var getDashCase = function getDashCase2(name) {
    return name.replace(/([A-Z])/g, function(v2) {
      return "-".concat(v2.toLowerCase());
    });
  };
  var generatePrefixStyle = function generatePrefixStyle2(name, value2) {
    if (IN_COMPATIBLE_PROPERTY.indexOf(name) === -1) {
      return _defineProperty3({}, name, value2);
    }
    var isTransition = name === "transition";
    var camelName = name.replace(/(\w)/, function(v2) {
      return v2.toUpperCase();
    });
    var styleVal = value2;
    return PREFIX_LIST.reduce(function(result, property, i3) {
      if (isTransition) {
        styleVal = value2.replace(/(transform|transform-origin)/gim, "".concat(IN_LINE_PREFIX_LIST[i3], "$1"));
      }
      return _objectSpread3(_objectSpread3({}, result), {}, _defineProperty3({}, property + camelName, styleVal));
    }, {});
  };
  var mapObject = function mapObject2(fn, obj) {
    return Object.keys(obj).reduce(function(res, key) {
      return _objectSpread3(_objectSpread3({}, res), {}, _defineProperty3({}, key, fn(key, obj[key])));
    }, {});
  };
  var translateStyle = function translateStyle2(style) {
    return Object.keys(style).reduce(function(res, key) {
      return _objectSpread3(_objectSpread3({}, res), generatePrefixStyle(key, res[key]));
    }, style);
  };
  var getTransitionVal = function getTransitionVal2(props, duration, easing) {
    return props.map(function(prop) {
      return "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing);
    }).join(",");
  };
  var isDev = true;
  var warn = function warn2(condition, format3, a3, b2, c3, d3, e3, f3) {
    if (isDev && typeof console !== "undefined" && console.warn) {
      if (format3 === void 0) {
        console.warn("LogUtils requires an error message argument");
      }
      if (!condition) {
        if (format3 === void 0) {
          console.warn("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        } else {
          var args = [a3, b2, c3, d3, e3, f3];
          var argIndex = 0;
          console.warn(format3.replace(/%s/g, function() {
            return args[argIndex++];
          }));
        }
      }
    }
  };

  // node_modules/react-smooth/es6/easing.js
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray3(arr, i3) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _toConsumableArray2(arr) {
    return _arrayWithoutHoles2(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread2();
  }
  function _nonIterableSpread2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray3(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray3(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray3(o2, minLen);
  }
  function _iterableToArray3(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles2(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray3(arr);
  }
  function _arrayLikeToArray3(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var ACCURACY = 1e-4;
  var cubicBezierFactor = function cubicBezierFactor2(c1, c22) {
    return [0, 3 * c1, 3 * c22 - 6 * c1, 3 * c1 - 3 * c22 + 1];
  };
  var multyTime = function multyTime2(params, t2) {
    return params.map(function(param, i3) {
      return param * Math.pow(t2, i3);
    }).reduce(function(pre, curr) {
      return pre + curr;
    });
  };
  var cubicBezier = function cubicBezier2(c1, c22) {
    return function(t2) {
      var params = cubicBezierFactor(c1, c22);
      return multyTime(params, t2);
    };
  };
  var derivativeCubicBezier = function derivativeCubicBezier2(c1, c22) {
    return function(t2) {
      var params = cubicBezierFactor(c1, c22);
      var newParams = [].concat(_toConsumableArray2(params.map(function(param, i3) {
        return param * i3;
      }).slice(1)), [0]);
      return multyTime(newParams, t2);
    };
  };
  var configBezier = function configBezier2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var x1 = args[0], y1 = args[1], x22 = args[2], y2 = args[3];
    if (args.length === 1) {
      switch (args[0]) {
        case "linear":
          x1 = 0;
          y1 = 0;
          x22 = 1;
          y2 = 1;
          break;
        case "ease":
          x1 = 0.25;
          y1 = 0.1;
          x22 = 0.25;
          y2 = 1;
          break;
        case "ease-in":
          x1 = 0.42;
          y1 = 0;
          x22 = 1;
          y2 = 1;
          break;
        case "ease-out":
          x1 = 0.42;
          y1 = 0;
          x22 = 0.58;
          y2 = 1;
          break;
        case "ease-in-out":
          x1 = 0;
          y1 = 0;
          x22 = 0.58;
          y2 = 1;
          break;
        default: {
          var easing = args[0].split("(");
          if (easing[0] === "cubic-bezier" && easing[1].split(")")[0].split(",").length === 4) {
            var _easing$1$split$0$spl = easing[1].split(")")[0].split(",").map(function(x3) {
              return parseFloat(x3);
            });
            var _easing$1$split$0$spl2 = _slicedToArray(_easing$1$split$0$spl, 4);
            x1 = _easing$1$split$0$spl2[0];
            y1 = _easing$1$split$0$spl2[1];
            x22 = _easing$1$split$0$spl2[2];
            y2 = _easing$1$split$0$spl2[3];
          } else {
            warn(false, "[configBezier]: arguments should be one of oneOf 'linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out','cubic-bezier(x1,y1,x2,y2)', instead received %s", args);
          }
        }
      }
    }
    warn([x1, x22, y1, y2].every(function(num) {
      return typeof num === "number" && num >= 0 && num <= 1;
    }), "[configBezier]: arguments should be x1, y1, x2, y2 of [0, 1] instead received %s", args);
    var curveX = cubicBezier(x1, x22);
    var curveY = cubicBezier(y1, y2);
    var derCurveX = derivativeCubicBezier(x1, x22);
    var rangeValue = function rangeValue2(value2) {
      if (value2 > 1) {
        return 1;
      } else if (value2 < 0) {
        return 0;
      }
      return value2;
    };
    var bezier = function bezier2(_t) {
      var t2 = _t > 1 ? 1 : _t;
      var x3 = t2;
      for (var i3 = 0; i3 < 8; ++i3) {
        var evalT = curveX(x3) - t2;
        var derVal = derCurveX(x3);
        if (Math.abs(evalT - t2) < ACCURACY || derVal < ACCURACY) {
          return curveY(x3);
        }
        x3 = rangeValue(x3 - evalT / derVal);
      }
      return curveY(x3);
    };
    bezier.isStepper = false;
    return bezier;
  };
  var configSpring = function configSpring2() {
    var config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _config$stiff = config.stiff, stiff = _config$stiff === void 0 ? 100 : _config$stiff, _config$damping = config.damping, damping = _config$damping === void 0 ? 8 : _config$damping, _config$dt = config.dt, dt = _config$dt === void 0 ? 17 : _config$dt;
    var stepper = function stepper2(currX, destX, currV) {
      var FSpring = -(currX - destX) * stiff;
      var FDamping = currV * damping;
      var newV = currV + (FSpring - FDamping) * dt / 1e3;
      var newX = currV * dt / 1e3 + currX;
      if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
        return [destX, 0];
      }
      return [newX, newV];
    };
    stepper.isStepper = true;
    stepper.dt = dt;
    return stepper;
  };
  var configEasing = function configEasing2() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var easing = args[0];
    if (typeof easing === "string") {
      switch (easing) {
        case "ease":
        case "ease-in-out":
        case "ease-out":
        case "ease-in":
        case "linear":
          return configBezier(easing);
        case "spring":
          return configSpring();
        default:
          if (easing.split("(")[0] === "cubic-bezier") {
            return configBezier(easing);
          }
          warn(false, "[configEasing]: first argument should be one of 'ease', 'ease-in', 'ease-out', 'ease-in-out','cubic-bezier(x1,y1,x2,y2)', 'linear' and 'spring', instead  received %s", args);
      }
    }
    if (typeof easing === "function") {
      return easing;
    }
    warn(false, "[configEasing]: first argument type should be function or string, instead received %s", args);
    return null;
  };

  // node_modules/react-smooth/es6/configUpdate.js
  function _toConsumableArray3(arr) {
    return _arrayWithoutHoles3(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread3();
  }
  function _nonIterableSpread3() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArray4(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles3(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray4(arr);
  }
  function ownKeys4(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread4(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys4(Object(source), true).forEach(function(key) {
          _defineProperty4(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty4(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _slicedToArray2(arr, i3) {
    return _arrayWithHoles3(arr) || _iterableToArrayLimit2(arr, i3) || _unsupportedIterableToArray4(arr, i3) || _nonIterableRest3();
  }
  function _nonIterableRest3() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray4(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray4(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray4(o2, minLen);
  }
  function _arrayLikeToArray4(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit2(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles3(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var alpha = function alpha2(begin, end, k3) {
    return begin + (end - begin) * k3;
  };
  var needContinue = function needContinue2(_ref3) {
    var from = _ref3.from, to = _ref3.to;
    return from !== to;
  };
  var calStepperVals = function calStepperVals2(easing, preVals, steps) {
    var nextStepVals = mapObject(function(key, val) {
      if (needContinue(val)) {
        var _easing = easing(val.from, val.to, val.velocity), _easing2 = _slicedToArray2(_easing, 2), newX = _easing2[0], newV = _easing2[1];
        return _objectSpread4(_objectSpread4({}, val), {}, {
          from: newX,
          velocity: newV
        });
      }
      return val;
    }, preVals);
    if (steps < 1) {
      return mapObject(function(key, val) {
        if (needContinue(val)) {
          return _objectSpread4(_objectSpread4({}, val), {}, {
            velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
            from: alpha(val.from, nextStepVals[key].from, steps)
          });
        }
        return val;
      }, preVals);
    }
    return calStepperVals2(easing, nextStepVals, steps - 1);
  };
  var configUpdate_default = function(from, to, easing, duration, render) {
    var interKeys = getIntersectionKeys(from, to);
    var timingStyle = interKeys.reduce(function(res, key) {
      return _objectSpread4(_objectSpread4({}, res), {}, _defineProperty4({}, key, [from[key], to[key]]));
    }, {});
    var stepperStyle = interKeys.reduce(function(res, key) {
      return _objectSpread4(_objectSpread4({}, res), {}, _defineProperty4({}, key, {
        from: from[key],
        velocity: 0,
        to: to[key]
      }));
    }, {});
    var cafId = -1;
    var preTime;
    var beginTime;
    var update = function update2() {
      return null;
    };
    var getCurrStyle = function getCurrStyle2() {
      return mapObject(function(key, val) {
        return val.from;
      }, stepperStyle);
    };
    var shouldStopAnimation = function shouldStopAnimation2() {
      return !Object.values(stepperStyle).filter(needContinue).length;
    };
    var stepperUpdate = function stepperUpdate2(now2) {
      if (!preTime) {
        preTime = now2;
      }
      var deltaTime = now2 - preTime;
      var steps = deltaTime / easing.dt;
      stepperStyle = calStepperVals(easing, stepperStyle, steps);
      render(_objectSpread4(_objectSpread4(_objectSpread4({}, from), to), getCurrStyle(stepperStyle)));
      preTime = now2;
      if (!shouldStopAnimation()) {
        cafId = requestAnimationFrame(update);
      }
    };
    var timingUpdate = function timingUpdate2(now2) {
      if (!beginTime) {
        beginTime = now2;
      }
      var t2 = (now2 - beginTime) / duration;
      var currStyle = mapObject(function(key, val) {
        return alpha.apply(void 0, _toConsumableArray3(val).concat([easing(t2)]));
      }, timingStyle);
      render(_objectSpread4(_objectSpread4(_objectSpread4({}, from), to), currStyle));
      if (t2 < 1) {
        cafId = requestAnimationFrame(update);
      } else {
        var finalStyle = mapObject(function(key, val) {
          return alpha.apply(void 0, _toConsumableArray3(val).concat([easing(1)]));
        }, timingStyle);
        render(_objectSpread4(_objectSpread4(_objectSpread4({}, from), to), finalStyle));
      }
    };
    update = easing.isStepper ? stepperUpdate : timingUpdate;
    return function() {
      requestAnimationFrame(update);
      return function() {
        cancelAnimationFrame(cafId);
      };
    };
  };

  // node_modules/react-smooth/es6/Animate.js
  function _typeof6(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof6 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof6 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof6(obj);
  }
  function _objectWithoutProperties4(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose5(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose5(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _toConsumableArray4(arr) {
    return _arrayWithoutHoles4(arr) || _iterableToArray5(arr) || _unsupportedIterableToArray5(arr) || _nonIterableSpread4();
  }
  function _nonIterableSpread4() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray5(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray5(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray5(o2, minLen);
  }
  function _iterableToArray5(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles4(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray5(arr);
  }
  function _arrayLikeToArray5(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function ownKeys5(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread5(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys5(Object(source), true).forEach(function(key) {
          _defineProperty5(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty5(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties5(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass5(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties5(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties5(Constructor, staticProps);
    return Constructor;
  }
  function _inherits5(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf6(subClass, superClass);
  }
  function _setPrototypeOf6(o2, p2) {
    _setPrototypeOf6 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf6(o2, p2);
  }
  function _createSuper5(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct5();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf5(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf5(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn5(this, result);
    };
  }
  function _possibleConstructorReturn5(self2, call) {
    if (call && (_typeof6(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized5(self2);
  }
  function _assertThisInitialized5(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct5() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf5(o2) {
    _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf5(o2);
  }
  var Animate = /* @__PURE__ */ function(_PureComponent) {
    _inherits5(Animate2, _PureComponent);
    var _super = _createSuper5(Animate2);
    function Animate2(props, context2) {
      var _this;
      _classCallCheck5(this, Animate2);
      _this = _super.call(this, props, context2);
      var _this$props = _this.props, isActive = _this$props.isActive, attributeName = _this$props.attributeName, from = _this$props.from, to = _this$props.to, steps = _this$props.steps, children = _this$props.children;
      _this.handleStyleChange = _this.handleStyleChange.bind(_assertThisInitialized5(_this));
      _this.changeStyle = _this.changeStyle.bind(_assertThisInitialized5(_this));
      if (!isActive) {
        _this.state = {
          style: {}
        };
        if (typeof children === "function") {
          _this.state = {
            style: to
          };
        }
        return _possibleConstructorReturn5(_this);
      }
      if (steps && steps.length) {
        _this.state = {
          style: steps[0].style
        };
      } else if (from) {
        if (typeof children === "function") {
          _this.state = {
            style: from
          };
          return _possibleConstructorReturn5(_this);
        }
        _this.state = {
          style: attributeName ? _defineProperty5({}, attributeName, from) : from
        };
      } else {
        _this.state = {
          style: {}
        };
      }
      return _this;
    }
    _createClass5(Animate2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props2 = this.props, isActive = _this$props2.isActive, canBegin = _this$props2.canBegin;
        this.mounted = true;
        if (!isActive || !canBegin) {
          return;
        }
        this.runAnimation(this.props);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props3 = this.props, isActive = _this$props3.isActive, canBegin = _this$props3.canBegin, attributeName = _this$props3.attributeName, shouldReAnimate = _this$props3.shouldReAnimate;
        if (!canBegin) {
          return;
        }
        if (!isActive) {
          var newState = {
            style: attributeName ? _defineProperty5({}, attributeName, this.props.to) : this.props.to
          };
          if (this.state && this.state.style) {
            if (attributeName && this.state.style[attributeName] !== this.props.to || !attributeName && this.state.style !== this.props.to) {
              this.setState(newState);
            }
          }
          return;
        }
        if ((0, import_fast_equals.deepEqual)(prevProps.to, this.props.to) && prevProps.canBegin && prevProps.isActive) {
          return;
        }
        var isTriggered = !prevProps.canBegin || !prevProps.isActive;
        if (this.manager) {
          this.manager.stop();
        }
        if (this.stopJSAnimation) {
          this.stopJSAnimation();
        }
        var from = isTriggered || shouldReAnimate ? this.props.from : prevProps.to;
        if (this.state && this.state.style) {
          var _newState = {
            style: attributeName ? _defineProperty5({}, attributeName, from) : from
          };
          if (attributeName && this.state.style[attributeName] !== from || !attributeName && this.state.style !== from) {
            this.setState(_newState);
          }
        }
        this.runAnimation(_objectSpread5(_objectSpread5({}, this.props), {}, {
          from,
          begin: 0
        }));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;
        if (this.unSubscribe) {
          this.unSubscribe();
        }
        if (this.manager) {
          this.manager.stop();
          this.manager = null;
        }
        if (this.stopJSAnimation) {
          this.stopJSAnimation();
        }
      }
    }, {
      key: "runJSAnimation",
      value: function runJSAnimation(props) {
        var _this2 = this;
        var from = props.from, to = props.to, duration = props.duration, easing = props.easing, begin = props.begin, onAnimationEnd2 = props.onAnimationEnd, onAnimationStart2 = props.onAnimationStart;
        var startAnimation = configUpdate_default(from, to, configEasing(easing), duration, this.changeStyle);
        var finalStartAnimation = function finalStartAnimation2() {
          _this2.stopJSAnimation = startAnimation();
        };
        this.manager.start([onAnimationStart2, begin, finalStartAnimation, duration, onAnimationEnd2]);
      }
    }, {
      key: "runStepAnimation",
      value: function runStepAnimation(props) {
        var _this3 = this;
        var steps = props.steps, begin = props.begin, onAnimationStart2 = props.onAnimationStart;
        var _steps$ = steps[0], initialStyle = _steps$.style, _steps$$duration = _steps$.duration, initialTime = _steps$$duration === void 0 ? 0 : _steps$$duration;
        var addStyle = function addStyle2(sequence, nextItem, index2) {
          if (index2 === 0) {
            return sequence;
          }
          var duration = nextItem.duration, _nextItem$easing = nextItem.easing, easing = _nextItem$easing === void 0 ? "ease" : _nextItem$easing, style = nextItem.style, nextProperties = nextItem.properties, onAnimationEnd2 = nextItem.onAnimationEnd;
          var preItem = index2 > 0 ? steps[index2 - 1] : nextItem;
          var properties = nextProperties || Object.keys(style);
          if (typeof easing === "function" || easing === "spring") {
            return [].concat(_toConsumableArray4(sequence), [_this3.runJSAnimation.bind(_this3, {
              from: preItem.style,
              to: style,
              duration,
              easing
            }), duration]);
          }
          var transition = getTransitionVal(properties, duration, easing);
          var newStyle = _objectSpread5(_objectSpread5(_objectSpread5({}, preItem.style), style), {}, {
            transition
          });
          return [].concat(_toConsumableArray4(sequence), [newStyle, duration, onAnimationEnd2]).filter(identity);
        };
        return this.manager.start([onAnimationStart2].concat(_toConsumableArray4(steps.reduce(addStyle, [initialStyle, Math.max(initialTime, begin)])), [props.onAnimationEnd]));
      }
    }, {
      key: "runAnimation",
      value: function runAnimation(props) {
        if (!this.manager) {
          this.manager = createAnimateManager();
        }
        var begin = props.begin, duration = props.duration, attributeName = props.attributeName, propsTo = props.to, easing = props.easing, onAnimationStart2 = props.onAnimationStart, onAnimationEnd2 = props.onAnimationEnd, steps = props.steps, children = props.children;
        var manager = this.manager;
        this.unSubscribe = manager.subscribe(this.handleStyleChange);
        if (typeof easing === "function" || typeof children === "function" || easing === "spring") {
          this.runJSAnimation(props);
          return;
        }
        if (steps.length > 1) {
          this.runStepAnimation(props);
          return;
        }
        var to = attributeName ? _defineProperty5({}, attributeName, propsTo) : propsTo;
        var transition = getTransitionVal(Object.keys(to), duration, easing);
        manager.start([onAnimationStart2, begin, _objectSpread5(_objectSpread5({}, to), {}, {
          transition
        }), duration, onAnimationEnd2]);
      }
    }, {
      key: "handleStyleChange",
      value: function handleStyleChange(style) {
        this.changeStyle(style);
      }
    }, {
      key: "changeStyle",
      value: function changeStyle(style) {
        if (this.mounted) {
          this.setState({
            style
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props, children = _this$props4.children, begin = _this$props4.begin, duration = _this$props4.duration, attributeName = _this$props4.attributeName, easing = _this$props4.easing, isActive = _this$props4.isActive, steps = _this$props4.steps, from = _this$props4.from, to = _this$props4.to, canBegin = _this$props4.canBegin, onAnimationEnd2 = _this$props4.onAnimationEnd, shouldReAnimate = _this$props4.shouldReAnimate, onAnimationReStart = _this$props4.onAnimationReStart, others = _objectWithoutProperties4(_this$props4, ["children", "begin", "duration", "attributeName", "easing", "isActive", "steps", "from", "to", "canBegin", "onAnimationEnd", "shouldReAnimate", "onAnimationReStart"]);
        var count = import_react23.Children.count(children);
        var stateStyle = translateStyle(this.state.style);
        if (typeof children === "function") {
          return children(stateStyle);
        }
        if (!isActive || count === 0) {
          return children;
        }
        var cloneContainer = function cloneContainer2(container) {
          var _container$props = container.props, _container$props$styl = _container$props.style, style = _container$props$styl === void 0 ? {} : _container$props$styl, className = _container$props.className;
          var res = /* @__PURE__ */ (0, import_react23.cloneElement)(container, _objectSpread5(_objectSpread5({}, others), {}, {
            style: _objectSpread5(_objectSpread5({}, style), stateStyle),
            className
          }));
          return res;
        };
        if (count === 1) {
          return cloneContainer(import_react23.Children.only(children));
        }
        return /* @__PURE__ */ import_react23.default.createElement("div", null, import_react23.Children.map(children, function(child) {
          return cloneContainer(child);
        }));
      }
    }]);
    return Animate2;
  }(import_react23.PureComponent);
  Animate.displayName = "Animate";
  Animate.propTypes = {
    from: import_prop_types5.default.oneOfType([import_prop_types5.default.object, import_prop_types5.default.string]),
    to: import_prop_types5.default.oneOfType([import_prop_types5.default.object, import_prop_types5.default.string]),
    attributeName: import_prop_types5.default.string,
    duration: import_prop_types5.default.number,
    begin: import_prop_types5.default.number,
    easing: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.func]),
    steps: import_prop_types5.default.arrayOf(import_prop_types5.default.shape({
      duration: import_prop_types5.default.number.isRequired,
      style: import_prop_types5.default.object.isRequired,
      easing: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["ease", "ease-in", "ease-out", "ease-in-out", "linear"]), import_prop_types5.default.func]),
      properties: import_prop_types5.default.arrayOf("string"),
      onAnimationEnd: import_prop_types5.default.func
    })),
    children: import_prop_types5.default.oneOfType([import_prop_types5.default.node, import_prop_types5.default.func]),
    isActive: import_prop_types5.default.bool,
    canBegin: import_prop_types5.default.bool,
    onAnimationEnd: import_prop_types5.default.func,
    shouldReAnimate: import_prop_types5.default.bool,
    onAnimationStart: import_prop_types5.default.func,
    onAnimationReStart: import_prop_types5.default.func
  };
  Animate.defaultProps = {
    begin: 0,
    duration: 1e3,
    from: "",
    to: "",
    attributeName: "",
    easing: "ease",
    isActive: true,
    canBegin: true,
    steps: [],
    onAnimationEnd: function onAnimationEnd() {
    },
    onAnimationStart: function onAnimationStart() {
    }
  };
  var Animate_default = Animate;

  // node_modules/react-smooth/es6/AnimateGroup.js
  var import_react25 = __toModule(require_react());
  var import_react_transition_group2 = __toModule(require_react_transition_group());
  var import_prop_types7 = __toModule(require_prop_types());

  // node_modules/react-smooth/es6/AnimateGroupChild.js
  var import_react24 = __toModule(require_react());
  var import_react_transition_group = __toModule(require_react_transition_group());
  var import_prop_types6 = __toModule(require_prop_types());
  function _typeof7(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof7 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof7 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof7(obj);
  }
  function _extends6() {
    _extends6 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends6.apply(this, arguments);
  }
  function _objectWithoutProperties5(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose6(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose6(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function ownKeys6(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread6(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys6(Object(source), true).forEach(function(key) {
          _defineProperty6(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty6(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties6(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass6(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties6(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties6(Constructor, staticProps);
    return Constructor;
  }
  function _inherits6(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf7(subClass, superClass);
  }
  function _setPrototypeOf7(o2, p2) {
    _setPrototypeOf7 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf7(o2, p2);
  }
  function _createSuper6(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct6();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf6(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf6(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn6(this, result);
    };
  }
  function _possibleConstructorReturn6(self2, call) {
    if (call && (_typeof7(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized6(self2);
  }
  function _assertThisInitialized6(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct6() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf6(o2) {
    _getPrototypeOf6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf6(o2);
  }
  if (Number.isFinite === void 0) {
    Number.isFinite = function(value2) {
      return typeof value2 === "number" && isFinite(value2);
    };
  }
  var parseDurationOfSingleTransition = function parseDurationOfSingleTransition2() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var steps = options2.steps, duration = options2.duration;
    if (steps && steps.length) {
      return steps.reduce(function(result, entry) {
        return result + (Number.isFinite(entry.duration) && entry.duration > 0 ? entry.duration : 0);
      }, 0);
    }
    if (Number.isFinite(duration)) {
      return duration;
    }
    return 0;
  };
  var AnimateGroupChild = /* @__PURE__ */ function(_Component) {
    _inherits6(AnimateGroupChild2, _Component);
    var _super = _createSuper6(AnimateGroupChild2);
    function AnimateGroupChild2() {
      var _this;
      _classCallCheck6(this, AnimateGroupChild2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        isActive: false
      };
      _this.handleEnter = function(node, isAppearing) {
        var _this$props = _this.props, appearOptions = _this$props.appearOptions, enterOptions = _this$props.enterOptions;
        _this.handleStyleActive(isAppearing ? appearOptions : enterOptions);
      };
      _this.handleExit = function() {
        _this.handleStyleActive(_this.props.leaveOptions);
      };
      return _this;
    }
    _createClass6(AnimateGroupChild2, [{
      key: "handleStyleActive",
      value: function handleStyleActive(style) {
        if (style) {
          var onAnimationEnd2 = style.onAnimationEnd ? function() {
            style.onAnimationEnd();
          } : null;
          this.setState(_objectSpread6(_objectSpread6({}, style), {}, {
            onAnimationEnd: onAnimationEnd2,
            isActive: true
          }));
        }
      }
    }, {
      key: "parseTimeout",
      value: function parseTimeout() {
        var _this$props2 = this.props, appearOptions = _this$props2.appearOptions, enterOptions = _this$props2.enterOptions, leaveOptions = _this$props2.leaveOptions;
        return parseDurationOfSingleTransition(appearOptions) + parseDurationOfSingleTransition(enterOptions) + parseDurationOfSingleTransition(leaveOptions);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var _this$props3 = this.props, children = _this$props3.children, appearOptions = _this$props3.appearOptions, enterOptions = _this$props3.enterOptions, leaveOptions = _this$props3.leaveOptions, props = _objectWithoutProperties5(_this$props3, ["children", "appearOptions", "enterOptions", "leaveOptions"]);
        return /* @__PURE__ */ import_react24.default.createElement(import_react_transition_group.Transition, _extends6({}, props, {
          onEnter: this.handleEnter,
          onExit: this.handleExit,
          timeout: this.parseTimeout()
        }), function() {
          return /* @__PURE__ */ import_react24.default.createElement(Animate_default, _this2.state, import_react24.Children.only(children));
        });
      }
    }]);
    return AnimateGroupChild2;
  }(import_react24.Component);
  AnimateGroupChild.propTypes = {
    appearOptions: import_prop_types6.default.object,
    enterOptions: import_prop_types6.default.object,
    leaveOptions: import_prop_types6.default.object,
    children: import_prop_types6.default.element
  };
  var AnimateGroupChild_default = AnimateGroupChild;

  // node_modules/react-smooth/es6/AnimateGroup.js
  function AnimateGroup(props) {
    var component = props.component, children = props.children, appear = props.appear, enter = props.enter, leave = props.leave;
    return /* @__PURE__ */ import_react25.default.createElement(import_react_transition_group2.TransitionGroup, {
      component
    }, import_react25.Children.map(children, function(child, index2) {
      return /* @__PURE__ */ import_react25.default.createElement(AnimateGroupChild_default, {
        appearOptions: appear,
        enterOptions: enter,
        leaveOptions: leave,
        key: "child-".concat(index2)
      }, child);
    }));
  }
  AnimateGroup.propTypes = {
    appear: import_prop_types7.default.object,
    enter: import_prop_types7.default.object,
    leave: import_prop_types7.default.object,
    children: import_prop_types7.default.oneOfType([import_prop_types7.default.array, import_prop_types7.default.element]),
    component: import_prop_types7.default.any
  };
  AnimateGroup.defaultProps = {
    component: "span"
  };

  // node_modules/react-smooth/es6/index.js
  var es6_default = Animate_default;

  // node_modules/recharts/es6/component/Tooltip.js
  var import_classnames8 = __toModule(require_classnames());

  // node_modules/recharts/es6/component/DefaultTooltipContent.js
  var import_isNil = __toModule(require_isNil());
  var import_sortBy = __toModule(require_sortBy());
  var import_isArray2 = __toModule(require_isArray());
  var import_react26 = __toModule(require_react());
  var import_classnames7 = __toModule(require_classnames());
  function _typeof8(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof8 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof8 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof8(obj);
  }
  function _slicedToArray3(arr, i3) {
    return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i3) || _unsupportedIterableToArray6(arr, i3) || _nonIterableRest4();
  }
  function _nonIterableRest4() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray6(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray6(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray6(o2, minLen);
  }
  function _arrayLikeToArray6(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit3(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles4(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function ownKeys7(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread7(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys7(Object(source), true).forEach(function(key) {
          _defineProperty7(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys7(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty7(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties7(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass7(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties7(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties7(Constructor, staticProps);
    return Constructor;
  }
  function _inherits7(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf8(subClass, superClass);
  }
  function _setPrototypeOf8(o2, p2) {
    _setPrototypeOf8 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf8(o2, p2);
  }
  function _createSuper7(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct7();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf7(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf7(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn7(this, result);
    };
  }
  function _possibleConstructorReturn7(self2, call) {
    if (call && (_typeof8(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized7(self2);
  }
  function _assertThisInitialized7(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct7() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf7(o2) {
    _getPrototypeOf7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf7(o2);
  }
  function defaultFormatter(value2) {
    return (0, import_isArray2.default)(value2) && isNumOrStr(value2[0]) && isNumOrStr(value2[1]) ? value2.join(" ~ ") : value2;
  }
  var DefaultTooltipContent = /* @__PURE__ */ function(_PureComponent) {
    _inherits7(DefaultTooltipContent2, _PureComponent);
    var _super = _createSuper7(DefaultTooltipContent2);
    function DefaultTooltipContent2() {
      _classCallCheck7(this, DefaultTooltipContent2);
      return _super.apply(this, arguments);
    }
    _createClass7(DefaultTooltipContent2, [{
      key: "renderContent",
      value: function renderContent3() {
        var _this$props = this.props, payload = _this$props.payload, separator = _this$props.separator, formatter = _this$props.formatter, itemStyle = _this$props.itemStyle, itemSorter = _this$props.itemSorter;
        if (payload && payload.length) {
          var listStyle = {
            padding: 0,
            margin: 0
          };
          var items = (itemSorter ? (0, import_sortBy.default)(payload, itemSorter) : payload).map(function(entry, i3) {
            if (entry.type === "none") {
              return null;
            }
            var finalItemStyle = _objectSpread7({
              display: "block",
              paddingTop: 4,
              paddingBottom: 4,
              color: entry.color || "#000"
            }, itemStyle);
            var finalFormatter = entry.formatter || formatter || defaultFormatter;
            var name = entry.name, value2 = entry.value;
            if (finalFormatter) {
              var formatted = finalFormatter(value2, name, entry, i3, payload);
              if (Array.isArray(formatted)) {
                var _formatted = _slicedToArray3(formatted, 2);
                value2 = _formatted[0];
                name = _formatted[1];
              } else {
                value2 = formatted;
              }
            }
            return /* @__PURE__ */ import_react26.default.createElement("li", {
              className: "recharts-tooltip-item",
              key: "tooltip-item-".concat(i3),
              style: finalItemStyle
            }, isNumOrStr(name) ? /* @__PURE__ */ import_react26.default.createElement("span", {
              className: "recharts-tooltip-item-name"
            }, name) : null, isNumOrStr(name) ? /* @__PURE__ */ import_react26.default.createElement("span", {
              className: "recharts-tooltip-item-separator"
            }, separator) : null, /* @__PURE__ */ import_react26.default.createElement("span", {
              className: "recharts-tooltip-item-value"
            }, value2), /* @__PURE__ */ import_react26.default.createElement("span", {
              className: "recharts-tooltip-item-unit"
            }, entry.unit || ""));
          });
          return /* @__PURE__ */ import_react26.default.createElement("ul", {
            className: "recharts-tooltip-item-list",
            style: listStyle
          }, items);
        }
        return null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props, wrapperClassName = _this$props2.wrapperClassName, contentStyle = _this$props2.contentStyle, labelClassName = _this$props2.labelClassName, labelStyle = _this$props2.labelStyle, label = _this$props2.label, labelFormatter = _this$props2.labelFormatter, payload = _this$props2.payload;
        var finalStyle = _objectSpread7({
          margin: 0,
          padding: 10,
          backgroundColor: "#fff",
          border: "1px solid #ccc",
          whiteSpace: "nowrap"
        }, contentStyle);
        var finalLabelStyle = _objectSpread7({
          margin: 0
        }, labelStyle);
        var hasLabel = !(0, import_isNil.default)(label);
        var finalLabel = hasLabel ? label : "";
        var wrapperCN = (0, import_classnames7.default)("recharts-default-tooltip", wrapperClassName);
        var labelCN = (0, import_classnames7.default)("recharts-tooltip-label", labelClassName);
        if (hasLabel && labelFormatter && payload !== void 0 && payload !== null) {
          finalLabel = labelFormatter(label, payload);
        }
        return /* @__PURE__ */ import_react26.default.createElement("div", {
          className: wrapperCN,
          style: finalStyle
        }, /* @__PURE__ */ import_react26.default.createElement("p", {
          className: labelCN,
          style: finalLabelStyle
        }, /* @__PURE__ */ import_react26.default.isValidElement(finalLabel) ? finalLabel : "".concat(finalLabel)), this.renderContent());
      }
    }]);
    return DefaultTooltipContent2;
  }(import_react26.PureComponent);
  DefaultTooltipContent.displayName = "DefaultTooltipContent";
  DefaultTooltipContent.defaultProps = {
    separator: " : ",
    contentStyle: {},
    itemStyle: {},
    labelStyle: {}
  };

  // node_modules/recharts/es6/util/Global.js
  var parseIsSsrByDefault = function parseIsSsrByDefault2() {
    return !(typeof window !== "undefined" && window.document && window.document.createElement && window.setTimeout);
  };
  var Global = {
    isSsr: parseIsSsrByDefault(),
    get: function get(key) {
      return Global[key];
    },
    set: function set(key, value2) {
      if (typeof key === "string") {
        Global[key] = value2;
      } else {
        var keys = Object.keys(key);
        if (keys && keys.length) {
          keys.forEach(function(k3) {
            Global[k3] = key[k3];
          });
        }
      }
    }
  };

  // node_modules/recharts/es6/component/Tooltip.js
  function _typeof9(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof9 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof9 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof9(obj);
  }
  function ownKeys8(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread8(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys8(Object(source), true).forEach(function(key) {
          _defineProperty8(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys8(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty8(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties8(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass8(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties8(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties8(Constructor, staticProps);
    return Constructor;
  }
  function _inherits8(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf9(subClass, superClass);
  }
  function _setPrototypeOf9(o2, p2) {
    _setPrototypeOf9 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf9(o2, p2);
  }
  function _createSuper8(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct8();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf8(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf8(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn8(this, result);
    };
  }
  function _possibleConstructorReturn8(self2, call) {
    if (call && (_typeof9(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized8(self2);
  }
  function _assertThisInitialized8(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct8() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf8(o2) {
    _getPrototypeOf8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf8(o2);
  }
  var CLS_PREFIX = "recharts-tooltip-wrapper";
  var EPS2 = 1;
  function defaultUniqBy2(entry) {
    return entry.dataKey;
  }
  function getUniqPayload2(option, payload) {
    if (option === true) {
      return (0, import_uniqBy2.default)(payload, defaultUniqBy2);
    }
    if ((0, import_isFunction2.default)(option)) {
      return (0, import_uniqBy2.default)(payload, option);
    }
    return payload;
  }
  function renderContent2(content, props) {
    if (/* @__PURE__ */ import_react27.default.isValidElement(content)) {
      return /* @__PURE__ */ import_react27.default.cloneElement(content, props);
    }
    if ((0, import_isFunction2.default)(content)) {
      return /* @__PURE__ */ import_react27.default.createElement(content, props);
    }
    return /* @__PURE__ */ import_react27.default.createElement(DefaultTooltipContent, props);
  }
  var Tooltip = /* @__PURE__ */ function(_PureComponent) {
    _inherits8(Tooltip2, _PureComponent);
    var _super = _createSuper8(Tooltip2);
    function Tooltip2() {
      var _this;
      _classCallCheck8(this, Tooltip2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        boxWidth: -1,
        boxHeight: -1,
        dismissed: false,
        dismissedAtCoordinate: {
          x: 0,
          y: 0
        }
      };
      _this.wrapperNode = void 0;
      _this.getTranslate = function(_ref3) {
        var key = _ref3.key, tooltipDimension = _ref3.tooltipDimension, viewBoxDimension = _ref3.viewBoxDimension;
        var _this$props = _this.props, allowEscapeViewBox = _this$props.allowEscapeViewBox, coordinate = _this$props.coordinate, offset = _this$props.offset, position = _this$props.position, viewBox = _this$props.viewBox;
        if (position && isNumber(position[key])) {
          return position[key];
        }
        var restricted = coordinate[key] - tooltipDimension - offset;
        var unrestricted = coordinate[key] + offset;
        if (allowEscapeViewBox[key]) {
          return unrestricted;
        }
        var tooltipBoundary = coordinate[key] + tooltipDimension + offset;
        var viewBoxBoundary = viewBox[key] + viewBoxDimension;
        if (tooltipBoundary > viewBoxBoundary) {
          return Math.max(restricted, viewBox[key]);
        }
        return Math.max(unrestricted, viewBox[key]);
      };
      return _this;
    }
    _createClass8(Tooltip2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateBBox();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.updateBBox();
      }
    }, {
      key: "updateBBox",
      value: function updateBBox() {
        var _this$state = this.state, boxWidth = _this$state.boxWidth, boxHeight = _this$state.boxHeight, dismissed = _this$state.dismissed;
        if (dismissed) {
          this.wrapperNode.blur();
          if (this.props.coordinate.x !== this.state.dismissedAtCoordinate.x || this.props.coordinate.y !== this.state.dismissedAtCoordinate.y) {
            this.setState({
              dismissed: false
            });
          }
        } else {
          this.wrapperNode.focus();
        }
        if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
          var box = this.wrapperNode.getBoundingClientRect();
          if (Math.abs(box.width - boxWidth) > EPS2 || Math.abs(box.height - boxHeight) > EPS2) {
            this.setState({
              boxWidth: box.width,
              boxHeight: box.height
            });
          }
        } else if (boxWidth !== -1 || boxHeight !== -1) {
          this.setState({
            boxWidth: -1,
            boxHeight: -1
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _classNames, _this2 = this;
        var _this$props2 = this.props, payload = _this$props2.payload, isAnimationActive = _this$props2.isAnimationActive, animationDuration = _this$props2.animationDuration, animationEasing = _this$props2.animationEasing, filterNull = _this$props2.filterNull, payloadUniqBy = _this$props2.payloadUniqBy;
        var finalPayload = getUniqPayload2(payloadUniqBy, filterNull && payload && payload.length ? payload.filter(function(entry) {
          return !(0, import_isNil2.default)(entry.value);
        }) : payload);
        var hasPayload = finalPayload && finalPayload.length;
        var _this$props3 = this.props, content = _this$props3.content, viewBox = _this$props3.viewBox, coordinate = _this$props3.coordinate, position = _this$props3.position, active = _this$props3.active, wrapperStyle = _this$props3.wrapperStyle;
        var outerStyle = _objectSpread8({
          pointerEvents: "none",
          visibility: !this.state.dismissed && active && hasPayload ? "visible" : "hidden",
          position: "absolute",
          top: 0,
          left: 0
        }, wrapperStyle);
        var translateX, translateY;
        if (position && isNumber(position.x) && isNumber(position.y)) {
          translateX = position.x;
          translateY = position.y;
        } else {
          var _this$state2 = this.state, boxWidth = _this$state2.boxWidth, boxHeight = _this$state2.boxHeight;
          if (boxWidth > 0 && boxHeight > 0 && coordinate) {
            translateX = this.getTranslate({
              key: "x",
              tooltipDimension: boxWidth,
              viewBoxDimension: viewBox.width
            });
            translateY = this.getTranslate({
              key: "y",
              tooltipDimension: boxHeight,
              viewBoxDimension: viewBox.height
            });
          } else {
            outerStyle.visibility = "hidden";
          }
        }
        outerStyle = _objectSpread8(_objectSpread8({}, translateStyle({
          transform: this.props.useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
        })), outerStyle);
        if (isAnimationActive && active) {
          outerStyle = _objectSpread8(_objectSpread8({}, translateStyle({
            transition: "transform ".concat(animationDuration, "ms ").concat(animationEasing)
          })), outerStyle);
        }
        var cls4 = (0, import_classnames8.default)(CLS_PREFIX, (_classNames = {}, _defineProperty8(_classNames, "".concat(CLS_PREFIX, "-right"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX >= coordinate.x), _defineProperty8(_classNames, "".concat(CLS_PREFIX, "-left"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX < coordinate.x), _defineProperty8(_classNames, "".concat(CLS_PREFIX, "-bottom"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY >= coordinate.y), _defineProperty8(_classNames, "".concat(CLS_PREFIX, "-top"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY < coordinate.y), _classNames));
        return /* @__PURE__ */ import_react27.default.createElement("div", {
          tabIndex: 0,
          onKeyDown: function onKeyDown(event) {
            if (event.key === "Escape") {
              _this2.setState({
                dismissed: true,
                dismissedAtCoordinate: _objectSpread8(_objectSpread8({}, _this2.state.dismissedAtCoordinate), {}, {
                  x: _this2.props.coordinate.x,
                  y: _this2.props.coordinate.y
                })
              });
            }
          },
          className: cls4,
          style: outerStyle,
          ref: function ref(node) {
            _this2.wrapperNode = node;
          }
        }, renderContent2(content, _objectSpread8(_objectSpread8({}, this.props), {}, {
          payload: finalPayload
        })));
      }
    }]);
    return Tooltip2;
  }(import_react27.PureComponent);
  Tooltip.displayName = "Tooltip";
  Tooltip.defaultProps = {
    active: false,
    allowEscapeViewBox: {
      x: false,
      y: false
    },
    offset: 10,
    viewBox: {
      x1: 0,
      x2: 0,
      y1: 0,
      y2: 0
    },
    coordinate: {
      x: 0,
      y: 0
    },
    cursorStyle: {},
    separator: " : ",
    wrapperStyle: {},
    contentStyle: {},
    itemStyle: {},
    labelStyle: {},
    cursor: true,
    trigger: "hover",
    isAnimationActive: !Global.isSsr,
    animationEasing: "ease",
    animationDuration: 400,
    filterNull: true,
    useTranslate3d: false
  };

  // node_modules/recharts/es6/component/ResponsiveContainer.js
  var import_debounce = __toModule(require_debounce());
  var import_classnames9 = __toModule(require_classnames());
  var import_react29 = __toModule(require_react());

  // node_modules/react-resize-detector/build/index.esm.js
  var React21 = __toModule(require_react());
  var import_react28 = __toModule(require_react());
  var import_react_dom = __toModule(require_react_dom());
  var extendStatics = function(d3, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
      d4.__proto__ = b3;
    } || function(d4, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d4[p2] = b3[p2];
    };
    return extendStatics(d3, b2);
  };
  function __extends(d3, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d3, b2);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  }
  function __rest2(s3, e3) {
    var t2 = {};
    for (var p2 in s3)
      if (Object.prototype.hasOwnProperty.call(s3, p2) && e3.indexOf(p2) < 0)
        t2[p2] = s3[p2];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s3); i3 < p2.length; i3++) {
        if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p2[i3]))
          t2[p2[i3]] = s3[p2[i3]];
      }
    return t2;
  }
  var commonjsGlobal2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function isObject$3(value2) {
    var type = typeof value2;
    return value2 != null && (type == "object" || type == "function");
  }
  var isObject_1 = isObject$3;
  var freeGlobal$1 = typeof commonjsGlobal2 == "object" && commonjsGlobal2 && commonjsGlobal2.Object === Object && commonjsGlobal2;
  var _freeGlobal = freeGlobal$1;
  var freeGlobal = _freeGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root$2 = freeGlobal || freeSelf || Function("return this")();
  var _root = root$2;
  var root$1 = _root;
  var now$1 = function() {
    return root$1.Date.now();
  };
  var now_1 = now$1;
  var reWhitespace = /\s/;
  function trimmedEndIndex$1(string2) {
    var index2 = string2.length;
    while (index2-- && reWhitespace.test(string2.charAt(index2))) {
    }
    return index2;
  }
  var _trimmedEndIndex = trimmedEndIndex$1;
  var trimmedEndIndex = _trimmedEndIndex;
  var reTrimStart = /^\s+/;
  function baseTrim$1(string2) {
    return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
  }
  var _baseTrim = baseTrim$1;
  var root = _root;
  var Symbol$2 = root.Symbol;
  var _Symbol = Symbol$2;
  var Symbol$1 = _Symbol;
  var objectProto$1 = Object.prototype;
  var hasOwnProperty = objectProto$1.hasOwnProperty;
  var nativeObjectToString$1 = objectProto$1.toString;
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
  function getRawTag$1(value2) {
    var isOwn = hasOwnProperty.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
    try {
      value2[symToStringTag$1] = void 0;
      var unmasked = true;
    } catch (e3) {
    }
    var result = nativeObjectToString$1.call(value2);
    if (unmasked) {
      if (isOwn) {
        value2[symToStringTag$1] = tag;
      } else {
        delete value2[symToStringTag$1];
      }
    }
    return result;
  }
  var _getRawTag = getRawTag$1;
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  function objectToString$1(value2) {
    return nativeObjectToString.call(value2);
  }
  var _objectToString = objectToString$1;
  var Symbol3 = _Symbol;
  var getRawTag = _getRawTag;
  var objectToString2 = _objectToString;
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
  function baseGetTag$1(value2) {
    if (value2 == null) {
      return value2 === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString2(value2);
  }
  var _baseGetTag = baseGetTag$1;
  function isObjectLike$1(value2) {
    return value2 != null && typeof value2 == "object";
  }
  var isObjectLike_1 = isObjectLike$1;
  var baseGetTag = _baseGetTag;
  var isObjectLike = isObjectLike_1;
  var symbolTag = "[object Symbol]";
  function isSymbol$1(value2) {
    return typeof value2 == "symbol" || isObjectLike(value2) && baseGetTag(value2) == symbolTag;
  }
  var isSymbol_1 = isSymbol$1;
  var baseTrim = _baseTrim;
  var isObject$2 = isObject_1;
  var isSymbol = isSymbol_1;
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber$1(value2) {
    if (typeof value2 == "number") {
      return value2;
    }
    if (isSymbol(value2)) {
      return NAN;
    }
    if (isObject$2(value2)) {
      var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
      value2 = isObject$2(other) ? other + "" : other;
    }
    if (typeof value2 != "string") {
      return value2 === 0 ? value2 : +value2;
    }
    value2 = baseTrim(value2);
    var isBinary2 = reIsBinary.test(value2);
    return isBinary2 || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
  }
  var toNumber_1 = toNumber$1;
  var isObject$1 = isObject_1;
  var now = now_1;
  var toNumber = toNumber_1;
  var FUNC_ERROR_TEXT$1 = "Expected a function";
  var nativeMax = Math.max;
  var nativeMin = Math.min;
  function debounce$1(func2, wait2, options2) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func2 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait2 = toNumber(wait2) || 0;
    if (isObject$1(options2)) {
      leading = !!options2.leading;
      maxing = "maxWait" in options2;
      maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait2) : maxWait;
      trailing = "trailing" in options2 ? !!options2.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func2.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait2);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait2 - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait2 || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush2() {
      return timerId === void 0 ? result : trailingEdge(now());
    }
    function debounced() {
      var time2 = now(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait2);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait2);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush2;
    return debounced;
  }
  var debounce_1 = debounce$1;
  var debounce = debounce_1;
  var isObject = isObject_1;
  var FUNC_ERROR_TEXT = "Expected a function";
  function throttle(func2, wait2, options2) {
    var leading = true, trailing = true;
    if (typeof func2 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options2)) {
      leading = "leading" in options2 ? !!options2.leading : leading;
      trailing = "trailing" in options2 ? !!options2.trailing : trailing;
    }
    return debounce(func2, wait2, {
      "leading": leading,
      "maxWait": wait2,
      "trailing": trailing
    });
  }
  var throttle_1 = throttle;
  var patchResizeHandler = function(resizeCallback, refreshMode, refreshRate, refreshOptions) {
    switch (refreshMode) {
      case "debounce":
        return debounce_1(resizeCallback, refreshRate, refreshOptions);
      case "throttle":
        return throttle_1(resizeCallback, refreshRate, refreshOptions);
      default:
        return resizeCallback;
    }
  };
  var isFunction = function(fn) {
    return typeof fn === "function";
  };
  var isSSR = function() {
    return typeof window === "undefined";
  };
  var isDOMElement = function(element2) {
    return element2 instanceof Element || element2 instanceof HTMLDocument;
  };
  var createNotifier = function(onResize, setSize, handleWidth, handleHeight) {
    return function(_a) {
      var width = _a.width, height = _a.height;
      setSize(function(prev2) {
        if (prev2.width === width && prev2.height === height) {
          return prev2;
        }
        if (prev2.width === width && !handleHeight || prev2.height === height && !handleWidth) {
          return prev2;
        }
        if (onResize && isFunction(onResize)) {
          onResize(width, height);
        }
        return { width, height };
      });
    };
  };
  var ResizeDetector = function(_super) {
    __extends(ResizeDetector2, _super);
    function ResizeDetector2(props) {
      var _this = _super.call(this, props) || this;
      _this.cancelHandler = function() {
        if (_this.resizeHandler && _this.resizeHandler.cancel) {
          _this.resizeHandler.cancel();
          _this.resizeHandler = null;
        }
      };
      _this.attachObserver = function() {
        var _a2 = _this.props, targetRef = _a2.targetRef, observerOptions = _a2.observerOptions;
        if (isSSR()) {
          return;
        }
        if (targetRef && targetRef.current) {
          _this.targetRef.current = targetRef.current;
        }
        var element2 = _this.getElement();
        if (!element2) {
          return;
        }
        if (_this.observableElement && _this.observableElement === element2) {
          return;
        }
        _this.observableElement = element2;
        _this.resizeObserver.observe(element2, observerOptions);
      };
      _this.getElement = function() {
        var _a2 = _this.props, querySelector = _a2.querySelector, targetDomEl = _a2.targetDomEl;
        if (isSSR())
          return null;
        if (querySelector)
          return document.querySelector(querySelector);
        if (targetDomEl && isDOMElement(targetDomEl))
          return targetDomEl;
        if (_this.targetRef && isDOMElement(_this.targetRef.current))
          return _this.targetRef.current;
        var currentElement = (0, import_react_dom.findDOMNode)(_this);
        if (!currentElement)
          return null;
        var renderType = _this.getRenderType();
        switch (renderType) {
          case "renderProp":
            return currentElement;
          case "childFunction":
            return currentElement;
          case "child":
            return currentElement;
          case "childArray":
            return currentElement;
          default:
            return currentElement.parentElement;
        }
      };
      _this.createResizeHandler = function(entries) {
        var _a2 = _this.props, _b = _a2.handleWidth, handleWidth = _b === void 0 ? true : _b, _c = _a2.handleHeight, handleHeight = _c === void 0 ? true : _c, onResize = _a2.onResize;
        if (!handleWidth && !handleHeight)
          return;
        var notifyResize = createNotifier(onResize, _this.setState.bind(_this), handleWidth, handleHeight);
        entries.forEach(function(entry) {
          var _a3 = entry && entry.contentRect || {}, width = _a3.width, height = _a3.height;
          var shouldSetSize = !_this.skipOnMount && !isSSR();
          if (shouldSetSize) {
            notifyResize({ width, height });
          }
          _this.skipOnMount = false;
        });
      };
      _this.getRenderType = function() {
        var _a2 = _this.props, render = _a2.render, children = _a2.children;
        if (isFunction(render)) {
          return "renderProp";
        }
        if (isFunction(children)) {
          return "childFunction";
        }
        if ((0, import_react28.isValidElement)(children)) {
          return "child";
        }
        if (Array.isArray(children)) {
          return "childArray";
        }
        return "parent";
      };
      var skipOnMount = props.skipOnMount, refreshMode = props.refreshMode, _a = props.refreshRate, refreshRate = _a === void 0 ? 1e3 : _a, refreshOptions = props.refreshOptions;
      _this.state = {
        width: void 0,
        height: void 0
      };
      _this.skipOnMount = skipOnMount;
      _this.targetRef = (0, import_react28.createRef)();
      _this.observableElement = null;
      if (isSSR()) {
        return _this;
      }
      _this.resizeHandler = patchResizeHandler(_this.createResizeHandler, refreshMode, refreshRate, refreshOptions);
      _this.resizeObserver = new window.ResizeObserver(_this.resizeHandler);
      return _this;
    }
    ResizeDetector2.prototype.componentDidMount = function() {
      this.attachObserver();
    };
    ResizeDetector2.prototype.componentDidUpdate = function() {
      this.attachObserver();
    };
    ResizeDetector2.prototype.componentWillUnmount = function() {
      if (isSSR()) {
        return;
      }
      this.observableElement = null;
      this.resizeObserver.disconnect();
      this.cancelHandler();
    };
    ResizeDetector2.prototype.render = function() {
      var _a = this.props, render = _a.render, children = _a.children, _b = _a.nodeType, WrapperTag = _b === void 0 ? "div" : _b;
      var _c = this.state, width = _c.width, height = _c.height;
      var childProps = { width, height, targetRef: this.targetRef };
      var renderType = this.getRenderType();
      var typedChildren;
      switch (renderType) {
        case "renderProp":
          return render && render(childProps);
        case "childFunction":
          typedChildren = children;
          return typedChildren(childProps);
        case "child":
          typedChildren = children;
          if (typedChildren.type && typeof typedChildren.type === "string") {
            childProps.targetRef;
            var nativeProps = __rest2(childProps, ["targetRef"]);
            return (0, import_react28.cloneElement)(typedChildren, nativeProps);
          }
          return (0, import_react28.cloneElement)(typedChildren, childProps);
        case "childArray":
          typedChildren = children;
          return typedChildren.map(function(el) {
            return !!el && (0, import_react28.cloneElement)(el, childProps);
          });
        default:
          return React21.createElement(WrapperTag, null);
      }
    };
    return ResizeDetector2;
  }(import_react28.PureComponent);
  var useEnhancedEffect = isSSR() ? import_react28.useEffect : import_react28.useLayoutEffect;

  // node_modules/recharts/es6/util/LogUtils.js
  var isDev2 = true;
  var warn3 = function warn4(condition, format3) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    if (isDev2 && typeof console !== "undefined" && console.warn) {
      if (format3 === void 0) {
        console.warn("LogUtils requires an error message argument");
      }
      if (!condition) {
        if (format3 === void 0) {
          console.warn("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        } else {
          var argIndex = 0;
          console.warn(format3.replace(/%s/g, function() {
            return args[argIndex++];
          }));
        }
      }
    }
  };

  // node_modules/recharts/es6/component/ResponsiveContainer.js
  function _extends7() {
    _extends7 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends7.apply(this, arguments);
  }
  function _slicedToArray4(arr, i3) {
    return _arrayWithHoles5(arr) || _iterableToArrayLimit4(arr, i3) || _unsupportedIterableToArray7(arr, i3) || _nonIterableRest5();
  }
  function _nonIterableRest5() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray7(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray7(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray7(o2, minLen);
  }
  function _arrayLikeToArray7(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit4(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles5(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var ResponsiveContainer = /* @__PURE__ */ (0, import_react29.forwardRef)(function(_ref3, ref) {
    var aspect = _ref3.aspect, _ref$width = _ref3.width, width = _ref$width === void 0 ? "100%" : _ref$width, _ref$height = _ref3.height, height = _ref$height === void 0 ? "100%" : _ref$height, minWidth = _ref3.minWidth, minHeight = _ref3.minHeight, maxHeight = _ref3.maxHeight, children = _ref3.children, _ref$debounce = _ref3.debounce, debounce2 = _ref$debounce === void 0 ? 0 : _ref$debounce, id = _ref3.id, className = _ref3.className;
    var _useState = (0, import_react29.useState)({
      containerWidth: -1,
      containerHeight: -1
    }), _useState2 = _slicedToArray4(_useState, 2), sizes = _useState2[0], setSizes = _useState2[1];
    var containerRef = (0, import_react29.useRef)(null);
    (0, import_react29.useImperativeHandle)(ref, function() {
      return containerRef;
    }, [containerRef]);
    var _useState3 = (0, import_react29.useState)(false), _useState4 = _slicedToArray4(_useState3, 2), mounted = _useState4[0], setMounted = _useState4[1];
    var getContainerSize = function getContainerSize2() {
      if (!containerRef.current) {
        return null;
      }
      return {
        containerWidth: containerRef.current.clientWidth,
        containerHeight: containerRef.current.clientHeight
      };
    };
    var updateDimensionsImmediate = function updateDimensionsImmediate2() {
      if (!mounted) {
        return;
      }
      var newSize = getContainerSize();
      if (newSize) {
        var oldWidth = sizes.containerWidth, oldHeight = sizes.containerHeight;
        var containerWidth = newSize.containerWidth, containerHeight = newSize.containerHeight;
        if (containerWidth !== oldWidth || containerHeight !== oldHeight) {
          setSizes({
            containerWidth,
            containerHeight
          });
        }
      }
    };
    var handleResize = debounce2 > 0 ? (0, import_debounce.default)(updateDimensionsImmediate, debounce2) : updateDimensionsImmediate;
    var renderChart = function renderChart2() {
      var containerWidth = sizes.containerWidth, containerHeight = sizes.containerHeight;
      if (containerWidth < 0 || containerHeight < 0) {
        return null;
      }
      warn3(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
      warn3(!aspect || aspect > 0, "The aspect(%s) must be greater than zero.", aspect);
      var calculatedWidth = isPercent(width) ? containerWidth : width;
      var calculatedHeight = isPercent(height) ? containerHeight : height;
      if (aspect && aspect > 0) {
        if (calculatedWidth) {
          calculatedHeight = calculatedWidth / aspect;
        } else if (calculatedHeight) {
          calculatedWidth = calculatedHeight * aspect;
        }
        if (maxHeight && calculatedHeight > maxHeight) {
          calculatedHeight = maxHeight;
        }
      }
      warn3(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);
      return /* @__PURE__ */ (0, import_react29.cloneElement)(children, {
        width: calculatedWidth,
        height: calculatedHeight
      });
    };
    (0, import_react29.useEffect)(function() {
      if (mounted) {
        var size = getContainerSize();
        if (size) {
          setSizes(size);
        }
      }
    }, [mounted]);
    (0, import_react29.useEffect)(function() {
      setMounted(true);
    }, []);
    var style = {
      width,
      height,
      minWidth,
      minHeight,
      maxHeight
    };
    return /* @__PURE__ */ import_react29.default.createElement(ResizeDetector, {
      handleWidth: true,
      handleHeight: true,
      onResize: handleResize,
      targetRef: containerRef
    }, /* @__PURE__ */ import_react29.default.createElement("div", _extends7({}, id != null ? {
      id: "".concat(id)
    } : {}, {
      className: (0, import_classnames9.default)("recharts-responsive-container", className),
      style,
      ref: containerRef
    }), renderChart()));
  });

  // node_modules/recharts/es6/component/Text.js
  var import_isNil3 = __toModule(require_isNil());
  var import_react30 = __toModule(require_react());
  var import_reduce_css_calc = __toModule(require_dist());
  var import_classnames10 = __toModule(require_classnames());

  // node_modules/recharts/es6/util/DOMUtils.js
  function ownKeys9(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread9(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys9(Object(source), true).forEach(function(key) {
          _defineProperty9(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys9(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty9(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _toConsumableArray5(arr) {
    return _arrayWithoutHoles5(arr) || _iterableToArray6(arr) || _unsupportedIterableToArray8(arr) || _nonIterableSpread5();
  }
  function _nonIterableSpread5() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray8(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray8(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray8(o2, minLen);
  }
  function _iterableToArray6(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles5(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray8(arr);
  }
  function _arrayLikeToArray8(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var stringCache = {
    widthCache: {},
    cacheCount: 0
  };
  var MAX_CACHE_NUM = 2e3;
  var SPAN_STYLE = {
    position: "absolute",
    top: "-20000px",
    left: 0,
    padding: 0,
    margin: 0,
    border: "none",
    whiteSpace: "pre"
  };
  var STYLE_LIST = ["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height", "top", "left", "fontSize", "lineHeight", "padding", "margin", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom"];
  var MEASUREMENT_SPAN_ID = "recharts_measurement_span";
  function autoCompleteStyle(name, value2) {
    if (STYLE_LIST.indexOf(name) >= 0 && value2 === +value2) {
      return "".concat(value2, "px");
    }
    return value2;
  }
  function camelToMiddleLine(text) {
    var strs = text.split("");
    var formatStrs = strs.reduce(function(result, entry) {
      if (entry === entry.toUpperCase()) {
        return [].concat(_toConsumableArray5(result), ["-", entry.toLowerCase()]);
      }
      return [].concat(_toConsumableArray5(result), [entry]);
    }, []);
    return formatStrs.join("");
  }
  var getStyleString = function getStyleString2(style) {
    return Object.keys(style).reduce(function(result, s3) {
      return "".concat(result).concat(camelToMiddleLine(s3), ":").concat(autoCompleteStyle(s3, style[s3]), ";");
    }, "");
  };
  var getStringSize = function getStringSize2(text) {
    var style = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (text === void 0 || text === null || Global.isSsr) {
      return {
        width: 0,
        height: 0
      };
    }
    var str = "".concat(text);
    var styleString = getStyleString(style);
    var cacheKey = "".concat(str, "-").concat(styleString);
    if (stringCache.widthCache[cacheKey]) {
      return stringCache.widthCache[cacheKey];
    }
    try {
      var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
      if (!measurementSpan) {
        measurementSpan = document.createElement("span");
        measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
        measurementSpan.setAttribute("aria-hidden", "true");
        document.body.appendChild(measurementSpan);
      }
      var measurementSpanStyle = _objectSpread9(_objectSpread9({}, SPAN_STYLE), style);
      Object.keys(measurementSpanStyle).map(function(styleKey) {
        measurementSpan.style[styleKey] = measurementSpanStyle[styleKey];
        return styleKey;
      });
      measurementSpan.textContent = str;
      var rect = measurementSpan.getBoundingClientRect();
      var result = {
        width: rect.width,
        height: rect.height
      };
      stringCache.widthCache[cacheKey] = result;
      if (++stringCache.cacheCount > MAX_CACHE_NUM) {
        stringCache.cacheCount = 0;
        stringCache.widthCache = {};
      }
      return result;
    } catch (e3) {
      return {
        width: 0,
        height: 0
      };
    }
  };
  var getOffset = function getOffset2(el) {
    var html = el.ownerDocument.documentElement;
    var box = {
      top: 0,
      left: 0
    };
    if (typeof el.getBoundingClientRect !== "undefined") {
      box = el.getBoundingClientRect();
    }
    return {
      top: box.top + window.pageYOffset - html.clientTop,
      left: box.left + window.pageXOffset - html.clientLeft
    };
  };
  var calculateChartCoordinate = function calculateChartCoordinate2(event, offset) {
    return {
      chartX: Math.round(event.pageX - offset.left),
      chartY: Math.round(event.pageY - offset.top)
    };
  };

  // node_modules/recharts/es6/component/Text.js
  function _typeof10(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof10 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof10 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof10(obj);
  }
  function _extends8() {
    _extends8 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends8.apply(this, arguments);
  }
  function _objectWithoutProperties6(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose7(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose7(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _classCallCheck9(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties9(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass9(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties9(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties9(Constructor, staticProps);
    return Constructor;
  }
  function _inherits9(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf10(subClass, superClass);
  }
  function _setPrototypeOf10(o2, p2) {
    _setPrototypeOf10 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf10(o2, p2);
  }
  function _createSuper9(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct9();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf9(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf9(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn9(this, result);
    };
  }
  function _possibleConstructorReturn9(self2, call) {
    if (call && (_typeof10(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized9(self2);
  }
  function _assertThisInitialized9(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct9() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf9(o2) {
    _getPrototypeOf9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf9(o2);
  }
  function _slicedToArray5(arr, i3) {
    return _arrayWithHoles6(arr) || _iterableToArrayLimit5(arr, i3) || _unsupportedIterableToArray9(arr, i3) || _nonIterableRest6();
  }
  function _nonIterableRest6() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray9(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray9(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray9(o2, minLen);
  }
  function _arrayLikeToArray9(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit5(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles6(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function ownKeys10(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread10(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys10(Object(source), true).forEach(function(key) {
          _defineProperty10(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys10(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty10(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;
  var calculateWordWidths = function calculateWordWidths2(props) {
    try {
      var words = [];
      if (!(0, import_isNil3.default)(props.children)) {
        if (props.breakAll) {
          words = props.children.toString().split("");
        } else {
          words = props.children.toString().split(BREAKING_SPACES);
        }
      }
      var wordsWithComputedWidth = words.map(function(word) {
        return {
          word,
          width: getStringSize(word, props.style).width
        };
      });
      var spaceWidth = props.breakAll ? 0 : getStringSize("\xA0", props.style).width;
      return {
        wordsWithComputedWidth,
        spaceWidth
      };
    } catch (e3) {
      return null;
    }
  };
  var calculateWordsByLines = function calculateWordsByLines2(props, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) {
    var shouldLimitLines = isNumber(props.maxLines);
    var text = props.children;
    var calculate = function calculate2() {
      var words = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return words.reduce(function(result2, _ref3) {
        var word = _ref3.word, width = _ref3.width;
        var currentLine = result2[result2.length - 1];
        if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < lineWidth)) {
          currentLine.words.push(word);
          currentLine.width += width + spaceWidth;
        } else {
          var newLine = {
            words: [word],
            width
          };
          result2.push(newLine);
        }
        return result2;
      }, []);
    };
    var originalResult = calculate(initialWordsWithComputedWith);
    var findLongestLine = function findLongestLine2(words) {
      return words.reduce(function(a3, b2) {
        return a3.width > b2.width ? a3 : b2;
      });
    };
    if (!shouldLimitLines) {
      return originalResult;
    }
    var suffix = "\u2026";
    var checkOverflow = function checkOverflow2(index2) {
      var tempText = text.slice(0, index2);
      var words = calculateWordWidths(_objectSpread10(_objectSpread10({}, props), {}, {
        children: tempText + suffix
      })).wordsWithComputedWidth;
      var result2 = calculate(words);
      var doesOverflow = result2.length > props.maxLines || findLongestLine(result2).width > lineWidth;
      return [doesOverflow, result2];
    };
    var start = 0;
    var end = text.length - 1;
    var iterations = 0;
    var trimmedResult;
    while (start <= end && iterations <= text.length - 1) {
      var middle = Math.floor((start + end) / 2);
      var prev2 = middle - 1;
      var _checkOverflow = checkOverflow(prev2), _checkOverflow2 = _slicedToArray5(_checkOverflow, 2), doesPrevOverflow = _checkOverflow2[0], result = _checkOverflow2[1];
      var _checkOverflow3 = checkOverflow(middle), _checkOverflow4 = _slicedToArray5(_checkOverflow3, 1), doesMiddleOverflow = _checkOverflow4[0];
      if (!doesPrevOverflow && !doesMiddleOverflow) {
        start = middle + 1;
      }
      if (doesPrevOverflow && doesMiddleOverflow) {
        end = middle - 1;
      }
      if (!doesPrevOverflow && doesMiddleOverflow) {
        trimmedResult = result;
        break;
      }
      iterations++;
    }
    return trimmedResult || originalResult;
  };
  var getWordsWithoutCalculate = function getWordsWithoutCalculate2(children) {
    var words = !(0, import_isNil3.default)(children) ? children.toString().split(BREAKING_SPACES) : [];
    return [{
      words
    }];
  };
  var getWordsByLines = function getWordsByLines2(props, needCalculate) {
    if ((props.width || props.scaleToFit) && !Global.isSsr) {
      var wordsWithComputedWidth, spaceWidth;
      if (needCalculate) {
        var wordWidths = calculateWordWidths(props);
        if (wordWidths) {
          var wcw = wordWidths.wordsWithComputedWidth, sw = wordWidths.spaceWidth;
          wordsWithComputedWidth = wcw;
          spaceWidth = sw;
        } else {
          return getWordsWithoutCalculate(props.children);
        }
        return calculateWordsByLines(props, wordsWithComputedWidth, spaceWidth, props.width, props.scaleToFit);
      }
    }
    return getWordsWithoutCalculate(props.children);
  };
  var Text = /* @__PURE__ */ function(_Component) {
    _inherits9(Text2, _Component);
    var _super = _createSuper9(Text2);
    function Text2() {
      var _this;
      _classCallCheck9(this, Text2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {};
      return _this;
    }
    _createClass9(Text2, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, dx = _this$props.dx, dy = _this$props.dy, textAnchor = _this$props.textAnchor, verticalAnchor = _this$props.verticalAnchor, scaleToFit = _this$props.scaleToFit, angle = _this$props.angle, lineHeight = _this$props.lineHeight, capHeight = _this$props.capHeight, className = _this$props.className, breakAll = _this$props.breakAll, textProps = _objectWithoutProperties6(_this$props, ["dx", "dy", "textAnchor", "verticalAnchor", "scaleToFit", "angle", "lineHeight", "capHeight", "className", "breakAll"]);
        var wordsByLines = this.state.wordsByLines;
        if (!isNumOrStr(textProps.x) || !isNumOrStr(textProps.y)) {
          return null;
        }
        var x3 = textProps.x + (isNumber(dx) ? dx : 0);
        var y2 = textProps.y + (isNumber(dy) ? dy : 0);
        var startDy;
        switch (verticalAnchor) {
          case "start":
            startDy = (0, import_reduce_css_calc.default)("calc(".concat(capHeight, ")"));
            break;
          case "middle":
            startDy = (0, import_reduce_css_calc.default)("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
            break;
          default:
            startDy = (0, import_reduce_css_calc.default)("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
            break;
        }
        var transforms = [];
        if (scaleToFit) {
          var lineWidth = wordsByLines[0].width;
          var width = this.props.width;
          transforms.push("scale(".concat((isNumber(width) ? width / lineWidth : 1) / lineWidth, ")"));
        }
        if (angle) {
          transforms.push("rotate(".concat(angle, ", ").concat(x3, ", ").concat(y2, ")"));
        }
        if (transforms.length) {
          textProps.transform = transforms.join(" ");
        }
        return /* @__PURE__ */ import_react30.default.createElement("text", _extends8({}, filterProps(textProps, true), {
          x: x3,
          y: y2,
          className: (0, import_classnames10.default)("recharts-text", className),
          textAnchor
        }), wordsByLines.map(function(line, index2) {
          return /* @__PURE__ */ import_react30.default.createElement("tspan", {
            x: x3,
            dy: index2 === 0 ? startDy : lineHeight,
            key: index2
          }, line.words.join(breakAll ? "" : " "));
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.width !== prevState.prevWidth || nextProps.scaleToFit !== prevState.prevScaleToFit || nextProps.children !== prevState.prevChildren || nextProps.style !== prevState.prevStyle || nextProps.breakAll !== prevState.prevBreakAll) {
          var needCalculate = nextProps.children !== prevState.prevChildren || nextProps.style !== prevState.prevStyle || nextProps.breakAll !== prevState.prevBreakAll;
          return {
            prevWidth: nextProps.width,
            prevScaleToFit: nextProps.scaleToFit,
            prevChildren: nextProps.children,
            prevStyle: nextProps.style,
            wordsByLines: getWordsByLines(nextProps, needCalculate)
          };
        }
        return null;
      }
    }]);
    return Text2;
  }(import_react30.Component);
  Text.defaultProps = {
    x: 0,
    y: 0,
    lineHeight: "1em",
    capHeight: "0.71em",
    scaleToFit: false,
    textAnchor: "start",
    verticalAnchor: "end"
  };

  // node_modules/recharts/es6/component/Label.js
  var import_isObject2 = __toModule(require_isObject());
  var import_isFunction4 = __toModule(require_isFunction());
  var import_isNil7 = __toModule(require_isNil());
  var import_react32 = __toModule(require_react());
  var import_classnames11 = __toModule(require_classnames());

  // node_modules/recharts/es6/util/ReactUtils.js
  var import_isString2 = __toModule(require_isString());
  var import_get2 = __toModule(require_get());
  var import_isNil4 = __toModule(require_isNil());
  var import_isArray3 = __toModule(require_isArray());
  var import_react31 = __toModule(require_react());
  var import_react_is2 = __toModule(require_react_is());

  // node_modules/recharts/es6/util/ShallowEqual.js
  function shallowEqual(a3, b2) {
    for (var key in a3) {
      if ({}.hasOwnProperty.call(a3, key) && (!{}.hasOwnProperty.call(b2, key) || a3[key] !== b2[key])) {
        return false;
      }
    }
    for (var _key in b2) {
      if ({}.hasOwnProperty.call(b2, _key) && !{}.hasOwnProperty.call(a3, _key)) {
        return false;
      }
    }
    return true;
  }

  // node_modules/recharts/es6/util/ReactUtils.js
  function _objectWithoutProperties7(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose8(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose8(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var REACT_BROWSER_EVENT_MAP = {
    click: "onClick",
    mousedown: "onMouseDown",
    mouseup: "onMouseUp",
    mouseover: "onMouseOver",
    mousemove: "onMouseMove",
    mouseout: "onMouseOut",
    mouseenter: "onMouseEnter",
    mouseleave: "onMouseLeave",
    touchcancel: "onTouchCancel",
    touchend: "onTouchEnd",
    touchmove: "onTouchMove",
    touchstart: "onTouchStart"
  };
  var getDisplayName = function getDisplayName2(Comp) {
    if (typeof Comp === "string") {
      return Comp;
    }
    if (!Comp) {
      return "";
    }
    return Comp.displayName || Comp.name || "Component";
  };
  var lastChildren = null;
  var lastResult = null;
  var toArray = function toArray2(children) {
    if (children === lastChildren && (0, import_isArray3.default)(lastResult)) {
      return lastResult;
    }
    var result = [];
    import_react31.Children.forEach(children, function(child) {
      if ((0, import_isNil4.default)(child))
        return;
      if ((0, import_react_is2.isFragment)(child)) {
        result = result.concat(toArray2(child.props.children));
      } else {
        result.push(child);
      }
    });
    lastResult = result;
    lastChildren = children;
    return result;
  };
  var findAllByType = function findAllByType2(children, type) {
    var result = [];
    var types = [];
    if ((0, import_isArray3.default)(type)) {
      types = type.map(function(t2) {
        return getDisplayName(t2);
      });
    } else {
      types = [getDisplayName(type)];
    }
    toArray(children).forEach(function(child) {
      var childType = (0, import_get2.default)(child, "type.displayName") || (0, import_get2.default)(child, "type.name");
      if (types.indexOf(childType) !== -1) {
        result.push(child);
      }
    });
    return result;
  };
  var findChildByType = function findChildByType2(children, type) {
    var result = findAllByType(children, type);
    return result && result[0];
  };
  var validateWidthHeight = function validateWidthHeight2(el) {
    if (!el || !el.props) {
      return false;
    }
    var _el$props = el.props, width = _el$props.width, height = _el$props.height;
    if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0) {
      return false;
    }
    return true;
  };
  var SVG_TAGS = ["a", "altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColormatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-url", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "lineGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "script", "set", "stop", "style", "svg", "switch", "symbol", "text", "textPath", "title", "tref", "tspan", "use", "view", "vkern"];
  var isSvgElement = function isSvgElement2(child) {
    return child && child.type && (0, import_isString2.default)(child.type) && SVG_TAGS.indexOf(child.type) >= 0;
  };
  var isChildrenEqual = function isChildrenEqual2(nextChildren, prevChildren) {
    if (nextChildren === prevChildren) {
      return true;
    }
    var count = import_react31.Children.count(nextChildren);
    if (count !== import_react31.Children.count(prevChildren)) {
      return false;
    }
    if (count === 0) {
      return true;
    }
    if (count === 1) {
      return isSingleChildEqual((0, import_isArray3.default)(nextChildren) ? nextChildren[0] : nextChildren, (0, import_isArray3.default)(prevChildren) ? prevChildren[0] : prevChildren);
    }
    for (var i3 = 0; i3 < count; i3++) {
      var nextChild = nextChildren[i3];
      var prevChild = prevChildren[i3];
      if ((0, import_isArray3.default)(nextChild) || (0, import_isArray3.default)(prevChild)) {
        if (!isChildrenEqual2(nextChild, prevChild)) {
          return false;
        }
      } else if (!isSingleChildEqual(nextChild, prevChild)) {
        return false;
      }
    }
    return true;
  };
  var isSingleChildEqual = function isSingleChildEqual2(nextChild, prevChild) {
    if ((0, import_isNil4.default)(nextChild) && (0, import_isNil4.default)(prevChild)) {
      return true;
    }
    if (!(0, import_isNil4.default)(nextChild) && !(0, import_isNil4.default)(prevChild)) {
      var _ref3 = nextChild.props || {}, nextChildren = _ref3.children, nextProps = _objectWithoutProperties7(_ref3, ["children"]);
      var _ref23 = prevChild.props || {}, prevChildren = _ref23.children, prevProps = _objectWithoutProperties7(_ref23, ["children"]);
      if (nextChildren && prevChildren) {
        return shallowEqual(nextProps, prevProps) && isChildrenEqual(nextChildren, prevChildren);
      }
      if (!nextChildren && !prevChildren) {
        return shallowEqual(nextProps, prevProps);
      }
      return false;
    }
    return false;
  };
  var renderByOrder = function renderByOrder2(children, renderMap) {
    var elements = [];
    var record = {};
    toArray(children).forEach(function(child, index2) {
      if (isSvgElement(child)) {
        elements.push(child);
      } else if (child) {
        var displayName = getDisplayName(child.type);
        var _ref3 = renderMap[displayName] || {}, handler = _ref3.handler, once = _ref3.once;
        if (handler && (!once || !record[displayName])) {
          var results = handler(child, displayName, index2);
          elements.push(results);
          record[displayName] = true;
        }
      }
    });
    return elements;
  };
  var getReactEventByType = function getReactEventByType2(e3) {
    var type = e3 && e3.type;
    if (type && REACT_BROWSER_EVENT_MAP[type]) {
      return REACT_BROWSER_EVENT_MAP[type];
    }
    return null;
  };
  var parseChildIndex = function parseChildIndex2(child, children) {
    return toArray(children).indexOf(child);
  };

  // node_modules/recharts/es6/util/PolarUtils.js
  var import_isNil6 = __toModule(require_isNil());

  // node_modules/recharts/es6/util/ChartUtils.js
  var import_isEqual = __toModule(require_isEqual());
  var import_sortBy2 = __toModule(require_sortBy());
  var import_isNaN2 = __toModule(require_isNaN());
  var import_upperFirst2 = __toModule(require_upperFirst());
  var import_isString3 = __toModule(require_isString());
  var import_isArray4 = __toModule(require_isArray());
  var import_max2 = __toModule(require_max());
  var import_min2 = __toModule(require_min());
  var import_flatMap = __toModule(require_flatMap());
  var import_isFunction3 = __toModule(require_isFunction());
  var import_get3 = __toModule(require_get());
  var import_isNil5 = __toModule(require_isNil());

  // node_modules/recharts-scale/es6/getNiceTickValues.js
  var import_decimal2 = __toModule(require_decimal());

  // node_modules/recharts-scale/es6/util/utils.js
  function _toConsumableArray6(arr) {
    return _arrayWithoutHoles6(arr) || _iterableToArray7(arr) || _unsupportedIterableToArray10(arr) || _nonIterableSpread6();
  }
  function _nonIterableSpread6() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray10(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray10(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray10(o2, minLen);
  }
  function _iterableToArray7(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles6(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray10(arr);
  }
  function _arrayLikeToArray10(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var identity3 = function identity4(i3) {
    return i3;
  };
  var PLACE_HOLDER = {
    "@@functional/placeholder": true
  };
  var isPlaceHolder = function isPlaceHolder2(val) {
    return val === PLACE_HOLDER;
  };
  var curry0 = function curry02(fn) {
    return function _curried() {
      if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? void 0 : arguments[0])) {
        return _curried;
      }
      return fn.apply(void 0, arguments);
    };
  };
  var curryN = function curryN2(n3, fn) {
    if (n3 === 1) {
      return fn;
    }
    return curry0(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var argsLength = args.filter(function(arg) {
        return arg !== PLACE_HOLDER;
      }).length;
      if (argsLength >= n3) {
        return fn.apply(void 0, args);
      }
      return curryN2(n3 - argsLength, curry0(function() {
        for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          restArgs[_key2] = arguments[_key2];
        }
        var newArgs = args.map(function(arg) {
          return isPlaceHolder(arg) ? restArgs.shift() : arg;
        });
        return fn.apply(void 0, _toConsumableArray6(newArgs).concat(restArgs));
      }));
    });
  };
  var curry = function curry2(fn) {
    return curryN(fn.length, fn);
  };
  var range = function range2(begin, end) {
    var arr = [];
    for (var i3 = begin; i3 < end; ++i3) {
      arr[i3 - begin] = i3;
    }
    return arr;
  };
  var map2 = curry(function(fn, arr) {
    if (Array.isArray(arr)) {
      return arr.map(fn);
    }
    return Object.keys(arr).map(function(key) {
      return arr[key];
    }).map(fn);
  });
  var compose = function compose2() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    if (!args.length) {
      return identity3;
    }
    var fns = args.reverse();
    var firstFn = fns[0];
    var tailsFn = fns.slice(1);
    return function() {
      return tailsFn.reduce(function(res, fn) {
        return fn(res);
      }, firstFn.apply(void 0, arguments));
    };
  };
  var reverse = function reverse2(arr) {
    if (Array.isArray(arr)) {
      return arr.reverse();
    }
    return arr.split("").reverse.join("");
  };
  var memoize = function memoize2(fn) {
    var lastArgs = null;
    var lastResult2 = null;
    return function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      if (lastArgs && args.every(function(val, i3) {
        return val === lastArgs[i3];
      })) {
        return lastResult2;
      }
      lastArgs = args;
      lastResult2 = fn.apply(void 0, args);
      return lastResult2;
    };
  };

  // node_modules/recharts-scale/es6/util/arithmetic.js
  var import_decimal = __toModule(require_decimal());
  function getDigitCount(value2) {
    var result;
    if (value2 === 0) {
      result = 1;
    } else {
      result = Math.floor(new import_decimal.default(value2).abs().log(10).toNumber()) + 1;
    }
    return result;
  }
  function rangeStep(start, end, step) {
    var num = new import_decimal.default(start);
    var i3 = 0;
    var result = [];
    while (num.lt(end) && i3 < 1e5) {
      result.push(num.toNumber());
      num = num.add(step);
      i3++;
    }
    return result;
  }
  var interpolateNumber3 = curry(function(a3, b2, t2) {
    var newA = +a3;
    var newB = +b2;
    return newA + t2 * (newB - newA);
  });
  var uninterpolateNumber = curry(function(a3, b2, x3) {
    var diff = b2 - +a3;
    diff = diff || Infinity;
    return (x3 - a3) / diff;
  });
  var uninterpolateTruncation = curry(function(a3, b2, x3) {
    var diff = b2 - +a3;
    diff = diff || Infinity;
    return Math.max(0, Math.min(1, (x3 - a3) / diff));
  });
  var arithmetic_default = {
    rangeStep,
    getDigitCount,
    interpolateNumber: interpolateNumber3,
    uninterpolateNumber,
    uninterpolateTruncation
  };

  // node_modules/recharts-scale/es6/getNiceTickValues.js
  function _toConsumableArray7(arr) {
    return _arrayWithoutHoles7(arr) || _iterableToArray8(arr) || _unsupportedIterableToArray11(arr) || _nonIterableSpread7();
  }
  function _nonIterableSpread7() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArray8(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles7(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray11(arr);
  }
  function _slicedToArray6(arr, i3) {
    return _arrayWithHoles7(arr) || _iterableToArrayLimit6(arr, i3) || _unsupportedIterableToArray11(arr, i3) || _nonIterableRest7();
  }
  function _nonIterableRest7() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray11(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray11(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray11(o2, minLen);
  }
  function _arrayLikeToArray11(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit6(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles7(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function getValidInterval(_ref3) {
    var _ref23 = _slicedToArray6(_ref3, 2), min2 = _ref23[0], max2 = _ref23[1];
    var validMin = min2, validMax = max2;
    if (min2 > max2) {
      validMin = max2;
      validMax = min2;
    }
    return [validMin, validMax];
  }
  function getFormatStep(roughStep, allowDecimals, correctionFactor) {
    if (roughStep.lte(0)) {
      return new import_decimal2.default(0);
    }
    var digitCount = arithmetic_default.getDigitCount(roughStep.toNumber());
    var digitCountValue = new import_decimal2.default(10).pow(digitCount);
    var stepRatio = roughStep.div(digitCountValue);
    var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
    var amendStepRatio = new import_decimal2.default(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
    var formatStep = amendStepRatio.mul(digitCountValue);
    return allowDecimals ? formatStep : new import_decimal2.default(Math.ceil(formatStep));
  }
  function getTickOfSingleValue(value2, tickCount, allowDecimals) {
    var step = 1;
    var middle = new import_decimal2.default(value2);
    if (!middle.isint() && allowDecimals) {
      var absVal = Math.abs(value2);
      if (absVal < 1) {
        step = new import_decimal2.default(10).pow(arithmetic_default.getDigitCount(value2) - 1);
        middle = new import_decimal2.default(Math.floor(middle.div(step).toNumber())).mul(step);
      } else if (absVal > 1) {
        middle = new import_decimal2.default(Math.floor(value2));
      }
    } else if (value2 === 0) {
      middle = new import_decimal2.default(Math.floor((tickCount - 1) / 2));
    } else if (!allowDecimals) {
      middle = new import_decimal2.default(Math.floor(value2));
    }
    var middleIndex = Math.floor((tickCount - 1) / 2);
    var fn = compose(map2(function(n3) {
      return middle.add(new import_decimal2.default(n3 - middleIndex).mul(step)).toNumber();
    }), range);
    return fn(0, tickCount);
  }
  function calculateStep(min2, max2, tickCount, allowDecimals) {
    var correctionFactor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    if (!Number.isFinite((max2 - min2) / (tickCount - 1))) {
      return {
        step: new import_decimal2.default(0),
        tickMin: new import_decimal2.default(0),
        tickMax: new import_decimal2.default(0)
      };
    }
    var step = getFormatStep(new import_decimal2.default(max2).sub(min2).div(tickCount - 1), allowDecimals, correctionFactor);
    var middle;
    if (min2 <= 0 && max2 >= 0) {
      middle = new import_decimal2.default(0);
    } else {
      middle = new import_decimal2.default(min2).add(max2).div(2);
      middle = middle.sub(new import_decimal2.default(middle).mod(step));
    }
    var belowCount = Math.ceil(middle.sub(min2).div(step).toNumber());
    var upCount = Math.ceil(new import_decimal2.default(max2).sub(middle).div(step).toNumber());
    var scaleCount = belowCount + upCount + 1;
    if (scaleCount > tickCount) {
      return calculateStep(min2, max2, tickCount, allowDecimals, correctionFactor + 1);
    }
    if (scaleCount < tickCount) {
      upCount = max2 > 0 ? upCount + (tickCount - scaleCount) : upCount;
      belowCount = max2 > 0 ? belowCount : belowCount + (tickCount - scaleCount);
    }
    return {
      step,
      tickMin: middle.sub(new import_decimal2.default(belowCount).mul(step)),
      tickMax: middle.add(new import_decimal2.default(upCount).mul(step))
    };
  }
  function getNiceTickValuesFn(_ref3) {
    var _ref4 = _slicedToArray6(_ref3, 2), min2 = _ref4[0], max2 = _ref4[1];
    var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var count = Math.max(tickCount, 2);
    var _getValidInterval = getValidInterval([min2, max2]), _getValidInterval2 = _slicedToArray6(_getValidInterval, 2), cormin = _getValidInterval2[0], cormax = _getValidInterval2[1];
    if (cormin === -Infinity || cormax === Infinity) {
      var _values = cormax === Infinity ? [cormin].concat(_toConsumableArray7(range(0, tickCount - 1).map(function() {
        return Infinity;
      }))) : [].concat(_toConsumableArray7(range(0, tickCount - 1).map(function() {
        return -Infinity;
      })), [cormax]);
      return min2 > max2 ? reverse(_values) : _values;
    }
    if (cormin === cormax) {
      return getTickOfSingleValue(cormin, tickCount, allowDecimals);
    }
    var _calculateStep = calculateStep(cormin, cormax, count, allowDecimals), step = _calculateStep.step, tickMin = _calculateStep.tickMin, tickMax = _calculateStep.tickMax;
    var values = arithmetic_default.rangeStep(tickMin, tickMax.add(new import_decimal2.default(0.1).mul(step)), step);
    return min2 > max2 ? reverse(values) : values;
  }
  function getTickValuesFn(_ref5) {
    var _ref6 = _slicedToArray6(_ref5, 2), min2 = _ref6[0], max2 = _ref6[1];
    var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var count = Math.max(tickCount, 2);
    var _getValidInterval3 = getValidInterval([min2, max2]), _getValidInterval4 = _slicedToArray6(_getValidInterval3, 2), cormin = _getValidInterval4[0], cormax = _getValidInterval4[1];
    if (cormin === -Infinity || cormax === Infinity) {
      return [min2, max2];
    }
    if (cormin === cormax) {
      return getTickOfSingleValue(cormin, tickCount, allowDecimals);
    }
    var step = getFormatStep(new import_decimal2.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);
    var fn = compose(map2(function(n3) {
      return new import_decimal2.default(cormin).add(new import_decimal2.default(n3).mul(step)).toNumber();
    }), range);
    var values = fn(0, count).filter(function(entry) {
      return entry >= cormin && entry <= cormax;
    });
    return min2 > max2 ? reverse(values) : values;
  }
  function getTickValuesFixedDomainFn(_ref7, tickCount) {
    var _ref8 = _slicedToArray6(_ref7, 2), min2 = _ref8[0], max2 = _ref8[1];
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var _getValidInterval5 = getValidInterval([min2, max2]), _getValidInterval6 = _slicedToArray6(_getValidInterval5, 2), cormin = _getValidInterval6[0], cormax = _getValidInterval6[1];
    if (cormin === -Infinity || cormax === Infinity) {
      return [min2, max2];
    }
    if (cormin === cormax) {
      return [cormin];
    }
    var count = Math.max(tickCount, 2);
    var step = getFormatStep(new import_decimal2.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);
    var values = [].concat(_toConsumableArray7(arithmetic_default.rangeStep(new import_decimal2.default(cormin), new import_decimal2.default(cormax).sub(new import_decimal2.default(0.99).mul(step)), step)), [cormax]);
    return min2 > max2 ? reverse(values) : values;
  }
  var getNiceTickValues = memoize(getNiceTickValuesFn);
  var getTickValues = memoize(getTickValuesFn);
  var getTickValuesFixedDomain = memoize(getTickValuesFixedDomainFn);

  // node_modules/d3-scale/src/index.js
  var src_exports = {};
  __export(src_exports, {
    scaleBand: () => band,
    scaleDiverging: () => diverging,
    scaleDivergingLog: () => divergingLog,
    scaleDivergingPow: () => divergingPow,
    scaleDivergingSqrt: () => divergingSqrt,
    scaleDivergingSymlog: () => divergingSymlog,
    scaleIdentity: () => identity6,
    scaleImplicit: () => implicit,
    scaleLinear: () => linear2,
    scaleLog: () => log,
    scaleOrdinal: () => ordinal,
    scalePoint: () => point3,
    scalePow: () => pow,
    scaleQuantile: () => quantile2,
    scaleQuantize: () => quantize,
    scaleRadial: () => radial,
    scaleSequential: () => sequential,
    scaleSequentialLog: () => sequentialLog,
    scaleSequentialPow: () => sequentialPow,
    scaleSequentialQuantile: () => sequentialQuantile,
    scaleSequentialSqrt: () => sequentialSqrt,
    scaleSequentialSymlog: () => sequentialSymlog,
    scaleSqrt: () => sqrt2,
    scaleSymlog: () => symlog,
    scaleThreshold: () => threshold,
    scaleTime: () => time,
    scaleUtc: () => utcTime,
    tickFormat: () => tickFormat
  });

  // node_modules/d3-array/src/ascending.js
  function ascending(a3, b2) {
    return a3 == null || b2 == null ? NaN : a3 < b2 ? -1 : a3 > b2 ? 1 : a3 >= b2 ? 0 : NaN;
  }

  // node_modules/d3-array/src/descending.js
  function descending(a3, b2) {
    return a3 == null || b2 == null ? NaN : b2 < a3 ? -1 : b2 > a3 ? 1 : b2 >= a3 ? 0 : NaN;
  }

  // node_modules/d3-array/src/bisector.js
  function bisector(f3) {
    let compare1, compare2, delta;
    if (f3.length !== 2) {
      compare1 = ascending;
      compare2 = (d3, x3) => ascending(f3(d3), x3);
      delta = (d3, x3) => f3(d3) - x3;
    } else {
      compare1 = f3 === ascending || f3 === descending ? f3 : zero;
      compare2 = f3;
      delta = f3;
    }
    function left(a3, x3, lo = 0, hi = a3.length) {
      if (lo < hi) {
        if (compare1(x3, x3) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a3[mid], x3) < 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a3, x3, lo = 0, hi = a3.length) {
      if (lo < hi) {
        if (compare1(x3, x3) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a3[mid], x3) <= 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a3, x3, lo = 0, hi = a3.length) {
      const i3 = left(a3, x3, lo, hi - 1);
      return i3 > lo && delta(a3[i3 - 1], x3) > -delta(a3[i3], x3) ? i3 - 1 : i3;
    }
    return { left, center, right };
  }
  function zero() {
    return 0;
  }

  // node_modules/d3-array/src/number.js
  function number2(x3) {
    return x3 === null ? NaN : +x3;
  }
  function* numbers(values, valueof) {
    if (valueof === void 0) {
      for (let value2 of values) {
        if (value2 != null && (value2 = +value2) >= value2) {
          yield value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values) {
        if ((value2 = valueof(value2, ++index2, values)) != null && (value2 = +value2) >= value2) {
          yield value2;
        }
      }
    }
  }

  // node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number2).center;
  var bisect_default = bisectRight;

  // node_modules/internmap/src/index.js
  var InternMap = class extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: new Map() }, _key: { value: key } });
      if (entries != null)
        for (const [key2, value2] of entries)
          this.set(key2, value2);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value2) {
      return super.set(intern_set(this, key), value2);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  };
  function intern_get({ _intern, _key }, value2) {
    const key = _key(value2);
    return _intern.has(key) ? _intern.get(key) : value2;
  }
  function intern_set({ _intern, _key }, value2) {
    const key = _key(value2);
    if (_intern.has(key))
      return _intern.get(key);
    _intern.set(key, value2);
    return value2;
  }
  function intern_delete({ _intern, _key }, value2) {
    const key = _key(value2);
    if (_intern.has(key)) {
      value2 = _intern.get(key);
      _intern.delete(key);
    }
    return value2;
  }
  function keyof(value2) {
    return value2 !== null && typeof value2 === "object" ? value2.valueOf() : value2;
  }

  // node_modules/d3-array/src/sort.js
  function compareDefined(compare = ascending) {
    if (compare === ascending)
      return ascendingDefined;
    if (typeof compare !== "function")
      throw new TypeError("compare is not a function");
    return (a3, b2) => {
      const x3 = compare(a3, b2);
      if (x3 || x3 === 0)
        return x3;
      return (compare(b2, b2) === 0) - (compare(a3, a3) === 0);
    };
  }
  function ascendingDefined(a3, b2) {
    return (a3 == null || !(a3 >= a3)) - (b2 == null || !(b2 >= b2)) || (a3 < b2 ? -1 : a3 > b2 ? 1 : 0);
  }

  // node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e2 = Math.sqrt(2);
  function ticks(start, stop, count) {
    var reverse3, i3 = -1, n3, ticks2, step;
    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0)
      return [start];
    if (reverse3 = stop < start)
      n3 = start, start = stop, stop = n3;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step))
      return [];
    if (step > 0) {
      let r0 = Math.round(start / step), r1 = Math.round(stop / step);
      if (r0 * step < start)
        ++r0;
      if (r1 * step > stop)
        --r1;
      ticks2 = new Array(n3 = r1 - r0 + 1);
      while (++i3 < n3)
        ticks2[i3] = (r0 + i3) * step;
    } else {
      step = -step;
      let r0 = Math.round(start * step), r1 = Math.round(stop * step);
      if (r0 / step < start)
        ++r0;
      if (r1 / step > stop)
        --r1;
      ticks2 = new Array(n3 = r1 - r0 + 1);
      while (++i3 < n3)
        ticks2[i3] = (r0 + i3) / step;
    }
    if (reverse3)
      ticks2.reverse();
    return ticks2;
  }
  function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  }
  function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e10)
      step1 *= 10;
    else if (error >= e5)
      step1 *= 5;
    else if (error >= e2)
      step1 *= 2;
    return stop < start ? -step1 : step1;
  }

  // node_modules/d3-array/src/max.js
  function max(values, valueof) {
    let max2;
    if (valueof === void 0) {
      for (const value2 of values) {
        if (value2 != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
          max2 = value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values) {
        if ((value2 = valueof(value2, ++index2, values)) != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
          max2 = value2;
        }
      }
    }
    return max2;
  }

  // node_modules/d3-array/src/min.js
  function min(values, valueof) {
    let min2;
    if (valueof === void 0) {
      for (const value2 of values) {
        if (value2 != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
          min2 = value2;
        }
      }
    } else {
      let index2 = -1;
      for (let value2 of values) {
        if ((value2 = valueof(value2, ++index2, values)) != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
          min2 = value2;
        }
      }
    }
    return min2;
  }

  // node_modules/d3-array/src/quickselect.js
  function quickselect(array, k3, left = 0, right = array.length - 1, compare) {
    compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
    while (right > left) {
      if (right - left > 600) {
        const n3 = right - left + 1;
        const m3 = k3 - left + 1;
        const z = Math.log(n3);
        const s3 = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s3 * (n3 - s3) / n3) * (m3 - n3 / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k3 - m3 * s3 / n3 + sd));
        const newRight = Math.min(right, Math.floor(k3 + (n3 - m3) * s3 / n3 + sd));
        quickselect(array, k3, newLeft, newRight, compare);
      }
      const t2 = array[k3];
      let i3 = left;
      let j3 = right;
      swap(array, left, k3);
      if (compare(array[right], t2) > 0)
        swap(array, left, right);
      while (i3 < j3) {
        swap(array, i3, j3), ++i3, --j3;
        while (compare(array[i3], t2) < 0)
          ++i3;
        while (compare(array[j3], t2) > 0)
          --j3;
      }
      if (compare(array[left], t2) === 0)
        swap(array, left, j3);
      else
        ++j3, swap(array, j3, right);
      if (j3 <= k3)
        left = j3 + 1;
      if (k3 <= j3)
        right = j3 - 1;
    }
    return array;
  }
  function swap(array, i3, j3) {
    const t2 = array[i3];
    array[i3] = array[j3];
    array[j3] = t2;
  }

  // node_modules/d3-array/src/quantile.js
  function quantile(values, p2, valueof) {
    values = Float64Array.from(numbers(values, valueof));
    if (!(n3 = values.length))
      return;
    if ((p2 = +p2) <= 0 || n3 < 2)
      return min(values);
    if (p2 >= 1)
      return max(values);
    var n3, i3 = (n3 - 1) * p2, i0 = Math.floor(i3), value0 = max(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i3 - i0);
  }
  function quantileSorted(values, p2, valueof = number2) {
    if (!(n3 = values.length))
      return;
    if ((p2 = +p2) <= 0 || n3 < 2)
      return +valueof(values[0], 0, values);
    if (p2 >= 1)
      return +valueof(values[n3 - 1], n3 - 1, values);
    var n3, i3 = (n3 - 1) * p2, i0 = Math.floor(i3), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i3 - i0);
  }

  // node_modules/d3-array/src/range.js
  function range3(start, stop, step) {
    start = +start, stop = +stop, step = (n3 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n3 < 3 ? 1 : +step;
    var i3 = -1, n3 = Math.max(0, Math.ceil((stop - start) / step)) | 0, range4 = new Array(n3);
    while (++i3 < n3) {
      range4[i3] = start + i3 * step;
    }
    return range4;
  }

  // node_modules/d3-scale/src/init.js
  function initRange(domain, range4) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range4).domain(domain);
        break;
    }
    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1: {
        if (typeof domain === "function")
          this.interpolator(domain);
        else
          this.range(domain);
        break;
      }
      default: {
        this.domain(domain);
        if (typeof interpolator === "function")
          this.interpolator(interpolator);
        else
          this.range(interpolator);
        break;
      }
    }
    return this;
  }

  // node_modules/d3-scale/src/ordinal.js
  var implicit = Symbol("implicit");
  function ordinal() {
    var index2 = new InternMap(), domain = [], range4 = [], unknown = implicit;
    function scale(d3) {
      let i3 = index2.get(d3);
      if (i3 === void 0) {
        if (unknown !== implicit)
          return unknown;
        index2.set(d3, i3 = domain.push(d3) - 1);
      }
      return range4[i3 % range4.length];
    }
    scale.domain = function(_2) {
      if (!arguments.length)
        return domain.slice();
      domain = [], index2 = new InternMap();
      for (const value2 of _2) {
        if (index2.has(value2))
          continue;
        index2.set(value2, domain.push(value2) - 1);
      }
      return scale;
    };
    scale.range = function(_2) {
      return arguments.length ? (range4 = Array.from(_2), scale) : range4.slice();
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    scale.copy = function() {
      return ordinal(domain, range4).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/band.js
  function band() {
    var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      var n3 = domain().length, reverse3 = r1 < r0, start = reverse3 ? r1 : r0, stop = reverse3 ? r0 : r1;
      step = (stop - start) / Math.max(1, n3 - paddingInner + paddingOuter * 2);
      if (round)
        step = Math.floor(step);
      start += (stop - start - step * (n3 - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round)
        start = Math.round(start), bandwidth = Math.round(bandwidth);
      var values = range3(n3).map(function(i3) {
        return start + step * i3;
      });
      return ordinalRange(reverse3 ? values.reverse() : values);
    }
    scale.domain = function(_2) {
      return arguments.length ? (domain(_2), rescale()) : domain();
    };
    scale.range = function(_2) {
      return arguments.length ? ([r0, r1] = _2, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
    };
    scale.rangeRound = function(_2) {
      return [r0, r1] = _2, r0 = +r0, r1 = +r1, round = true, rescale();
    };
    scale.bandwidth = function() {
      return bandwidth;
    };
    scale.step = function() {
      return step;
    };
    scale.round = function(_2) {
      return arguments.length ? (round = !!_2, rescale()) : round;
    };
    scale.padding = function(_2) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_2), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_2) {
      return arguments.length ? (paddingInner = Math.min(1, _2), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_2) {
      return arguments.length ? (paddingOuter = +_2, rescale()) : paddingOuter;
    };
    scale.align = function(_2) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _2)), rescale()) : align;
    };
    scale.copy = function() {
      return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return initRange.apply(rescale(), arguments);
  }
  function pointish(scale) {
    var copy3 = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
      return pointish(copy3());
    };
    return scale;
  }
  function point3() {
    return pointish(band.apply(null, arguments).paddingInner(1));
  }

  // node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format3) {
    var m3, l2;
    format3 = (format3 + "").trim().toLowerCase();
    return (m3 = reHex.exec(format3)) ? (l2 = m3[1].length, m3 = parseInt(m3[1], 16), l2 === 6 ? rgbn(m3) : l2 === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l2 === 8 ? rgba(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l2 === 4 ? rgba(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format3)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format3)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format3)) ? rgba(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format3)) ? rgba(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format3)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format3)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n3) {
    return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
  }
  function rgba(r, g3, b2, a3) {
    if (a3 <= 0)
      r = g3 = b2 = NaN;
    return new Rgb(r, g3, b2, a3);
  }
  function rgbConvert(o2) {
    if (!(o2 instanceof Color))
      o2 = color(o2);
    if (!o2)
      return new Rgb();
    o2 = o2.rgb();
    return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
  }
  function rgb(r, g3, b2, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g3, b2, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g3, b2, opacity) {
    this.r = +r;
    this.g = +g3;
    this.b = +b2;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter(k3) {
      k3 = k3 == null ? brighter : Math.pow(brighter, k3);
      return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
    },
    darker(k3) {
      k3 = k3 == null ? darker : Math.pow(darker, k3);
      return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a3 = clampa(this.opacity);
    return `${a3 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a3 === 1 ? ")" : `, ${a3})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value2) {
    return Math.max(0, Math.min(255, Math.round(value2) || 0));
  }
  function hex(value2) {
    value2 = clampi(value2);
    return (value2 < 16 ? "0" : "") + value2.toString(16);
  }
  function hsla(h2, s3, l2, a3) {
    if (a3 <= 0)
      h2 = s3 = l2 = NaN;
    else if (l2 <= 0 || l2 >= 1)
      h2 = s3 = NaN;
    else if (s3 <= 0)
      h2 = NaN;
    return new Hsl(h2, s3, l2, a3);
  }
  function hslConvert(o2) {
    if (o2 instanceof Hsl)
      return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
    if (!(o2 instanceof Color))
      o2 = color(o2);
    if (!o2)
      return new Hsl();
    if (o2 instanceof Hsl)
      return o2;
    o2 = o2.rgb();
    var r = o2.r / 255, g3 = o2.g / 255, b2 = o2.b / 255, min2 = Math.min(r, g3, b2), max2 = Math.max(r, g3, b2), h2 = NaN, s3 = max2 - min2, l2 = (max2 + min2) / 2;
    if (s3) {
      if (r === max2)
        h2 = (g3 - b2) / s3 + (g3 < b2) * 6;
      else if (g3 === max2)
        h2 = (b2 - r) / s3 + 2;
      else
        h2 = (r - g3) / s3 + 4;
      s3 /= l2 < 0.5 ? max2 + min2 : 2 - max2 - min2;
      h2 *= 60;
    } else {
      s3 = l2 > 0 && l2 < 1 ? 0 : h2;
    }
    return new Hsl(h2, s3, l2, o2.opacity);
  }
  function hsl(h2, s3, l2, opacity) {
    return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s3, l2, opacity == null ? 1 : opacity);
  }
  function Hsl(h2, s3, l2, opacity) {
    this.h = +h2;
    this.s = +s3;
    this.l = +l2;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter(k3) {
      k3 = k3 == null ? brighter : Math.pow(brighter, k3);
      return new Hsl(this.h, this.s, this.l * k3, this.opacity);
    },
    darker(k3) {
      k3 = k3 == null ? darker : Math.pow(darker, k3);
      return new Hsl(this.h, this.s, this.l * k3, this.opacity);
    },
    rgb() {
      var h2 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l2 = this.l, m22 = l2 + (l2 < 0.5 ? l2 : 1 - l2) * s3, m1 = 2 * l2 - m22;
      return new Rgb(hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22), hsl2rgb(h2, m1, m22), hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22), this.opacity);
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a3 = clampa(this.opacity);
      return `${a3 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a3 === 1 ? ")" : `, ${a3})`}`;
    }
  }));
  function clamph(value2) {
    value2 = (value2 || 0) % 360;
    return value2 < 0 ? value2 + 360 : value2;
  }
  function clampt(value2) {
    return Math.max(0, Math.min(1, value2 || 0));
  }
  function hsl2rgb(h2, m1, m22) {
    return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
  }

  // node_modules/d3-interpolate/src/basis.js
  function basis(t12, v0, v1, v2, v3) {
    var t2 = t12 * t12, t3 = t2 * t12;
    return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default2(values) {
    var n3 = values.length - 1;
    return function(t2) {
      var i3 = t2 <= 0 ? t2 = 0 : t2 >= 1 ? (t2 = 1, n3 - 1) : Math.floor(t2 * n3), v1 = values[i3], v2 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v2, v3 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v2 - v1;
      return basis((t2 - i3 / n3) * n3, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default2(values) {
    var n3 = values.length;
    return function(t2) {
      var i3 = Math.floor(((t2 %= 1) < 0 ? ++t2 : t2) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v2 = values[(i3 + 1) % n3], v3 = values[(i3 + 2) % n3];
      return basis((t2 - i3 / n3) * n3, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/constant.js
  var constant_default2 = (x3) => () => x3;

  // node_modules/d3-interpolate/src/color.js
  function linear(a3, d3) {
    return function(t2) {
      return a3 + t2 * d3;
    };
  }
  function exponential(a3, b2, y2) {
    return a3 = Math.pow(a3, y2), b2 = Math.pow(b2, y2) - a3, y2 = 1 / y2, function(t2) {
      return Math.pow(a3 + t2 * b2, y2);
    };
  }
  function gamma(y2) {
    return (y2 = +y2) === 1 ? nogamma : function(a3, b2) {
      return b2 - a3 ? exponential(a3, b2, y2) : constant_default2(isNaN(a3) ? b2 : a3);
    };
  }
  function nogamma(a3, b2) {
    var d3 = b2 - a3;
    return d3 ? linear(a3, d3) : constant_default2(isNaN(a3) ? b2 : a3);
  }

  // node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y2) {
    var color2 = gamma(y2);
    function rgb2(start, end) {
      var r = color2((start = rgb(start)).r, (end = rgb(end)).r), g3 = color2(start.g, end.g), b2 = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
      return function(t2) {
        start.r = r(t2);
        start.g = g3(t2);
        start.b = b2(t2);
        start.opacity = opacity(t2);
        return start + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors2) {
      var n3 = colors2.length, r = new Array(n3), g3 = new Array(n3), b2 = new Array(n3), i3, color2;
      for (i3 = 0; i3 < n3; ++i3) {
        color2 = rgb(colors2[i3]);
        r[i3] = color2.r || 0;
        g3[i3] = color2.g || 0;
        b2[i3] = color2.b || 0;
      }
      r = spline(r);
      g3 = spline(g3);
      b2 = spline(b2);
      color2.opacity = 1;
      return function(t2) {
        color2.r = r(t2);
        color2.g = g3(t2);
        color2.b = b2(t2);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default2);
  var rgbBasisClosed = rgbSpline(basisClosed_default2);

  // node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a3, b2) {
    if (!b2)
      b2 = [];
    var n3 = a3 ? Math.min(b2.length, a3.length) : 0, c3 = b2.slice(), i3;
    return function(t2) {
      for (i3 = 0; i3 < n3; ++i3)
        c3[i3] = a3[i3] * (1 - t2) + b2[i3] * t2;
      return c3;
    };
  }
  function isNumberArray(x3) {
    return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
  }

  // node_modules/d3-interpolate/src/array.js
  function genericArray(a3, b2) {
    var nb = b2 ? b2.length : 0, na = a3 ? Math.min(nb, a3.length) : 0, x3 = new Array(na), c3 = new Array(nb), i3;
    for (i3 = 0; i3 < na; ++i3)
      x3[i3] = value_default(a3[i3], b2[i3]);
    for (; i3 < nb; ++i3)
      c3[i3] = b2[i3];
    return function(t2) {
      for (i3 = 0; i3 < na; ++i3)
        c3[i3] = x3[i3](t2);
      return c3;
    };
  }

  // node_modules/d3-interpolate/src/date.js
  function date_default(a3, b2) {
    var d3 = new Date();
    return a3 = +a3, b2 = +b2, function(t2) {
      return d3.setTime(a3 * (1 - t2) + b2 * t2), d3;
    };
  }

  // node_modules/d3-interpolate/src/number.js
  function number_default(a3, b2) {
    return a3 = +a3, b2 = +b2, function(t2) {
      return a3 * (1 - t2) + b2 * t2;
    };
  }

  // node_modules/d3-interpolate/src/object.js
  function object_default(a3, b2) {
    var i3 = {}, c3 = {}, k3;
    if (a3 === null || typeof a3 !== "object")
      a3 = {};
    if (b2 === null || typeof b2 !== "object")
      b2 = {};
    for (k3 in b2) {
      if (k3 in a3) {
        i3[k3] = value_default(a3[k3], b2[k3]);
      } else {
        c3[k3] = b2[k3];
      }
    }
    return function(t2) {
      for (k3 in i3)
        c3[k3] = i3[k3](t2);
      return c3;
    };
  }

  // node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero2(b2) {
    return function() {
      return b2;
    };
  }
  function one(b2) {
    return function(t2) {
      return b2(t2) + "";
    };
  }
  function string_default(a3, b2) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i3 = -1, s3 = [], q2 = [];
    a3 = a3 + "", b2 = b2 + "";
    while ((am = reA.exec(a3)) && (bm = reB.exec(b2))) {
      if ((bs = bm.index) > bi) {
        bs = b2.slice(bi, bs);
        if (s3[i3])
          s3[i3] += bs;
        else
          s3[++i3] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s3[i3])
          s3[i3] += bm;
        else
          s3[++i3] = bm;
      } else {
        s3[++i3] = null;
        q2.push({ i: i3, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b2.length) {
      bs = b2.slice(bi);
      if (s3[i3])
        s3[i3] += bs;
      else
        s3[++i3] = bs;
    }
    return s3.length < 2 ? q2[0] ? one(q2[0].x) : zero2(b2) : (b2 = q2.length, function(t2) {
      for (var i4 = 0, o2; i4 < b2; ++i4)
        s3[(o2 = q2[i4]).i] = o2.x(t2);
      return s3.join("");
    });
  }

  // node_modules/d3-interpolate/src/value.js
  function value_default(a3, b2) {
    var t2 = typeof b2, c3;
    return b2 == null || t2 === "boolean" ? constant_default2(b2) : (t2 === "number" ? number_default : t2 === "string" ? (c3 = color(b2)) ? (b2 = c3, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a3, b2);
  }

  // node_modules/d3-interpolate/src/round.js
  function round_default(a3, b2) {
    return a3 = +a3, b2 = +b2, function(t2) {
      return Math.round(a3 * (1 - t2) + b2 * t2);
    };
  }

  // node_modules/d3-interpolate/src/piecewise.js
  function piecewise(interpolate, values) {
    if (values === void 0)
      values = interpolate, interpolate = value_default;
    var i3 = 0, n3 = values.length - 1, v2 = values[0], I = new Array(n3 < 0 ? 0 : n3);
    while (i3 < n3)
      I[i3] = interpolate(v2, v2 = values[++i3]);
    return function(t2) {
      var i4 = Math.max(0, Math.min(n3 - 1, Math.floor(t2 *= n3)));
      return I[i4](t2 - i4);
    };
  }

  // node_modules/d3-scale/src/constant.js
  function constants(x3) {
    return function() {
      return x3;
    };
  }

  // node_modules/d3-scale/src/number.js
  function number3(x3) {
    return +x3;
  }

  // node_modules/d3-scale/src/continuous.js
  var unit = [0, 1];
  function identity5(x3) {
    return x3;
  }
  function normalize2(a3, b2) {
    return (b2 -= a3 = +a3) ? function(x3) {
      return (x3 - a3) / b2;
    } : constants(isNaN(b2) ? NaN : 0.5);
  }
  function clamper(a3, b2) {
    var t2;
    if (a3 > b2)
      t2 = a3, a3 = b2, b2 = t2;
    return function(x3) {
      return Math.max(a3, Math.min(b2, x3));
    };
  }
  function bimap(domain, range4, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range4[0], r1 = range4[1];
    if (d1 < d0)
      d0 = normalize2(d1, d0), r0 = interpolate(r1, r0);
    else
      d0 = normalize2(d0, d1), r0 = interpolate(r0, r1);
    return function(x3) {
      return r0(d0(x3));
    };
  }
  function polymap(domain, range4, interpolate) {
    var j3 = Math.min(domain.length, range4.length) - 1, d3 = new Array(j3), r = new Array(j3), i3 = -1;
    if (domain[j3] < domain[0]) {
      domain = domain.slice().reverse();
      range4 = range4.slice().reverse();
    }
    while (++i3 < j3) {
      d3[i3] = normalize2(domain[i3], domain[i3 + 1]);
      r[i3] = interpolate(range4[i3], range4[i3 + 1]);
    }
    return function(x3) {
      var i4 = bisect_default(domain, x3, 1, j3) - 1;
      return r[i4](d3[i4](x3));
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit, range4 = unit, interpolate = value_default, transform, untransform, unknown, clamp2 = identity5, piecewise2, output, input;
    function rescale() {
      var n3 = Math.min(domain.length, range4.length);
      if (clamp2 !== identity5)
        clamp2 = clamper(domain[0], domain[n3 - 1]);
      piecewise2 = n3 > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }
    function scale(x3) {
      return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise2(domain.map(transform), range4, interpolate)))(transform(clamp2(x3)));
    }
    scale.invert = function(y2) {
      return clamp2(untransform((input || (input = piecewise2(range4, domain.map(transform), number_default)))(y2)));
    };
    scale.domain = function(_2) {
      return arguments.length ? (domain = Array.from(_2, number3), rescale()) : domain.slice();
    };
    scale.range = function(_2) {
      return arguments.length ? (range4 = Array.from(_2), rescale()) : range4.slice();
    };
    scale.rangeRound = function(_2) {
      return range4 = Array.from(_2), interpolate = round_default, rescale();
    };
    scale.clamp = function(_2) {
      return arguments.length ? (clamp2 = _2 ? true : identity5, rescale()) : clamp2 !== identity5;
    };
    scale.interpolate = function(_2) {
      return arguments.length ? (interpolate = _2, rescale()) : interpolate;
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    return function(t2, u3) {
      transform = t2, untransform = u3;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity5, identity5);
  }

  // node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x3) {
    return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
  }
  function formatDecimalParts(x3, p2) {
    if ((i3 = (x3 = p2 ? x3.toExponential(p2 - 1) : x3.toExponential()).indexOf("e")) < 0)
      return null;
    var i3, coefficient = x3.slice(0, i3);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x3.slice(i3 + 1)
    ];
  }

  // node_modules/d3-format/src/exponent.js
  function exponent_default(x3) {
    return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
  }

  // node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value2, width) {
      var i3 = value2.length, t2 = [], j3 = 0, g3 = grouping[0], length2 = 0;
      while (i3 > 0 && g3 > 0) {
        if (length2 + g3 + 1 > width)
          g3 = Math.max(1, width - length2);
        t2.push(value2.substring(i3 -= g3, i3 + g3));
        if ((length2 += g3 + 1) > width)
          break;
        g3 = grouping[j3 = (j3 + 1) % grouping.length];
      }
      return t2.reverse().join(thousands);
    };
  }

  // node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value2) {
      return value2.replace(/[0-9]/g, function(i3) {
        return numerals[+i3];
      });
    };
  }

  // node_modules/d3-format/src/formatSpecifier.js
  var re2 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match2 = re2.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match2;
    return new FormatSpecifier({
      fill: match2[1],
      align: match2[2],
      sign: match2[3],
      symbol: match2[4],
      zero: match2[5],
      width: match2[6],
      comma: match2[7],
      precision: match2[8] && match2[8].slice(1),
      trim: match2[9],
      type: match2[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s3) {
    out:
      for (var n3 = s3.length, i3 = 1, i0 = -1, i1; i3 < n3; ++i3) {
        switch (s3[i3]) {
          case ".":
            i0 = i1 = i3;
            break;
          case "0":
            if (i0 === 0)
              i0 = i3;
            i1 = i3;
            break;
          default:
            if (!+s3[i3])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
  }

  // node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x3, p2) {
    var d3 = formatDecimalParts(x3, p2);
    if (!d3)
      return x3 + "";
    var coefficient = d3[0], exponent = d3[1], i3 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
    return i3 === n3 ? coefficient : i3 > n3 ? coefficient + new Array(i3 - n3 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimalParts(x3, Math.max(0, p2 + i3 - 1))[0];
  }

  // node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x3, p2) {
    var d3 = formatDecimalParts(x3, p2);
    if (!d3)
      return x3 + "";
    var coefficient = d3[0], exponent = d3[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": (x3, p2) => (x3 * 100).toFixed(p2),
    "b": (x3) => Math.round(x3).toString(2),
    "c": (x3) => x3 + "",
    "d": formatDecimal_default,
    "e": (x3, p2) => x3.toExponential(p2),
    "f": (x3, p2) => x3.toFixed(p2),
    "g": (x3, p2) => x3.toPrecision(p2),
    "o": (x3) => Math.round(x3).toString(8),
    "p": (x3, p2) => formatRounded_default(x3 * 100, p2),
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
    "x": (x3) => Math.round(x3).toString(16)
  };

  // node_modules/d3-format/src/identity.js
  function identity_default(x3) {
    return x3;
  }

  // node_modules/d3-format/src/locale.js
  var map3 = Array.prototype.map;
  var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale4) {
    var group = locale4.grouping === void 0 || locale4.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale4.grouping, Number), locale4.thousands + ""), currencyPrefix = locale4.currency === void 0 ? "" : locale4.currency[0] + "", currencySuffix = locale4.currency === void 0 ? "" : locale4.currency[1] + "", decimal = locale4.decimal === void 0 ? "." : locale4.decimal + "", numerals = locale4.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale4.numerals, String)), percent = locale4.percent === void 0 ? "%" : locale4.percent + "", minus = locale4.minus === void 0 ? "\u2212" : locale4.minus + "", nan = locale4.nan === void 0 ? "NaN" : locale4.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill2 = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
      if (type === "n")
        comma = true, type = "g";
      else if (!formatTypes_default[type])
        precision === void 0 && (precision = 12), trim = true, type = "g";
      if (zero3 || fill2 === "0" && align === "=")
        zero3 = true, fill2 = "0", align = "=";
      var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
      var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format3(value2) {
        var valuePrefix = prefix2, valueSuffix = suffix, i3, n3, c3;
        if (type === "c") {
          valueSuffix = formatType(value2) + valueSuffix;
          value2 = "";
        } else {
          value2 = +value2;
          var valueNegative = value2 < 0 || 1 / value2 < 0;
          value2 = isNaN(value2) ? nan : formatType(Math.abs(value2), precision);
          if (trim)
            value2 = formatTrim_default(value2);
          if (valueNegative && +value2 === 0 && sign2 !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
          if (maybeSuffix) {
            i3 = -1, n3 = value2.length;
            while (++i3 < n3) {
              if (c3 = value2.charCodeAt(i3), 48 > c3 || c3 > 57) {
                valueSuffix = (c3 === 46 ? decimal + value2.slice(i3 + 1) : value2.slice(i3)) + valueSuffix;
                value2 = value2.slice(0, i3);
                break;
              }
            }
          }
        }
        if (comma && !zero3)
          value2 = group(value2, Infinity);
        var length2 = valuePrefix.length + value2.length + valueSuffix.length, padding = length2 < width ? new Array(width - length2 + 1).join(fill2) : "";
        if (comma && zero3)
          value2 = group(padding + value2, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value2 = valuePrefix + value2 + valueSuffix + padding;
            break;
          case "=":
            value2 = valuePrefix + padding + value2 + valueSuffix;
            break;
          case "^":
            value2 = padding.slice(0, length2 = padding.length >> 1) + valuePrefix + value2 + valueSuffix + padding.slice(length2);
            break;
          default:
            value2 = padding + valuePrefix + value2 + valueSuffix;
            break;
        }
        return numerals(value2);
      }
      format3.toString = function() {
        return specifier + "";
      };
      return format3;
    }
    function formatPrefix2(specifier, value2) {
      var f3 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value2) / 3))) * 3, k3 = Math.pow(10, -e3), prefix2 = prefixes[8 + e3 / 3];
      return function(value3) {
        return f3(k3 * value3) + prefix2;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // node_modules/d3-format/src/defaultLocale.js
  var locale2;
  var format2;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale2 = locale_default(definition);
    format2 = locale2.format;
    formatPrefix = locale2.formatPrefix;
    return locale2;
  }

  // node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step) {
    return Math.max(0, -exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step, value2) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value2) / 3))) * 3 - exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step, max2) {
    step = Math.abs(step), max2 = Math.abs(max2) - step;
    return Math.max(0, exponent_default(max2) - exponent_default(step)) + 1;
  }

  // node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start, stop, count, specifier) {
    var step = tickStep(start, stop, count), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value2 = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value2)))
          specifier.precision = precision;
        return formatPrefix(specifier, value2);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop)))))
          specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
          specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format2(specifier);
  }

  // node_modules/d3-scale/src/linear.js
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
      var d3 = domain();
      return ticks(d3[0], d3[d3.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
      var d3 = domain();
      return tickFormat(d3[0], d3[d3.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
      if (count == null)
        count = 10;
      var d3 = domain();
      var i0 = 0;
      var i1 = d3.length - 1;
      var start = d3[i0];
      var stop = d3[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop < start) {
        step = start, start = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start, stop, count);
        if (step === prestep) {
          d3[i0] = start;
          d3[i1] = stop;
          return domain(d3);
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear2() {
    var scale = continuous();
    scale.copy = function() {
      return copy(scale, linear2());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // node_modules/d3-scale/src/identity.js
  function identity6(domain) {
    var unknown;
    function scale(x3) {
      return x3 == null || isNaN(x3 = +x3) ? unknown : x3;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_2) {
      return arguments.length ? (domain = Array.from(_2, number3), scale) : domain.slice();
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    scale.copy = function() {
      return identity6(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, number3) : [0, 1];
    return linearish(scale);
  }

  // node_modules/d3-scale/src/nice.js
  function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t2;
    if (x1 < x0) {
      t2 = i0, i0 = i1, i1 = t2;
      t2 = x0, x0 = x1, x1 = t2;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }

  // node_modules/d3-scale/src/log.js
  function transformLog(x3) {
    return Math.log(x3);
  }
  function transformExp(x3) {
    return Math.exp(x3);
  }
  function transformLogn(x3) {
    return -Math.log(-x3);
  }
  function transformExpn(x3) {
    return -Math.exp(-x3);
  }
  function pow10(x3) {
    return isFinite(x3) ? +("1e" + x3) : x3 < 0 ? 0 : x3;
  }
  function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x3) => Math.pow(base, x3);
  }
  function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x3) => Math.log(x3) / base);
  }
  function reflect(f3) {
    return (x3, k3) => -f3(-x3, k3);
  }
  function loggish(transform) {
    const scale = transform(transformLog, transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
      logs = logp(base), pows = powp(base);
      if (domain()[0] < 0) {
        logs = reflect(logs), pows = reflect(pows);
        transform(transformLogn, transformExpn);
      } else {
        transform(transformLog, transformExp);
      }
      return scale;
    }
    scale.base = function(_2) {
      return arguments.length ? (base = +_2, rescale()) : base;
    };
    scale.domain = function(_2) {
      return arguments.length ? (domain(_2), rescale()) : domain();
    };
    scale.ticks = (count) => {
      const d3 = domain();
      let u3 = d3[0];
      let v2 = d3[d3.length - 1];
      const r = v2 < u3;
      if (r)
        [u3, v2] = [v2, u3];
      let i3 = logs(u3);
      let j3 = logs(v2);
      let k3;
      let t2;
      const n3 = count == null ? 10 : +count;
      let z = [];
      if (!(base % 1) && j3 - i3 < n3) {
        i3 = Math.floor(i3), j3 = Math.ceil(j3);
        if (u3 > 0)
          for (; i3 <= j3; ++i3) {
            for (k3 = 1; k3 < base; ++k3) {
              t2 = i3 < 0 ? k3 / pows(-i3) : k3 * pows(i3);
              if (t2 < u3)
                continue;
              if (t2 > v2)
                break;
              z.push(t2);
            }
          }
        else
          for (; i3 <= j3; ++i3) {
            for (k3 = base - 1; k3 >= 1; --k3) {
              t2 = i3 > 0 ? k3 / pows(-i3) : k3 * pows(i3);
              if (t2 < u3)
                continue;
              if (t2 > v2)
                break;
              z.push(t2);
            }
          }
        if (z.length * 2 < n3)
          z = ticks(u3, v2, n3);
      } else {
        z = ticks(i3, j3, Math.min(j3 - i3, n3)).map(pows);
      }
      return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier) => {
      if (count == null)
        count = 10;
      if (specifier == null)
        specifier = base === 10 ? "s" : ",";
      if (typeof specifier !== "function") {
        if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
          specifier.trim = true;
        specifier = format2(specifier);
      }
      if (count === Infinity)
        return specifier;
      const k3 = Math.max(1, base * count / scale.ticks().length);
      return (d3) => {
        let i3 = d3 / pows(Math.round(logs(d3)));
        if (i3 * base < base - 0.5)
          i3 *= base;
        return i3 <= k3 ? specifier(d3) : "";
      };
    };
    scale.nice = () => {
      return domain(nice(domain(), {
        floor: (x3) => pows(Math.floor(logs(x3))),
        ceil: (x3) => pows(Math.ceil(logs(x3)))
      }));
    };
    return scale;
  }
  function log() {
    const scale = loggish(transformer()).domain([1, 10]);
    scale.copy = () => copy(scale, log()).base(scale.base());
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/symlog.js
  function transformSymlog(c3) {
    return function(x3) {
      return Math.sign(x3) * Math.log1p(Math.abs(x3 / c3));
    };
  }
  function transformSymexp(c3) {
    return function(x3) {
      return Math.sign(x3) * Math.expm1(Math.abs(x3)) * c3;
    };
  }
  function symlogish(transform) {
    var c3 = 1, scale = transform(transformSymlog(c3), transformSymexp(c3));
    scale.constant = function(_2) {
      return arguments.length ? transform(transformSymlog(c3 = +_2), transformSymexp(c3)) : c3;
    };
    return linearish(scale);
  }
  function symlog() {
    var scale = symlogish(transformer());
    scale.copy = function() {
      return copy(scale, symlog()).constant(scale.constant());
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/pow.js
  function transformPow(exponent) {
    return function(x3) {
      return x3 < 0 ? -Math.pow(-x3, exponent) : Math.pow(x3, exponent);
    };
  }
  function transformSqrt(x3) {
    return x3 < 0 ? -Math.sqrt(-x3) : Math.sqrt(x3);
  }
  function transformSquare(x3) {
    return x3 < 0 ? -x3 * x3 : x3 * x3;
  }
  function powish(transform) {
    var scale = transform(identity5, identity5), exponent = 1;
    function rescale() {
      return exponent === 1 ? transform(identity5, identity5) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function(_2) {
      return arguments.length ? (exponent = +_2, rescale()) : exponent;
    };
    return linearish(scale);
  }
  function pow() {
    var scale = powish(transformer());
    scale.copy = function() {
      return copy(scale, pow()).exponent(scale.exponent());
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function sqrt2() {
    return pow.apply(null, arguments).exponent(0.5);
  }

  // node_modules/d3-scale/src/radial.js
  function square(x3) {
    return Math.sign(x3) * x3 * x3;
  }
  function unsquare(x3) {
    return Math.sign(x3) * Math.sqrt(Math.abs(x3));
  }
  function radial() {
    var squared = continuous(), range4 = [0, 1], round = false, unknown;
    function scale(x3) {
      var y2 = unsquare(squared(x3));
      return isNaN(y2) ? unknown : round ? Math.round(y2) : y2;
    }
    scale.invert = function(y2) {
      return squared.invert(square(y2));
    };
    scale.domain = function(_2) {
      return arguments.length ? (squared.domain(_2), scale) : squared.domain();
    };
    scale.range = function(_2) {
      return arguments.length ? (squared.range((range4 = Array.from(_2, number3)).map(square)), scale) : range4.slice();
    };
    scale.rangeRound = function(_2) {
      return scale.range(_2).round(true);
    };
    scale.round = function(_2) {
      return arguments.length ? (round = !!_2, scale) : round;
    };
    scale.clamp = function(_2) {
      return arguments.length ? (squared.clamp(_2), scale) : squared.clamp();
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    scale.copy = function() {
      return radial(squared.domain(), range4).round(round).clamp(squared.clamp()).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // node_modules/d3-scale/src/quantile.js
  function quantile2() {
    var domain = [], range4 = [], thresholds = [], unknown;
    function rescale() {
      var i3 = 0, n3 = Math.max(1, range4.length);
      thresholds = new Array(n3 - 1);
      while (++i3 < n3)
        thresholds[i3 - 1] = quantileSorted(domain, i3 / n3);
      return scale;
    }
    function scale(x3) {
      return x3 == null || isNaN(x3 = +x3) ? unknown : range4[bisect_default(thresholds, x3)];
    }
    scale.invertExtent = function(y2) {
      var i3 = range4.indexOf(y2);
      return i3 < 0 ? [NaN, NaN] : [
        i3 > 0 ? thresholds[i3 - 1] : domain[0],
        i3 < thresholds.length ? thresholds[i3] : domain[domain.length - 1]
      ];
    };
    scale.domain = function(_2) {
      if (!arguments.length)
        return domain.slice();
      domain = [];
      for (let d3 of _2)
        if (d3 != null && !isNaN(d3 = +d3))
          domain.push(d3);
      domain.sort(ascending);
      return rescale();
    };
    scale.range = function(_2) {
      return arguments.length ? (range4 = Array.from(_2), rescale()) : range4.slice();
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    scale.quantiles = function() {
      return thresholds.slice();
    };
    scale.copy = function() {
      return quantile2().domain(domain).range(range4).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/quantize.js
  function quantize() {
    var x0 = 0, x1 = 1, n3 = 1, domain = [0.5], range4 = [0, 1], unknown;
    function scale(x3) {
      return x3 != null && x3 <= x3 ? range4[bisect_default(domain, x3, 0, n3)] : unknown;
    }
    function rescale() {
      var i3 = -1;
      domain = new Array(n3);
      while (++i3 < n3)
        domain[i3] = ((i3 + 1) * x1 - (i3 - n3) * x0) / (n3 + 1);
      return scale;
    }
    scale.domain = function(_2) {
      return arguments.length ? ([x0, x1] = _2, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
    };
    scale.range = function(_2) {
      return arguments.length ? (n3 = (range4 = Array.from(_2)).length - 1, rescale()) : range4.slice();
    };
    scale.invertExtent = function(y2) {
      var i3 = range4.indexOf(y2);
      return i3 < 0 ? [NaN, NaN] : i3 < 1 ? [x0, domain[0]] : i3 >= n3 ? [domain[n3 - 1], x1] : [domain[i3 - 1], domain[i3]];
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : scale;
    };
    scale.thresholds = function() {
      return domain.slice();
    };
    scale.copy = function() {
      return quantize().domain([x0, x1]).range(range4).unknown(unknown);
    };
    return initRange.apply(linearish(scale), arguments);
  }

  // node_modules/d3-scale/src/threshold.js
  function threshold() {
    var domain = [0.5], range4 = [0, 1], unknown, n3 = 1;
    function scale(x3) {
      return x3 != null && x3 <= x3 ? range4[bisect_default(domain, x3, 0, n3)] : unknown;
    }
    scale.domain = function(_2) {
      return arguments.length ? (domain = Array.from(_2), n3 = Math.min(domain.length, range4.length - 1), scale) : domain.slice();
    };
    scale.range = function(_2) {
      return arguments.length ? (range4 = Array.from(_2), n3 = Math.min(domain.length, range4.length - 1), scale) : range4.slice();
    };
    scale.invertExtent = function(y2) {
      var i3 = range4.indexOf(y2);
      return [domain[i3 - 1], domain[i3]];
    };
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    scale.copy = function() {
      return threshold().domain(domain).range(range4).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-time/src/interval.js
  var t0 = new Date();
  var t1 = new Date();
  function newInterval(floori, offseti, count, field) {
    function interval(date2) {
      return floori(date2 = arguments.length === 0 ? new Date() : new Date(+date2)), date2;
    }
    interval.floor = function(date2) {
      return floori(date2 = new Date(+date2)), date2;
    };
    interval.ceil = function(date2) {
      return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
    };
    interval.round = function(date2) {
      var d0 = interval(date2), d1 = interval.ceil(date2);
      return date2 - d0 < d1 - date2 ? d0 : d1;
    };
    interval.offset = function(date2, step) {
      return offseti(date2 = new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
    };
    interval.range = function(start, stop, step) {
      var range4 = [], previous;
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0))
        return range4;
      do
        range4.push(previous = new Date(+start)), offseti(start, step), floori(start);
      while (previous < start && start < stop);
      return range4;
    };
    interval.filter = function(test) {
      return newInterval(function(date2) {
        if (date2 >= date2)
          while (floori(date2), !test(date2))
            date2.setTime(date2 - 1);
      }, function(date2, step) {
        if (date2 >= date2) {
          if (step < 0)
            while (++step <= 0) {
              while (offseti(date2, -1), !test(date2)) {
              }
            }
          else
            while (--step >= 0) {
              while (offseti(date2, 1), !test(date2)) {
              }
            }
        }
      });
    };
    if (count) {
      interval.count = function(start, end) {
        t0.setTime(+start), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count(t0, t1));
      };
      interval.every = function(step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
          return field(d3) % step === 0;
        } : function(d3) {
          return interval.count(0, d3) % step === 0;
        });
      };
    }
    return interval;
  }

  // node_modules/d3-time/src/millisecond.js
  var millisecond = newInterval(function() {
  }, function(date2, step) {
    date2.setTime(+date2 + step);
  }, function(start, end) {
    return end - start;
  });
  millisecond.every = function(k3) {
    k3 = Math.floor(k3);
    if (!isFinite(k3) || !(k3 > 0))
      return null;
    if (!(k3 > 1))
      return millisecond;
    return newInterval(function(date2) {
      date2.setTime(Math.floor(date2 / k3) * k3);
    }, function(date2, step) {
      date2.setTime(+date2 + step * k3);
    }, function(start, end) {
      return (end - start) / k3;
    });
  };
  var millisecond_default = millisecond;
  var milliseconds = millisecond.range;

  // node_modules/d3-time/src/duration.js
  var durationSecond = 1e3;
  var durationMinute = durationSecond * 60;
  var durationHour = durationMinute * 60;
  var durationDay = durationHour * 24;
  var durationWeek = durationDay * 7;
  var durationMonth = durationDay * 30;
  var durationYear = durationDay * 365;

  // node_modules/d3-time/src/second.js
  var second = newInterval(function(date2) {
    date2.setTime(date2 - date2.getMilliseconds());
  }, function(date2, step) {
    date2.setTime(+date2 + step * durationSecond);
  }, function(start, end) {
    return (end - start) / durationSecond;
  }, function(date2) {
    return date2.getUTCSeconds();
  });
  var second_default = second;
  var seconds = second.range;

  // node_modules/d3-time/src/minute.js
  var minute = newInterval(function(date2) {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
  }, function(date2, step) {
    date2.setTime(+date2 + step * durationMinute);
  }, function(start, end) {
    return (end - start) / durationMinute;
  }, function(date2) {
    return date2.getMinutes();
  });
  var minute_default = minute;
  var minutes = minute.range;

  // node_modules/d3-time/src/hour.js
  var hour = newInterval(function(date2) {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
  }, function(date2, step) {
    date2.setTime(+date2 + step * durationHour);
  }, function(start, end) {
    return (end - start) / durationHour;
  }, function(date2) {
    return date2.getHours();
  });
  var hour_default = hour;
  var hours = hour.range;

  // node_modules/d3-time/src/day.js
  var day = newInterval((date2) => date2.setHours(0, 0, 0, 0), (date2, step) => date2.setDate(date2.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, (date2) => date2.getDate() - 1);
  var day_default = day;
  var days = day.range;

  // node_modules/d3-time/src/week.js
  function weekday(i3) {
    return newInterval(function(date2) {
      date2.setDate(date2.getDate() - (date2.getDay() + 7 - i3) % 7);
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setDate(date2.getDate() + step * 7);
    }, function(start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  var sunday = weekday(0);
  var monday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);
  var sundays = sunday.range;
  var mondays = monday.range;
  var tuesdays = tuesday.range;
  var wednesdays = wednesday.range;
  var thursdays = thursday.range;
  var fridays = friday.range;
  var saturdays = saturday.range;

  // node_modules/d3-time/src/month.js
  var month = newInterval(function(date2) {
    date2.setDate(1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setMonth(date2.getMonth() + step);
  }, function(start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, function(date2) {
    return date2.getMonth();
  });
  var month_default = month;
  var months = month.range;

  // node_modules/d3-time/src/year.js
  var year = newInterval(function(date2) {
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step);
  }, function(start, end) {
    return end.getFullYear() - start.getFullYear();
  }, function(date2) {
    return date2.getFullYear();
  });
  year.every = function(k3) {
    return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date2) {
      date2.setFullYear(Math.floor(date2.getFullYear() / k3) * k3);
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setFullYear(date2.getFullYear() + step * k3);
    });
  };
  var year_default = year;
  var years = year.range;

  // node_modules/d3-time/src/utcMinute.js
  var utcMinute = newInterval(function(date2) {
    date2.setUTCSeconds(0, 0);
  }, function(date2, step) {
    date2.setTime(+date2 + step * durationMinute);
  }, function(start, end) {
    return (end - start) / durationMinute;
  }, function(date2) {
    return date2.getUTCMinutes();
  });
  var utcMinute_default = utcMinute;
  var utcMinutes = utcMinute.range;

  // node_modules/d3-time/src/utcHour.js
  var utcHour = newInterval(function(date2) {
    date2.setUTCMinutes(0, 0, 0);
  }, function(date2, step) {
    date2.setTime(+date2 + step * durationHour);
  }, function(start, end) {
    return (end - start) / durationHour;
  }, function(date2) {
    return date2.getUTCHours();
  });
  var utcHour_default = utcHour;
  var utcHours = utcHour.range;

  // node_modules/d3-time/src/utcDay.js
  var utcDay = newInterval(function(date2) {
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, function(start, end) {
    return (end - start) / durationDay;
  }, function(date2) {
    return date2.getUTCDate() - 1;
  });
  var utcDay_default = utcDay;
  var utcDays = utcDay.range;

  // node_modules/d3-time/src/utcWeek.js
  function utcWeekday(i3) {
    return newInterval(function(date2) {
      date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i3) % 7);
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCDate(date2.getUTCDate() + step * 7);
    }, function(start, end) {
      return (end - start) / durationWeek;
    });
  }
  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);
  var utcSundays = utcSunday.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;

  // node_modules/d3-time/src/utcMonth.js
  var utcMonth = newInterval(function(date2) {
    date2.setUTCDate(1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCMonth(date2.getUTCMonth() + step);
  }, function(start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, function(date2) {
    return date2.getUTCMonth();
  });
  var utcMonth_default = utcMonth;
  var utcMonths = utcMonth.range;

  // node_modules/d3-time/src/utcYear.js
  var utcYear = newInterval(function(date2) {
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step);
  }, function(start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, function(date2) {
    return date2.getUTCFullYear();
  });
  utcYear.every = function(k3) {
    return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date2) {
      date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k3) * k3);
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCFullYear(date2.getUTCFullYear() + step * k3);
    });
  };
  var utcYear_default = utcYear;
  var utcYears = utcYear.range;

  // node_modules/d3-time/src/ticks.js
  function ticker(year2, month2, week, day2, hour2, minute2) {
    const tickIntervals = [
      [second_default, 1, durationSecond],
      [second_default, 5, 5 * durationSecond],
      [second_default, 15, 15 * durationSecond],
      [second_default, 30, 30 * durationSecond],
      [minute2, 1, durationMinute],
      [minute2, 5, 5 * durationMinute],
      [minute2, 15, 15 * durationMinute],
      [minute2, 30, 30 * durationMinute],
      [hour2, 1, durationHour],
      [hour2, 3, 3 * durationHour],
      [hour2, 6, 6 * durationHour],
      [hour2, 12, 12 * durationHour],
      [day2, 1, durationDay],
      [day2, 2, 2 * durationDay],
      [week, 1, durationWeek],
      [month2, 1, durationMonth],
      [month2, 3, 3 * durationMonth],
      [year2, 1, durationYear]
    ];
    function ticks2(start, stop, count) {
      const reverse3 = stop < start;
      if (reverse3)
        [start, stop] = [stop, start];
      const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
      const ticks3 = interval ? interval.range(start, +stop + 1) : [];
      return reverse3 ? ticks3.reverse() : ticks3;
    }
    function tickInterval(start, stop, count) {
      const target = Math.abs(stop - start) / count;
      const i3 = bisector(([, , step2]) => step2).right(tickIntervals, target);
      if (i3 === tickIntervals.length)
        return year2.every(tickStep(start / durationYear, stop / durationYear, count));
      if (i3 === 0)
        return millisecond_default.every(Math.max(tickStep(start, stop, count), 1));
      const [t2, step] = tickIntervals[target / tickIntervals[i3 - 1][2] < tickIntervals[i3][2] / target ? i3 - 1 : i3];
      return t2.every(step);
    }
    return [ticks2, tickInterval];
  }
  var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
  var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

  // node_modules/d3-time-format/src/locale.js
  function localDate(d3) {
    if (0 <= d3.y && d3.y < 100) {
      var date2 = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
      date2.setFullYear(d3.y);
      return date2;
    }
    return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
  }
  function utcDate(d3) {
    if (0 <= d3.y && d3.y < 100) {
      var date2 = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
      date2.setUTCFullYear(d3.y);
      return date2;
    }
    return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
  }
  function newDate(y2, m3, d3) {
    return { y: y2, m: m3, d: d3, H: 0, M: 0, S: 0, L: 0 };
  }
  function formatLocale(locale4) {
    var locale_dateTime = locale4.dateTime, locale_date = locale4.date, locale_time = locale4.time, locale_periods = locale4.periods, locale_weekdays = locale4.days, locale_shortWeekdays = locale4.shortDays, locale_months = locale4.months, locale_shortMonths = locale4.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date2) {
        var string2 = [], i3 = -1, j3 = 0, n3 = specifier.length, c3, pad2, format3;
        if (!(date2 instanceof Date))
          date2 = new Date(+date2);
        while (++i3 < n3) {
          if (specifier.charCodeAt(i3) === 37) {
            string2.push(specifier.slice(j3, i3));
            if ((pad2 = pads[c3 = specifier.charAt(++i3)]) != null)
              c3 = specifier.charAt(++i3);
            else
              pad2 = c3 === "e" ? " " : "0";
            if (format3 = formats2[c3])
              c3 = format3(date2, pad2);
            string2.push(c3);
            j3 = i3 + 1;
          }
        }
        string2.push(specifier.slice(j3, i3));
        return string2.join("");
      };
    }
    function newParse(specifier, Z) {
      return function(string2) {
        var d3 = newDate(1900, void 0, 1), i3 = parseSpecifier(d3, specifier, string2 += "", 0), week, day2;
        if (i3 != string2.length)
          return null;
        if ("Q" in d3)
          return new Date(d3.Q);
        if ("s" in d3)
          return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
        if (Z && !("Z" in d3))
          d3.Z = 0;
        if ("p" in d3)
          d3.H = d3.H % 12 + d3.p * 12;
        if (d3.m === void 0)
          d3.m = "q" in d3 ? d3.q : 0;
        if ("V" in d3) {
          if (d3.V < 1 || d3.V > 53)
            return null;
          if (!("w" in d3))
            d3.w = 1;
          if ("Z" in d3) {
            week = utcDate(newDate(d3.y, 0, 1)), day2 = week.getUTCDay();
            week = day2 > 4 || day2 === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay_default.offset(week, (d3.V - 1) * 7);
            d3.y = week.getUTCFullYear();
            d3.m = week.getUTCMonth();
            d3.d = week.getUTCDate() + (d3.w + 6) % 7;
          } else {
            week = localDate(newDate(d3.y, 0, 1)), day2 = week.getDay();
            week = day2 > 4 || day2 === 0 ? monday.ceil(week) : monday(week);
            week = day_default.offset(week, (d3.V - 1) * 7);
            d3.y = week.getFullYear();
            d3.m = week.getMonth();
            d3.d = week.getDate() + (d3.w + 6) % 7;
          }
        } else if ("W" in d3 || "U" in d3) {
          if (!("w" in d3))
            d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
          day2 = "Z" in d3 ? utcDate(newDate(d3.y, 0, 1)).getUTCDay() : localDate(newDate(d3.y, 0, 1)).getDay();
          d3.m = 0;
          d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day2 + 5) % 7 : d3.w + d3.U * 7 - (day2 + 6) % 7;
        }
        if ("Z" in d3) {
          d3.H += d3.Z / 100 | 0;
          d3.M += d3.Z % 100;
          return utcDate(d3);
        }
        return localDate(d3);
      };
    }
    function parseSpecifier(d3, specifier, string2, j3) {
      var i3 = 0, n3 = specifier.length, m3 = string2.length, c3, parse2;
      while (i3 < n3) {
        if (j3 >= m3)
          return -1;
        c3 = specifier.charCodeAt(i3++);
        if (c3 === 37) {
          c3 = specifier.charAt(i3++);
          parse2 = parses[c3 in pads ? specifier.charAt(i3++) : c3];
          if (!parse2 || (j3 = parse2(d3, string2, j3)) < 0)
            return -1;
        } else if (c3 != string2.charCodeAt(j3++)) {
          return -1;
        }
      }
      return j3;
    }
    function parsePeriod(d3, string2, i3) {
      var n3 = periodRe.exec(string2.slice(i3));
      return n3 ? (d3.p = periodLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
    }
    function parseShortWeekday(d3, string2, i3) {
      var n3 = shortWeekdayRe.exec(string2.slice(i3));
      return n3 ? (d3.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
    }
    function parseWeekday(d3, string2, i3) {
      var n3 = weekdayRe.exec(string2.slice(i3));
      return n3 ? (d3.w = weekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
    }
    function parseShortMonth(d3, string2, i3) {
      var n3 = shortMonthRe.exec(string2.slice(i3));
      return n3 ? (d3.m = shortMonthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
    }
    function parseMonth(d3, string2, i3) {
      var n3 = monthRe.exec(string2.slice(i3));
      return n3 ? (d3.m = monthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
    }
    function parseLocaleDateTime(d3, string2, i3) {
      return parseSpecifier(d3, locale_dateTime, string2, i3);
    }
    function parseLocaleDate(d3, string2, i3) {
      return parseSpecifier(d3, locale_date, string2, i3);
    }
    function parseLocaleTime(d3, string2, i3) {
      return parseSpecifier(d3, locale_time, string2, i3);
    }
    function formatShortWeekday(d3) {
      return locale_shortWeekdays[d3.getDay()];
    }
    function formatWeekday(d3) {
      return locale_weekdays[d3.getDay()];
    }
    function formatShortMonth(d3) {
      return locale_shortMonths[d3.getMonth()];
    }
    function formatMonth(d3) {
      return locale_months[d3.getMonth()];
    }
    function formatPeriod(d3) {
      return locale_periods[+(d3.getHours() >= 12)];
    }
    function formatQuarter(d3) {
      return 1 + ~~(d3.getMonth() / 3);
    }
    function formatUTCShortWeekday(d3) {
      return locale_shortWeekdays[d3.getUTCDay()];
    }
    function formatUTCWeekday(d3) {
      return locale_weekdays[d3.getUTCDay()];
    }
    function formatUTCShortMonth(d3) {
      return locale_shortMonths[d3.getUTCMonth()];
    }
    function formatUTCMonth(d3) {
      return locale_months[d3.getUTCMonth()];
    }
    function formatUTCPeriod(d3) {
      return locale_periods[+(d3.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d3) {
      return 1 + ~~(d3.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f3 = newFormat(specifier += "", formats);
        f3.toString = function() {
          return specifier;
        };
        return f3;
      },
      parse: function(specifier) {
        var p2 = newParse(specifier += "", false);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      },
      utcFormat: function(specifier) {
        var f3 = newFormat(specifier += "", utcFormats);
        f3.toString = function() {
          return specifier;
        };
        return f3;
      },
      utcParse: function(specifier) {
        var p2 = newParse(specifier += "", true);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      }
    };
  }
  var pads = { "-": "", "_": " ", "0": "0" };
  var numberRe = /^\s*\d+/;
  var percentRe = /^%/;
  var requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value2, fill2, width) {
    var sign2 = value2 < 0 ? "-" : "", string2 = (sign2 ? -value2 : value2) + "", length2 = string2.length;
    return sign2 + (length2 < width ? new Array(width - length2 + 1).join(fill2) + string2 : string2);
  }
  function requote(s3) {
    return s3.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name, i3) => [name.toLowerCase(), i3]));
  }
  function parseWeekdayNumberSunday(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 1));
    return n3 ? (d3.w = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 1));
    return n3 ? (d3.u = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseWeekNumberSunday(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.U = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseWeekNumberISO(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.V = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseWeekNumberMonday(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.W = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseFullYear(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 4));
    return n3 ? (d3.y = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseYear(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i3 + n3[0].length) : -1;
  }
  function parseZone(d3, string2, i3) {
    var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i3, i3 + 6));
    return n3 ? (d3.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i3 + n3[0].length) : -1;
  }
  function parseQuarter(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 1));
    return n3 ? (d3.q = n3[0] * 3 - 3, i3 + n3[0].length) : -1;
  }
  function parseMonthNumber(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.m = n3[0] - 1, i3 + n3[0].length) : -1;
  }
  function parseDayOfMonth(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.d = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseDayOfYear(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 3));
    return n3 ? (d3.m = 0, d3.d = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseHour24(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.H = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseMinutes(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.M = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseSeconds(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 2));
    return n3 ? (d3.S = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseMilliseconds(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 3));
    return n3 ? (d3.L = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseMicroseconds(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3, i3 + 6));
    return n3 ? (d3.L = Math.floor(n3[0] / 1e3), i3 + n3[0].length) : -1;
  }
  function parseLiteralPercent(d3, string2, i3) {
    var n3 = percentRe.exec(string2.slice(i3, i3 + 1));
    return n3 ? i3 + n3[0].length : -1;
  }
  function parseUnixTimestamp(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3));
    return n3 ? (d3.Q = +n3[0], i3 + n3[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d3, string2, i3) {
    var n3 = numberRe.exec(string2.slice(i3));
    return n3 ? (d3.s = +n3[0], i3 + n3[0].length) : -1;
  }
  function formatDayOfMonth(d3, p2) {
    return pad(d3.getDate(), p2, 2);
  }
  function formatHour24(d3, p2) {
    return pad(d3.getHours(), p2, 2);
  }
  function formatHour12(d3, p2) {
    return pad(d3.getHours() % 12 || 12, p2, 2);
  }
  function formatDayOfYear(d3, p2) {
    return pad(1 + day_default.count(year_default(d3), d3), p2, 3);
  }
  function formatMilliseconds(d3, p2) {
    return pad(d3.getMilliseconds(), p2, 3);
  }
  function formatMicroseconds(d3, p2) {
    return formatMilliseconds(d3, p2) + "000";
  }
  function formatMonthNumber(d3, p2) {
    return pad(d3.getMonth() + 1, p2, 2);
  }
  function formatMinutes(d3, p2) {
    return pad(d3.getMinutes(), p2, 2);
  }
  function formatSeconds(d3, p2) {
    return pad(d3.getSeconds(), p2, 2);
  }
  function formatWeekdayNumberMonday(d3) {
    var day2 = d3.getDay();
    return day2 === 0 ? 7 : day2;
  }
  function formatWeekNumberSunday(d3, p2) {
    return pad(sunday.count(year_default(d3) - 1, d3), p2, 2);
  }
  function dISO(d3) {
    var day2 = d3.getDay();
    return day2 >= 4 || day2 === 0 ? thursday(d3) : thursday.ceil(d3);
  }
  function formatWeekNumberISO(d3, p2) {
    d3 = dISO(d3);
    return pad(thursday.count(year_default(d3), d3) + (year_default(d3).getDay() === 4), p2, 2);
  }
  function formatWeekdayNumberSunday(d3) {
    return d3.getDay();
  }
  function formatWeekNumberMonday(d3, p2) {
    return pad(monday.count(year_default(d3) - 1, d3), p2, 2);
  }
  function formatYear(d3, p2) {
    return pad(d3.getFullYear() % 100, p2, 2);
  }
  function formatYearISO(d3, p2) {
    d3 = dISO(d3);
    return pad(d3.getFullYear() % 100, p2, 2);
  }
  function formatFullYear(d3, p2) {
    return pad(d3.getFullYear() % 1e4, p2, 4);
  }
  function formatFullYearISO(d3, p2) {
    var day2 = d3.getDay();
    d3 = day2 >= 4 || day2 === 0 ? thursday(d3) : thursday.ceil(d3);
    return pad(d3.getFullYear() % 1e4, p2, 4);
  }
  function formatZone(d3) {
    var z = d3.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d3, p2) {
    return pad(d3.getUTCDate(), p2, 2);
  }
  function formatUTCHour24(d3, p2) {
    return pad(d3.getUTCHours(), p2, 2);
  }
  function formatUTCHour12(d3, p2) {
    return pad(d3.getUTCHours() % 12 || 12, p2, 2);
  }
  function formatUTCDayOfYear(d3, p2) {
    return pad(1 + utcDay_default.count(utcYear_default(d3), d3), p2, 3);
  }
  function formatUTCMilliseconds(d3, p2) {
    return pad(d3.getUTCMilliseconds(), p2, 3);
  }
  function formatUTCMicroseconds(d3, p2) {
    return formatUTCMilliseconds(d3, p2) + "000";
  }
  function formatUTCMonthNumber(d3, p2) {
    return pad(d3.getUTCMonth() + 1, p2, 2);
  }
  function formatUTCMinutes(d3, p2) {
    return pad(d3.getUTCMinutes(), p2, 2);
  }
  function formatUTCSeconds(d3, p2) {
    return pad(d3.getUTCSeconds(), p2, 2);
  }
  function formatUTCWeekdayNumberMonday(d3) {
    var dow = d3.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d3, p2) {
    return pad(utcSunday.count(utcYear_default(d3) - 1, d3), p2, 2);
  }
  function UTCdISO(d3) {
    var day2 = d3.getUTCDay();
    return day2 >= 4 || day2 === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
  }
  function formatUTCWeekNumberISO(d3, p2) {
    d3 = UTCdISO(d3);
    return pad(utcThursday.count(utcYear_default(d3), d3) + (utcYear_default(d3).getUTCDay() === 4), p2, 2);
  }
  function formatUTCWeekdayNumberSunday(d3) {
    return d3.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d3, p2) {
    return pad(utcMonday.count(utcYear_default(d3) - 1, d3), p2, 2);
  }
  function formatUTCYear(d3, p2) {
    return pad(d3.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCYearISO(d3, p2) {
    d3 = UTCdISO(d3);
    return pad(d3.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCFullYear(d3, p2) {
    return pad(d3.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCFullYearISO(d3, p2) {
    var day2 = d3.getUTCDay();
    d3 = day2 >= 4 || day2 === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
    return pad(d3.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d3) {
    return +d3;
  }
  function formatUnixTimestampSeconds(d3) {
    return Math.floor(+d3 / 1e3);
  }

  // node_modules/d3-time-format/src/defaultLocale.js
  var locale3;
  var timeFormat;
  var timeParse;
  var utcFormat;
  var utcParse;
  defaultLocale2({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale2(definition) {
    locale3 = formatLocale(definition);
    timeFormat = locale3.format;
    timeParse = locale3.parse;
    utcFormat = locale3.utcFormat;
    utcParse = locale3.utcParse;
    return locale3;
  }

  // node_modules/d3-scale/src/time.js
  function date(t2) {
    return new Date(t2);
  }
  function number4(t2) {
    return t2 instanceof Date ? +t2 : +new Date(+t2);
  }
  function calendar(ticks2, tickInterval, year2, month2, week, day2, hour2, minute2, second2, format3) {
    var scale = continuous(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear2 = format3("%Y");
    function tickFormat2(date2) {
      return (second2(date2) < date2 ? formatMillisecond : minute2(date2) < date2 ? formatSecond : hour2(date2) < date2 ? formatMinute : day2(date2) < date2 ? formatHour : month2(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year2(date2) < date2 ? formatMonth : formatYear2)(date2);
    }
    scale.invert = function(y2) {
      return new Date(invert(y2));
    };
    scale.domain = function(_2) {
      return arguments.length ? domain(Array.from(_2, number4)) : domain().map(date);
    };
    scale.ticks = function(interval) {
      var d3 = domain();
      return ticks2(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
      return specifier == null ? tickFormat2 : format3(specifier);
    };
    scale.nice = function(interval) {
      var d3 = domain();
      if (!interval || typeof interval.range !== "function")
        interval = tickInterval(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
      return interval ? domain(nice(d3, interval)) : scale;
    };
    scale.copy = function() {
      return copy(scale, calendar(ticks2, tickInterval, year2, month2, week, day2, hour2, minute2, second2, format3));
    };
    return scale;
  }
  function time() {
    return initRange.apply(calendar(timeTicks, timeTickInterval, year_default, month_default, sunday, day_default, hour_default, minute_default, second_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
  }

  // node_modules/d3-scale/src/utcTime.js
  function utcTime() {
    return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default, second_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
  }

  // node_modules/d3-scale/src/sequential.js
  function transformer2() {
    var x0 = 0, x1 = 1, t02, t12, k10, transform, interpolator = identity5, clamp2 = false, unknown;
    function scale(x3) {
      return x3 == null || isNaN(x3 = +x3) ? unknown : interpolator(k10 === 0 ? 0.5 : (x3 = (transform(x3) - t02) * k10, clamp2 ? Math.max(0, Math.min(1, x3)) : x3));
    }
    scale.domain = function(_2) {
      return arguments.length ? ([x0, x1] = _2, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [x0, x1];
    };
    scale.clamp = function(_2) {
      return arguments.length ? (clamp2 = !!_2, scale) : clamp2;
    };
    scale.interpolator = function(_2) {
      return arguments.length ? (interpolator = _2, scale) : interpolator;
    };
    function range4(interpolate) {
      return function(_2) {
        var r0, r1;
        return arguments.length ? ([r0, r1] = _2, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
      };
    }
    scale.range = range4(value_default);
    scale.rangeRound = range4(round_default);
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    return function(t2) {
      transform = t2, t02 = t2(x0), t12 = t2(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
      return scale;
    };
  }
  function copy2(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
  }
  function sequential() {
    var scale = linearish(transformer2()(identity5));
    scale.copy = function() {
      return copy2(scale, sequential());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialLog() {
    var scale = loggish(transformer2()).domain([1, 10]);
    scale.copy = function() {
      return copy2(scale, sequentialLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSymlog() {
    var scale = symlogish(transformer2());
    scale.copy = function() {
      return copy2(scale, sequentialSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialPow() {
    var scale = powish(transformer2());
    scale.copy = function() {
      return copy2(scale, sequentialPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }

  // node_modules/d3-scale/src/sequentialQuantile.js
  function sequentialQuantile() {
    var domain = [], interpolator = identity5;
    function scale(x3) {
      if (x3 != null && !isNaN(x3 = +x3))
        return interpolator((bisect_default(domain, x3, 1) - 1) / (domain.length - 1));
    }
    scale.domain = function(_2) {
      if (!arguments.length)
        return domain.slice();
      domain = [];
      for (let d3 of _2)
        if (d3 != null && !isNaN(d3 = +d3))
          domain.push(d3);
      domain.sort(ascending);
      return scale;
    };
    scale.interpolator = function(_2) {
      return arguments.length ? (interpolator = _2, scale) : interpolator;
    };
    scale.range = function() {
      return domain.map((d3, i3) => interpolator(i3 / (domain.length - 1)));
    };
    scale.quantiles = function(n3) {
      return Array.from({ length: n3 + 1 }, (_2, i3) => quantile(domain, i3 / n3));
    };
    scale.copy = function() {
      return sequentialQuantile(interpolator).domain(domain);
    };
    return initInterpolator.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/diverging.js
  function transformer3() {
    var x0 = 0, x1 = 0.5, x22 = 1, s3 = 1, t02, t12, t2, k10, k21, interpolator = identity5, transform, clamp2 = false, unknown;
    function scale(x3) {
      return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform(x3)) - t12) * (s3 * x3 < s3 * t12 ? k10 : k21), interpolator(clamp2 ? Math.max(0, Math.min(1, x3)) : x3));
    }
    scale.domain = function(_2) {
      return arguments.length ? ([x0, x1, x22] = _2, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), t2 = transform(x22 = +x22), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s3 = t12 < t02 ? -1 : 1, scale) : [x0, x1, x22];
    };
    scale.clamp = function(_2) {
      return arguments.length ? (clamp2 = !!_2, scale) : clamp2;
    };
    scale.interpolator = function(_2) {
      return arguments.length ? (interpolator = _2, scale) : interpolator;
    };
    function range4(interpolate) {
      return function(_2) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _2, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }
    scale.range = range4(value_default);
    scale.rangeRound = range4(round_default);
    scale.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale) : unknown;
    };
    return function(t3) {
      transform = t3, t02 = t3(x0), t12 = t3(x1), t2 = t3(x22), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s3 = t12 < t02 ? -1 : 1;
      return scale;
    };
  }
  function diverging() {
    var scale = linearish(transformer3()(identity5));
    scale.copy = function() {
      return copy2(scale, diverging());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = loggish(transformer3()).domain([0.1, 1, 10]);
    scale.copy = function() {
      return copy2(scale, divergingLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = symlogish(transformer3());
    scale.copy = function() {
      return copy2(scale, divergingSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = powish(transformer3());
    scale.copy = function() {
      return copy2(scale, divergingPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }

  // node_modules/recharts/es6/util/ChartUtils.js
  function _toConsumableArray8(arr) {
    return _arrayWithoutHoles8(arr) || _iterableToArray9(arr) || _unsupportedIterableToArray12(arr) || _nonIterableSpread8();
  }
  function _nonIterableSpread8() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray12(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray12(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray12(o2, minLen);
  }
  function _iterableToArray9(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles8(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray12(arr);
  }
  function _arrayLikeToArray12(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function ownKeys11(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread11(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys11(Object(source), true).forEach(function(key) {
          _defineProperty11(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys11(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty11(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function getValueByDataKey(obj, dataKey, defaultValue) {
    if ((0, import_isNil5.default)(obj) || (0, import_isNil5.default)(dataKey)) {
      return defaultValue;
    }
    if (isNumOrStr(dataKey)) {
      return (0, import_get3.default)(obj, dataKey, defaultValue);
    }
    if ((0, import_isFunction3.default)(dataKey)) {
      return dataKey(obj);
    }
    return defaultValue;
  }
  function getDomainOfDataByKey(data, key, type, filterNil) {
    var flattenData = (0, import_flatMap.default)(data, function(entry) {
      return getValueByDataKey(entry, key);
    });
    if (type === "number") {
      var domain = flattenData.filter(function(entry) {
        return isNumber(entry) || parseFloat(entry);
      });
      return domain.length ? [(0, import_min2.default)(domain), (0, import_max2.default)(domain)] : [Infinity, -Infinity];
    }
    var validateData = filterNil ? flattenData.filter(function(entry) {
      return !(0, import_isNil5.default)(entry);
    }) : flattenData;
    return validateData.map(function(entry) {
      return isNumOrStr(entry) || entry instanceof Date ? entry : "";
    });
  }
  var calculateActiveTickIndex = function calculateActiveTickIndex2(coordinate) {
    var _ticks$length;
    var ticks2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var unsortedTicks = arguments.length > 2 ? arguments[2] : void 0;
    var axis = arguments.length > 3 ? arguments[3] : void 0;
    var index2 = -1;
    var len = (_ticks$length = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2.length) !== null && _ticks$length !== void 0 ? _ticks$length : 0;
    if (len > 1) {
      if (axis && axis.axisType === "angleAxis" && Math.abs(Math.abs(axis.range[1] - axis.range[0]) - 360) <= 1e-6) {
        var range4 = axis.range;
        for (var i3 = 0; i3 < len; i3++) {
          var before = i3 > 0 ? unsortedTicks[i3 - 1].coordinate : unsortedTicks[len - 1].coordinate;
          var cur = unsortedTicks[i3].coordinate;
          var after = i3 >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i3 + 1].coordinate;
          var sameDirectionCoord = void 0;
          if (mathSign(cur - before) !== mathSign(after - cur)) {
            var diffInterval = [];
            if (mathSign(after - cur) === mathSign(range4[1] - range4[0])) {
              sameDirectionCoord = after;
              var curInRange = cur + range4[1] - range4[0];
              diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
              diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
            } else {
              sameDirectionCoord = before;
              var afterInRange = after + range4[1] - range4[0];
              diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
              diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
            }
            var sameInterval = [Math.min(cur, (sameDirectionCoord + cur) / 2), Math.max(cur, (sameDirectionCoord + cur) / 2)];
            if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
              index2 = unsortedTicks[i3].index;
              break;
            }
          } else {
            var min2 = Math.min(before, after);
            var max2 = Math.max(before, after);
            if (coordinate > (min2 + cur) / 2 && coordinate <= (max2 + cur) / 2) {
              index2 = unsortedTicks[i3].index;
              break;
            }
          }
        }
      } else {
        for (var _i = 0; _i < len; _i++) {
          if (_i === 0 && coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2 || _i > 0 && _i < len - 1 && coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2 && coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2 || _i === len - 1 && coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2) {
            index2 = ticks2[_i].index;
            break;
          }
        }
      }
    } else {
      index2 = 0;
    }
    return index2;
  };
  var getMainColorOfGraphicItem = function getMainColorOfGraphicItem2(item) {
    var _ref3 = item, displayName = _ref3.type.displayName;
    var _item$props = item.props, stroke = _item$props.stroke, fill2 = _item$props.fill;
    var result;
    switch (displayName) {
      case "Line":
        result = stroke;
        break;
      case "Area":
      case "Radar":
        result = stroke && stroke !== "none" ? stroke : fill2;
        break;
      default:
        result = fill2;
        break;
    }
    return result;
  };
  var getLegendProps = function getLegendProps2(_ref23) {
    var children = _ref23.children, formattedGraphicalItems = _ref23.formattedGraphicalItems, legendWidth = _ref23.legendWidth, legendContent = _ref23.legendContent;
    var legendItem = findChildByType(children, Legend.displayName);
    if (!legendItem) {
      return null;
    }
    var legendData;
    if (legendItem.props && legendItem.props.payload) {
      legendData = legendItem.props && legendItem.props.payload;
    } else if (legendContent === "children") {
      legendData = (formattedGraphicalItems || []).reduce(function(result, _ref3) {
        var item = _ref3.item, props = _ref3.props;
        var data = props.sectors || props.data || [];
        return result.concat(data.map(function(entry) {
          return {
            type: legendItem.props.iconType || item.props.legendType,
            value: entry.name,
            color: entry.fill,
            payload: entry
          };
        }));
      }, []);
    } else {
      legendData = (formattedGraphicalItems || []).map(function(_ref4) {
        var item = _ref4.item;
        var _item$props2 = item.props, dataKey = _item$props2.dataKey, name = _item$props2.name, legendType = _item$props2.legendType, hide = _item$props2.hide;
        return {
          inactive: hide,
          dataKey,
          type: legendItem.props.iconType || legendType || "square",
          color: getMainColorOfGraphicItem(item),
          value: name || dataKey,
          payload: item.props
        };
      });
    }
    return _objectSpread11(_objectSpread11(_objectSpread11({}, legendItem.props), Legend.getWithHeight(legendItem, legendWidth)), {}, {
      payload: legendData,
      item: legendItem
    });
  };
  var getBarSizeList = function getBarSizeList2(_ref5) {
    var globalSize = _ref5.barSize, _ref5$stackGroups = _ref5.stackGroups, stackGroups = _ref5$stackGroups === void 0 ? {} : _ref5$stackGroups;
    if (!stackGroups) {
      return {};
    }
    var result = {};
    var numericAxisIds = Object.keys(stackGroups);
    for (var i3 = 0, len = numericAxisIds.length; i3 < len; i3++) {
      var sgs = stackGroups[numericAxisIds[i3]].stackGroups;
      var stackIds = Object.keys(sgs);
      for (var j3 = 0, sLen = stackIds.length; j3 < sLen; j3++) {
        var _sgs$stackIds$j = sgs[stackIds[j3]], items = _sgs$stackIds$j.items, cateAxisId = _sgs$stackIds$j.cateAxisId;
        var barItems = items.filter(function(item) {
          return getDisplayName(item.type).indexOf("Bar") >= 0;
        });
        if (barItems && barItems.length) {
          var selfSize = barItems[0].props.barSize;
          var cateId = barItems[0].props[cateAxisId];
          if (!result[cateId]) {
            result[cateId] = [];
          }
          result[cateId].push({
            item: barItems[0],
            stackList: barItems.slice(1),
            barSize: (0, import_isNil5.default)(selfSize) ? globalSize : selfSize
          });
        }
      }
    }
    return result;
  };
  var getBarPosition = function getBarPosition2(_ref6) {
    var barGap = _ref6.barGap, barCategoryGap = _ref6.barCategoryGap, bandSize = _ref6.bandSize, _ref6$sizeList = _ref6.sizeList, sizeList = _ref6$sizeList === void 0 ? [] : _ref6$sizeList, maxBarSize = _ref6.maxBarSize;
    var len = sizeList.length;
    if (len < 1)
      return null;
    var realBarGap = getPercentValue(barGap, bandSize, 0, true);
    var result;
    if (sizeList[0].barSize === +sizeList[0].barSize) {
      var useFull = false;
      var fullBarSize = bandSize / len;
      var sum = sizeList.reduce(function(res, entry) {
        return res + entry.barSize || 0;
      }, 0);
      sum += (len - 1) * realBarGap;
      if (sum >= bandSize) {
        sum -= (len - 1) * realBarGap;
        realBarGap = 0;
      }
      if (sum >= bandSize && fullBarSize > 0) {
        useFull = true;
        fullBarSize *= 0.9;
        sum = len * fullBarSize;
      }
      var offset = (bandSize - sum) / 2 >> 0;
      var prev2 = {
        offset: offset - realBarGap,
        size: 0
      };
      result = sizeList.reduce(function(res, entry) {
        var newRes = [].concat(_toConsumableArray8(res), [{
          item: entry.item,
          position: {
            offset: prev2.offset + prev2.size + realBarGap,
            size: useFull ? fullBarSize : entry.barSize
          }
        }]);
        prev2 = newRes[newRes.length - 1].position;
        if (entry.stackList && entry.stackList.length) {
          entry.stackList.forEach(function(item) {
            newRes.push({
              item,
              position: prev2
            });
          });
        }
        return newRes;
      }, []);
    } else {
      var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);
      if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
        realBarGap = 0;
      }
      var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;
      if (originalSize > 1) {
        originalSize >>= 0;
      }
      var size = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize;
      result = sizeList.reduce(function(res, entry, i3) {
        var newRes = [].concat(_toConsumableArray8(res), [{
          item: entry.item,
          position: {
            offset: _offset + (originalSize + realBarGap) * i3 + (originalSize - size) / 2,
            size
          }
        }]);
        if (entry.stackList && entry.stackList.length) {
          entry.stackList.forEach(function(item) {
            newRes.push({
              item,
              position: newRes[newRes.length - 1].position
            });
          });
        }
        return newRes;
      }, []);
    }
    return result;
  };
  var appendOffsetOfLegend = function appendOffsetOfLegend2(offset, items, props, legendBox) {
    var children = props.children, width = props.width, margin = props.margin;
    var legendWidth = width - (margin.left || 0) - (margin.right || 0);
    var legendProps = getLegendProps({
      children,
      legendWidth
    });
    var newOffset = offset;
    if (legendProps) {
      var box = legendBox || {};
      var align = legendProps.align, verticalAlign = legendProps.verticalAlign, layout = legendProps.layout;
      if ((layout === "vertical" || layout === "horizontal" && verticalAlign === "center") && isNumber(offset[align])) {
        newOffset = _objectSpread11(_objectSpread11({}, offset), {}, _defineProperty11({}, align, newOffset[align] + (box.width || 0)));
      }
      if ((layout === "horizontal" || layout === "vertical" && align === "center") && isNumber(offset[verticalAlign])) {
        newOffset = _objectSpread11(_objectSpread11({}, offset), {}, _defineProperty11({}, verticalAlign, newOffset[verticalAlign] + (box.height || 0)));
      }
    }
    return newOffset;
  };
  var isErrorBarRelevantForAxis = function isErrorBarRelevantForAxis2(layout, axisType, direction) {
    if ((0, import_isNil5.default)(axisType)) {
      return true;
    }
    if (layout === "horizontal") {
      return axisType === "yAxis";
    }
    if (layout === "vertical") {
      return axisType === "xAxis";
    }
    if (direction === "x") {
      return axisType === "xAxis";
    }
    if (direction === "y") {
      return axisType === "yAxis";
    }
    return true;
  };
  var getDomainOfErrorBars = function getDomainOfErrorBars2(data, item, dataKey, layout, axisType) {
    var children = item.props.children;
    var errorBars = findAllByType(children, "ErrorBar").filter(function(errorBarChild) {
      return isErrorBarRelevantForAxis(layout, axisType, errorBarChild.props.direction);
    });
    if (errorBars && errorBars.length) {
      var keys = errorBars.map(function(errorBarChild) {
        return errorBarChild.props.dataKey;
      });
      return data.reduce(function(result, entry) {
        var entryValue = getValueByDataKey(entry, dataKey, 0);
        var mainValue = (0, import_isArray4.default)(entryValue) ? [(0, import_min2.default)(entryValue), (0, import_max2.default)(entryValue)] : [entryValue, entryValue];
        var errorDomain = keys.reduce(function(prevErrorArr, k3) {
          var errorValue = getValueByDataKey(entry, k3, 0);
          var lowerValue = mainValue[0] - Math.abs((0, import_isArray4.default)(errorValue) ? errorValue[0] : errorValue);
          var upperValue = mainValue[1] + Math.abs((0, import_isArray4.default)(errorValue) ? errorValue[1] : errorValue);
          return [Math.min(lowerValue, prevErrorArr[0]), Math.max(upperValue, prevErrorArr[1])];
        }, [Infinity, -Infinity]);
        return [Math.min(errorDomain[0], result[0]), Math.max(errorDomain[1], result[1])];
      }, [Infinity, -Infinity]);
    }
    return null;
  };
  var parseErrorBarsOfAxis = function parseErrorBarsOfAxis2(data, items, dataKey, axisType, layout) {
    var domains = items.map(function(item) {
      return getDomainOfErrorBars(data, item, dataKey, layout, axisType);
    }).filter(function(entry) {
      return !(0, import_isNil5.default)(entry);
    });
    if (domains && domains.length) {
      return domains.reduce(function(result, entry) {
        return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
      }, [Infinity, -Infinity]);
    }
    return null;
  };
  var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis2(data, items, type, layout, filterNil) {
    var domains = items.map(function(item) {
      var dataKey = item.props.dataKey;
      if (type === "number" && dataKey) {
        return getDomainOfErrorBars(data, item, dataKey, layout) || getDomainOfDataByKey(data, dataKey, type, filterNil);
      }
      return getDomainOfDataByKey(data, dataKey, type, filterNil);
    });
    if (type === "number") {
      return domains.reduce(function(result, entry) {
        return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
      }, [Infinity, -Infinity]);
    }
    var tag = {};
    return domains.reduce(function(result, entry) {
      for (var i3 = 0, len = entry.length; i3 < len; i3++) {
        if (!tag[entry[i3]]) {
          tag[entry[i3]] = true;
          result.push(entry[i3]);
        }
      }
      return result;
    }, []);
  };
  var isCategoricalAxis = function isCategoricalAxis2(layout, axisType) {
    return layout === "horizontal" && axisType === "xAxis" || layout === "vertical" && axisType === "yAxis" || layout === "centric" && axisType === "angleAxis" || layout === "radial" && axisType === "radiusAxis";
  };
  var getCoordinatesOfGrid = function getCoordinatesOfGrid2(ticks2, min2, max2) {
    var hasMin, hasMax;
    var values = ticks2.map(function(entry) {
      if (entry.coordinate === min2) {
        hasMin = true;
      }
      if (entry.coordinate === max2) {
        hasMax = true;
      }
      return entry.coordinate;
    });
    if (!hasMin) {
      values.push(min2);
    }
    if (!hasMax) {
      values.push(max2);
    }
    return values;
  };
  var getTicksOfAxis = function getTicksOfAxis2(axis, isGrid, isAll) {
    if (!axis)
      return null;
    var scale = axis.scale;
    var duplicateDomain = axis.duplicateDomain, type = axis.type, range4 = axis.range;
    var offsetForBand = axis.realScaleType === "scaleBand" ? scale.bandwidth() / 2 : 2;
    var offset = (isGrid || isAll) && type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
    offset = axis.axisType === "angleAxis" ? mathSign(range4[0] - range4[1]) * 2 * offset : offset;
    if (isGrid && (axis.ticks || axis.niceTicks)) {
      return (axis.ticks || axis.niceTicks).map(function(entry) {
        var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
        return {
          coordinate: scale(scaleContent) + offset,
          value: entry,
          offset
        };
      });
    }
    if (axis.isCategorical && axis.categoricalDomain) {
      return axis.categoricalDomain.map(function(entry, index2) {
        return {
          coordinate: scale(entry) + offset,
          value: entry,
          index: index2,
          offset
        };
      });
    }
    if (scale.ticks && !isAll) {
      return scale.ticks(axis.tickCount).map(function(entry) {
        return {
          coordinate: scale(entry) + offset,
          value: entry,
          offset
        };
      });
    }
    return scale.domain().map(function(entry, index2) {
      return {
        coordinate: scale(entry) + offset,
        value: duplicateDomain ? duplicateDomain[entry] : entry,
        index: index2,
        offset
      };
    });
  };
  var combineEventHandlers = function combineEventHandlers2(defaultHandler, parentHandler, childHandler) {
    var customizedHandler;
    if ((0, import_isFunction3.default)(childHandler)) {
      customizedHandler = childHandler;
    } else if ((0, import_isFunction3.default)(parentHandler)) {
      customizedHandler = parentHandler;
    }
    if ((0, import_isFunction3.default)(defaultHandler) || customizedHandler) {
      return function(arg1, arg2, arg3, arg4) {
        if ((0, import_isFunction3.default)(defaultHandler)) {
          defaultHandler(arg1, arg2, arg3, arg4);
        }
        if ((0, import_isFunction3.default)(customizedHandler)) {
          customizedHandler(arg1, arg2, arg3, arg4);
        }
      };
    }
    return null;
  };
  var parseScale = function parseScale2(axis, chartType, hasBar) {
    var scale = axis.scale, type = axis.type, layout = axis.layout, axisType = axis.axisType;
    if (scale === "auto") {
      if (layout === "radial" && axisType === "radiusAxis") {
        return {
          scale: band(),
          realScaleType: "band"
        };
      }
      if (layout === "radial" && axisType === "angleAxis") {
        return {
          scale: linear2(),
          realScaleType: "linear"
        };
      }
      if (type === "category" && chartType && (chartType.indexOf("LineChart") >= 0 || chartType.indexOf("AreaChart") >= 0 || chartType.indexOf("ComposedChart") >= 0 && !hasBar)) {
        return {
          scale: point3(),
          realScaleType: "point"
        };
      }
      if (type === "category") {
        return {
          scale: band(),
          realScaleType: "band"
        };
      }
      return {
        scale: linear2(),
        realScaleType: "linear"
      };
    }
    if ((0, import_isString3.default)(scale)) {
      var name = "scale".concat((0, import_upperFirst2.default)(scale));
      return {
        scale: (src_exports[name] || point3)(),
        realScaleType: src_exports[name] ? name : "point"
      };
    }
    return (0, import_isFunction3.default)(scale) ? {
      scale
    } : {
      scale: point3(),
      realScaleType: "point"
    };
  };
  var EPS3 = 1e-4;
  var checkDomainOfScale = function checkDomainOfScale2(scale) {
    var domain = scale.domain();
    if (!domain || domain.length <= 2) {
      return;
    }
    var len = domain.length;
    var range4 = scale.range();
    var min2 = Math.min(range4[0], range4[1]) - EPS3;
    var max2 = Math.max(range4[0], range4[1]) + EPS3;
    var first = scale(domain[0]);
    var last = scale(domain[len - 1]);
    if (first < min2 || first > max2 || last < min2 || last > max2) {
      scale.domain([domain[0], domain[len - 1]]);
    }
  };
  var offsetSign = function offsetSign2(series) {
    var n3 = series.length;
    if (n3 <= 0) {
      return;
    }
    for (var j3 = 0, m3 = series[0].length; j3 < m3; ++j3) {
      var positive = 0;
      var negative = 0;
      for (var i3 = 0; i3 < n3; ++i3) {
        var value2 = (0, import_isNaN2.default)(series[i3][j3][1]) ? series[i3][j3][0] : series[i3][j3][1];
        if (value2 >= 0) {
          series[i3][j3][0] = positive;
          series[i3][j3][1] = positive + value2;
          positive = series[i3][j3][1];
        } else {
          series[i3][j3][0] = negative;
          series[i3][j3][1] = negative + value2;
          negative = series[i3][j3][1];
        }
      }
    }
  };
  var offsetPositive = function offsetPositive2(series) {
    var n3 = series.length;
    if (n3 <= 0) {
      return;
    }
    for (var j3 = 0, m3 = series[0].length; j3 < m3; ++j3) {
      var positive = 0;
      for (var i3 = 0; i3 < n3; ++i3) {
        var value2 = (0, import_isNaN2.default)(series[i3][j3][1]) ? series[i3][j3][0] : series[i3][j3][1];
        if (value2 >= 0) {
          series[i3][j3][0] = positive;
          series[i3][j3][1] = positive + value2;
          positive = series[i3][j3][1];
        } else {
          series[i3][j3][0] = 0;
          series[i3][j3][1] = 0;
        }
      }
    }
  };
  var STACK_OFFSET_MAP = {
    sign: offsetSign,
    expand: expand_default,
    none: none_default,
    silhouette: silhouette_default,
    wiggle: wiggle_default,
    positive: offsetPositive
  };
  var getStackedData = function getStackedData2(data, stackItems, offsetType) {
    var dataKeys = stackItems.map(function(item) {
      return item.props.dataKey;
    });
    var stack = stack_default().keys(dataKeys).value(function(d3, key) {
      return +getValueByDataKey(d3, key, 0);
    }).order(none_default2).offset(STACK_OFFSET_MAP[offsetType]);
    return stack(data);
  };
  var getStackGroupsByAxisId = function getStackGroupsByAxisId2(data, _items, numericAxisId, cateAxisId, offsetType, reverseStackOrder) {
    if (!data) {
      return null;
    }
    var items = reverseStackOrder ? _items.reverse() : _items;
    var stackGroups = items.reduce(function(result, item) {
      var _item$props3 = item.props, stackId = _item$props3.stackId, hide = _item$props3.hide;
      if (hide) {
        return result;
      }
      var axisId = item.props[numericAxisId];
      var parentGroup = result[axisId] || {
        hasStack: false,
        stackGroups: {}
      };
      if (isNumOrStr(stackId)) {
        var childGroup = parentGroup.stackGroups[stackId] || {
          numericAxisId,
          cateAxisId,
          items: []
        };
        childGroup.items.push(item);
        parentGroup.hasStack = true;
        parentGroup.stackGroups[stackId] = childGroup;
      } else {
        parentGroup.stackGroups[uniqueId("_stackId_")] = {
          numericAxisId,
          cateAxisId,
          items: [item]
        };
      }
      return _objectSpread11(_objectSpread11({}, result), {}, _defineProperty11({}, axisId, parentGroup));
    }, {});
    return Object.keys(stackGroups).reduce(function(result, axisId) {
      var group = stackGroups[axisId];
      if (group.hasStack) {
        group.stackGroups = Object.keys(group.stackGroups).reduce(function(res, stackId) {
          var g3 = group.stackGroups[stackId];
          return _objectSpread11(_objectSpread11({}, res), {}, _defineProperty11({}, stackId, {
            numericAxisId,
            cateAxisId,
            items: g3.items,
            stackedData: getStackedData(data, g3.items, offsetType)
          }));
        }, {});
      }
      return _objectSpread11(_objectSpread11({}, result), {}, _defineProperty11({}, axisId, group));
    }, {});
  };
  var calculateDomainOfTicks = function calculateDomainOfTicks2(ticks2, type) {
    if (type === "number") {
      return [(0, import_min2.default)(ticks2), (0, import_max2.default)(ticks2)];
    }
    return ticks2;
  };
  var getTicksOfScale = function getTicksOfScale2(scale, opts) {
    var realScaleType = opts.realScaleType, type = opts.type, tickCount = opts.tickCount, originalDomain = opts.originalDomain, allowDecimals = opts.allowDecimals;
    var scaleType = realScaleType || opts.scale;
    if (scaleType !== "auto" && scaleType !== "linear") {
      return null;
    }
    if (tickCount && type === "number" && originalDomain && (originalDomain[0] === "auto" || originalDomain[1] === "auto")) {
      var domain = scale.domain();
      if (!domain.length) {
        return null;
      }
      var tickValues = getNiceTickValues(domain, tickCount, allowDecimals);
      scale.domain(calculateDomainOfTicks(tickValues, type));
      return {
        niceTicks: tickValues
      };
    }
    if (tickCount && type === "number") {
      var _domain = scale.domain();
      var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals);
      return {
        niceTicks: _tickValues
      };
    }
    return null;
  };
  var getCateCoordinateOfLine = function getCateCoordinateOfLine2(_ref7) {
    var axis = _ref7.axis, ticks2 = _ref7.ticks, bandSize = _ref7.bandSize, entry = _ref7.entry, index2 = _ref7.index, dataKey = _ref7.dataKey;
    if (axis.type === "category") {
      if (!axis.allowDuplicatedCategory && axis.dataKey && !(0, import_isNil5.default)(entry[axis.dataKey])) {
        var matchedTick = findEntryInArray(ticks2, "value", entry[axis.dataKey]);
        if (matchedTick) {
          return matchedTick.coordinate + bandSize / 2;
        }
      }
      return ticks2[index2] ? ticks2[index2].coordinate + bandSize / 2 : null;
    }
    var value2 = getValueByDataKey(entry, !(0, import_isNil5.default)(dataKey) ? dataKey : axis.dataKey);
    return !(0, import_isNil5.default)(value2) ? axis.scale(value2) : null;
  };
  var getStackedDataOfItem = function getStackedDataOfItem2(item, stackGroups) {
    var stackId = item.props.stackId;
    if (isNumOrStr(stackId)) {
      var group = stackGroups[stackId];
      if (group && group.items.length) {
        var itemIndex = -1;
        for (var i3 = 0, len = group.items.length; i3 < len; i3++) {
          if (group.items[i3] === item) {
            itemIndex = i3;
            break;
          }
        }
        return itemIndex >= 0 ? group.stackedData[itemIndex] : null;
      }
    }
    return null;
  };
  var getDomainOfSingle = function getDomainOfSingle2(data) {
    return data.reduce(function(result, entry) {
      return [(0, import_min2.default)(entry.concat([result[0]]).filter(isNumber)), (0, import_max2.default)(entry.concat([result[1]]).filter(isNumber))];
    }, [Infinity, -Infinity]);
  };
  var getDomainOfStackGroups = function getDomainOfStackGroups2(stackGroups, startIndex, endIndex) {
    return Object.keys(stackGroups).reduce(function(result, stackId) {
      var group = stackGroups[stackId];
      var stackedData = group.stackedData;
      var domain = stackedData.reduce(function(res, entry) {
        var s3 = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));
        return [Math.min(res[0], s3[0]), Math.max(res[1], s3[1])];
      }, [Infinity, -Infinity]);
      return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];
    }, [Infinity, -Infinity]).map(function(result) {
      return result === Infinity || result === -Infinity ? 0 : result;
    });
  };
  var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
  var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
  var parseSpecifiedDomain = function parseSpecifiedDomain2(specifiedDomain, dataDomain, allowDataOverflow) {
    if ((0, import_isFunction3.default)(specifiedDomain)) {
      return specifiedDomain(dataDomain, allowDataOverflow);
    }
    if (!(0, import_isArray4.default)(specifiedDomain)) {
      return dataDomain;
    }
    var domain = [];
    if (isNumber(specifiedDomain[0])) {
      domain[0] = allowDataOverflow ? specifiedDomain[0] : Math.min(specifiedDomain[0], dataDomain[0]);
    } else if (MIN_VALUE_REG.test(specifiedDomain[0])) {
      var value2 = +MIN_VALUE_REG.exec(specifiedDomain[0])[1];
      domain[0] = dataDomain[0] - value2;
    } else if ((0, import_isFunction3.default)(specifiedDomain[0])) {
      domain[0] = specifiedDomain[0](dataDomain[0]);
    } else {
      domain[0] = dataDomain[0];
    }
    if (isNumber(specifiedDomain[1])) {
      domain[1] = allowDataOverflow ? specifiedDomain[1] : Math.max(specifiedDomain[1], dataDomain[1]);
    } else if (MAX_VALUE_REG.test(specifiedDomain[1])) {
      var _value = +MAX_VALUE_REG.exec(specifiedDomain[1])[1];
      domain[1] = dataDomain[1] + _value;
    } else if ((0, import_isFunction3.default)(specifiedDomain[1])) {
      domain[1] = specifiedDomain[1](dataDomain[1]);
    } else {
      domain[1] = dataDomain[1];
    }
    return domain;
  };
  var getBandSizeOfAxis = function getBandSizeOfAxis2(axis, ticks2, isBar) {
    if (axis && axis.scale && axis.scale.bandwidth) {
      var bandWidth = axis.scale.bandwidth();
      if (!isBar || bandWidth > 0) {
        return bandWidth;
      }
    }
    if (axis && ticks2 && ticks2.length >= 2) {
      var orderedTicks = (0, import_sortBy2.default)(ticks2, function(o2) {
        return o2.coordinate;
      });
      var bandSize = Infinity;
      for (var i3 = 1, len = orderedTicks.length; i3 < len; i3++) {
        var cur = orderedTicks[i3];
        var prev2 = orderedTicks[i3 - 1];
        bandSize = Math.min((cur.coordinate || 0) - (prev2.coordinate || 0), bandSize);
      }
      return bandSize === Infinity ? 0 : bandSize;
    }
    return isBar ? void 0 : 0;
  };
  var parseDomainOfCategoryAxis = function parseDomainOfCategoryAxis2(specifiedDomain, calculatedDomain, axisChild) {
    if (!specifiedDomain || !specifiedDomain.length) {
      return calculatedDomain;
    }
    if ((0, import_isEqual.default)(specifiedDomain, (0, import_get3.default)(axisChild, "type.defaultProps.domain"))) {
      return calculatedDomain;
    }
    return specifiedDomain;
  };
  var getTooltipItem = function getTooltipItem2(graphicalItem, payload) {
    var _graphicalItem$props = graphicalItem.props, dataKey = _graphicalItem$props.dataKey, name = _graphicalItem$props.name, unit2 = _graphicalItem$props.unit, formatter = _graphicalItem$props.formatter, tooltipType = _graphicalItem$props.tooltipType, chartType = _graphicalItem$props.chartType;
    return _objectSpread11(_objectSpread11({}, filterProps(graphicalItem)), {}, {
      dataKey,
      unit: unit2,
      formatter,
      name: name || dataKey,
      color: getMainColorOfGraphicItem(graphicalItem),
      value: getValueByDataKey(payload, dataKey),
      type: tooltipType,
      payload,
      chartType
    });
  };

  // node_modules/recharts/es6/util/PolarUtils.js
  function ownKeys12(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread12(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys12(Object(source), true).forEach(function(key) {
          _defineProperty12(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys12(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty12(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var RADIAN2 = Math.PI / 180;
  var radianToDegree = function radianToDegree2(angleInRadian) {
    return angleInRadian * 180 / Math.PI;
  };
  var polarToCartesian = function polarToCartesian2(cx, cy, radius, angle) {
    return {
      x: cx + Math.cos(-RADIAN2 * angle) * radius,
      y: cy + Math.sin(-RADIAN2 * angle) * radius
    };
  };
  var distanceBetweenPoints = function distanceBetweenPoints2(point4, anotherPoint) {
    var x1 = point4.x, y1 = point4.y;
    var x22 = anotherPoint.x, y2 = anotherPoint.y;
    return Math.sqrt(Math.pow(x1 - x22, 2) + Math.pow(y1 - y2, 2));
  };
  var getAngleOfPoint = function getAngleOfPoint2(_ref3, _ref23) {
    var x3 = _ref3.x, y2 = _ref3.y;
    var cx = _ref23.cx, cy = _ref23.cy;
    var radius = distanceBetweenPoints({
      x: x3,
      y: y2
    }, {
      x: cx,
      y: cy
    });
    if (radius <= 0) {
      return {
        radius
      };
    }
    var cos2 = (x3 - cx) / radius;
    var angleInRadian = Math.acos(cos2);
    if (y2 > cy) {
      angleInRadian = 2 * Math.PI - angleInRadian;
    }
    return {
      radius,
      angle: radianToDegree(angleInRadian),
      angleInRadian
    };
  };
  var formatAngleOfSector = function formatAngleOfSector2(_ref3) {
    var startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
    var startCnt = Math.floor(startAngle / 360);
    var endCnt = Math.floor(endAngle / 360);
    var min2 = Math.min(startCnt, endCnt);
    return {
      startAngle: startAngle - min2 * 360,
      endAngle: endAngle - min2 * 360
    };
  };
  var reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor2(angle, _ref4) {
    var startAngle = _ref4.startAngle, endAngle = _ref4.endAngle;
    var startCnt = Math.floor(startAngle / 360);
    var endCnt = Math.floor(endAngle / 360);
    var min2 = Math.min(startCnt, endCnt);
    return angle + min2 * 360;
  };
  var inRangeOfSector = function inRangeOfSector2(_ref5, sector) {
    var x3 = _ref5.x, y2 = _ref5.y;
    var _getAngleOfPoint = getAngleOfPoint({
      x: x3,
      y: y2
    }, sector), radius = _getAngleOfPoint.radius, angle = _getAngleOfPoint.angle;
    var innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
    if (radius < innerRadius || radius > outerRadius) {
      return false;
    }
    if (radius === 0) {
      return true;
    }
    var _formatAngleOfSector = formatAngleOfSector(sector), startAngle = _formatAngleOfSector.startAngle, endAngle = _formatAngleOfSector.endAngle;
    var formatAngle = angle;
    var inRange;
    if (startAngle <= endAngle) {
      while (formatAngle > endAngle) {
        formatAngle -= 360;
      }
      while (formatAngle < startAngle) {
        formatAngle += 360;
      }
      inRange = formatAngle >= startAngle && formatAngle <= endAngle;
    } else {
      while (formatAngle > startAngle) {
        formatAngle -= 360;
      }
      while (formatAngle < endAngle) {
        formatAngle += 360;
      }
      inRange = formatAngle >= endAngle && formatAngle <= startAngle;
    }
    if (inRange) {
      return _objectSpread12(_objectSpread12({}, sector), {}, {
        radius,
        angle: reverseFormatAngleOfSetor(formatAngle, sector)
      });
    }
    return null;
  };

  // node_modules/recharts/es6/component/Label.js
  function _toConsumableArray9(arr) {
    return _arrayWithoutHoles9(arr) || _iterableToArray10(arr) || _unsupportedIterableToArray13(arr) || _nonIterableSpread9();
  }
  function _nonIterableSpread9() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray13(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray13(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray13(o2, minLen);
  }
  function _iterableToArray10(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles9(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray13(arr);
  }
  function _arrayLikeToArray13(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function ownKeys13(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread13(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys13(Object(source), true).forEach(function(key) {
          _defineProperty13(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys13(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty13(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _extends9() {
    _extends9 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends9.apply(this, arguments);
  }
  var getLabel = function getLabel2(props) {
    var value2 = props.value, formatter = props.formatter;
    var label = (0, import_isNil7.default)(props.children) ? value2 : props.children;
    if ((0, import_isFunction4.default)(formatter)) {
      return formatter(label);
    }
    return label;
  };
  var getDeltaAngle = function getDeltaAngle2(startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle);
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
    return sign2 * deltaAngle;
  };
  var renderRadialLabel = function renderRadialLabel2(labelProps, label, attrs) {
    var position = labelProps.position, viewBox = labelProps.viewBox, offset = labelProps.offset, className = labelProps.className;
    var _ref3 = viewBox, cx = _ref3.cx, cy = _ref3.cy, innerRadius = _ref3.innerRadius, outerRadius = _ref3.outerRadius, startAngle = _ref3.startAngle, endAngle = _ref3.endAngle, clockWise = _ref3.clockWise;
    var radius = (innerRadius + outerRadius) / 2;
    var deltaAngle = getDeltaAngle(startAngle, endAngle);
    var sign2 = deltaAngle >= 0 ? 1 : -1;
    var labelAngle, direction;
    if (position === "insideStart") {
      labelAngle = startAngle + sign2 * offset;
      direction = clockWise;
    } else if (position === "insideEnd") {
      labelAngle = endAngle - sign2 * offset;
      direction = !clockWise;
    } else if (position === "end") {
      labelAngle = endAngle + sign2 * offset;
      direction = clockWise;
    }
    direction = deltaAngle <= 0 ? direction : !direction;
    var startPoint = polarToCartesian(cx, cy, radius, labelAngle);
    var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
    var path2 = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
    var id = (0, import_isNil7.default)(labelProps.id) ? uniqueId("recharts-radial-line-") : labelProps.id;
    return /* @__PURE__ */ import_react32.default.createElement("text", _extends9({}, attrs, {
      dominantBaseline: "central",
      className: (0, import_classnames11.default)("recharts-radial-bar-label", className)
    }), /* @__PURE__ */ import_react32.default.createElement("defs", null, /* @__PURE__ */ import_react32.default.createElement("path", {
      id,
      d: path2
    })), /* @__PURE__ */ import_react32.default.createElement("textPath", {
      xlinkHref: "#".concat(id)
    }, label));
  };
  var getAttrsOfPolarLabel = function getAttrsOfPolarLabel2(props) {
    var viewBox = props.viewBox, offset = props.offset, position = props.position;
    var _ref23 = viewBox, cx = _ref23.cx, cy = _ref23.cy, innerRadius = _ref23.innerRadius, outerRadius = _ref23.outerRadius, startAngle = _ref23.startAngle, endAngle = _ref23.endAngle;
    var midAngle = (startAngle + endAngle) / 2;
    if (position === "outside") {
      var _polarToCartesian = polarToCartesian(cx, cy, outerRadius + offset, midAngle), _x = _polarToCartesian.x, _y = _polarToCartesian.y;
      return {
        x: _x,
        y: _y,
        textAnchor: _x >= cx ? "start" : "end",
        verticalAnchor: "middle"
      };
    }
    if (position === "center") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "middle"
      };
    }
    if (position === "centerTop") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "start"
      };
    }
    if (position === "centerBottom") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "end"
      };
    }
    var r = (innerRadius + outerRadius) / 2;
    var _polarToCartesian2 = polarToCartesian(cx, cy, r, midAngle), x3 = _polarToCartesian2.x, y2 = _polarToCartesian2.y;
    return {
      x: x3,
      y: y2,
      textAnchor: "middle",
      verticalAnchor: "middle"
    };
  };
  var getAttrsOfCartesianLabel = function getAttrsOfCartesianLabel2(props) {
    var viewBox = props.viewBox, parentViewBox = props.parentViewBox, offset = props.offset, position = props.position;
    var _ref3 = viewBox, x3 = _ref3.x, y2 = _ref3.y, width = _ref3.width, height = _ref3.height;
    var verticalSign = height >= 0 ? 1 : -1;
    var verticalOffset = verticalSign * offset;
    var verticalEnd = verticalSign > 0 ? "end" : "start";
    var verticalStart = verticalSign > 0 ? "start" : "end";
    var horizontalSign = width >= 0 ? 1 : -1;
    var horizontalOffset = horizontalSign * offset;
    var horizontalEnd = horizontalSign > 0 ? "end" : "start";
    var horizontalStart = horizontalSign > 0 ? "start" : "end";
    if (position === "top") {
      var attrs = {
        x: x3 + width / 2,
        y: y2 - verticalSign * offset,
        textAnchor: "middle",
        verticalAnchor: verticalEnd
      };
      return _objectSpread13(_objectSpread13({}, attrs), parentViewBox ? {
        height: Math.max(y2 - parentViewBox.y, 0),
        width
      } : {});
    }
    if (position === "bottom") {
      var _attrs = {
        x: x3 + width / 2,
        y: y2 + height + verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalStart
      };
      return _objectSpread13(_objectSpread13({}, _attrs), parentViewBox ? {
        height: Math.max(parentViewBox.y + parentViewBox.height - (y2 + height), 0),
        width
      } : {});
    }
    if (position === "left") {
      var _attrs2 = {
        x: x3 - horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalEnd,
        verticalAnchor: "middle"
      };
      return _objectSpread13(_objectSpread13({}, _attrs2), parentViewBox ? {
        width: Math.max(_attrs2.x - parentViewBox.x, 0),
        height
      } : {});
    }
    if (position === "right") {
      var _attrs3 = {
        x: x3 + width + horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalStart,
        verticalAnchor: "middle"
      };
      return _objectSpread13(_objectSpread13({}, _attrs3), parentViewBox ? {
        width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
        height
      } : {});
    }
    var sizeAttrs = parentViewBox ? {
      width,
      height
    } : {};
    if (position === "insideLeft") {
      return _objectSpread13({
        x: x3 + horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalStart,
        verticalAnchor: "middle"
      }, sizeAttrs);
    }
    if (position === "insideRight") {
      return _objectSpread13({
        x: x3 + width - horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalEnd,
        verticalAnchor: "middle"
      }, sizeAttrs);
    }
    if (position === "insideTop") {
      return _objectSpread13({
        x: x3 + width / 2,
        y: y2 + verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideBottom") {
      return _objectSpread13({
        x: x3 + width / 2,
        y: y2 + height - verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (position === "insideTopLeft") {
      return _objectSpread13({
        x: x3 + horizontalOffset,
        y: y2 + verticalOffset,
        textAnchor: horizontalStart,
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideTopRight") {
      return _objectSpread13({
        x: x3 + width - horizontalOffset,
        y: y2 + verticalOffset,
        textAnchor: horizontalEnd,
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideBottomLeft") {
      return _objectSpread13({
        x: x3 + horizontalOffset,
        y: y2 + height - verticalOffset,
        textAnchor: horizontalStart,
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (position === "insideBottomRight") {
      return _objectSpread13({
        x: x3 + width - horizontalOffset,
        y: y2 + height - verticalOffset,
        textAnchor: horizontalEnd,
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if ((0, import_isObject2.default)(position) && (isNumber(position.x) || isPercent(position.x)) && (isNumber(position.y) || isPercent(position.y))) {
      return _objectSpread13({
        x: x3 + getPercentValue(position.x, width),
        y: y2 + getPercentValue(position.y, height),
        textAnchor: "end",
        verticalAnchor: "end"
      }, sizeAttrs);
    }
    return _objectSpread13({
      x: x3 + width / 2,
      y: y2 + height / 2,
      textAnchor: "middle",
      verticalAnchor: "middle"
    }, sizeAttrs);
  };
  var isPolar = function isPolar2(viewBox) {
    return isNumber(viewBox.cx);
  };
  function Label(props) {
    var viewBox = props.viewBox, position = props.position, value2 = props.value, children = props.children, content = props.content, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, textBreakAll = props.textBreakAll;
    if (!viewBox || (0, import_isNil7.default)(value2) && (0, import_isNil7.default)(children) && !/* @__PURE__ */ (0, import_react32.isValidElement)(content) && !(0, import_isFunction4.default)(content)) {
      return null;
    }
    if (/* @__PURE__ */ (0, import_react32.isValidElement)(content)) {
      return /* @__PURE__ */ (0, import_react32.cloneElement)(content, props);
    }
    var label;
    if ((0, import_isFunction4.default)(content)) {
      label = /* @__PURE__ */ (0, import_react32.createElement)(content, props);
      if (/* @__PURE__ */ (0, import_react32.isValidElement)(label)) {
        return label;
      }
    } else {
      label = getLabel(props);
    }
    var isPolarLabel = isPolar(viewBox);
    var attrs = filterProps(props, true);
    if (isPolarLabel && (position === "insideStart" || position === "insideEnd" || position === "end")) {
      return renderRadialLabel(props, label, attrs);
    }
    var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props);
    return /* @__PURE__ */ import_react32.default.createElement(Text, _extends9({
      className: (0, import_classnames11.default)("recharts-label", className)
    }, attrs, positionAttrs, {
      breakAll: textBreakAll
    }), label);
  }
  Label.displayName = "Label";
  Label.defaultProps = {
    offset: 5
  };
  var parseViewBox = function parseViewBox2(props) {
    var cx = props.cx, cy = props.cy, angle = props.angle, startAngle = props.startAngle, endAngle = props.endAngle, r = props.r, radius = props.radius, innerRadius = props.innerRadius, outerRadius = props.outerRadius, x3 = props.x, y2 = props.y, top = props.top, left = props.left, width = props.width, height = props.height, clockWise = props.clockWise, labelViewBox = props.labelViewBox;
    if (labelViewBox) {
      return labelViewBox;
    }
    if (isNumber(width) && isNumber(height)) {
      if (isNumber(x3) && isNumber(y2)) {
        return {
          x: x3,
          y: y2,
          width,
          height
        };
      }
      if (isNumber(top) && isNumber(left)) {
        return {
          x: top,
          y: left,
          width,
          height
        };
      }
    }
    if (isNumber(x3) && isNumber(y2)) {
      return {
        x: x3,
        y: y2,
        width: 0,
        height: 0
      };
    }
    if (isNumber(cx) && isNumber(cy)) {
      return {
        cx,
        cy,
        startAngle: startAngle || angle || 0,
        endAngle: endAngle || angle || 0,
        innerRadius: innerRadius || 0,
        outerRadius: outerRadius || radius || r || 0,
        clockWise
      };
    }
    if (props.viewBox) {
      return props.viewBox;
    }
    return {};
  };
  var parseLabel = function parseLabel2(label, viewBox) {
    if (!label) {
      return null;
    }
    if (label === true) {
      return /* @__PURE__ */ import_react32.default.createElement(Label, {
        key: "label-implicit",
        viewBox
      });
    }
    if (isNumOrStr(label)) {
      return /* @__PURE__ */ import_react32.default.createElement(Label, {
        key: "label-implicit",
        viewBox,
        value: label
      });
    }
    if (/* @__PURE__ */ (0, import_react32.isValidElement)(label)) {
      if (label.type === Label) {
        return /* @__PURE__ */ (0, import_react32.cloneElement)(label, {
          key: "label-implicit",
          viewBox
        });
      }
      return /* @__PURE__ */ import_react32.default.createElement(Label, {
        key: "label-implicit",
        content: label,
        viewBox
      });
    }
    if ((0, import_isFunction4.default)(label)) {
      return /* @__PURE__ */ import_react32.default.createElement(Label, {
        key: "label-implicit",
        content: label,
        viewBox
      });
    }
    if ((0, import_isObject2.default)(label)) {
      return /* @__PURE__ */ import_react32.default.createElement(Label, _extends9({
        viewBox
      }, label, {
        key: "label-implicit"
      }));
    }
    return null;
  };
  var renderCallByParent = function renderCallByParent2(parentProps, viewBox) {
    var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
      return null;
    }
    var children = parentProps.children;
    var parentViewBox = parseViewBox(parentProps);
    var explicitChildren = findAllByType(children, Label.displayName).map(function(child, index2) {
      return /* @__PURE__ */ (0, import_react32.cloneElement)(child, {
        viewBox: viewBox || parentViewBox,
        key: "label-".concat(index2)
      });
    });
    if (!checkPropsLabel) {
      return explicitChildren;
    }
    var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox);
    return [implicitLabel].concat(_toConsumableArray9(explicitChildren));
  };
  Label.parseViewBox = parseViewBox;
  Label.renderCallByParent = renderCallByParent;

  // node_modules/recharts/es6/component/LabelList.js
  var import_isObject3 = __toModule(require_isObject());
  var import_isFunction5 = __toModule(require_isFunction());
  var import_isNil8 = __toModule(require_isNil());
  var import_last = __toModule(require_last());
  var import_isArray5 = __toModule(require_isArray());
  var import_react33 = __toModule(require_react());
  function _toConsumableArray10(arr) {
    return _arrayWithoutHoles10(arr) || _iterableToArray11(arr) || _unsupportedIterableToArray14(arr) || _nonIterableSpread10();
  }
  function _nonIterableSpread10() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray14(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray14(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray14(o2, minLen);
  }
  function _iterableToArray11(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles10(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray14(arr);
  }
  function _arrayLikeToArray14(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _extends10() {
    _extends10 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends10.apply(this, arguments);
  }
  function ownKeys14(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread14(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys14(Object(source), true).forEach(function(key) {
          _defineProperty14(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys14(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty14(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _objectWithoutProperties8(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose9(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose9(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultProps = {
    valueAccessor: function valueAccessor(entry) {
      return (0, import_isArray5.default)(entry.value) ? (0, import_last.default)(entry.value) : entry.value;
    }
  };
  function LabelList(props) {
    var data = props.data, valueAccessor2 = props.valueAccessor, dataKey = props.dataKey, clockWise = props.clockWise, id = props.id, textBreakAll = props.textBreakAll, others = _objectWithoutProperties8(props, ["data", "valueAccessor", "dataKey", "clockWise", "id", "textBreakAll"]);
    if (!data || !data.length) {
      return null;
    }
    return /* @__PURE__ */ import_react33.default.createElement(Layer, {
      className: "recharts-label-list"
    }, data.map(function(entry, index2) {
      var value2 = (0, import_isNil8.default)(dataKey) ? valueAccessor2(entry, index2) : getValueByDataKey(entry && entry.payload, dataKey);
      var idProps = (0, import_isNil8.default)(id) ? {} : {
        id: "".concat(id, "-").concat(index2)
      };
      return /* @__PURE__ */ import_react33.default.createElement(Label, _extends10({}, filterProps(entry, true), others, idProps, {
        parentViewBox: entry.parentViewBox,
        index: index2,
        value: value2,
        textBreakAll,
        viewBox: Label.parseViewBox((0, import_isNil8.default)(clockWise) ? entry : _objectSpread14(_objectSpread14({}, entry), {}, {
          clockWise
        })),
        key: "label-".concat(index2)
      }));
    }));
  }
  LabelList.displayName = "LabelList";
  function parseLabelList(label, data) {
    if (!label) {
      return null;
    }
    if (label === true) {
      return /* @__PURE__ */ import_react33.default.createElement(LabelList, {
        key: "labelList-implicit",
        data
      });
    }
    if (/* @__PURE__ */ import_react33.default.isValidElement(label) || (0, import_isFunction5.default)(label)) {
      return /* @__PURE__ */ import_react33.default.createElement(LabelList, {
        key: "labelList-implicit",
        data,
        content: label
      });
    }
    if ((0, import_isObject3.default)(label)) {
      return /* @__PURE__ */ import_react33.default.createElement(LabelList, _extends10({
        data
      }, label, {
        key: "labelList-implicit"
      }));
    }
    return null;
  }
  function renderCallByParent3(parentProps, data) {
    var ckeckPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (!parentProps || !parentProps.children && ckeckPropsLabel && !parentProps.label) {
      return null;
    }
    var children = parentProps.children;
    var explicitChilren = findAllByType(children, LabelList.displayName).map(function(child, index2) {
      return /* @__PURE__ */ (0, import_react33.cloneElement)(child, {
        data,
        key: "labelList-".concat(index2)
      });
    });
    if (!ckeckPropsLabel) {
      return explicitChilren;
    }
    var implicitLabelList = parseLabelList(parentProps.label, data);
    return [implicitLabelList].concat(_toConsumableArray10(explicitChilren));
  }
  LabelList.renderCallByParent = renderCallByParent3;
  LabelList.defaultProps = defaultProps;

  // node_modules/recharts/es6/shape/Sector.js
  var import_react34 = __toModule(require_react());
  var import_classnames12 = __toModule(require_classnames());
  function _typeof11(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof11 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof11 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof11(obj);
  }
  function _extends11() {
    _extends11 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends11.apply(this, arguments);
  }
  function _classCallCheck10(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties10(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass10(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties10(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties10(Constructor, staticProps);
    return Constructor;
  }
  function _inherits10(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf11(subClass, superClass);
  }
  function _setPrototypeOf11(o2, p2) {
    _setPrototypeOf11 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf11(o2, p2);
  }
  function _createSuper10(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct10();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf10(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf10(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn10(this, result);
    };
  }
  function _possibleConstructorReturn10(self2, call) {
    if (call && (_typeof11(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized10(self2);
  }
  function _assertThisInitialized10(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct10() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf10(o2) {
    _getPrototypeOf10 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf10(o2);
  }
  var getDeltaAngle3 = function getDeltaAngle4(startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle);
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
    return sign2 * deltaAngle;
  };
  var getTangentCircle = function getTangentCircle2(_ref3) {
    var cx = _ref3.cx, cy = _ref3.cy, radius = _ref3.radius, angle = _ref3.angle, sign2 = _ref3.sign, isExternal = _ref3.isExternal, cornerRadius = _ref3.cornerRadius, cornerIsExternal = _ref3.cornerIsExternal;
    var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
    var theta = Math.asin(cornerRadius / centerRadius) / RADIAN2;
    var centerAngle = cornerIsExternal ? angle : angle + sign2 * theta;
    var center = polarToCartesian(cx, cy, centerRadius, centerAngle);
    var circleTangency = polarToCartesian(cx, cy, radius, centerAngle);
    var lineTangencyAngle = cornerIsExternal ? angle - sign2 * theta : angle;
    var lineTangency = polarToCartesian(cx, cy, centerRadius * Math.cos(theta * RADIAN2), lineTangencyAngle);
    return {
      center,
      circleTangency,
      lineTangency,
      theta
    };
  };
  var getSectorPath = function getSectorPath2(_ref23) {
    var cx = _ref23.cx, cy = _ref23.cy, innerRadius = _ref23.innerRadius, outerRadius = _ref23.outerRadius, startAngle = _ref23.startAngle, endAngle = _ref23.endAngle;
    var angle = getDeltaAngle3(startAngle, endAngle);
    var tempEndAngle = startAngle + angle;
    var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle);
    var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle);
    var path2 = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");
    if (innerRadius > 0) {
      var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle);
      var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle);
      path2 += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
    } else {
      path2 += "L ".concat(cx, ",").concat(cy, " Z");
    }
    return path2;
  };
  var getSectorWithCorner = function getSectorWithCorner2(_ref3) {
    var cx = _ref3.cx, cy = _ref3.cy, innerRadius = _ref3.innerRadius, outerRadius = _ref3.outerRadius, cornerRadius = _ref3.cornerRadius, forceCornerRadius = _ref3.forceCornerRadius, cornerIsExternal = _ref3.cornerIsExternal, startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
    var sign2 = mathSign(endAngle - startAngle);
    var _getTangentCircle = getTangentCircle({
      cx,
      cy,
      radius: outerRadius,
      angle: startAngle,
      sign: sign2,
      cornerRadius,
      cornerIsExternal
    }), soct = _getTangentCircle.circleTangency, solt = _getTangentCircle.lineTangency, sot = _getTangentCircle.theta;
    var _getTangentCircle2 = getTangentCircle({
      cx,
      cy,
      radius: outerRadius,
      angle: endAngle,
      sign: -sign2,
      cornerRadius,
      cornerIsExternal
    }), eoct = _getTangentCircle2.circleTangency, eolt = _getTangentCircle2.lineTangency, eot = _getTangentCircle2.theta;
    var outerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sot - eot;
    if (outerArcAngle < 0) {
      if (forceCornerRadius) {
        return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
      }
      return getSectorPath({
        cx,
        cy,
        innerRadius,
        outerRadius,
        startAngle,
        endAngle
      });
    }
    var path2 = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign2 < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");
    if (innerRadius > 0) {
      var _getTangentCircle3 = getTangentCircle({
        cx,
        cy,
        radius: innerRadius,
        angle: startAngle,
        sign: sign2,
        isExternal: true,
        cornerRadius,
        cornerIsExternal
      }), sict = _getTangentCircle3.circleTangency, silt = _getTangentCircle3.lineTangency, sit = _getTangentCircle3.theta;
      var _getTangentCircle4 = getTangentCircle({
        cx,
        cy,
        radius: innerRadius,
        angle: endAngle,
        sign: -sign2,
        isExternal: true,
        cornerRadius,
        cornerIsExternal
      }), eict = _getTangentCircle4.circleTangency, eilt = _getTangentCircle4.lineTangency, eit = _getTangentCircle4.theta;
      var innerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sit - eit;
      if (innerArcAngle < 0 && cornerRadius === 0) {
        return "".concat(path2, "L").concat(cx, ",").concat(cy, "Z");
      }
      path2 += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign2 > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
    } else {
      path2 += "L".concat(cx, ",").concat(cy, "Z");
    }
    return path2;
  };
  var Sector = /* @__PURE__ */ function(_PureComponent) {
    _inherits10(Sector2, _PureComponent);
    var _super = _createSuper10(Sector2);
    function Sector2() {
      _classCallCheck10(this, Sector2);
      return _super.apply(this, arguments);
    }
    _createClass10(Sector2, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, cx = _this$props.cx, cy = _this$props.cy, innerRadius = _this$props.innerRadius, outerRadius = _this$props.outerRadius, cornerRadius = _this$props.cornerRadius, forceCornerRadius = _this$props.forceCornerRadius, cornerIsExternal = _this$props.cornerIsExternal, startAngle = _this$props.startAngle, endAngle = _this$props.endAngle, className = _this$props.className;
        if (outerRadius < innerRadius || startAngle === endAngle) {
          return null;
        }
        var layerClass = (0, import_classnames12.default)("recharts-sector", className);
        var deltaRadius = outerRadius - innerRadius;
        var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
        var path2;
        if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
          path2 = getSectorWithCorner({
            cx,
            cy,
            innerRadius,
            outerRadius,
            cornerRadius: Math.min(cr, deltaRadius / 2),
            forceCornerRadius,
            cornerIsExternal,
            startAngle,
            endAngle
          });
        } else {
          path2 = getSectorPath({
            cx,
            cy,
            innerRadius,
            outerRadius,
            startAngle,
            endAngle
          });
        }
        return /* @__PURE__ */ import_react34.default.createElement("path", _extends11({}, filterProps(this.props, true), {
          className: layerClass,
          d: path2
        }));
      }
    }]);
    return Sector2;
  }(import_react34.PureComponent);
  Sector.defaultProps = {
    cx: 0,
    cy: 0,
    innerRadius: 0,
    outerRadius: 0,
    startAngle: 0,
    endAngle: 0,
    cornerRadius: 0,
    forceCornerRadius: false,
    cornerIsExternal: false
  };

  // node_modules/recharts/es6/shape/Curve.js
  var import_isArray6 = __toModule(require_isArray());
  var import_upperFirst3 = __toModule(require_upperFirst());
  var import_isFunction6 = __toModule(require_isFunction());
  var import_react35 = __toModule(require_react());
  var import_classnames13 = __toModule(require_classnames());
  function _typeof12(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof12 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof12 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof12(obj);
  }
  function _extends12() {
    _extends12 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends12.apply(this, arguments);
  }
  function ownKeys15(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread15(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys15(Object(source), true).forEach(function(key) {
          _defineProperty15(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys15(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty15(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck11(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties11(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass11(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties11(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties11(Constructor, staticProps);
    return Constructor;
  }
  function _inherits11(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf12(subClass, superClass);
  }
  function _setPrototypeOf12(o2, p2) {
    _setPrototypeOf12 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf12(o2, p2);
  }
  function _createSuper11(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct11();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf11(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf11(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn11(this, result);
    };
  }
  function _possibleConstructorReturn11(self2, call) {
    if (call && (_typeof12(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized11(self2);
  }
  function _assertThisInitialized11(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct11() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf11(o2) {
    _getPrototypeOf11 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf11(o2);
  }
  var CURVE_FACTORIES = {
    curveBasisClosed: basisClosed_default,
    curveBasisOpen: basisOpen_default,
    curveBasis: basis_default,
    curveLinearClosed: linearClosed_default,
    curveLinear: linear_default,
    curveMonotoneX: monotoneX,
    curveMonotoneY: monotoneY,
    curveNatural: natural_default,
    curveStep: step_default,
    curveStepAfter: stepAfter,
    curveStepBefore: stepBefore
  };
  var defined = function defined2(p2) {
    return p2.x === +p2.x && p2.y === +p2.y;
  };
  var getX = function getX2(p2) {
    return p2.x;
  };
  var getY = function getY2(p2) {
    return p2.y;
  };
  var getCurveFactory = function getCurveFactory2(type, layout) {
    if ((0, import_isFunction6.default)(type)) {
      return type;
    }
    var name = "curve".concat((0, import_upperFirst3.default)(type));
    if (name === "curveMonotone" && layout) {
      return CURVE_FACTORIES["".concat(name).concat(layout === "vertical" ? "Y" : "X")];
    }
    return CURVE_FACTORIES[name] || linear_default;
  };
  var Curve = /* @__PURE__ */ function(_PureComponent) {
    _inherits11(Curve2, _PureComponent);
    var _super = _createSuper11(Curve2);
    function Curve2() {
      _classCallCheck11(this, Curve2);
      return _super.apply(this, arguments);
    }
    _createClass11(Curve2, [{
      key: "getPath",
      value: function getPath() {
        var _this$props = this.props, type = _this$props.type, points = _this$props.points, baseLine = _this$props.baseLine, layout = _this$props.layout, connectNulls = _this$props.connectNulls;
        var curveFactory = getCurveFactory(type, layout);
        var formatPoints = connectNulls ? points.filter(function(entry) {
          return defined(entry);
        }) : points;
        var lineFunction;
        if ((0, import_isArray6.default)(baseLine)) {
          var formatBaseLine = connectNulls ? baseLine.filter(function(base) {
            return defined(base);
          }) : baseLine;
          var areaPoints = formatPoints.map(function(entry, index2) {
            return _objectSpread15(_objectSpread15({}, entry), {}, {
              base: formatBaseLine[index2]
            });
          });
          if (layout === "vertical") {
            lineFunction = area_default().y(getY).x1(getX).x0(function(d3) {
              return d3.base.x;
            });
          } else {
            lineFunction = area_default().x(getX).y1(getY).y0(function(d3) {
              return d3.base.y;
            });
          }
          lineFunction.defined(defined).curve(curveFactory);
          return lineFunction(areaPoints);
        }
        if (layout === "vertical" && isNumber(baseLine)) {
          lineFunction = area_default().y(getY).x1(getX).x0(baseLine);
        } else if (isNumber(baseLine)) {
          lineFunction = area_default().x(getX).y1(getY).y0(baseLine);
        } else {
          lineFunction = line_default().x(getX).y(getY);
        }
        lineFunction.defined(defined).curve(curveFactory);
        return lineFunction(formatPoints);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props, className = _this$props2.className, points = _this$props2.points, path2 = _this$props2.path, pathRef = _this$props2.pathRef;
        if ((!points || !points.length) && !path2) {
          return null;
        }
        var realPath = points && points.length ? this.getPath() : path2;
        return /* @__PURE__ */ import_react35.default.createElement("path", _extends12({}, filterProps(this.props), adaptEventHandlers(this.props), {
          className: (0, import_classnames13.default)("recharts-curve", className),
          d: realPath,
          ref: pathRef
        }));
      }
    }]);
    return Curve2;
  }(import_react35.PureComponent);
  Curve.defaultProps = {
    type: "linear",
    points: [],
    connectNulls: false
  };

  // node_modules/recharts/es6/shape/Rectangle.js
  var import_react36 = __toModule(require_react());
  var import_classnames14 = __toModule(require_classnames());
  function _typeof13(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof13 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof13 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof13(obj);
  }
  function _extends13() {
    _extends13 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends13.apply(this, arguments);
  }
  function _classCallCheck12(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties12(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass12(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties12(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties12(Constructor, staticProps);
    return Constructor;
  }
  function _inherits12(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf13(subClass, superClass);
  }
  function _setPrototypeOf13(o2, p2) {
    _setPrototypeOf13 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf13(o2, p2);
  }
  function _createSuper12(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct12();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf12(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf12(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn12(this, result);
    };
  }
  function _possibleConstructorReturn12(self2, call) {
    if (call && (_typeof13(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized12(self2);
  }
  function _assertThisInitialized12(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct12() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf12(o2) {
    _getPrototypeOf12 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf12(o2);
  }
  var getRectanglePath = function getRectanglePath2(x3, y2, width, height, radius) {
    var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
    var ySign = height >= 0 ? 1 : -1;
    var xSign = width >= 0 ? 1 : -1;
    var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
    var path2;
    if (maxRadius > 0 && radius instanceof Array) {
      var newRadius = [0, 0, 0, 0];
      for (var i3 = 0, len = 4; i3 < len; i3++) {
        newRadius[i3] = radius[i3] > maxRadius ? maxRadius : radius[i3];
      }
      path2 = "M".concat(x3, ",").concat(y2 + ySign * newRadius[0]);
      if (newRadius[0] > 0) {
        path2 += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x3 + xSign * newRadius[0], ",").concat(y2);
      }
      path2 += "L ".concat(x3 + width - xSign * newRadius[1], ",").concat(y2);
      if (newRadius[1] > 0) {
        path2 += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x3 + width, ",").concat(y2 + ySign * newRadius[1]);
      }
      path2 += "L ".concat(x3 + width, ",").concat(y2 + height - ySign * newRadius[2]);
      if (newRadius[2] > 0) {
        path2 += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x3 + width - xSign * newRadius[2], ",").concat(y2 + height);
      }
      path2 += "L ".concat(x3 + xSign * newRadius[3], ",").concat(y2 + height);
      if (newRadius[3] > 0) {
        path2 += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x3, ",").concat(y2 + height - ySign * newRadius[3]);
      }
      path2 += "Z";
    } else if (maxRadius > 0 && radius === +radius && radius > 0) {
      var _newRadius = Math.min(maxRadius, radius);
      path2 = "M ".concat(x3, ",").concat(y2 + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x3 + xSign * _newRadius, ",").concat(y2, "\n            L ").concat(x3 + width - xSign * _newRadius, ",").concat(y2, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x3 + width, ",").concat(y2 + ySign * _newRadius, "\n            L ").concat(x3 + width, ",").concat(y2 + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x3 + width - xSign * _newRadius, ",").concat(y2 + height, "\n            L ").concat(x3 + xSign * _newRadius, ",").concat(y2 + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x3, ",").concat(y2 + height - ySign * _newRadius, " Z");
    } else {
      path2 = "M ".concat(x3, ",").concat(y2, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
    }
    return path2;
  };
  var isInRectangle = function isInRectangle2(point4, rect) {
    if (!point4 || !rect) {
      return false;
    }
    var px = point4.x, py = point4.y;
    var x3 = rect.x, y2 = rect.y, width = rect.width, height = rect.height;
    if (Math.abs(width) > 0 && Math.abs(height) > 0) {
      var minX = Math.min(x3, x3 + width);
      var maxX = Math.max(x3, x3 + width);
      var minY = Math.min(y2, y2 + height);
      var maxY = Math.max(y2, y2 + height);
      return px >= minX && px <= maxX && py >= minY && py <= maxY;
    }
    return false;
  };
  var Rectangle = /* @__PURE__ */ function(_PureComponent) {
    _inherits12(Rectangle2, _PureComponent);
    var _super = _createSuper12(Rectangle2);
    function Rectangle2() {
      var _this;
      _classCallCheck12(this, Rectangle2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        totalLength: -1
      };
      _this.node = void 0;
      return _this;
    }
    _createClass12(Rectangle2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.node && this.node.getTotalLength) {
          try {
            var totalLength = this.node.getTotalLength();
            if (totalLength) {
              this.setState({
                totalLength
              });
            }
          } catch (err) {
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var _this$props = this.props, x3 = _this$props.x, y2 = _this$props.y, width = _this$props.width, height = _this$props.height, radius = _this$props.radius, className = _this$props.className;
        var totalLength = this.state.totalLength;
        var _this$props2 = this.props, animationEasing = _this$props2.animationEasing, animationDuration = _this$props2.animationDuration, animationBegin = _this$props2.animationBegin, isAnimationActive = _this$props2.isAnimationActive, isUpdateAnimationActive = _this$props2.isUpdateAnimationActive;
        if (x3 !== +x3 || y2 !== +y2 || width !== +width || height !== +height || width === 0 || height === 0) {
          return null;
        }
        var layerClass = (0, import_classnames14.default)("recharts-rectangle", className);
        if (!isUpdateAnimationActive) {
          return /* @__PURE__ */ import_react36.default.createElement("path", _extends13({}, filterProps(this.props, true), {
            className: layerClass,
            d: getRectanglePath(x3, y2, width, height, radius)
          }));
        }
        return /* @__PURE__ */ import_react36.default.createElement(es6_default, {
          canBegin: totalLength > 0,
          from: {
            width,
            height,
            x: x3,
            y: y2
          },
          to: {
            width,
            height,
            x: x3,
            y: y2
          },
          duration: animationDuration,
          animationEasing,
          isActive: isUpdateAnimationActive
        }, function(_ref3) {
          var currWidth = _ref3.width, currHeight = _ref3.height, currX = _ref3.x, currY = _ref3.y;
          return /* @__PURE__ */ import_react36.default.createElement(es6_default, {
            canBegin: totalLength > 0,
            from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
            to: "".concat(totalLength, "px 0px"),
            attributeName: "strokeDasharray",
            begin: animationBegin,
            duration: animationDuration,
            isActive: isAnimationActive,
            easing: animationEasing
          }, /* @__PURE__ */ import_react36.default.createElement("path", _extends13({}, filterProps(_this2.props, true), {
            className: layerClass,
            d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
            ref: function ref(node) {
              _this2.node = node;
            }
          })));
        });
      }
    }]);
    return Rectangle2;
  }(import_react36.PureComponent);
  Rectangle.defaultProps = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    radius: 0,
    isAnimationActive: false,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: "ease"
  };

  // node_modules/recharts/es6/shape/Dot.js
  var import_react37 = __toModule(require_react());
  var import_classnames15 = __toModule(require_classnames());
  function _typeof14(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof14 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof14 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof14(obj);
  }
  function _extends14() {
    _extends14 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends14.apply(this, arguments);
  }
  function _classCallCheck13(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties13(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass13(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties13(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties13(Constructor, staticProps);
    return Constructor;
  }
  function _inherits13(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf14(subClass, superClass);
  }
  function _setPrototypeOf14(o2, p2) {
    _setPrototypeOf14 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf14(o2, p2);
  }
  function _createSuper13(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct13();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf13(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf13(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn13(this, result);
    };
  }
  function _possibleConstructorReturn13(self2, call) {
    if (call && (_typeof14(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized13(self2);
  }
  function _assertThisInitialized13(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct13() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf13(o2) {
    _getPrototypeOf13 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf13(o2);
  }
  var Dot = /* @__PURE__ */ function(_PureComponent) {
    _inherits13(Dot2, _PureComponent);
    var _super = _createSuper13(Dot2);
    function Dot2() {
      _classCallCheck13(this, Dot2);
      return _super.apply(this, arguments);
    }
    _createClass13(Dot2, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, cx = _this$props.cx, cy = _this$props.cy, r = _this$props.r, className = _this$props.className;
        var layerClass = (0, import_classnames15.default)("recharts-dot", className);
        if (cx === +cx && cy === +cy && r === +r) {
          return /* @__PURE__ */ import_react37.default.createElement("circle", _extends14({}, filterProps(this.props), adaptEventHandlers(this.props), {
            className: layerClass,
            cx,
            cy,
            r
          }));
        }
        return null;
      }
    }]);
    return Dot2;
  }(import_react37.PureComponent);

  // node_modules/recharts/es6/shape/Cross.js
  var import_react38 = __toModule(require_react());
  var import_classnames16 = __toModule(require_classnames());
  function _typeof15(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof15 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof15 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof15(obj);
  }
  function _extends15() {
    _extends15 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends15.apply(this, arguments);
  }
  function _classCallCheck14(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties14(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass14(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties14(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties14(Constructor, staticProps);
    return Constructor;
  }
  function _inherits14(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf15(subClass, superClass);
  }
  function _setPrototypeOf15(o2, p2) {
    _setPrototypeOf15 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf15(o2, p2);
  }
  function _createSuper14(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct14();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf14(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf14(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn14(this, result);
    };
  }
  function _possibleConstructorReturn14(self2, call) {
    if (call && (_typeof15(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized14(self2);
  }
  function _assertThisInitialized14(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct14() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf14(o2) {
    _getPrototypeOf14 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf14(o2);
  }
  var Cross = /* @__PURE__ */ function(_PureComponent) {
    _inherits14(Cross2, _PureComponent);
    var _super = _createSuper14(Cross2);
    function Cross2() {
      _classCallCheck14(this, Cross2);
      return _super.apply(this, arguments);
    }
    _createClass14(Cross2, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, x3 = _this$props.x, y2 = _this$props.y, width = _this$props.width, height = _this$props.height, top = _this$props.top, left = _this$props.left, className = _this$props.className;
        if (!isNumber(x3) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || !isNumber(top) || !isNumber(left)) {
          return null;
        }
        return /* @__PURE__ */ import_react38.default.createElement("path", _extends15({}, filterProps(this.props, true), {
          className: (0, import_classnames16.default)("recharts-cross", className),
          d: Cross2.getPath(x3, y2, width, height, top, left)
        }));
      }
    }], [{
      key: "getPath",
      value: function getPath(x3, y2, width, height, top, left) {
        return "M".concat(x3, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y2, "h").concat(width);
      }
    }]);
    return Cross2;
  }(import_react38.PureComponent);
  Cross.defaultProps = {
    x: 0,
    y: 0,
    top: 0,
    left: 0,
    width: 0,
    height: 0
  };

  // node_modules/recharts/es6/cartesian/Brush.js
  var import_isFunction7 = __toModule(require_isFunction());
  var import_range2 = __toModule(require_range());
  var import_react39 = __toModule(require_react());
  var import_classnames17 = __toModule(require_classnames());

  // node_modules/recharts/es6/util/CssPrefixUtils.js
  function ownKeys16(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread16(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys16(Object(source), true).forEach(function(key) {
          _defineProperty16(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys16(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty16(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var PREFIX_LIST2 = ["Webkit", "Moz", "O", "ms"];
  var generatePrefixStyle3 = function generatePrefixStyle4(name, value2) {
    if (!name) {
      return null;
    }
    var camelName = name.replace(/(\w)/, function(v2) {
      return v2.toUpperCase();
    });
    var result = PREFIX_LIST2.reduce(function(res, entry) {
      return _objectSpread16(_objectSpread16({}, res), {}, _defineProperty16({}, entry + camelName, value2));
    }, {});
    result[name] = value2;
    return result;
  };

  // node_modules/recharts/es6/cartesian/Brush.js
  function _typeof16(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof16 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof16 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof16(obj);
  }
  function _extends16() {
    _extends16 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends16.apply(this, arguments);
  }
  function ownKeys17(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread17(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys17(Object(source), true).forEach(function(key) {
          _defineProperty17(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys17(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty17(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck15(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties15(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass15(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties15(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties15(Constructor, staticProps);
    return Constructor;
  }
  function _inherits15(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf16(subClass, superClass);
  }
  function _setPrototypeOf16(o2, p2) {
    _setPrototypeOf16 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf16(o2, p2);
  }
  function _createSuper15(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct15();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf15(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf15(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn15(this, result);
    };
  }
  function _possibleConstructorReturn15(self2, call) {
    if (call && (_typeof16(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized15(self2);
  }
  function _assertThisInitialized15(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct15() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf15(o2) {
    _getPrototypeOf15 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf15(o2);
  }
  var createScale = function createScale2(_ref3) {
    var data = _ref3.data, startIndex = _ref3.startIndex, endIndex = _ref3.endIndex, x3 = _ref3.x, width = _ref3.width, travellerWidth = _ref3.travellerWidth;
    if (!data || !data.length) {
      return {};
    }
    var len = data.length;
    var scale = point3().domain((0, import_range2.default)(0, len)).range([x3, x3 + width - travellerWidth]);
    var scaleValues = scale.domain().map(function(entry) {
      return scale(entry);
    });
    return {
      isTextActive: false,
      isSlideMoving: false,
      isTravellerMoving: false,
      startX: scale(startIndex),
      endX: scale(endIndex),
      scale,
      scaleValues
    };
  };
  var isTouch = function isTouch2(e3) {
    return e3.changedTouches && !!e3.changedTouches.length;
  };
  var Brush = /* @__PURE__ */ function(_PureComponent) {
    _inherits15(Brush2, _PureComponent);
    var _super = _createSuper15(Brush2);
    function Brush2(props) {
      var _this;
      _classCallCheck15(this, Brush2);
      _this = _super.call(this, props);
      _this.leaveTimer = void 0;
      _this.travellerDragStartHandlers = void 0;
      _this.handleDrag = function(e3) {
        if (_this.leaveTimer) {
          clearTimeout(_this.leaveTimer);
          _this.leaveTimer = null;
        }
        if (_this.state.isTravellerMoving) {
          _this.handleTravellerMove(e3);
        } else if (_this.state.isSlideMoving) {
          _this.handleSlideDrag(e3);
        }
      };
      _this.handleTouchMove = function(e3) {
        if (e3.changedTouches != null && e3.changedTouches.length > 0) {
          _this.handleDrag(e3.changedTouches[0]);
        }
      };
      _this.handleDragEnd = function() {
        _this.setState({
          isTravellerMoving: false,
          isSlideMoving: false
        });
        _this.detachDragEndListener();
      };
      _this.handleLeaveWrapper = function() {
        if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {
          _this.leaveTimer = window.setTimeout(_this.handleDragEnd, _this.props.leaveTimeOut);
        }
      };
      _this.handleEnterSlideOrTraveller = function() {
        _this.setState({
          isTextActive: true
        });
      };
      _this.handleLeaveSlideOrTraveller = function() {
        _this.setState({
          isTextActive: false
        });
      };
      _this.handleSlideDragStart = function(e3) {
        var event = isTouch(e3) ? e3.changedTouches[0] : e3;
        _this.setState({
          isTravellerMoving: false,
          isSlideMoving: true,
          slideMoveStartX: event.pageX
        });
        _this.attachDragEndListener();
      };
      _this.travellerDragStartHandlers = {
        startX: _this.handleTravellerDragStart.bind(_assertThisInitialized15(_this), "startX"),
        endX: _this.handleTravellerDragStart.bind(_assertThisInitialized15(_this), "endX")
      };
      _this.state = {};
      return _this;
    }
    _createClass15(Brush2, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.leaveTimer) {
          clearTimeout(this.leaveTimer);
          this.leaveTimer = null;
        }
        this.detachDragEndListener();
      }
    }, {
      key: "getIndex",
      value: function getIndex(_ref23) {
        var startX = _ref23.startX, endX = _ref23.endX;
        var scaleValues = this.state.scaleValues;
        var _this$props = this.props, gap = _this$props.gap, data = _this$props.data;
        var lastIndex = data.length - 1;
        var min2 = Math.min(startX, endX);
        var max2 = Math.max(startX, endX);
        var minIndex = Brush2.getIndexInRange(scaleValues, min2);
        var maxIndex = Brush2.getIndexInRange(scaleValues, max2);
        return {
          startIndex: minIndex - minIndex % gap,
          endIndex: maxIndex === lastIndex ? lastIndex : maxIndex - maxIndex % gap
        };
      }
    }, {
      key: "getTextOfTick",
      value: function getTextOfTick(index2) {
        var _this$props2 = this.props, data = _this$props2.data, tickFormatter = _this$props2.tickFormatter, dataKey = _this$props2.dataKey;
        var text = getValueByDataKey(data[index2], dataKey, index2);
        return (0, import_isFunction7.default)(tickFormatter) ? tickFormatter(text, index2) : text;
      }
    }, {
      key: "attachDragEndListener",
      value: function attachDragEndListener() {
        window.addEventListener("mouseup", this.handleDragEnd, true);
        window.addEventListener("touchend", this.handleDragEnd, true);
      }
    }, {
      key: "detachDragEndListener",
      value: function detachDragEndListener() {
        window.removeEventListener("mouseup", this.handleDragEnd, true);
        window.removeEventListener("touchend", this.handleDragEnd, true);
      }
    }, {
      key: "handleSlideDrag",
      value: function handleSlideDrag(e3) {
        var _this$state = this.state, slideMoveStartX = _this$state.slideMoveStartX, startX = _this$state.startX, endX = _this$state.endX;
        var _this$props3 = this.props, x3 = _this$props3.x, width = _this$props3.width, travellerWidth = _this$props3.travellerWidth, startIndex = _this$props3.startIndex, endIndex = _this$props3.endIndex, onChange2 = _this$props3.onChange;
        var delta = e3.pageX - slideMoveStartX;
        if (delta > 0) {
          delta = Math.min(delta, x3 + width - travellerWidth - endX, x3 + width - travellerWidth - startX);
        } else if (delta < 0) {
          delta = Math.max(delta, x3 - startX, x3 - endX);
        }
        var newIndex = this.getIndex({
          startX: startX + delta,
          endX: endX + delta
        });
        if ((newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) && onChange2) {
          onChange2(newIndex);
        }
        this.setState({
          startX: startX + delta,
          endX: endX + delta,
          slideMoveStartX: e3.pageX
        });
      }
    }, {
      key: "handleTravellerDragStart",
      value: function handleTravellerDragStart(id, e3) {
        var event = isTouch(e3) ? e3.changedTouches[0] : e3;
        this.setState({
          isSlideMoving: false,
          isTravellerMoving: true,
          movingTravellerId: id,
          brushMoveStartX: event.pageX
        });
        this.attachDragEndListener();
      }
    }, {
      key: "handleTravellerMove",
      value: function handleTravellerMove(e3) {
        var _this$setState;
        var _this$state2 = this.state, brushMoveStartX = _this$state2.brushMoveStartX, movingTravellerId = _this$state2.movingTravellerId, endX = _this$state2.endX, startX = _this$state2.startX;
        var prevValue = this.state[movingTravellerId];
        var _this$props4 = this.props, x3 = _this$props4.x, width = _this$props4.width, travellerWidth = _this$props4.travellerWidth, onChange2 = _this$props4.onChange, gap = _this$props4.gap, data = _this$props4.data;
        var params = {
          startX: this.state.startX,
          endX: this.state.endX
        };
        var delta = e3.pageX - brushMoveStartX;
        if (delta > 0) {
          delta = Math.min(delta, x3 + width - travellerWidth - prevValue);
        } else if (delta < 0) {
          delta = Math.max(delta, x3 - prevValue);
        }
        params[movingTravellerId] = prevValue + delta;
        var newIndex = this.getIndex(params);
        var startIndex = newIndex.startIndex, endIndex = newIndex.endIndex;
        var isFullGap = function isFullGap2() {
          var lastIndex = data.length - 1;
          if (movingTravellerId === "startX" && (endX > startX ? startIndex % gap === 0 : endIndex % gap === 0) || endX < startX && endIndex === lastIndex || movingTravellerId === "endX" && (endX > startX ? endIndex % gap === 0 : startIndex % gap === 0) || endX > startX && endIndex === lastIndex) {
            return true;
          }
          return false;
        };
        this.setState((_this$setState = {}, _defineProperty17(_this$setState, movingTravellerId, prevValue + delta), _defineProperty17(_this$setState, "brushMoveStartX", e3.pageX), _this$setState), function() {
          if (onChange2) {
            if (isFullGap()) {
              onChange2(newIndex);
            }
          }
        });
      }
    }, {
      key: "renderBackground",
      value: function renderBackground() {
        var _this$props5 = this.props, x3 = _this$props5.x, y2 = _this$props5.y, width = _this$props5.width, height = _this$props5.height, fill2 = _this$props5.fill, stroke = _this$props5.stroke;
        return /* @__PURE__ */ import_react39.default.createElement("rect", {
          stroke,
          fill: fill2,
          x: x3,
          y: y2,
          width,
          height
        });
      }
    }, {
      key: "renderPanorama",
      value: function renderPanorama() {
        var _this$props6 = this.props, x3 = _this$props6.x, y2 = _this$props6.y, width = _this$props6.width, height = _this$props6.height, data = _this$props6.data, children = _this$props6.children, padding = _this$props6.padding;
        var chartElement = import_react39.Children.only(children);
        if (!chartElement) {
          return null;
        }
        return /* @__PURE__ */ import_react39.default.cloneElement(chartElement, {
          x: x3,
          y: y2,
          width,
          height,
          margin: padding,
          compact: true,
          data
        });
      }
    }, {
      key: "renderTravellerLayer",
      value: function renderTravellerLayer(travellerX, id) {
        var _this$props7 = this.props, y2 = _this$props7.y, travellerWidth = _this$props7.travellerWidth, height = _this$props7.height, traveller = _this$props7.traveller;
        var x3 = Math.max(travellerX, this.props.x);
        var travellerProps = _objectSpread17(_objectSpread17({}, filterProps(this.props)), {}, {
          x: x3,
          y: y2,
          width: travellerWidth,
          height
        });
        return /* @__PURE__ */ import_react39.default.createElement(Layer, {
          className: "recharts-brush-traveller",
          onMouseEnter: this.handleEnterSlideOrTraveller,
          onMouseLeave: this.handleLeaveSlideOrTraveller,
          onMouseDown: this.travellerDragStartHandlers[id],
          onTouchStart: this.travellerDragStartHandlers[id],
          style: {
            cursor: "col-resize"
          }
        }, Brush2.renderTraveller(traveller, travellerProps));
      }
    }, {
      key: "renderSlide",
      value: function renderSlide(startX, endX) {
        var _this$props8 = this.props, y2 = _this$props8.y, height = _this$props8.height, stroke = _this$props8.stroke, travellerWidth = _this$props8.travellerWidth;
        var x3 = Math.min(startX, endX) + travellerWidth;
        var width = Math.max(Math.abs(endX - startX) - travellerWidth, 0);
        return /* @__PURE__ */ import_react39.default.createElement("rect", {
          className: "recharts-brush-slide",
          onMouseEnter: this.handleEnterSlideOrTraveller,
          onMouseLeave: this.handleLeaveSlideOrTraveller,
          onMouseDown: this.handleSlideDragStart,
          onTouchStart: this.handleSlideDragStart,
          style: {
            cursor: "move"
          },
          stroke: "none",
          fill: stroke,
          fillOpacity: 0.2,
          x: x3,
          y: y2,
          width,
          height
        });
      }
    }, {
      key: "renderText",
      value: function renderText() {
        var _this$props9 = this.props, startIndex = _this$props9.startIndex, endIndex = _this$props9.endIndex, y2 = _this$props9.y, height = _this$props9.height, travellerWidth = _this$props9.travellerWidth, stroke = _this$props9.stroke;
        var _this$state3 = this.state, startX = _this$state3.startX, endX = _this$state3.endX;
        var offset = 5;
        var attrs = {
          pointerEvents: "none",
          fill: stroke
        };
        return /* @__PURE__ */ import_react39.default.createElement(Layer, {
          className: "recharts-brush-texts"
        }, /* @__PURE__ */ import_react39.default.createElement(Text, _extends16({
          textAnchor: "end",
          verticalAnchor: "middle",
          x: Math.min(startX, endX) - offset,
          y: y2 + height / 2
        }, attrs), this.getTextOfTick(startIndex)), /* @__PURE__ */ import_react39.default.createElement(Text, _extends16({
          textAnchor: "start",
          verticalAnchor: "middle",
          x: Math.max(startX, endX) + travellerWidth + offset,
          y: y2 + height / 2
        }, attrs), this.getTextOfTick(endIndex)));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props10 = this.props, data = _this$props10.data, className = _this$props10.className, children = _this$props10.children, x3 = _this$props10.x, y2 = _this$props10.y, width = _this$props10.width, height = _this$props10.height, alwaysShowText = _this$props10.alwaysShowText;
        var _this$state4 = this.state, startX = _this$state4.startX, endX = _this$state4.endX, isTextActive = _this$state4.isTextActive, isSlideMoving = _this$state4.isSlideMoving, isTravellerMoving = _this$state4.isTravellerMoving;
        if (!data || !data.length || !isNumber(x3) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || width <= 0 || height <= 0) {
          return null;
        }
        var layerClass = (0, import_classnames17.default)("recharts-brush", className);
        var isPanoramic = import_react39.default.Children.count(children) === 1;
        var style = generatePrefixStyle3("userSelect", "none");
        return /* @__PURE__ */ import_react39.default.createElement(Layer, {
          className: layerClass,
          onMouseMove: this.handleDrag,
          onMouseLeave: this.handleLeaveWrapper,
          onTouchMove: this.handleTouchMove,
          style
        }, this.renderBackground(), isPanoramic && this.renderPanorama(), this.renderSlide(startX, endX), this.renderTravellerLayer(startX, "startX"), this.renderTravellerLayer(endX, "endX"), (isTextActive || isSlideMoving || isTravellerMoving || alwaysShowText) && this.renderText());
      }
    }], [{
      key: "renderDefaultTraveller",
      value: function renderDefaultTraveller(props) {
        var x3 = props.x, y2 = props.y, width = props.width, height = props.height, stroke = props.stroke;
        var lineY = Math.floor(y2 + height / 2) - 1;
        return /* @__PURE__ */ import_react39.default.createElement(import_react39.default.Fragment, null, /* @__PURE__ */ import_react39.default.createElement("rect", {
          x: x3,
          y: y2,
          width,
          height,
          fill: stroke,
          stroke: "none"
        }), /* @__PURE__ */ import_react39.default.createElement("line", {
          x1: x3 + 1,
          y1: lineY,
          x2: x3 + width - 1,
          y2: lineY,
          fill: "none",
          stroke: "#fff"
        }), /* @__PURE__ */ import_react39.default.createElement("line", {
          x1: x3 + 1,
          y1: lineY + 2,
          x2: x3 + width - 1,
          y2: lineY + 2,
          fill: "none",
          stroke: "#fff"
        }));
      }
    }, {
      key: "renderTraveller",
      value: function renderTraveller(option, props) {
        var rectangle;
        if (/* @__PURE__ */ import_react39.default.isValidElement(option)) {
          rectangle = /* @__PURE__ */ import_react39.default.cloneElement(option, props);
        } else if ((0, import_isFunction7.default)(option)) {
          rectangle = option(props);
        } else {
          rectangle = Brush2.renderDefaultTraveller(props);
        }
        return rectangle;
      }
    }, {
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var data = nextProps.data, width = nextProps.width, x3 = nextProps.x, travellerWidth = nextProps.travellerWidth, updateId = nextProps.updateId, startIndex = nextProps.startIndex, endIndex = nextProps.endIndex;
        if (data !== prevState.prevData || updateId !== prevState.prevUpdateId) {
          return _objectSpread17({
            prevData: data,
            prevTravellerWidth: travellerWidth,
            prevUpdateId: updateId,
            prevX: x3,
            prevWidth: width
          }, data && data.length ? createScale({
            data,
            width,
            x: x3,
            travellerWidth,
            startIndex,
            endIndex
          }) : {
            scale: null,
            scaleValues: null
          });
        }
        if (prevState.scale && (width !== prevState.prevWidth || x3 !== prevState.prevX || travellerWidth !== prevState.prevTravellerWidth)) {
          prevState.scale.range([x3, x3 + width - travellerWidth]);
          var scaleValues = prevState.scale.domain().map(function(entry) {
            return prevState.scale(entry);
          });
          return {
            prevData: data,
            prevTravellerWidth: travellerWidth,
            prevUpdateId: updateId,
            prevX: x3,
            prevWidth: width,
            startX: prevState.scale(nextProps.startIndex),
            endX: prevState.scale(nextProps.endIndex),
            scaleValues
          };
        }
        return null;
      }
    }, {
      key: "getIndexInRange",
      value: function getIndexInRange(range4, x3) {
        var len = range4.length;
        var start = 0;
        var end = len - 1;
        while (end - start > 1) {
          var middle = Math.floor((start + end) / 2);
          if (range4[middle] > x3) {
            end = middle;
          } else {
            start = middle;
          }
        }
        return x3 >= range4[end] ? end : start;
      }
    }]);
    return Brush2;
  }(import_react39.PureComponent);
  Brush.displayName = "Brush";
  Brush.defaultProps = {
    height: 40,
    travellerWidth: 5,
    gap: 1,
    fill: "#fff",
    stroke: "#666",
    padding: {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    },
    leaveTimeOut: 1e3,
    alwaysShowText: false
  };

  // node_modules/recharts/es6/cartesian/ReferenceLine.js
  var import_some = __toModule(require_some());
  var import_isFunction8 = __toModule(require_isFunction());
  var import_react40 = __toModule(require_react());
  var import_classnames18 = __toModule(require_classnames());

  // node_modules/recharts/es6/util/IfOverflowMatches.js
  var ifOverflowMatches = function ifOverflowMatches2(props, value2) {
    var alwaysShow = props.alwaysShow;
    var ifOverflow = props.ifOverflow;
    if (alwaysShow) {
      ifOverflow = "extendDomain";
    }
    return ifOverflow === value2;
  };

  // node_modules/recharts/es6/util/CartesianUtils.js
  var import_every = __toModule(require_every());
  var import_mapValues = __toModule(require_mapValues());
  function _classCallCheck16(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties16(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass16(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties16(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties16(Constructor, staticProps);
    return Constructor;
  }
  function ownKeys18(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread18(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys18(Object(source), true).forEach(function(key) {
          _defineProperty18(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys18(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty18(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var formatAxisMap = function formatAxisMap2(props, axisMap, offset, axisType, chartName) {
    var width = props.width, height = props.height, layout = props.layout, children = props.children;
    var ids = Object.keys(axisMap);
    var steps = {
      left: offset.left,
      leftMirror: offset.left,
      right: width - offset.right,
      rightMirror: width - offset.right,
      top: offset.top,
      topMirror: offset.top,
      bottom: height - offset.bottom,
      bottomMirror: height - offset.bottom
    };
    var hasBar = !!findChildByType(children, "Bar");
    return ids.reduce(function(result, id) {
      var axis = axisMap[id];
      var orientation = axis.orientation, domain = axis.domain, _axis$padding = axis.padding, padding = _axis$padding === void 0 ? {} : _axis$padding, mirror = axis.mirror, reversed = axis.reversed;
      var offsetKey = "".concat(orientation).concat(mirror ? "Mirror" : "");
      var calculatedPadding, range4, x3, y2, needSpace;
      if (axis.type === "number" && (axis.padding === "gap" || axis.padding === "no-gap")) {
        var diff = domain[1] - domain[0];
        var smallestDistanceBetweenValues = Infinity;
        var sortedValues = axis.categoricalDomain.sort();
        sortedValues.forEach(function(value2, index2) {
          if (index2 > 0) {
            smallestDistanceBetweenValues = Math.min((value2 || 0) - (sortedValues[index2 - 1] || 0), smallestDistanceBetweenValues);
          }
        });
        var smallestDistanceInPercent = smallestDistanceBetweenValues / diff;
        var rangeWidth = axis.layout === "vertical" ? offset.height : offset.width;
        if (axis.padding === "gap") {
          calculatedPadding = smallestDistanceInPercent * rangeWidth / 2;
        }
        if (axis.padding === "no-gap") {
          var gap = getPercentValue(props.barCategoryGap, smallestDistanceInPercent * rangeWidth);
          var halfBand = smallestDistanceInPercent * rangeWidth / 2;
          calculatedPadding = halfBand - gap - (halfBand - gap) / rangeWidth * gap;
        }
      }
      if (axisType === "xAxis") {
        range4 = [offset.left + (padding.left || 0) + (calculatedPadding || 0), offset.left + offset.width - (padding.right || 0) - (calculatedPadding || 0)];
      } else if (axisType === "yAxis") {
        range4 = layout === "horizontal" ? [offset.top + offset.height - (padding.bottom || 0), offset.top + (padding.top || 0)] : [offset.top + (padding.top || 0) + (calculatedPadding || 0), offset.top + offset.height - (padding.bottom || 0) - (calculatedPadding || 0)];
      } else {
        range4 = axis.range;
      }
      if (reversed) {
        range4 = [range4[1], range4[0]];
      }
      var _parseScale = parseScale(axis, chartName, hasBar), scale = _parseScale.scale, realScaleType = _parseScale.realScaleType;
      scale.domain(domain).range(range4);
      checkDomainOfScale(scale);
      var ticks2 = getTicksOfScale(scale, _objectSpread18(_objectSpread18({}, axis), {}, {
        realScaleType
      }));
      if (axisType === "xAxis") {
        needSpace = orientation === "top" && !mirror || orientation === "bottom" && mirror;
        x3 = offset.left;
        y2 = steps[offsetKey] - needSpace * axis.height;
      } else if (axisType === "yAxis") {
        needSpace = orientation === "left" && !mirror || orientation === "right" && mirror;
        x3 = steps[offsetKey] - needSpace * axis.width;
        y2 = offset.top;
      }
      var finalAxis = _objectSpread18(_objectSpread18(_objectSpread18({}, axis), ticks2), {}, {
        realScaleType,
        x: x3,
        y: y2,
        scale,
        width: axisType === "xAxis" ? offset.width : axis.width,
        height: axisType === "yAxis" ? offset.height : axis.height
      });
      finalAxis.bandSize = getBandSizeOfAxis(finalAxis, ticks2);
      if (!axis.hide && axisType === "xAxis") {
        steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.height;
      } else if (!axis.hide) {
        steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.width;
      }
      return _objectSpread18(_objectSpread18({}, result), {}, _defineProperty18({}, id, finalAxis));
    }, {});
  };
  var rectWithPoints = function rectWithPoints2(_ref3, _ref23) {
    var x1 = _ref3.x, y1 = _ref3.y;
    var x22 = _ref23.x, y2 = _ref23.y;
    return {
      x: Math.min(x1, x22),
      y: Math.min(y1, y2),
      width: Math.abs(x22 - x1),
      height: Math.abs(y2 - y1)
    };
  };
  var rectWithCoords = function rectWithCoords2(_ref3) {
    var x1 = _ref3.x1, y1 = _ref3.y1, x22 = _ref3.x2, y2 = _ref3.y2;
    return rectWithPoints({
      x: x1,
      y: y1
    }, {
      x: x22,
      y: y2
    });
  };
  var ScaleHelper = /* @__PURE__ */ function() {
    function ScaleHelper2(scale) {
      _classCallCheck16(this, ScaleHelper2);
      this.scale = void 0;
      this.scale = scale;
    }
    _createClass16(ScaleHelper2, [{
      key: "domain",
      get: function get2() {
        return this.scale.domain;
      }
    }, {
      key: "range",
      get: function get2() {
        return this.scale.range;
      }
    }, {
      key: "rangeMin",
      get: function get2() {
        return this.range()[0];
      }
    }, {
      key: "rangeMax",
      get: function get2() {
        return this.range()[1];
      }
    }, {
      key: "bandwidth",
      get: function get2() {
        return this.scale.bandwidth;
      }
    }, {
      key: "apply",
      value: function apply(value2) {
        var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref4.bandAware, position = _ref4.position;
        if (value2 === void 0) {
          return void 0;
        }
        if (position) {
          switch (position) {
            case "start": {
              return this.scale(value2);
            }
            case "middle": {
              var offset = this.bandwidth ? this.bandwidth() / 2 : 0;
              return this.scale(value2) + offset;
            }
            case "end": {
              var _offset = this.bandwidth ? this.bandwidth() : 0;
              return this.scale(value2) + _offset;
            }
            default: {
              return this.scale(value2);
            }
          }
        }
        if (bandAware) {
          var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
          return this.scale(value2) + _offset2;
        }
        return this.scale(value2);
      }
    }, {
      key: "isInRange",
      value: function isInRange(value2) {
        var range4 = this.range();
        var first = range4[0];
        var last = range4[range4.length - 1];
        return first <= last ? value2 >= first && value2 <= last : value2 >= last && value2 <= first;
      }
    }], [{
      key: "create",
      value: function create(obj) {
        return new ScaleHelper2(obj);
      }
    }]);
    return ScaleHelper2;
  }();
  ScaleHelper.EPS = 1e-4;
  var createLabeledScales = function createLabeledScales2(options2) {
    var scales = Object.keys(options2).reduce(function(res, key) {
      return _objectSpread18(_objectSpread18({}, res), {}, _defineProperty18({}, key, ScaleHelper.create(options2[key])));
    }, {});
    return _objectSpread18(_objectSpread18({}, scales), {}, {
      apply: function apply(coord) {
        var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref5.bandAware, position = _ref5.position;
        return (0, import_mapValues.default)(coord, function(value2, label) {
          return scales[label].apply(value2, {
            bandAware,
            position
          });
        });
      },
      isInRange: function isInRange(coord) {
        return (0, import_every.default)(coord, function(value2, label) {
          return scales[label].isInRange(value2);
        });
      }
    });
  };

  // node_modules/recharts/es6/cartesian/ReferenceLine.js
  function ownKeys19(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread19(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys19(Object(source), true).forEach(function(key) {
          _defineProperty19(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys19(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty19(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _slicedToArray7(arr, i3) {
    return _arrayWithHoles8(arr) || _iterableToArrayLimit7(arr, i3) || _unsupportedIterableToArray15(arr, i3) || _nonIterableRest8();
  }
  function _nonIterableRest8() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray15(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray15(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray15(o2, minLen);
  }
  function _arrayLikeToArray15(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function _iterableToArrayLimit7(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles8(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _extends17() {
    _extends17 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends17.apply(this, arguments);
  }
  var renderLine = function renderLine2(option, props) {
    var line;
    if (/* @__PURE__ */ import_react40.default.isValidElement(option)) {
      line = /* @__PURE__ */ import_react40.default.cloneElement(option, props);
    } else if ((0, import_isFunction8.default)(option)) {
      line = option(props);
    } else {
      line = /* @__PURE__ */ import_react40.default.createElement("line", _extends17({}, props, {
        className: "recharts-reference-line-line"
      }));
    }
    return line;
  };
  var getEndPoints = function getEndPoints2(scales, isFixedX, isFixedY, isSegment, props) {
    var _props$viewBox = props.viewBox, x3 = _props$viewBox.x, y2 = _props$viewBox.y, width = _props$viewBox.width, height = _props$viewBox.height, position = props.position;
    if (isFixedY) {
      var yCoord = props.y, orientation = props.yAxis.orientation;
      var coord = scales.y.apply(yCoord, {
        position
      });
      if (ifOverflowMatches(props, "discard") && !scales.y.isInRange(coord)) {
        return null;
      }
      var points = [{
        x: x3 + width,
        y: coord
      }, {
        x: x3,
        y: coord
      }];
      return orientation === "left" ? points.reverse() : points;
    }
    if (isFixedX) {
      var xCoord = props.x, _orientation = props.xAxis.orientation;
      var _coord = scales.x.apply(xCoord, {
        position
      });
      if (ifOverflowMatches(props, "discard") && !scales.x.isInRange(_coord)) {
        return null;
      }
      var _points = [{
        x: _coord,
        y: y2 + height
      }, {
        x: _coord,
        y: y2
      }];
      return _orientation === "top" ? _points.reverse() : _points;
    }
    if (isSegment) {
      var segment = props.segment;
      var _points2 = segment.map(function(p2) {
        return scales.apply(p2, {
          position
        });
      });
      if (ifOverflowMatches(props, "discard") && (0, import_some.default)(_points2, function(p2) {
        return !scales.isInRange(p2);
      })) {
        return null;
      }
      return _points2;
    }
    return null;
  };
  function ReferenceLine(props) {
    var fixedX = props.x, fixedY = props.y, segment = props.segment, xAxis = props.xAxis, yAxis = props.yAxis, shape = props.shape, className = props.className, alwaysShow = props.alwaysShow, clipPathId = props.clipPathId;
    warn3(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
    var scales = createLabeledScales({
      x: xAxis.scale,
      y: yAxis.scale
    });
    var isX = isNumOrStr(fixedX);
    var isY = isNumOrStr(fixedY);
    var isSegment = segment && segment.length === 2;
    var endPoints = getEndPoints(scales, isX, isY, isSegment, props);
    if (!endPoints) {
      return null;
    }
    var _endPoints = _slicedToArray7(endPoints, 2), _endPoints$ = _endPoints[0], x1 = _endPoints$.x, y1 = _endPoints$.y, _endPoints$2 = _endPoints[1], x22 = _endPoints$2.x, y2 = _endPoints$2.y;
    var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
    var lineProps = _objectSpread19(_objectSpread19({
      clipPath
    }, filterProps(props, true)), {}, {
      x1,
      y1,
      x2: x22,
      y2
    });
    return /* @__PURE__ */ import_react40.default.createElement(Layer, {
      className: (0, import_classnames18.default)("recharts-reference-line", className)
    }, renderLine(shape, lineProps), Label.renderCallByParent(props, rectWithCoords({
      x1,
      y1,
      x2: x22,
      y2
    })));
  }
  ReferenceLine.displayName = "ReferenceLine";
  ReferenceLine.defaultProps = {
    isFront: false,
    ifOverflow: "discard",
    xAxisId: 0,
    yAxisId: 0,
    fill: "none",
    stroke: "#ccc",
    fillOpacity: 1,
    strokeWidth: 1,
    position: "middle"
  };

  // node_modules/recharts/es6/cartesian/ReferenceDot.js
  var import_isFunction9 = __toModule(require_isFunction());
  var import_react41 = __toModule(require_react());
  var import_classnames19 = __toModule(require_classnames());
  function _extends18() {
    _extends18 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends18.apply(this, arguments);
  }
  function ownKeys20(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread20(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys20(Object(source), true).forEach(function(key) {
          _defineProperty20(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys20(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty20(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var getCoordinate = function getCoordinate2(props) {
    var x3 = props.x, y2 = props.y, xAxis = props.xAxis, yAxis = props.yAxis;
    var scales = createLabeledScales({
      x: xAxis.scale,
      y: yAxis.scale
    });
    var result = scales.apply({
      x: x3,
      y: y2
    }, {
      bandAware: true
    });
    if (ifOverflowMatches(props, "discard") && !scales.isInRange(result)) {
      return null;
    }
    return result;
  };
  function ReferenceDot(props) {
    var x3 = props.x, y2 = props.y, r = props.r, alwaysShow = props.alwaysShow, clipPathId = props.clipPathId;
    var isX = isNumOrStr(x3);
    var isY = isNumOrStr(y2);
    warn3(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
    if (!isX || !isY) {
      return null;
    }
    var coordinate = getCoordinate(props);
    if (!coordinate) {
      return null;
    }
    var cx = coordinate.x, cy = coordinate.y;
    var shape = props.shape, className = props.className;
    var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
    var dotProps = _objectSpread20(_objectSpread20({
      clipPath
    }, filterProps(props, true)), {}, {
      cx,
      cy
    });
    return /* @__PURE__ */ import_react41.default.createElement(Layer, {
      className: (0, import_classnames19.default)("recharts-reference-dot", className)
    }, ReferenceDot.renderDot(shape, dotProps), Label.renderCallByParent(props, {
      x: cx - r,
      y: cy - r,
      width: 2 * r,
      height: 2 * r
    }));
  }
  ReferenceDot.displayName = "ReferenceDot";
  ReferenceDot.defaultProps = {
    isFront: false,
    ifOverflow: "discard",
    xAxisId: 0,
    yAxisId: 0,
    r: 10,
    fill: "#fff",
    stroke: "#ccc",
    fillOpacity: 1,
    strokeWidth: 1
  };
  ReferenceDot.renderDot = function(option, props) {
    var dot;
    if (/* @__PURE__ */ import_react41.default.isValidElement(option)) {
      dot = /* @__PURE__ */ import_react41.default.cloneElement(option, props);
    } else if ((0, import_isFunction9.default)(option)) {
      dot = option(props);
    } else {
      dot = /* @__PURE__ */ import_react41.default.createElement(Dot, _extends18({}, props, {
        cx: props.cx,
        cy: props.cy,
        className: "recharts-reference-dot-dot"
      }));
    }
    return dot;
  };

  // node_modules/recharts/es6/cartesian/ReferenceArea.js
  var import_isFunction10 = __toModule(require_isFunction());
  var import_react42 = __toModule(require_react());
  var import_classnames20 = __toModule(require_classnames());
  function _extends19() {
    _extends19 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends19.apply(this, arguments);
  }
  function ownKeys21(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread21(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys21(Object(source), true).forEach(function(key) {
          _defineProperty21(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys21(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty21(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var getRect = function getRect2(hasX1, hasX2, hasY1, hasY2, props) {
    var xValue1 = props.x1, xValue2 = props.x2, yValue1 = props.y1, yValue2 = props.y2, xAxis = props.xAxis, yAxis = props.yAxis;
    if (!xAxis || !yAxis)
      return null;
    var scales = createLabeledScales({
      x: xAxis.scale,
      y: yAxis.scale
    });
    var p1 = {
      x: hasX1 ? scales.x.apply(xValue1, {
        position: "start"
      }) : scales.x.rangeMin,
      y: hasY1 ? scales.y.apply(yValue1, {
        position: "start"
      }) : scales.y.rangeMin
    };
    var p2 = {
      x: hasX2 ? scales.x.apply(xValue2, {
        position: "end"
      }) : scales.x.rangeMax,
      y: hasY2 ? scales.y.apply(yValue2, {
        position: "end"
      }) : scales.y.rangeMax
    };
    if (ifOverflowMatches(props, "discard") && (!scales.isInRange(p1) || !scales.isInRange(p2))) {
      return null;
    }
    return rectWithPoints(p1, p2);
  };
  function ReferenceArea(props) {
    var x1 = props.x1, x22 = props.x2, y1 = props.y1, y2 = props.y2, className = props.className, alwaysShow = props.alwaysShow, clipPathId = props.clipPathId;
    warn3(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
    var hasX1 = isNumOrStr(x1);
    var hasX2 = isNumOrStr(x22);
    var hasY1 = isNumOrStr(y1);
    var hasY2 = isNumOrStr(y2);
    var shape = props.shape;
    if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {
      return null;
    }
    var rect = getRect(hasX1, hasX2, hasY1, hasY2, props);
    if (!rect && !shape) {
      return null;
    }
    var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
    return /* @__PURE__ */ import_react42.default.createElement(Layer, {
      className: (0, import_classnames20.default)("recharts-reference-area", className)
    }, ReferenceArea.renderRect(shape, _objectSpread21(_objectSpread21({
      clipPath
    }, filterProps(props, true)), rect)), Label.renderCallByParent(props, rect));
  }
  ReferenceArea.displayName = "ReferenceArea";
  ReferenceArea.defaultProps = {
    isFront: false,
    ifOverflow: "discard",
    xAxisId: 0,
    yAxisId: 0,
    r: 10,
    fill: "#ccc",
    fillOpacity: 0.5,
    stroke: "none",
    strokeWidth: 1
  };
  ReferenceArea.renderRect = function(option, props) {
    var rect;
    if (/* @__PURE__ */ import_react42.default.isValidElement(option)) {
      rect = /* @__PURE__ */ import_react42.default.cloneElement(option, props);
    } else if ((0, import_isFunction10.default)(option)) {
      rect = option(props);
    } else {
      rect = /* @__PURE__ */ import_react42.default.createElement(Rectangle, _extends19({}, props, {
        className: "recharts-reference-area-rect"
      }));
    }
    return rect;
  };

  // node_modules/recharts/es6/cartesian/CartesianAxis.js
  var import_get4 = __toModule(require_get());
  var import_isFunction11 = __toModule(require_isFunction());
  var import_react43 = __toModule(require_react());
  var import_classnames21 = __toModule(require_classnames());
  function _typeof17(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof17 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof17 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof17(obj);
  }
  function _extends20() {
    _extends20 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends20.apply(this, arguments);
  }
  function ownKeys22(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread22(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys22(Object(source), true).forEach(function(key) {
          _defineProperty22(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys22(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty22(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _objectWithoutProperties9(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose10(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose10(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _classCallCheck17(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties17(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass17(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties17(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties17(Constructor, staticProps);
    return Constructor;
  }
  function _inherits16(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf17(subClass, superClass);
  }
  function _setPrototypeOf17(o2, p2) {
    _setPrototypeOf17 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf17(o2, p2);
  }
  function _createSuper16(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct16();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf16(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf16(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn16(this, result);
    };
  }
  function _possibleConstructorReturn16(self2, call) {
    if (call && (_typeof17(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized16(self2);
  }
  function _assertThisInitialized16(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct16() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf16(o2) {
    _getPrototypeOf16 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf16(o2);
  }
  var CartesianAxis = /* @__PURE__ */ function(_Component) {
    _inherits16(CartesianAxis2, _Component);
    var _super = _createSuper16(CartesianAxis2);
    function CartesianAxis2() {
      _classCallCheck17(this, CartesianAxis2);
      return _super.apply(this, arguments);
    }
    _createClass17(CartesianAxis2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(_ref3) {
        var viewBox = _ref3.viewBox, restProps = _objectWithoutProperties9(_ref3, ["viewBox"]);
        var _this$props = this.props, viewBoxOld = _this$props.viewBox, restPropsOld = _objectWithoutProperties9(_this$props, ["viewBox"]);
        return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld);
      }
    }, {
      key: "getTickLineCoord",
      value: function getTickLineCoord(data) {
        var _this$props2 = this.props, x3 = _this$props2.x, y2 = _this$props2.y, width = _this$props2.width, height = _this$props2.height, orientation = _this$props2.orientation, tickSize = _this$props2.tickSize, mirror = _this$props2.mirror, tickMargin = _this$props2.tickMargin;
        var x1, x22, y1, y22, tx, ty;
        var sign2 = mirror ? -1 : 1;
        var finalTickSize = data.tickSize || tickSize;
        var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;
        switch (orientation) {
          case "top":
            x1 = x22 = data.coordinate;
            y22 = y2 + +!mirror * height;
            y1 = y22 - sign2 * finalTickSize;
            ty = y1 - sign2 * tickMargin;
            tx = tickCoord;
            break;
          case "left":
            y1 = y22 = data.coordinate;
            x22 = x3 + +!mirror * width;
            x1 = x22 - sign2 * finalTickSize;
            tx = x1 - sign2 * tickMargin;
            ty = tickCoord;
            break;
          case "right":
            y1 = y22 = data.coordinate;
            x22 = x3 + +mirror * width;
            x1 = x22 + sign2 * finalTickSize;
            tx = x1 + sign2 * tickMargin;
            ty = tickCoord;
            break;
          default:
            x1 = x22 = data.coordinate;
            y22 = y2 + +mirror * height;
            y1 = y22 + sign2 * finalTickSize;
            ty = y1 + sign2 * tickMargin;
            tx = tickCoord;
            break;
        }
        return {
          line: {
            x1,
            y1,
            x2: x22,
            y2: y22
          },
          tick: {
            x: tx,
            y: ty
          }
        };
      }
    }, {
      key: "getTickTextAnchor",
      value: function getTickTextAnchor() {
        var _this$props3 = this.props, orientation = _this$props3.orientation, mirror = _this$props3.mirror;
        var textAnchor;
        switch (orientation) {
          case "left":
            textAnchor = mirror ? "start" : "end";
            break;
          case "right":
            textAnchor = mirror ? "end" : "start";
            break;
          default:
            textAnchor = "middle";
            break;
        }
        return textAnchor;
      }
    }, {
      key: "getTickVerticalAnchor",
      value: function getTickVerticalAnchor() {
        var _this$props4 = this.props, orientation = _this$props4.orientation, mirror = _this$props4.mirror;
        var verticalAnchor = "end";
        switch (orientation) {
          case "left":
          case "right":
            verticalAnchor = "middle";
            break;
          case "top":
            verticalAnchor = mirror ? "start" : "end";
            break;
          default:
            verticalAnchor = mirror ? "end" : "start";
            break;
        }
        return verticalAnchor;
      }
    }, {
      key: "renderAxisLine",
      value: function renderAxisLine() {
        var _this$props5 = this.props, x3 = _this$props5.x, y2 = _this$props5.y, width = _this$props5.width, height = _this$props5.height, orientation = _this$props5.orientation, mirror = _this$props5.mirror, axisLine = _this$props5.axisLine;
        var props = _objectSpread22(_objectSpread22(_objectSpread22({}, filterProps(this.props)), filterProps(axisLine)), {}, {
          fill: "none"
        });
        if (orientation === "top" || orientation === "bottom") {
          var needHeight = +(orientation === "top" && !mirror || orientation === "bottom" && mirror);
          props = _objectSpread22(_objectSpread22({}, props), {}, {
            x1: x3,
            y1: y2 + needHeight * height,
            x2: x3 + width,
            y2: y2 + needHeight * height
          });
        } else {
          var needWidth = +(orientation === "left" && !mirror || orientation === "right" && mirror);
          props = _objectSpread22(_objectSpread22({}, props), {}, {
            x1: x3 + needWidth * width,
            y1: y2,
            x2: x3 + needWidth * width,
            y2: y2 + height
          });
        }
        return /* @__PURE__ */ import_react43.default.createElement("line", _extends20({}, props, {
          className: (0, import_classnames21.default)("recharts-cartesian-axis-line", (0, import_get4.default)(axisLine, "className"))
        }));
      }
    }, {
      key: "renderTicks",
      value: function renderTicks(ticks2) {
        var _this = this;
        var _this$props6 = this.props, tickLine = _this$props6.tickLine, stroke = _this$props6.stroke, tick = _this$props6.tick, tickFormatter = _this$props6.tickFormatter, unit2 = _this$props6.unit;
        var finalTicks = CartesianAxis2.getTicks(_objectSpread22(_objectSpread22({}, this.props), {}, {
          ticks: ticks2
        }));
        var textAnchor = this.getTickTextAnchor();
        var verticalAnchor = this.getTickVerticalAnchor();
        var axisProps = filterProps(this.props);
        var customTickProps = filterProps(tick);
        var tickLineProps = _objectSpread22(_objectSpread22({}, axisProps), {}, {
          fill: "none"
        }, filterProps(tickLine));
        var items = finalTicks.map(function(entry, i3) {
          var _this$getTickLineCoor = _this.getTickLineCoord(entry), lineCoord = _this$getTickLineCoor.line, tickCoord = _this$getTickLineCoor.tick;
          var tickProps = _objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22({
            textAnchor,
            verticalAnchor
          }, axisProps), {}, {
            stroke: "none",
            fill: stroke
          }, customTickProps), tickCoord), {}, {
            index: i3,
            payload: entry,
            visibleTicksCount: finalTicks.length,
            tickFormatter
          });
          return /* @__PURE__ */ import_react43.default.createElement(Layer, _extends20({
            className: "recharts-cartesian-axis-tick",
            key: "tick-".concat(i3)
          }, adaptEventsOfChild(_this.props, entry, i3)), tickLine && /* @__PURE__ */ import_react43.default.createElement("line", _extends20({}, tickLineProps, lineCoord, {
            className: (0, import_classnames21.default)("recharts-cartesian-axis-tick-line", (0, import_get4.default)(tickLine, "className"))
          })), tick && CartesianAxis2.renderTickItem(tick, tickProps, "".concat((0, import_isFunction11.default)(tickFormatter) ? tickFormatter(entry.value, i3) : entry.value).concat(unit2 || "")));
        });
        return /* @__PURE__ */ import_react43.default.createElement("g", {
          className: "recharts-cartesian-axis-ticks"
        }, items);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props7 = this.props, axisLine = _this$props7.axisLine, width = _this$props7.width, height = _this$props7.height, ticksGenerator = _this$props7.ticksGenerator, className = _this$props7.className, hide = _this$props7.hide;
        if (hide) {
          return null;
        }
        var _this$props8 = this.props, ticks2 = _this$props8.ticks, noTicksProps = _objectWithoutProperties9(_this$props8, ["ticks"]);
        var finalTicks = ticks2;
        if ((0, import_isFunction11.default)(ticksGenerator)) {
          finalTicks = ticks2 && ticks2.length > 0 ? ticksGenerator(this.props) : ticksGenerator(noTicksProps);
        }
        if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {
          return null;
        }
        return /* @__PURE__ */ import_react43.default.createElement(Layer, {
          className: (0, import_classnames21.default)("recharts-cartesian-axis", className)
        }, axisLine && this.renderAxisLine(), this.renderTicks(finalTicks), Label.renderCallByParent(this.props));
      }
    }], [{
      key: "getTicks",
      value: function getTicks(props) {
        var tick = props.tick, ticks2 = props.ticks, viewBox = props.viewBox, minTickGap = props.minTickGap, orientation = props.orientation, interval = props.interval, tickFormatter = props.tickFormatter, unit2 = props.unit;
        if (!ticks2 || !ticks2.length || !tick) {
          return [];
        }
        if (isNumber(interval) || Global.isSsr) {
          return CartesianAxis2.getNumberIntervalTicks(ticks2, typeof interval === "number" && isNumber(interval) ? interval : 0);
        }
        if (interval === "preserveStartEnd") {
          return CartesianAxis2.getTicksStart({
            ticks: ticks2,
            tickFormatter,
            viewBox,
            orientation,
            minTickGap,
            unit: unit2
          }, true);
        }
        if (interval === "preserveStart") {
          return CartesianAxis2.getTicksStart({
            ticks: ticks2,
            tickFormatter,
            viewBox,
            orientation,
            minTickGap,
            unit: unit2
          });
        }
        return CartesianAxis2.getTicksEnd({
          ticks: ticks2,
          tickFormatter,
          viewBox,
          orientation,
          minTickGap,
          unit: unit2
        });
      }
    }, {
      key: "getNumberIntervalTicks",
      value: function getNumberIntervalTicks(ticks2, interval) {
        return ticks2.filter(function(entry, i3) {
          return i3 % (interval + 1) === 0;
        });
      }
    }, {
      key: "getTicksStart",
      value: function getTicksStart(_ref23, preserveEnd) {
        var ticks2 = _ref23.ticks, tickFormatter = _ref23.tickFormatter, viewBox = _ref23.viewBox, orientation = _ref23.orientation, minTickGap = _ref23.minTickGap, unit2 = _ref23.unit;
        var x3 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
        var sizeKey = orientation === "top" || orientation === "bottom" ? "width" : "height";
        var result = (ticks2 || []).slice();
        var unitSize = unit2 && sizeKey === "width" ? getStringSize(unit2)[sizeKey] : 0;
        var len = result.length;
        var sign2 = len >= 2 ? mathSign(result[1].coordinate - result[0].coordinate) : 1;
        var start, end;
        if (sign2 === 1) {
          start = sizeKey === "width" ? x3 : y2;
          end = sizeKey === "width" ? x3 + width : y2 + height;
        } else {
          start = sizeKey === "width" ? x3 + width : y2 + height;
          end = sizeKey === "width" ? x3 : y2;
        }
        if (preserveEnd) {
          var tail = ticks2[len - 1];
          var tailContent = (0, import_isFunction11.default)(tickFormatter) ? tickFormatter(tail.value, len - 1) : tail.value;
          var tailSize = getStringSize(tailContent)[sizeKey] + unitSize;
          var tailGap = sign2 * (tail.coordinate + sign2 * tailSize / 2 - end);
          result[len - 1] = tail = _objectSpread22(_objectSpread22({}, tail), {}, {
            tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign2 : tail.coordinate
          });
          var isTailShow = sign2 * (tail.tickCoord - sign2 * tailSize / 2 - start) >= 0 && sign2 * (tail.tickCoord + sign2 * tailSize / 2 - end) <= 0;
          if (isTailShow) {
            end = tail.tickCoord - sign2 * (tailSize / 2 + minTickGap);
            result[len - 1] = _objectSpread22(_objectSpread22({}, tail), {}, {
              isShow: true
            });
          }
        }
        var count = preserveEnd ? len - 1 : len;
        for (var i3 = 0; i3 < count; i3++) {
          var entry = result[i3];
          var content = (0, import_isFunction11.default)(tickFormatter) ? tickFormatter(entry.value, i3) : entry.value;
          var size = getStringSize(content)[sizeKey] + unitSize;
          if (i3 === 0) {
            var gap = sign2 * (entry.coordinate - sign2 * size / 2 - start);
            result[i3] = entry = _objectSpread22(_objectSpread22({}, entry), {}, {
              tickCoord: gap < 0 ? entry.coordinate - gap * sign2 : entry.coordinate
            });
          } else {
            result[i3] = entry = _objectSpread22(_objectSpread22({}, entry), {}, {
              tickCoord: entry.coordinate
            });
          }
          var isShow = sign2 * (entry.tickCoord - sign2 * size / 2 - start) >= 0 && sign2 * (entry.tickCoord + sign2 * size / 2 - end) <= 0;
          if (isShow) {
            start = entry.tickCoord + sign2 * (size / 2 + minTickGap);
            result[i3] = _objectSpread22(_objectSpread22({}, entry), {}, {
              isShow: true
            });
          }
        }
        return result.filter(function(entry2) {
          return entry2.isShow;
        });
      }
    }, {
      key: "getTicksEnd",
      value: function getTicksEnd(_ref3) {
        var ticks2 = _ref3.ticks, tickFormatter = _ref3.tickFormatter, viewBox = _ref3.viewBox, orientation = _ref3.orientation, minTickGap = _ref3.minTickGap, unit2 = _ref3.unit;
        var x3 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
        var sizeKey = orientation === "top" || orientation === "bottom" ? "width" : "height";
        var unitSize = unit2 && sizeKey === "width" ? getStringSize(unit2)[sizeKey] : 0;
        var result = (ticks2 || []).slice();
        var len = result.length;
        var sign2 = len >= 2 ? mathSign(result[1].coordinate - result[0].coordinate) : 1;
        var start, end;
        if (sign2 === 1) {
          start = sizeKey === "width" ? x3 : y2;
          end = sizeKey === "width" ? x3 + width : y2 + height;
        } else {
          start = sizeKey === "width" ? x3 + width : y2 + height;
          end = sizeKey === "width" ? x3 : y2;
        }
        for (var i3 = len - 1; i3 >= 0; i3--) {
          var entry = result[i3];
          var content = (0, import_isFunction11.default)(tickFormatter) ? tickFormatter(entry.value, len - i3 - 1) : entry.value;
          var size = getStringSize(content)[sizeKey] + unitSize;
          if (i3 === len - 1) {
            var gap = sign2 * (entry.coordinate + sign2 * size / 2 - end);
            result[i3] = entry = _objectSpread22(_objectSpread22({}, entry), {}, {
              tickCoord: gap > 0 ? entry.coordinate - gap * sign2 : entry.coordinate
            });
          } else {
            result[i3] = entry = _objectSpread22(_objectSpread22({}, entry), {}, {
              tickCoord: entry.coordinate
            });
          }
          var isShow = sign2 * (entry.tickCoord - sign2 * size / 2 - start) >= 0 && sign2 * (entry.tickCoord + sign2 * size / 2 - end) <= 0;
          if (isShow) {
            end = entry.tickCoord - sign2 * (size / 2 + minTickGap);
            result[i3] = _objectSpread22(_objectSpread22({}, entry), {}, {
              isShow: true
            });
          }
        }
        return result.filter(function(entry2) {
          return entry2.isShow;
        });
      }
    }, {
      key: "renderTickItem",
      value: function renderTickItem(option, props, value2) {
        var tickItem;
        if (/* @__PURE__ */ import_react43.default.isValidElement(option)) {
          tickItem = /* @__PURE__ */ import_react43.default.cloneElement(option, props);
        } else if ((0, import_isFunction11.default)(option)) {
          tickItem = option(props);
        } else {
          tickItem = /* @__PURE__ */ import_react43.default.createElement(Text, _extends20({}, props, {
            className: "recharts-cartesian-axis-tick-value"
          }), value2);
        }
        return tickItem;
      }
    }]);
    return CartesianAxis2;
  }(import_react43.Component);
  CartesianAxis.displayName = "CartesianAxis";
  CartesianAxis.defaultProps = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    viewBox: {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    orientation: "bottom",
    ticks: [],
    stroke: "#666",
    tickLine: true,
    axisLine: true,
    tick: true,
    mirror: false,
    minTickGap: 5,
    tickSize: 6,
    tickMargin: 2,
    interval: "preserveEnd"
  };

  // node_modules/recharts/es6/cartesian/Area.js
  var import_isEqual2 = __toModule(require_isEqual());
  var import_isNaN3 = __toModule(require_isNaN());
  var import_max3 = __toModule(require_max());
  var import_isFunction12 = __toModule(require_isFunction());
  var import_get5 = __toModule(require_get());
  var import_isNil9 = __toModule(require_isNil());
  var import_isArray7 = __toModule(require_isArray());
  var import_react44 = __toModule(require_react());
  var import_classnames22 = __toModule(require_classnames());
  function _typeof18(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof18 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof18 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof18(obj);
  }
  function _objectWithoutProperties10(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose11(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose11(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends21() {
    _extends21 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends21.apply(this, arguments);
  }
  function ownKeys23(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread23(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys23(Object(source), true).forEach(function(key) {
          _defineProperty23(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys23(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty23(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function _classCallCheck18(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties18(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass18(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties18(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties18(Constructor, staticProps);
    return Constructor;
  }
  function _inherits17(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf18(subClass, superClass);
  }
  function _setPrototypeOf18(o2, p2) {
    _setPrototypeOf18 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf18(o2, p2);
  }
  function _createSuper17(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct17();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf17(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf17(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn17(this, result);
    };
  }
  function _possibleConstructorReturn17(self2, call) {
    if (call && (_typeof18(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized17(self2);
  }
  function _assertThisInitialized17(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct17() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf17(o2) {
    _getPrototypeOf17 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf17(o2);
  }
  var Area = /* @__PURE__ */ function(_PureComponent) {
    _inherits17(Area2, _PureComponent);
    var _super = _createSuper17(Area2);
    function Area2() {
      var _this;
      _classCallCheck18(this, Area2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        isAnimationFinished: true
      };
      _this.id = uniqueId("recharts-area-");
      _this.handleAnimationEnd = function() {
        var onAnimationEnd2 = _this.props.onAnimationEnd;
        _this.setState({
          isAnimationFinished: true
        });
        if ((0, import_isFunction12.default)(onAnimationEnd2)) {
          onAnimationEnd2();
        }
      };
      _this.handleAnimationStart = function() {
        var onAnimationStart2 = _this.props.onAnimationStart;
        _this.setState({
          isAnimationFinished: false
        });
        if ((0, import_isFunction12.default)(onAnimationStart2)) {
          onAnimationStart2();
        }
      };
      return _this;
    }
    _createClass18(Area2, [{
      key: "renderDots",
      value: function renderDots(needClip, clipPathId) {
        var isAnimationActive = this.props.isAnimationActive;
        var isAnimationFinished = this.state.isAnimationFinished;
        if (isAnimationActive && !isAnimationFinished) {
          return null;
        }
        var _this$props = this.props, dot = _this$props.dot, points = _this$props.points, dataKey = _this$props.dataKey;
        var areaProps = filterProps(this.props);
        var customDotProps = filterProps(dot, true);
        var dots = points.map(function(entry, i3) {
          var dotProps = _objectSpread23(_objectSpread23(_objectSpread23({
            key: "dot-".concat(i3),
            r: 3
          }, areaProps), customDotProps), {}, {
            dataKey,
            cx: entry.x,
            cy: entry.y,
            index: i3,
            value: entry.value,
            payload: entry.payload
          });
          return Area2.renderDotItem(dot, dotProps);
        });
        var dotsProps = {
          clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
        };
        return /* @__PURE__ */ import_react44.default.createElement(Layer, _extends21({
          className: "recharts-area-dots"
        }, dotsProps), dots);
      }
    }, {
      key: "renderHorizontalRect",
      value: function renderHorizontalRect(alpha3) {
        var _this$props2 = this.props, baseLine = _this$props2.baseLine, points = _this$props2.points, strokeWidth = _this$props2.strokeWidth;
        var startX = points[0].x;
        var endX = points[points.length - 1].x;
        var width = alpha3 * Math.abs(startX - endX);
        var maxY = (0, import_max3.default)(points.map(function(entry) {
          return entry.y || 0;
        }));
        if (isNumber(baseLine) && typeof baseLine === "number") {
          maxY = Math.max(baseLine, maxY);
        } else if (baseLine && (0, import_isArray7.default)(baseLine) && baseLine.length) {
          maxY = Math.max((0, import_max3.default)(baseLine.map(function(entry) {
            return entry.y || 0;
          })), maxY);
        }
        if (isNumber(maxY)) {
          return /* @__PURE__ */ import_react44.default.createElement("rect", {
            x: startX < endX ? startX : startX - width,
            y: 0,
            width,
            height: Math.floor(maxY + (strokeWidth ? parseInt("".concat(strokeWidth), 10) : 1))
          });
        }
        return null;
      }
    }, {
      key: "renderVerticalRect",
      value: function renderVerticalRect(alpha3) {
        var _this$props3 = this.props, baseLine = _this$props3.baseLine, points = _this$props3.points, strokeWidth = _this$props3.strokeWidth;
        var startY = points[0].y;
        var endY = points[points.length - 1].y;
        var height = alpha3 * Math.abs(startY - endY);
        var maxX = (0, import_max3.default)(points.map(function(entry) {
          return entry.x || 0;
        }));
        if (isNumber(baseLine) && typeof baseLine === "number") {
          maxX = Math.max(baseLine, maxX);
        } else if (baseLine && (0, import_isArray7.default)(baseLine) && baseLine.length) {
          maxX = Math.max((0, import_max3.default)(baseLine.map(function(entry) {
            return entry.x || 0;
          })), maxX);
        }
        if (isNumber(maxX)) {
          return /* @__PURE__ */ import_react44.default.createElement("rect", {
            x: 0,
            y: startY < endY ? startY : startY - height,
            width: maxX + (strokeWidth ? parseInt("".concat(strokeWidth), 10) : 1),
            height: Math.floor(height)
          });
        }
        return null;
      }
    }, {
      key: "renderClipRect",
      value: function renderClipRect(alpha3) {
        var layout = this.props.layout;
        if (layout === "vertical") {
          return this.renderVerticalRect(alpha3);
        }
        return this.renderHorizontalRect(alpha3);
      }
    }, {
      key: "renderAreaStatically",
      value: function renderAreaStatically(points, baseLine, needClip, clipPathId) {
        var _this$props4 = this.props, layout = _this$props4.layout, type = _this$props4.type, stroke = _this$props4.stroke, connectNulls = _this$props4.connectNulls, isRange = _this$props4.isRange, ref = _this$props4.ref, others = _objectWithoutProperties10(_this$props4, ["layout", "type", "stroke", "connectNulls", "isRange", "ref"]);
        return /* @__PURE__ */ import_react44.default.createElement(Layer, {
          clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
        }, /* @__PURE__ */ import_react44.default.createElement(Curve, _extends21({}, filterProps(others, true), {
          points,
          connectNulls,
          type,
          baseLine,
          layout,
          stroke: "none",
          className: "recharts-area-area"
        })), stroke !== "none" && /* @__PURE__ */ import_react44.default.createElement(Curve, _extends21({}, filterProps(this.props), {
          className: "recharts-area-curve",
          layout,
          type,
          connectNulls,
          fill: "none",
          points
        })), stroke !== "none" && isRange && /* @__PURE__ */ import_react44.default.createElement(Curve, _extends21({}, filterProps(this.props), {
          className: "recharts-area-curve",
          layout,
          type,
          connectNulls,
          fill: "none",
          points: baseLine
        })));
      }
    }, {
      key: "renderAreaWithAnimation",
      value: function renderAreaWithAnimation(needClip, clipPathId) {
        var _this2 = this;
        var _this$props5 = this.props, points = _this$props5.points, baseLine = _this$props5.baseLine, isAnimationActive = _this$props5.isAnimationActive, animationBegin = _this$props5.animationBegin, animationDuration = _this$props5.animationDuration, animationEasing = _this$props5.animationEasing, animationId = _this$props5.animationId;
        var _this$state = this.state, prevPoints = _this$state.prevPoints, prevBaseLine = _this$state.prevBaseLine;
        return /* @__PURE__ */ import_react44.default.createElement(es6_default, {
          begin: animationBegin,
          duration: animationDuration,
          isActive: isAnimationActive,
          easing: animationEasing,
          from: {
            t: 0
          },
          to: {
            t: 1
          },
          key: "area-".concat(animationId),
          onAnimationEnd: this.handleAnimationEnd,
          onAnimationStart: this.handleAnimationStart
        }, function(_ref3) {
          var t2 = _ref3.t;
          if (prevPoints) {
            var prevPointsDiffFactor = prevPoints.length / points.length;
            var stepPoints = points.map(function(entry, index2) {
              var prevPointIndex = Math.floor(index2 * prevPointsDiffFactor);
              if (prevPoints[prevPointIndex]) {
                var prev2 = prevPoints[prevPointIndex];
                var interpolatorX = interpolateNumber(prev2.x, entry.x);
                var interpolatorY = interpolateNumber(prev2.y, entry.y);
                return _objectSpread23(_objectSpread23({}, entry), {}, {
                  x: interpolatorX(t2),
                  y: interpolatorY(t2)
                });
              }
              return entry;
            });
            var stepBaseLine;
            if (isNumber(baseLine) && typeof baseLine === "number") {
              var interpolator = interpolateNumber(prevBaseLine, baseLine);
              stepBaseLine = interpolator(t2);
            } else if ((0, import_isNil9.default)(baseLine) || (0, import_isNaN3.default)(baseLine)) {
              var _interpolator = interpolateNumber(prevBaseLine, 0);
              stepBaseLine = _interpolator(t2);
            } else {
              stepBaseLine = baseLine.map(function(entry, index2) {
                var prevPointIndex = Math.floor(index2 * prevPointsDiffFactor);
                if (prevBaseLine[prevPointIndex]) {
                  var prev2 = prevBaseLine[prevPointIndex];
                  var interpolatorX = interpolateNumber(prev2.x, entry.x);
                  var interpolatorY = interpolateNumber(prev2.y, entry.y);
                  return _objectSpread23(_objectSpread23({}, entry), {}, {
                    x: interpolatorX(t2),
                    y: interpolatorY(t2)
                  });
                }
                return entry;
              });
            }
            return _this2.renderAreaStatically(stepPoints, stepBaseLine, needClip, clipPathId);
          }
          return /* @__PURE__ */ import_react44.default.createElement(Layer, null, /* @__PURE__ */ import_react44.default.createElement("defs", null, /* @__PURE__ */ import_react44.default.createElement("clipPath", {
            id: "animationClipPath-".concat(clipPathId)
          }, _this2.renderClipRect(t2))), /* @__PURE__ */ import_react44.default.createElement(Layer, {
            clipPath: "url(#animationClipPath-".concat(clipPathId, ")")
          }, _this2.renderAreaStatically(points, baseLine, needClip, clipPathId)));
        });
      }
    }, {
      key: "renderArea",
      value: function renderArea(needClip, clipPathId) {
        var _this$props6 = this.props, points = _this$props6.points, baseLine = _this$props6.baseLine, isAnimationActive = _this$props6.isAnimationActive;
        var _this$state2 = this.state, prevPoints = _this$state2.prevPoints, prevBaseLine = _this$state2.prevBaseLine, totalLength = _this$state2.totalLength;
        if (isAnimationActive && points && points.length && (!prevPoints && totalLength > 0 || !(0, import_isEqual2.default)(prevPoints, points) || !(0, import_isEqual2.default)(prevBaseLine, baseLine))) {
          return this.renderAreaWithAnimation(needClip, clipPathId);
        }
        return this.renderAreaStatically(points, baseLine, needClip, clipPathId);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props7 = this.props, hide = _this$props7.hide, dot = _this$props7.dot, points = _this$props7.points, className = _this$props7.className, top = _this$props7.top, left = _this$props7.left, xAxis = _this$props7.xAxis, yAxis = _this$props7.yAxis, width = _this$props7.width, height = _this$props7.height, isAnimationActive = _this$props7.isAnimationActive, id = _this$props7.id;
        if (hide || !points || !points.length) {
          return null;
        }
        var isAnimationFinished = this.state.isAnimationFinished;
        var hasSinglePoint = points.length === 1;
        var layerClass = (0, import_classnames22.default)("recharts-area", className);
        var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;
        var clipPathId = (0, import_isNil9.default)(id) ? this.id : id;
        return /* @__PURE__ */ import_react44.default.createElement(Layer, {
          className: layerClass
        }, needClip ? /* @__PURE__ */ import_react44.default.createElement("defs", null, /* @__PURE__ */ import_react44.default.createElement("clipPath", {
          id: "clipPath-".concat(clipPathId)
        }, /* @__PURE__ */ import_react44.default.createElement("rect", {
          x: left,
          y: top,
          width,
          height: Math.floor(height)
        }))) : null, !hasSinglePoint ? this.renderArea(needClip, clipPathId) : null, (dot || hasSinglePoint) && this.renderDots(needClip, clipPathId), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, points));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.animationId !== prevState.prevAnimationId) {
          return {
            prevAnimationId: nextProps.animationId,
            curPoints: nextProps.points,
            curBaseLine: nextProps.baseLine,
            prevPoints: prevState.curPoints,
            prevBaseLine: prevState.curBaseLine
          };
        }
        if (nextProps.points !== prevState.curPoints || nextProps.baseLine !== prevState.curBaseLine) {
          return {
            curPoints: nextProps.points,
            curBaseLine: nextProps.baseLine
          };
        }
        return null;
      }
    }]);
    return Area2;
  }(import_react44.PureComponent);
  Area.displayName = "Area";
  Area.defaultProps = {
    stroke: "#3182bd",
    fill: "#3182bd",
    fillOpacity: 0.6,
    xAxisId: 0,
    yAxisId: 0,
    legendType: "line",
    connectNulls: false,
    points: [],
    dot: false,
    activeDot: true,
    hide: false,
    isAnimationActive: !Global.isSsr,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: "ease"
  };
  Area.getBaseValue = function(props, xAxis, yAxis) {
    var layout = props.layout, baseValue = props.baseValue;
    if (isNumber(baseValue) && typeof baseValue === "number") {
      return baseValue;
    }
    var numericAxis = layout === "horizontal" ? yAxis : xAxis;
    var domain = numericAxis.scale.domain();
    if (numericAxis.type === "number") {
      var max2 = Math.max(domain[0], domain[1]);
      var min2 = Math.min(domain[0], domain[1]);
      if (baseValue === "dataMin") {
        return min2;
      }
      if (baseValue === "dataMax") {
        return max2;
      }
      return max2 < 0 ? max2 : Math.max(Math.min(domain[0], domain[1]), 0);
    }
    if (baseValue === "dataMin") {
      return domain[0];
    }
    if (baseValue === "dataMax") {
      return domain[1];
    }
    return domain[0];
  };
  Area.getComposedData = function(_ref23) {
    var props = _ref23.props, xAxis = _ref23.xAxis, yAxis = _ref23.yAxis, xAxisTicks = _ref23.xAxisTicks, yAxisTicks = _ref23.yAxisTicks, bandSize = _ref23.bandSize, dataKey = _ref23.dataKey, stackedData = _ref23.stackedData, dataStartIndex = _ref23.dataStartIndex, displayedData = _ref23.displayedData, offset = _ref23.offset;
    var layout = props.layout;
    var hasStack = stackedData && stackedData.length;
    var baseValue = Area.getBaseValue(props, xAxis, yAxis);
    var isRange = false;
    var points = displayedData.map(function(entry, index2) {
      var originalValue = getValueByDataKey(entry, dataKey);
      var value2;
      if (hasStack) {
        value2 = stackedData[dataStartIndex + index2];
      } else {
        value2 = originalValue;
        if (!(0, import_isArray7.default)(value2)) {
          value2 = [baseValue, value2];
        } else {
          isRange = true;
        }
      }
      var isBreakPoint = (0, import_isNil9.default)(value2[1]) || hasStack && (0, import_isNil9.default)(originalValue);
      if (layout === "horizontal") {
        return {
          x: getCateCoordinateOfLine({
            axis: xAxis,
            ticks: xAxisTicks,
            bandSize,
            entry,
            index: index2
          }),
          y: isBreakPoint ? null : yAxis.scale(value2[1]),
          value: value2,
          payload: entry
        };
      }
      return {
        x: isBreakPoint ? null : xAxis.scale(value2[1]),
        y: getCateCoordinateOfLine({
          axis: yAxis,
          ticks: yAxisTicks,
          bandSize,
          entry,
          index: index2
        }),
        value: value2,
        payload: entry
      };
    });
    var baseLine;
    if (hasStack || isRange) {
      baseLine = points.map(function(entry) {
        if (layout === "horizontal") {
          return {
            x: entry.x,
            y: !(0, import_isNil9.default)((0, import_get5.default)(entry, "value[0]")) && !(0, import_isNil9.default)((0, import_get5.default)(entry, "y")) ? yAxis.scale((0, import_get5.default)(entry, "value[0]")) : null
          };
        }
        return {
          x: !(0, import_isNil9.default)((0, import_get5.default)(entry, "value[0]")) ? xAxis.scale((0, import_get5.default)(entry, "value[0]")) : null,
          y: entry.y
        };
      });
    } else if (layout === "horizontal") {
      baseLine = yAxis.scale(baseValue);
    } else {
      baseLine = xAxis.scale(baseValue);
    }
    return _objectSpread23({
      points,
      baseLine,
      layout,
      isRange
    }, offset);
  };
  Area.renderDotItem = function(option, props) {
    var dotItem;
    if (/* @__PURE__ */ import_react44.default.isValidElement(option)) {
      dotItem = /* @__PURE__ */ import_react44.default.cloneElement(option, props);
    } else if ((0, import_isFunction12.default)(option)) {
      dotItem = option(props);
    } else {
      dotItem = /* @__PURE__ */ import_react44.default.createElement(Dot, _extends21({}, props, {
        className: "recharts-area-dot"
      }));
    }
    return dotItem;
  };

  // node_modules/recharts/es6/cartesian/XAxis.js
  var XAxis = function XAxis2() {
    return null;
  };
  XAxis.displayName = "XAxis";
  XAxis.defaultProps = {
    allowDecimals: true,
    hide: false,
    orientation: "bottom",
    width: 0,
    height: 30,
    mirror: false,
    xAxisId: 0,
    tickCount: 5,
    type: "category",
    domain: [0, "auto"],
    padding: {
      left: 0,
      right: 0
    },
    allowDataOverflow: false,
    scale: "auto",
    reversed: false,
    allowDuplicatedCategory: true
  };

  // node_modules/recharts/es6/cartesian/YAxis.js
  var YAxis = function YAxis2() {
    return null;
  };
  YAxis.displayName = "YAxis";
  YAxis.defaultProps = {
    allowDuplicatedCategory: true,
    allowDecimals: true,
    hide: false,
    orientation: "left",
    width: 60,
    height: 0,
    mirror: false,
    yAxisId: 0,
    tickCount: 5,
    type: "number",
    domain: [0, "auto"],
    padding: {
      top: 0,
      bottom: 0
    },
    allowDataOverflow: false,
    scale: "auto",
    reversed: false
  };

  // node_modules/recharts/es6/chart/generateCategoricalChart.js
  var import_every2 = __toModule(require_every());
  var import_find = __toModule(require_find());
  var import_isFunction13 = __toModule(require_isFunction());
  var import_throttle = __toModule(require_throttle());
  var import_sortBy3 = __toModule(require_sortBy());
  var import_get6 = __toModule(require_get());
  var import_range3 = __toModule(require_range());
  var import_isNil10 = __toModule(require_isNil());
  var import_isBoolean = __toModule(require_isBoolean());
  var import_isArray8 = __toModule(require_isArray());
  var import_react45 = __toModule(require_react());
  var import_classnames23 = __toModule(require_classnames());

  // node_modules/recharts/es6/util/DetectReferenceElementsDomain.js
  var detectReferenceElementsDomain = function detectReferenceElementsDomain2(children, domain, axisId, axisType, specifiedTicks) {
    var lines = findAllByType(children, ReferenceLine.displayName);
    var dots = findAllByType(children, ReferenceDot.displayName);
    var elements = lines.concat(dots);
    var areas = findAllByType(children, ReferenceArea.displayName);
    var idKey = "".concat(axisType, "Id");
    var valueKey = axisType[0];
    var finalDomain = domain;
    if (elements.length) {
      finalDomain = elements.reduce(function(result, el) {
        if (el.props[idKey] === axisId && ifOverflowMatches(el.props, "extendDomain") && isNumber(el.props[valueKey])) {
          var value2 = el.props[valueKey];
          return [Math.min(result[0], value2), Math.max(result[1], value2)];
        }
        return result;
      }, finalDomain);
    }
    if (areas.length) {
      var key1 = "".concat(valueKey, "1");
      var key2 = "".concat(valueKey, "2");
      finalDomain = areas.reduce(function(result, el) {
        if (el.props[idKey] === axisId && ifOverflowMatches(el.props, "extendDomain") && isNumber(el.props[key1]) && isNumber(el.props[key2])) {
          var value1 = el.props[key1];
          var value2 = el.props[key2];
          return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)];
        }
        return result;
      }, finalDomain);
    }
    if (specifiedTicks && specifiedTicks.length) {
      finalDomain = specifiedTicks.reduce(function(result, tick) {
        if (isNumber(tick)) {
          return [Math.min(result[0], tick), Math.max(result[1], tick)];
        }
        return result;
      }, finalDomain);
    }
    return finalDomain;
  };

  // node_modules/recharts/es6/util/Events.js
  var import_eventemitter3 = __toModule(require_eventemitter3());
  var eventCenter = new import_eventemitter3.default();
  if (eventCenter.setMaxListeners) {
    eventCenter.setMaxListeners(10);
  }
  var SYNC_EVENT = "recharts.syncMouseEvents";

  // node_modules/recharts/es6/chart/generateCategoricalChart.js
  function _typeof19(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof19 = function _typeof21(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof19 = function _typeof21(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof19(obj);
  }
  function _slicedToArray8(arr, i3) {
    return _arrayWithHoles9(arr) || _iterableToArrayLimit8(arr, i3) || _unsupportedIterableToArray16(arr, i3) || _nonIterableRest9();
  }
  function _nonIterableRest9() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit8(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles9(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _extends22() {
    _extends22 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends22.apply(this, arguments);
  }
  function _objectWithoutProperties11(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose12(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose12(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _classCallCheck19(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties19(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass19(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties19(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties19(Constructor, staticProps);
    return Constructor;
  }
  function _inherits18(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf19(subClass, superClass);
  }
  function _setPrototypeOf19(o2, p2) {
    _setPrototypeOf19 = Object.setPrototypeOf || function _setPrototypeOf20(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf19(o2, p2);
  }
  function _createSuper18(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct18();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf18(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf18(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn18(this, result);
    };
  }
  function _possibleConstructorReturn18(self2, call) {
    if (call && (_typeof19(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized18(self2);
  }
  function _assertThisInitialized18(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct18() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf18(o2) {
    _getPrototypeOf18 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf18(o2);
  }
  function _toConsumableArray11(arr) {
    return _arrayWithoutHoles11(arr) || _iterableToArray12(arr) || _unsupportedIterableToArray16(arr) || _nonIterableSpread11();
  }
  function _nonIterableSpread11() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray16(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray16(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray16(o2, minLen);
  }
  function _iterableToArray12(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _arrayWithoutHoles11(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray16(arr);
  }
  function _arrayLikeToArray16(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  function ownKeys24(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread24(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys24(Object(source), true).forEach(function(key) {
          _defineProperty24(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys24(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty24(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  var ORIENT_MAP = {
    xAxis: ["bottom", "top"],
    yAxis: ["left", "right"]
  };
  var originCoordinate = {
    x: 0,
    y: 0
  };
  var isFinit = Number.isFinite ? Number.isFinite : isFinite;
  var defer = typeof requestAnimationFrame === "function" ? requestAnimationFrame : typeof setImmediate === "function" ? setImmediate : setTimeout;
  var deferClear = typeof cancelAnimationFrame === "function" ? cancelAnimationFrame : typeof clearImmediate === "function" ? clearImmediate : clearTimeout;
  var calculateTooltipPos = function calculateTooltipPos2(rangeObj, layout) {
    if (layout === "horizontal") {
      return rangeObj.x;
    }
    if (layout === "vertical") {
      return rangeObj.y;
    }
    if (layout === "centric") {
      return rangeObj.angle;
    }
    return rangeObj.radius;
  };
  var getActiveCoordinate = function getActiveCoordinate2(layout, tooltipTicks, activeIndex, rangeObj) {
    var entry = tooltipTicks.find(function(tick) {
      return tick && tick.index === activeIndex;
    });
    if (entry) {
      if (layout === "horizontal") {
        return {
          x: entry.coordinate,
          y: rangeObj.y
        };
      }
      if (layout === "vertical") {
        return {
          x: rangeObj.x,
          y: entry.coordinate
        };
      }
      if (layout === "centric") {
        var _angle = entry.coordinate;
        var _radius = rangeObj.radius;
        return _objectSpread24(_objectSpread24(_objectSpread24({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)), {}, {
          angle: _angle,
          radius: _radius
        });
      }
      var radius = entry.coordinate;
      var angle = rangeObj.angle;
      return _objectSpread24(_objectSpread24(_objectSpread24({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)), {}, {
        angle,
        radius
      });
    }
    return originCoordinate;
  };
  var getDisplayedData = function getDisplayedData2(data, _ref3, item) {
    var graphicalItems = _ref3.graphicalItems, dataStartIndex = _ref3.dataStartIndex, dataEndIndex = _ref3.dataEndIndex;
    var itemsData = (graphicalItems || []).reduce(function(result, child) {
      var itemData = child.props.data;
      if (itemData && itemData.length) {
        return [].concat(_toConsumableArray11(result), _toConsumableArray11(itemData));
      }
      return result;
    }, []);
    if (itemsData && itemsData.length > 0) {
      return itemsData;
    }
    if (item && item.props && item.props.data && item.props.data.length > 0) {
      return item.props.data;
    }
    if (data && data.length && isNumber(dataStartIndex) && isNumber(dataEndIndex)) {
      return data.slice(dataStartIndex, dataEndIndex + 1);
    }
    return [];
  };
  var getTooltipContent = function getTooltipContent2(state, chartData, activeIndex, activeLabel) {
    var graphicalItems = state.graphicalItems, tooltipAxis = state.tooltipAxis;
    var displayedData = getDisplayedData(chartData, state);
    if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {
      return null;
    }
    return graphicalItems.reduce(function(result, child) {
      var hide = child.props.hide;
      if (hide) {
        return result;
      }
      var data = child.props.data;
      var payload;
      if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
        var entries = data === void 0 ? displayedData : data;
        payload = findEntryInArray(entries, tooltipAxis.dataKey, activeLabel);
      } else {
        payload = data && data[activeIndex] || displayedData[activeIndex];
      }
      if (!payload) {
        return result;
      }
      return [].concat(_toConsumableArray11(result), [getTooltipItem(child, payload)]);
    }, []);
  };
  var getTooltipData = function getTooltipData2(state, chartData, layout, rangeObj) {
    var rangeData = rangeObj || {
      x: state.chartX,
      y: state.chartY
    };
    var pos = calculateTooltipPos(rangeData, layout);
    var ticks2 = state.orderedTooltipTicks, axis = state.tooltipAxis, tooltipTicks = state.tooltipTicks;
    var activeIndex = calculateActiveTickIndex(pos, ticks2, tooltipTicks, axis);
    if (activeIndex >= 0 && tooltipTicks) {
      var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;
      var activePayload = getTooltipContent(state, chartData, activeIndex, activeLabel);
      var activeCoordinate = getActiveCoordinate(layout, ticks2, activeIndex, rangeData);
      return {
        activeTooltipIndex: activeIndex,
        activeLabel,
        activePayload,
        activeCoordinate
      };
    }
    return null;
  };
  var getAxisMapByAxes = function getAxisMapByAxes2(props, _ref23) {
    var axes = _ref23.axes, graphicalItems = _ref23.graphicalItems, axisType = _ref23.axisType, axisIdKey = _ref23.axisIdKey, stackGroups = _ref23.stackGroups, dataStartIndex = _ref23.dataStartIndex, dataEndIndex = _ref23.dataEndIndex;
    var layout = props.layout, children = props.children, stackOffset = props.stackOffset;
    var isCategorical = isCategoricalAxis(layout, axisType);
    var axisMap = axes.reduce(function(result, child) {
      var _child$props = child.props, type = _child$props.type, dataKey = _child$props.dataKey, allowDataOverflow = _child$props.allowDataOverflow, allowDuplicatedCategory = _child$props.allowDuplicatedCategory, scale = _child$props.scale, ticks2 = _child$props.ticks;
      var axisId = child.props[axisIdKey];
      var displayedData = getDisplayedData(props.data, {
        graphicalItems: graphicalItems.filter(function(item) {
          return item.props[axisIdKey] === axisId;
        }),
        dataStartIndex,
        dataEndIndex
      });
      var len = displayedData.length;
      if (!result[axisId]) {
        var domain, duplicateDomain, categoricalDomain;
        if (dataKey) {
          domain = getDomainOfDataByKey(displayedData, dataKey, type);
          if (type === "category" && isCategorical) {
            var duplicate = hasDuplicate(domain);
            if (allowDuplicatedCategory && duplicate) {
              duplicateDomain = domain;
              domain = (0, import_range3.default)(0, len);
            } else if (!allowDuplicatedCategory) {
              domain = parseDomainOfCategoryAxis(child.props.domain, domain, child).reduce(function(finalDomain, entry) {
                return finalDomain.indexOf(entry) >= 0 ? finalDomain : [].concat(_toConsumableArray11(finalDomain), [entry]);
              }, []);
            }
          } else if (type === "category") {
            if (!allowDuplicatedCategory) {
              domain = parseDomainOfCategoryAxis(child.props.domain, domain, child).reduce(function(finalDomain, entry) {
                return finalDomain.indexOf(entry) >= 0 || entry === "" || (0, import_isNil10.default)(entry) ? finalDomain : [].concat(_toConsumableArray11(finalDomain), [entry]);
              }, []);
            } else {
              domain = domain.filter(function(entry) {
                return entry !== "" && !(0, import_isNil10.default)(entry);
              });
            }
          } else if (type === "number") {
            var errorBarsDomain = parseErrorBarsOfAxis(displayedData, graphicalItems.filter(function(item) {
              return item.props[axisIdKey] === axisId && !item.props.hide;
            }), dataKey, axisType, layout);
            if (errorBarsDomain) {
              domain = errorBarsDomain;
            }
          }
          if (isCategorical && (type === "number" || scale !== "auto")) {
            categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
          }
        } else if (isCategorical) {
          domain = (0, import_range3.default)(0, len);
        } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === "number") {
          domain = stackOffset === "expand" ? [0, 1] : getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
        } else {
          domain = getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
            return item.props[axisIdKey] === axisId && !item.props.hide;
          }), type, layout, true);
        }
        if (type === "number") {
          domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks2);
          if (child.props.domain) {
            domain = parseSpecifiedDomain(child.props.domain, domain, allowDataOverflow);
          }
        } else if (type === "category" && child.props.domain) {
          var axisDomain = child.props.domain;
          var isDomainValidate = domain.every(function(entry) {
            return axisDomain.indexOf(entry) >= 0;
          });
          if (isDomainValidate) {
            domain = axisDomain;
          }
        }
        return _objectSpread24(_objectSpread24({}, result), {}, _defineProperty24({}, axisId, _objectSpread24(_objectSpread24({}, child.props), {}, {
          axisType,
          domain,
          categoricalDomain,
          duplicateDomain,
          originalDomain: child.props.domain,
          isCategorical,
          layout
        })));
      }
      return result;
    }, {});
    return axisMap;
  };
  var getAxisMapByItems = function getAxisMapByItems2(props, _ref3) {
    var graphicalItems = _ref3.graphicalItems, Axis = _ref3.Axis, axisType = _ref3.axisType, axisIdKey = _ref3.axisIdKey, stackGroups = _ref3.stackGroups, dataStartIndex = _ref3.dataStartIndex, dataEndIndex = _ref3.dataEndIndex;
    var layout = props.layout, children = props.children;
    var displayedData = getDisplayedData(props.data, {
      graphicalItems,
      dataStartIndex,
      dataEndIndex
    });
    var len = displayedData.length;
    var isCategorical = isCategoricalAxis(layout, axisType);
    var index2 = -1;
    var axisMap = graphicalItems.reduce(function(result, child) {
      var axisId = child.props[axisIdKey];
      if (!result[axisId]) {
        index2++;
        var domain;
        if (isCategorical) {
          domain = (0, import_range3.default)(0, len);
        } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {
          domain = getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
          domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
        } else {
          domain = parseSpecifiedDomain(Axis.defaultProps.domain, getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
            return item.props[axisIdKey] === axisId && !item.props.hide;
          }), "number", layout), Axis.defaultProps.allowDataOverflow);
          domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
        }
        return _objectSpread24(_objectSpread24({}, result), {}, _defineProperty24({}, axisId, _objectSpread24(_objectSpread24({
          axisType
        }, Axis.defaultProps), {}, {
          hide: true,
          orientation: (0, import_get6.default)(ORIENT_MAP, "".concat(axisType, ".").concat(index2 % 2), null),
          domain,
          originalDomain: Axis.defaultProps.domain,
          isCategorical,
          layout
        })));
      }
      return result;
    }, {});
    return axisMap;
  };
  var getAxisMap = function getAxisMap2(props, _ref4) {
    var _ref4$axisType = _ref4.axisType, axisType = _ref4$axisType === void 0 ? "xAxis" : _ref4$axisType, AxisComp = _ref4.AxisComp, graphicalItems = _ref4.graphicalItems, stackGroups = _ref4.stackGroups, dataStartIndex = _ref4.dataStartIndex, dataEndIndex = _ref4.dataEndIndex;
    var children = props.children;
    var axisIdKey = "".concat(axisType, "Id");
    var axes = findAllByType(children, AxisComp);
    var axisMap = {};
    if (axes && axes.length) {
      axisMap = getAxisMapByAxes(props, {
        axes,
        graphicalItems,
        axisType,
        axisIdKey,
        stackGroups,
        dataStartIndex,
        dataEndIndex
      });
    } else if (graphicalItems && graphicalItems.length) {
      axisMap = getAxisMapByItems(props, {
        Axis: AxisComp,
        graphicalItems,
        axisType,
        axisIdKey,
        stackGroups,
        dataStartIndex,
        dataEndIndex
      });
    }
    return axisMap;
  };
  var tooltipTicksGenerator = function tooltipTicksGenerator2(axisMap) {
    var axis = getAnyElementOfObject(axisMap);
    var tooltipTicks = getTicksOfAxis(axis, false, true);
    return {
      tooltipTicks,
      orderedTooltipTicks: (0, import_sortBy3.default)(tooltipTicks, function(o2) {
        return o2.coordinate;
      }),
      tooltipAxis: axis,
      tooltipAxisBandSize: getBandSizeOfAxis(axis, tooltipTicks)
    };
  };
  var createDefaultState = function createDefaultState2(props) {
    var children = props.children, defaultShowTooltip = props.defaultShowTooltip;
    var brushItem = findChildByType(children, Brush.displayName);
    var startIndex = brushItem && brushItem.props && brushItem.props.startIndex || 0;
    var endIndex = brushItem && brushItem.props && brushItem.props.endIndex || props.data && props.data.length - 1 || 0;
    return {
      chartX: 0,
      chartY: 0,
      dataStartIndex: startIndex,
      dataEndIndex: endIndex,
      activeTooltipIndex: -1,
      isTooltipActive: !(0, import_isNil10.default)(defaultShowTooltip) ? defaultShowTooltip : false
    };
  };
  var hasGraphicalBarItem = function hasGraphicalBarItem2(graphicalItems) {
    if (!graphicalItems || !graphicalItems.length) {
      return false;
    }
    return graphicalItems.some(function(item) {
      var name = getDisplayName(item && item.type);
      return name && name.indexOf("Bar") >= 0;
    });
  };
  var getAxisNameByLayout = function getAxisNameByLayout2(layout) {
    if (layout === "horizontal") {
      return {
        numericAxisName: "yAxis",
        cateAxisName: "xAxis"
      };
    }
    if (layout === "vertical") {
      return {
        numericAxisName: "xAxis",
        cateAxisName: "yAxis"
      };
    }
    if (layout === "centric") {
      return {
        numericAxisName: "radiusAxis",
        cateAxisName: "angleAxis"
      };
    }
    return {
      numericAxisName: "angleAxis",
      cateAxisName: "radiusAxis"
    };
  };
  var calculateOffset = function calculateOffset2(_ref5, prevLegendBBox) {
    var props = _ref5.props, graphicalItems = _ref5.graphicalItems, _ref5$xAxisMap = _ref5.xAxisMap, xAxisMap = _ref5$xAxisMap === void 0 ? {} : _ref5$xAxisMap, _ref5$yAxisMap = _ref5.yAxisMap, yAxisMap = _ref5$yAxisMap === void 0 ? {} : _ref5$yAxisMap;
    var width = props.width, height = props.height, children = props.children;
    var margin = props.margin || {};
    var brushItem = findChildByType(children, Brush.displayName);
    var legendItem = findChildByType(children, Legend.displayName);
    var offsetH = Object.keys(yAxisMap).reduce(function(result, id) {
      var entry = yAxisMap[id];
      var orientation = entry.orientation;
      if (!entry.mirror && !entry.hide) {
        return _objectSpread24(_objectSpread24({}, result), {}, _defineProperty24({}, orientation, result[orientation] + entry.width));
      }
      return result;
    }, {
      left: margin.left || 0,
      right: margin.right || 0
    });
    var offsetV = Object.keys(xAxisMap).reduce(function(result, id) {
      var entry = xAxisMap[id];
      var orientation = entry.orientation;
      if (!entry.mirror && !entry.hide) {
        return _objectSpread24(_objectSpread24({}, result), {}, _defineProperty24({}, orientation, (0, import_get6.default)(result, "".concat(orientation)) + entry.height));
      }
      return result;
    }, {
      top: margin.top || 0,
      bottom: margin.bottom || 0
    });
    var offset = _objectSpread24(_objectSpread24({}, offsetV), offsetH);
    var brushBottom = offset.bottom;
    if (brushItem) {
      offset.bottom += brushItem.props.height || Brush.defaultProps.height;
    }
    if (legendItem && prevLegendBBox) {
      offset = appendOffsetOfLegend(offset, graphicalItems, props, prevLegendBBox);
    }
    return _objectSpread24(_objectSpread24({
      brushBottom
    }, offset), {}, {
      width: width - offset.left - offset.right,
      height: height - offset.top - offset.bottom
    });
  };
  var generateCategoricalChart = function generateCategoricalChart2(_ref6) {
    var _class, _temp;
    var chartName = _ref6.chartName, GraphicalChild = _ref6.GraphicalChild, _ref6$defaultTooltipE = _ref6.defaultTooltipEventType, defaultTooltipEventType = _ref6$defaultTooltipE === void 0 ? "axis" : _ref6$defaultTooltipE, _ref6$validateTooltip = _ref6.validateTooltipEventTypes, validateTooltipEventTypes = _ref6$validateTooltip === void 0 ? ["axis"] : _ref6$validateTooltip, axisComponents = _ref6.axisComponents, legendContent = _ref6.legendContent, formatAxisMap3 = _ref6.formatAxisMap, defaultProps3 = _ref6.defaultProps;
    var getFormatItems = function getFormatItems2(props, currentState) {
      var graphicalItems = currentState.graphicalItems, stackGroups = currentState.stackGroups, offset = currentState.offset, updateId = currentState.updateId, dataStartIndex = currentState.dataStartIndex, dataEndIndex = currentState.dataEndIndex;
      var barSize = props.barSize, layout = props.layout, barGap = props.barGap, barCategoryGap = props.barCategoryGap, globalMaxBarSize = props.maxBarSize;
      var _getAxisNameByLayout = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout.numericAxisName, cateAxisName = _getAxisNameByLayout.cateAxisName;
      var hasBar = hasGraphicalBarItem(graphicalItems);
      var sizeList = hasBar && getBarSizeList({
        barSize,
        stackGroups
      });
      var formattedItems = [];
      graphicalItems.forEach(function(item, index2) {
        var displayedData = getDisplayedData(props.data, {
          dataStartIndex,
          dataEndIndex
        }, item);
        var _item$props = item.props, dataKey = _item$props.dataKey, childMaxBarSize = _item$props.maxBarSize;
        var numericAxisId = item.props["".concat(numericAxisName, "Id")];
        var cateAxisId = item.props["".concat(cateAxisName, "Id")];
        var axisObj = axisComponents.reduce(function(result, entry) {
          var _objectSpread62;
          var axisMap = currentState["".concat(entry.axisType, "Map")];
          var id = item.props["".concat(entry.axisType, "Id")];
          var axis = axisMap && axisMap[id];
          return _objectSpread24(_objectSpread24({}, result), {}, (_objectSpread62 = {}, _defineProperty24(_objectSpread62, entry.axisType, axis), _defineProperty24(_objectSpread62, "".concat(entry.axisType, "Ticks"), getTicksOfAxis(axis)), _objectSpread62));
        }, {});
        var cateAxis = axisObj[cateAxisName];
        var cateTicks = axisObj["".concat(cateAxisName, "Ticks")];
        var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups);
        var itemIsBar = getDisplayName(item.type).indexOf("Bar") >= 0;
        var bandSize = getBandSizeOfAxis(cateAxis, cateTicks);
        var barPosition = [];
        if (itemIsBar) {
          var _ref7, _getBandSizeOfAxis;
          var maxBarSize = (0, import_isNil10.default)(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
          var barBandSize = (_ref7 = (_getBandSizeOfAxis = getBandSizeOfAxis(cateAxis, cateTicks, true)) !== null && _getBandSizeOfAxis !== void 0 ? _getBandSizeOfAxis : maxBarSize) !== null && _ref7 !== void 0 ? _ref7 : 0;
          barPosition = getBarPosition({
            barGap,
            barCategoryGap,
            bandSize: barBandSize !== bandSize ? barBandSize : bandSize,
            sizeList: sizeList[cateAxisId],
            maxBarSize
          });
          if (barBandSize !== bandSize) {
            barPosition = barPosition.map(function(pos) {
              return _objectSpread24(_objectSpread24({}, pos), {}, {
                position: _objectSpread24(_objectSpread24({}, pos.position), {}, {
                  offset: pos.position.offset - barBandSize / 2
                })
              });
            });
          }
        }
        var composedFn = item && item.type && item.type.getComposedData;
        if (composedFn) {
          var _objectSpread72;
          formattedItems.push({
            props: _objectSpread24(_objectSpread24({}, composedFn(_objectSpread24(_objectSpread24({}, axisObj), {}, {
              displayedData,
              props,
              dataKey,
              item,
              bandSize,
              barPosition,
              offset,
              stackedData,
              layout,
              dataStartIndex,
              dataEndIndex
            }))), {}, (_objectSpread72 = {
              key: item.key || "item-".concat(index2)
            }, _defineProperty24(_objectSpread72, numericAxisName, axisObj[numericAxisName]), _defineProperty24(_objectSpread72, cateAxisName, axisObj[cateAxisName]), _defineProperty24(_objectSpread72, "animationId", updateId), _objectSpread72)),
            childIndex: parseChildIndex(item, props.children),
            item
          });
        }
      });
      return formattedItems;
    };
    var updateStateOfAxisMapsOffsetAndStackGroups = function updateStateOfAxisMapsOffsetAndStackGroups2(_ref8, prevState) {
      var props = _ref8.props, dataStartIndex = _ref8.dataStartIndex, dataEndIndex = _ref8.dataEndIndex, updateId = _ref8.updateId;
      if (!validateWidthHeight({
        props
      })) {
        return null;
      }
      var children = props.children, layout = props.layout, stackOffset = props.stackOffset, data = props.data, reverseStackOrder = props.reverseStackOrder;
      var _getAxisNameByLayout2 = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout2.numericAxisName, cateAxisName = _getAxisNameByLayout2.cateAxisName;
      var graphicalItems = findAllByType(children, GraphicalChild);
      var stackGroups = getStackGroupsByAxisId(data, graphicalItems, "".concat(numericAxisName, "Id"), "".concat(cateAxisName, "Id"), stackOffset, reverseStackOrder);
      var axisObj = axisComponents.reduce(function(result, entry) {
        var name = "".concat(entry.axisType, "Map");
        return _objectSpread24(_objectSpread24({}, result), {}, _defineProperty24({}, name, getAxisMap(props, _objectSpread24(_objectSpread24({}, entry), {}, {
          graphicalItems,
          stackGroups: entry.axisType === numericAxisName && stackGroups,
          dataStartIndex,
          dataEndIndex
        }))));
      }, {});
      var offset = calculateOffset(_objectSpread24(_objectSpread24({}, axisObj), {}, {
        props,
        graphicalItems
      }), prevState === null || prevState === void 0 ? void 0 : prevState.legendBBox);
      Object.keys(axisObj).forEach(function(key) {
        axisObj[key] = formatAxisMap3(props, axisObj[key], offset, key.replace("Map", ""), chartName);
      });
      var cateAxisMap = axisObj["".concat(cateAxisName, "Map")];
      var ticksObj = tooltipTicksGenerator(cateAxisMap);
      var formattedGraphicalItems = getFormatItems(props, _objectSpread24(_objectSpread24({}, axisObj), {}, {
        dataStartIndex,
        dataEndIndex,
        updateId,
        graphicalItems,
        stackGroups,
        offset
      }));
      return _objectSpread24(_objectSpread24({
        formattedGraphicalItems,
        graphicalItems,
        offset,
        stackGroups
      }, ticksObj), axisObj);
    };
    return _temp = _class = /* @__PURE__ */ function(_Component) {
      _inherits18(CategoricalChartWrapper, _Component);
      var _super = _createSuper18(CategoricalChartWrapper);
      function CategoricalChartWrapper(_props) {
        var _this;
        _classCallCheck19(this, CategoricalChartWrapper);
        _this = _super.call(this, _props);
        _this.uniqueChartId = void 0;
        _this.clipPathId = void 0;
        _this.legendInstance = void 0;
        _this.deferId = void 0;
        _this.container = void 0;
        _this.clearDeferId = function() {
          if (!(0, import_isNil10.default)(_this.deferId) && deferClear) {
            deferClear(_this.deferId);
          }
          _this.deferId = null;
        };
        _this.handleLegendBBoxUpdate = function(box) {
          if (box) {
            var _this$state = _this.state, dataStartIndex = _this$state.dataStartIndex, dataEndIndex = _this$state.dataEndIndex, updateId = _this$state.updateId;
            _this.setState(_objectSpread24({
              legendBBox: box
            }, updateStateOfAxisMapsOffsetAndStackGroups({
              props: _this.props,
              dataStartIndex,
              dataEndIndex,
              updateId
            }, _objectSpread24(_objectSpread24({}, _this.state), {}, {
              legendBBox: box
            }))));
          }
        };
        _this.handleReceiveSyncEvent = function(cId, chartId, data) {
          var syncId = _this.props.syncId;
          if (syncId === cId && chartId !== _this.uniqueChartId) {
            _this.clearDeferId();
            _this.deferId = defer && defer(_this.applySyncEvent.bind(_assertThisInitialized18(_this), data));
          }
        };
        _this.handleBrushChange = function(_ref9) {
          var startIndex = _ref9.startIndex, endIndex = _ref9.endIndex;
          if (startIndex !== _this.state.dataStartIndex || endIndex !== _this.state.dataEndIndex) {
            var updateId = _this.state.updateId;
            _this.setState(function() {
              return _objectSpread24({
                dataStartIndex: startIndex,
                dataEndIndex: endIndex
              }, updateStateOfAxisMapsOffsetAndStackGroups({
                props: _this.props,
                dataStartIndex: startIndex,
                dataEndIndex: endIndex,
                updateId
              }, _this.state));
            });
            _this.triggerSyncEvent({
              dataStartIndex: startIndex,
              dataEndIndex: endIndex
            });
          }
        };
        _this.handleMouseEnter = function(e3) {
          var onMouseEnter = _this.props.onMouseEnter;
          var mouse = _this.getMouseInfo(e3);
          if (mouse) {
            var _nextState = _objectSpread24(_objectSpread24({}, mouse), {}, {
              isTooltipActive: true
            });
            _this.setState(_nextState);
            _this.triggerSyncEvent(_nextState);
            if ((0, import_isFunction13.default)(onMouseEnter)) {
              onMouseEnter(_nextState, e3);
            }
          }
        };
        _this.triggeredAfterMouseMove = function(e3) {
          var onMouseMove = _this.props.onMouseMove;
          var mouse = _this.getMouseInfo(e3);
          var nextState = mouse ? _objectSpread24(_objectSpread24({}, mouse), {}, {
            isTooltipActive: true
          }) : {
            isTooltipActive: false
          };
          _this.setState(nextState);
          _this.triggerSyncEvent(nextState);
          if ((0, import_isFunction13.default)(onMouseMove)) {
            onMouseMove(nextState, e3);
          }
        };
        _this.handleItemMouseEnter = function(el) {
          _this.setState(function() {
            return {
              isTooltipActive: true,
              activeItem: el,
              activePayload: el.tooltipPayload,
              activeCoordinate: el.tooltipPosition || {
                x: el.cx,
                y: el.cy
              }
            };
          });
        };
        _this.handleItemMouseLeave = function() {
          _this.setState(function() {
            return {
              isTooltipActive: false
            };
          });
        };
        _this.handleMouseMove = function(e3) {
          if (e3 && (0, import_isFunction13.default)(e3.persist)) {
            e3.persist();
          }
          _this.triggeredAfterMouseMove(e3);
        };
        _this.handleMouseLeave = function(e3) {
          var onMouseLeave = _this.props.onMouseLeave;
          var nextState = {
            isTooltipActive: false
          };
          _this.setState(nextState);
          _this.triggerSyncEvent(nextState);
          if ((0, import_isFunction13.default)(onMouseLeave)) {
            onMouseLeave(nextState, e3);
          }
          _this.cancelThrottledTriggerAfterMouseMove();
        };
        _this.handleOuterEvent = function(e3) {
          var eventName = getReactEventByType(e3);
          var event = (0, import_get6.default)(_this.props, "".concat(eventName));
          if (eventName && (0, import_isFunction13.default)(event)) {
            var mouse;
            if (/.*touch.*/i.test(eventName)) {
              mouse = _this.getMouseInfo(e3.changedTouches[0]);
            } else {
              mouse = _this.getMouseInfo(e3);
            }
            var handler = event;
            handler(mouse, e3);
          }
        };
        _this.handleClick = function(e3) {
          var onClick = _this.props.onClick;
          var mouse = _this.getMouseInfo(e3);
          if (mouse) {
            var _nextState2 = _objectSpread24(_objectSpread24({}, mouse), {}, {
              isTooltipActive: true
            });
            _this.setState(_nextState2);
            _this.triggerSyncEvent(_nextState2);
            if ((0, import_isFunction13.default)(onClick)) {
              onClick(_nextState2, e3);
            }
          }
        };
        _this.handleMouseDown = function(e3) {
          var onMouseDown = _this.props.onMouseDown;
          if ((0, import_isFunction13.default)(onMouseDown)) {
            var _nextState3 = _this.getMouseInfo(e3);
            onMouseDown(_nextState3, e3);
          }
        };
        _this.handleMouseUp = function(e3) {
          var onMouseUp = _this.props.onMouseUp;
          if ((0, import_isFunction13.default)(onMouseUp)) {
            var _nextState4 = _this.getMouseInfo(e3);
            onMouseUp(_nextState4, e3);
          }
        };
        _this.handleTouchMove = function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.handleMouseMove(e3.changedTouches[0]);
          }
        };
        _this.handleTouchStart = function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.handleMouseDown(e3.changedTouches[0]);
          }
        };
        _this.handleTouchEnd = function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.handleMouseUp(e3.changedTouches[0]);
          }
        };
        _this.verticalCoordinatesGenerator = function(_ref10) {
          var xAxis = _ref10.xAxis, width = _ref10.width, height = _ref10.height, offset = _ref10.offset;
          return getCoordinatesOfGrid(CartesianAxis.getTicks(_objectSpread24(_objectSpread24(_objectSpread24({}, CartesianAxis.defaultProps), xAxis), {}, {
            ticks: getTicksOfAxis(xAxis, true),
            viewBox: {
              x: 0,
              y: 0,
              width,
              height
            }
          })), offset.left, offset.left + offset.width);
        };
        _this.horizontalCoordinatesGenerator = function(_ref11) {
          var yAxis = _ref11.yAxis, width = _ref11.width, height = _ref11.height, offset = _ref11.offset;
          return getCoordinatesOfGrid(CartesianAxis.getTicks(_objectSpread24(_objectSpread24(_objectSpread24({}, CartesianAxis.defaultProps), yAxis), {}, {
            ticks: getTicksOfAxis(yAxis, true),
            viewBox: {
              x: 0,
              y: 0,
              width,
              height
            }
          })), offset.top, offset.top + offset.height);
        };
        _this.axesTicksGenerator = function(axis) {
          return getTicksOfAxis(axis, true);
        };
        _this.renderCursor = function(element2) {
          var _this$state2 = _this.state, isTooltipActive = _this$state2.isTooltipActive, activeCoordinate = _this$state2.activeCoordinate, activePayload = _this$state2.activePayload, offset = _this$state2.offset, activeTooltipIndex = _this$state2.activeTooltipIndex;
          var tooltipEventType = _this.getTooltipEventType();
          if (!element2 || !element2.props.cursor || !isTooltipActive || !activeCoordinate || chartName !== "ScatterChart" && tooltipEventType !== "axis") {
            return null;
          }
          var layout = _this.props.layout;
          var restProps;
          var cursorComp = Curve;
          if (chartName === "ScatterChart") {
            restProps = activeCoordinate;
            cursorComp = Cross;
          } else if (chartName === "BarChart") {
            restProps = _this.getCursorRectangle();
            cursorComp = Rectangle;
          } else if (layout === "radial") {
            var _this$getCursorPoints = _this.getCursorPoints(), cx = _this$getCursorPoints.cx, cy = _this$getCursorPoints.cy, radius = _this$getCursorPoints.radius, startAngle = _this$getCursorPoints.startAngle, endAngle = _this$getCursorPoints.endAngle;
            restProps = {
              cx,
              cy,
              startAngle,
              endAngle,
              innerRadius: radius,
              outerRadius: radius
            };
            cursorComp = Sector;
          } else {
            restProps = {
              points: _this.getCursorPoints()
            };
            cursorComp = Curve;
          }
          var key = element2.key || "_recharts-cursor";
          var cursorProps = _objectSpread24(_objectSpread24(_objectSpread24(_objectSpread24({
            stroke: "#ccc",
            pointerEvents: "none"
          }, offset), restProps), filterProps(element2.props.cursor)), {}, {
            payload: activePayload,
            payloadIndex: activeTooltipIndex,
            key,
            className: "recharts-tooltip-cursor"
          });
          return /* @__PURE__ */ (0, import_react45.isValidElement)(element2.props.cursor) ? /* @__PURE__ */ (0, import_react45.cloneElement)(element2.props.cursor, cursorProps) : /* @__PURE__ */ (0, import_react45.createElement)(cursorComp, cursorProps);
        };
        _this.renderPolarAxis = function(element2, displayName, index2) {
          var axisType = (0, import_get6.default)(element2, "type.axisType");
          var axisMap = (0, import_get6.default)(_this.state, "".concat(axisType, "Map"));
          var axisOption = axisMap[element2.props["".concat(axisType, "Id")]];
          return /* @__PURE__ */ (0, import_react45.cloneElement)(element2, _objectSpread24(_objectSpread24({}, axisOption), {}, {
            className: axisType,
            key: element2.key || "".concat(displayName, "-").concat(index2),
            ticks: getTicksOfAxis(axisOption, true)
          }));
        };
        _this.renderXAxis = function(element2, displayName, index2) {
          var xAxisMap = _this.state.xAxisMap;
          var axisObj = xAxisMap[element2.props.xAxisId];
          return _this.renderAxis(axisObj, element2, displayName, index2);
        };
        _this.renderYAxis = function(element2, displayName, index2) {
          var yAxisMap = _this.state.yAxisMap;
          var axisObj = yAxisMap[element2.props.yAxisId];
          return _this.renderAxis(axisObj, element2, displayName, index2);
        };
        _this.renderGrid = function(element2) {
          var _this$state3 = _this.state, xAxisMap = _this$state3.xAxisMap, yAxisMap = _this$state3.yAxisMap, offset = _this$state3.offset;
          var _this$props = _this.props, width = _this$props.width, height = _this$props.height;
          var xAxis = getAnyElementOfObject(xAxisMap);
          var yAxisWithFiniteDomain = (0, import_find.default)(yAxisMap, function(axis) {
            return (0, import_every2.default)(axis.domain, isFinit);
          });
          var yAxis = yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);
          var props = element2.props || {};
          return /* @__PURE__ */ (0, import_react45.cloneElement)(element2, {
            key: element2.key || "grid",
            x: isNumber(props.x) ? props.x : offset.left,
            y: isNumber(props.y) ? props.y : offset.top,
            width: isNumber(props.width) ? props.width : offset.width,
            height: isNumber(props.height) ? props.height : offset.height,
            xAxis,
            yAxis,
            offset,
            chartWidth: width,
            chartHeight: height,
            verticalCoordinatesGenerator: props.verticalCoordinatesGenerator || _this.verticalCoordinatesGenerator,
            horizontalCoordinatesGenerator: props.horizontalCoordinatesGenerator || _this.horizontalCoordinatesGenerator
          });
        };
        _this.renderPolarGrid = function(element2) {
          var _element$props = element2.props, radialLines = _element$props.radialLines, polarAngles = _element$props.polarAngles, polarRadius = _element$props.polarRadius;
          var _this$state4 = _this.state, radiusAxisMap = _this$state4.radiusAxisMap, angleAxisMap = _this$state4.angleAxisMap;
          var radiusAxis = getAnyElementOfObject(radiusAxisMap);
          var angleAxis = getAnyElementOfObject(angleAxisMap);
          var cx = angleAxis.cx, cy = angleAxis.cy, innerRadius = angleAxis.innerRadius, outerRadius = angleAxis.outerRadius;
          return /* @__PURE__ */ (0, import_react45.cloneElement)(element2, {
            polarAngles: (0, import_isArray8.default)(polarAngles) ? polarAngles : getTicksOfAxis(angleAxis, true).map(function(entry) {
              return entry.coordinate;
            }),
            polarRadius: (0, import_isArray8.default)(polarRadius) ? polarRadius : getTicksOfAxis(radiusAxis, true).map(function(entry) {
              return entry.coordinate;
            }),
            cx,
            cy,
            innerRadius,
            outerRadius,
            key: element2.key || "polar-grid",
            radialLines
          });
        };
        _this.renderLegend = function() {
          var formattedGraphicalItems = _this.state.formattedGraphicalItems;
          var _this$props2 = _this.props, children = _this$props2.children, width = _this$props2.width, height = _this$props2.height;
          var margin = _this.props.margin || {};
          var legendWidth = width - (margin.left || 0) - (margin.right || 0);
          var props = getLegendProps({
            children,
            formattedGraphicalItems,
            legendWidth,
            legendContent
          });
          if (!props) {
            return null;
          }
          var item = props.item, otherProps = _objectWithoutProperties11(props, ["item"]);
          return /* @__PURE__ */ (0, import_react45.cloneElement)(item, _objectSpread24(_objectSpread24({}, otherProps), {}, {
            chartWidth: width,
            chartHeight: height,
            margin,
            ref: function ref(legend) {
              _this.legendInstance = legend;
            },
            onBBoxUpdate: _this.handleLegendBBoxUpdate
          }));
        };
        _this.renderTooltip = function() {
          var children = _this.props.children;
          var tooltipItem = findChildByType(children, Tooltip.displayName);
          if (!tooltipItem) {
            return null;
          }
          var _this$state5 = _this.state, isTooltipActive = _this$state5.isTooltipActive, activeCoordinate = _this$state5.activeCoordinate, activePayload = _this$state5.activePayload, activeLabel = _this$state5.activeLabel, offset = _this$state5.offset;
          return /* @__PURE__ */ (0, import_react45.cloneElement)(tooltipItem, {
            viewBox: _objectSpread24(_objectSpread24({}, offset), {}, {
              x: offset.left,
              y: offset.top
            }),
            active: isTooltipActive,
            label: activeLabel,
            payload: isTooltipActive ? activePayload : [],
            coordinate: activeCoordinate
          });
        };
        _this.renderBrush = function(element2) {
          var _this$props3 = _this.props, margin = _this$props3.margin, data = _this$props3.data;
          var _this$state6 = _this.state, offset = _this$state6.offset, dataStartIndex = _this$state6.dataStartIndex, dataEndIndex = _this$state6.dataEndIndex, updateId = _this$state6.updateId;
          return /* @__PURE__ */ (0, import_react45.cloneElement)(element2, {
            key: element2.key || "_recharts-brush",
            onChange: combineEventHandlers(_this.handleBrushChange, null, element2.props.onChange),
            data,
            x: isNumber(element2.props.x) ? element2.props.x : offset.left,
            y: isNumber(element2.props.y) ? element2.props.y : offset.top + offset.height + offset.brushBottom - (margin.bottom || 0),
            width: isNumber(element2.props.width) ? element2.props.width : offset.width,
            startIndex: dataStartIndex,
            endIndex: dataEndIndex,
            updateId: "brush-".concat(updateId)
          });
        };
        _this.renderReferenceElement = function(element2, displayName, index2) {
          if (!element2) {
            return null;
          }
          var _assertThisInitialize = _assertThisInitialized18(_this), clipPathId = _assertThisInitialize.clipPathId;
          var _this$state7 = _this.state, xAxisMap = _this$state7.xAxisMap, yAxisMap = _this$state7.yAxisMap, offset = _this$state7.offset;
          var _element$props2 = element2.props, xAxisId = _element$props2.xAxisId, yAxisId = _element$props2.yAxisId;
          return /* @__PURE__ */ (0, import_react45.cloneElement)(element2, {
            key: element2.key || "".concat(displayName, "-").concat(index2),
            xAxis: xAxisMap[xAxisId],
            yAxis: yAxisMap[yAxisId],
            viewBox: {
              x: offset.left,
              y: offset.top,
              width: offset.width,
              height: offset.height
            },
            clipPathId
          });
        };
        _this.renderActivePoints = function(_ref12) {
          var item = _ref12.item, activePoint = _ref12.activePoint, basePoint = _ref12.basePoint, childIndex = _ref12.childIndex, isRange = _ref12.isRange;
          var result = [];
          var key = item.props.key;
          var _item$item$props = item.item.props, activeDot = _item$item$props.activeDot, dataKey = _item$item$props.dataKey;
          var dotProps = _objectSpread24(_objectSpread24({
            index: childIndex,
            dataKey,
            cx: activePoint.x,
            cy: activePoint.y,
            r: 4,
            fill: getMainColorOfGraphicItem(item.item),
            strokeWidth: 2,
            stroke: "#fff",
            payload: activePoint.payload,
            value: activePoint.value,
            key: "".concat(key, "-activePoint-").concat(childIndex)
          }, filterProps(activeDot)), adaptEventHandlers(activeDot));
          result.push(CategoricalChartWrapper.renderActiveDot(activeDot, dotProps));
          if (basePoint) {
            result.push(CategoricalChartWrapper.renderActiveDot(activeDot, _objectSpread24(_objectSpread24({}, dotProps), {}, {
              cx: basePoint.x,
              cy: basePoint.y,
              key: "".concat(key, "-basePoint-").concat(childIndex)
            })));
          } else if (isRange) {
            result.push(null);
          }
          return result;
        };
        _this.renderGraphicChild = function(element2, displayName, index2) {
          var item = _this.filterFormatItem(element2, displayName, index2);
          if (!item) {
            return null;
          }
          var tooltipEventType = _this.getTooltipEventType();
          var _this$state8 = _this.state, isTooltipActive = _this$state8.isTooltipActive, tooltipAxis = _this$state8.tooltipAxis, activeTooltipIndex = _this$state8.activeTooltipIndex, activeLabel = _this$state8.activeLabel;
          var children = _this.props.children;
          var tooltipItem = findChildByType(children, Tooltip.displayName);
          var _item$props2 = item.props, points = _item$props2.points, isRange = _item$props2.isRange, baseLine = _item$props2.baseLine;
          var _item$item$props2 = item.item.props, activeDot = _item$item$props2.activeDot, hide = _item$item$props2.hide;
          var hasActive = !hide && isTooltipActive && tooltipItem && activeDot && activeTooltipIndex >= 0;
          var itemEvents = {};
          if (tooltipEventType !== "axis" && tooltipItem && tooltipItem.props.trigger === "click") {
            itemEvents = {
              onClick: combineEventHandlers(_this.handleItemMouseEnter, null, element2.props.onCLick)
            };
          } else if (tooltipEventType !== "axis") {
            itemEvents = {
              onMouseLeave: combineEventHandlers(_this.handleItemMouseLeave, null, element2.props.onMouseLeave),
              onMouseEnter: combineEventHandlers(_this.handleItemMouseEnter, null, element2.props.onMouseEnter)
            };
          }
          var graphicalItem = /* @__PURE__ */ (0, import_react45.cloneElement)(element2, _objectSpread24(_objectSpread24({}, item.props), itemEvents));
          function findWithPayload(entry) {
            return typeof tooltipAxis.dataKey === "function" ? tooltipAxis.dataKey(entry.payload) : null;
          }
          if (hasActive) {
            var activePoint, basePoint;
            if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
              var specifiedKey = typeof tooltipAxis.dataKey === "function" ? findWithPayload : "payload.".concat(tooltipAxis.dataKey.toString());
              activePoint = findEntryInArray(points, specifiedKey, activeLabel);
              basePoint = isRange && baseLine && findEntryInArray(baseLine, specifiedKey, activeLabel);
            } else {
              activePoint = points[activeTooltipIndex];
              basePoint = isRange && baseLine && baseLine[activeTooltipIndex];
            }
            if (!(0, import_isNil10.default)(activePoint)) {
              return [graphicalItem].concat(_toConsumableArray11(_this.renderActivePoints({
                item,
                activePoint,
                basePoint,
                childIndex: activeTooltipIndex,
                isRange
              })));
            }
          }
          if (isRange) {
            return [graphicalItem, null, null];
          }
          return [graphicalItem, null];
        };
        _this.renderCustomized = function(element2, displayName, index2) {
          return /* @__PURE__ */ (0, import_react45.cloneElement)(element2, _objectSpread24(_objectSpread24({
            key: "recharts-customized-".concat(index2)
          }, _this.props), _this.state));
        };
        _this.uniqueChartId = (0, import_isNil10.default)(_props.id) ? uniqueId("recharts") : _props.id;
        _this.clipPathId = "".concat(_this.uniqueChartId, "-clip");
        if (_props.throttleDelay) {
          _this.triggeredAfterMouseMove = (0, import_throttle.default)(_this.triggeredAfterMouseMove, _props.throttleDelay);
        }
        _this.state = {};
        return _this;
      }
      _createClass19(CategoricalChartWrapper, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (!(0, import_isNil10.default)(this.props.syncId)) {
            this.addListener();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if ((0, import_isNil10.default)(prevProps.syncId) && !(0, import_isNil10.default)(this.props.syncId)) {
            this.addListener();
          }
          if (!(0, import_isNil10.default)(prevProps.syncId) && (0, import_isNil10.default)(this.props.syncId)) {
            this.removeListener();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.clearDeferId();
          if (!(0, import_isNil10.default)(this.props.syncId)) {
            this.removeListener();
          }
          this.cancelThrottledTriggerAfterMouseMove();
        }
      }, {
        key: "cancelThrottledTriggerAfterMouseMove",
        value: function cancelThrottledTriggerAfterMouseMove() {
          if (typeof this.triggeredAfterMouseMove.cancel === "function") {
            this.triggeredAfterMouseMove.cancel();
          }
        }
      }, {
        key: "getTooltipEventType",
        value: function getTooltipEventType() {
          var tooltipItem = findChildByType(this.props.children, Tooltip.displayName);
          if (tooltipItem && (0, import_isBoolean.default)(tooltipItem.props.shared)) {
            var eventType = tooltipItem.props.shared ? "axis" : "item";
            return validateTooltipEventTypes.indexOf(eventType) >= 0 ? eventType : defaultTooltipEventType;
          }
          return defaultTooltipEventType;
        }
      }, {
        key: "getMouseInfo",
        value: function getMouseInfo(event) {
          if (!this.container) {
            return null;
          }
          var containerOffset = getOffset(this.container);
          var e3 = calculateChartCoordinate(event, containerOffset);
          var rangeObj = this.inRange(e3.chartX, e3.chartY);
          if (!rangeObj) {
            return null;
          }
          var _this$state9 = this.state, xAxisMap = _this$state9.xAxisMap, yAxisMap = _this$state9.yAxisMap;
          var tooltipEventType = this.getTooltipEventType();
          if (tooltipEventType !== "axis" && xAxisMap && yAxisMap) {
            var xScale = getAnyElementOfObject(xAxisMap).scale;
            var yScale = getAnyElementOfObject(yAxisMap).scale;
            var xValue = xScale && xScale.invert ? xScale.invert(e3.chartX) : null;
            var yValue = yScale && yScale.invert ? yScale.invert(e3.chartY) : null;
            return _objectSpread24(_objectSpread24({}, e3), {}, {
              xValue,
              yValue
            });
          }
          var toolTipData = getTooltipData(this.state, this.props.data, this.props.layout, rangeObj);
          if (toolTipData) {
            return _objectSpread24(_objectSpread24({}, e3), toolTipData);
          }
          return null;
        }
      }, {
        key: "getCursorRectangle",
        value: function getCursorRectangle() {
          var layout = this.props.layout;
          var _this$state10 = this.state, activeCoordinate = _this$state10.activeCoordinate, offset = _this$state10.offset, tooltipAxisBandSize = _this$state10.tooltipAxisBandSize;
          var halfSize = tooltipAxisBandSize / 2;
          return {
            stroke: "none",
            fill: "#ccc",
            x: layout === "horizontal" ? activeCoordinate.x - halfSize : offset.left + 0.5,
            y: layout === "horizontal" ? offset.top + 0.5 : activeCoordinate.y - halfSize,
            width: layout === "horizontal" ? tooltipAxisBandSize : offset.width - 1,
            height: layout === "horizontal" ? offset.height - 1 : tooltipAxisBandSize
          };
        }
      }, {
        key: "getCursorPoints",
        value: function getCursorPoints() {
          var layout = this.props.layout;
          var _this$state11 = this.state, activeCoordinate = _this$state11.activeCoordinate, offset = _this$state11.offset;
          var x1, y1, x22, y2;
          if (layout === "horizontal") {
            x1 = activeCoordinate.x;
            x22 = x1;
            y1 = offset.top;
            y2 = offset.top + offset.height;
          } else if (layout === "vertical") {
            y1 = activeCoordinate.y;
            y2 = y1;
            x1 = offset.left;
            x22 = offset.left + offset.width;
          } else if (!(0, import_isNil10.default)(activeCoordinate.cx) || !(0, import_isNil10.default)(activeCoordinate.cy)) {
            if (layout === "centric") {
              var cx = activeCoordinate.cx, cy = activeCoordinate.cy, innerRadius = activeCoordinate.innerRadius, outerRadius = activeCoordinate.outerRadius, angle = activeCoordinate.angle;
              var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);
              var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);
              x1 = innerPoint.x;
              y1 = innerPoint.y;
              x22 = outerPoint.x;
              y2 = outerPoint.y;
            } else {
              var _cx = activeCoordinate.cx, _cy = activeCoordinate.cy, radius = activeCoordinate.radius, startAngle = activeCoordinate.startAngle, endAngle = activeCoordinate.endAngle;
              var startPoint = polarToCartesian(_cx, _cy, radius, startAngle);
              var endPoint = polarToCartesian(_cx, _cy, radius, endAngle);
              return {
                points: [startPoint, endPoint],
                cx: _cx,
                cy: _cy,
                radius,
                startAngle,
                endAngle
              };
            }
          }
          return [{
            x: x1,
            y: y1
          }, {
            x: x22,
            y: y2
          }];
        }
      }, {
        key: "inRange",
        value: function inRange(x3, y2) {
          var layout = this.props.layout;
          if (layout === "horizontal" || layout === "vertical") {
            var offset = this.state.offset;
            var isInRange = x3 >= offset.left && x3 <= offset.left + offset.width && y2 >= offset.top && y2 <= offset.top + offset.height;
            return isInRange ? {
              x: x3,
              y: y2
            } : null;
          }
          var _this$state12 = this.state, angleAxisMap = _this$state12.angleAxisMap, radiusAxisMap = _this$state12.radiusAxisMap;
          if (angleAxisMap && radiusAxisMap) {
            var angleAxis = getAnyElementOfObject(angleAxisMap);
            return inRangeOfSector({
              x: x3,
              y: y2
            }, angleAxis);
          }
          return null;
        }
      }, {
        key: "parseEventsOfWrapper",
        value: function parseEventsOfWrapper() {
          var children = this.props.children;
          var tooltipEventType = this.getTooltipEventType();
          var tooltipItem = findChildByType(children, Tooltip.displayName);
          var tooltipEvents = {};
          if (tooltipItem && tooltipEventType === "axis") {
            if (tooltipItem.props.trigger === "click") {
              tooltipEvents = {
                onClick: this.handleClick
              };
            } else {
              tooltipEvents = {
                onMouseEnter: this.handleMouseEnter,
                onMouseMove: this.handleMouseMove,
                onMouseLeave: this.handleMouseLeave,
                onTouchMove: this.handleTouchMove,
                onTouchStart: this.handleTouchStart,
                onTouchEnd: this.handleTouchEnd
              };
            }
          }
          var outerEvents = adaptEventHandlers(this.props, this.handleOuterEvent);
          return _objectSpread24(_objectSpread24({}, outerEvents), tooltipEvents);
        }
      }, {
        key: "addListener",
        value: function addListener() {
          eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent);
          if (eventCenter.setMaxListeners && eventCenter._maxListeners) {
            eventCenter.setMaxListeners(eventCenter._maxListeners + 1);
          }
        }
      }, {
        key: "removeListener",
        value: function removeListener() {
          eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent);
          if (eventCenter.setMaxListeners && eventCenter._maxListeners) {
            eventCenter.setMaxListeners(eventCenter._maxListeners - 1);
          }
        }
      }, {
        key: "triggerSyncEvent",
        value: function triggerSyncEvent(data) {
          var syncId = this.props.syncId;
          if (!(0, import_isNil10.default)(syncId)) {
            eventCenter.emit(SYNC_EVENT, syncId, this.uniqueChartId, data);
          }
        }
      }, {
        key: "applySyncEvent",
        value: function applySyncEvent(data) {
          var _this$props4 = this.props, layout = _this$props4.layout, syncMethod = _this$props4.syncMethod;
          var updateId = this.state.updateId;
          var dataStartIndex = data.dataStartIndex, dataEndIndex = data.dataEndIndex;
          if (!(0, import_isNil10.default)(data.dataStartIndex) || !(0, import_isNil10.default)(data.dataEndIndex)) {
            this.setState(_objectSpread24({
              dataStartIndex,
              dataEndIndex
            }, updateStateOfAxisMapsOffsetAndStackGroups({
              props: this.props,
              dataStartIndex,
              dataEndIndex,
              updateId
            }, this.state)));
          } else if (!(0, import_isNil10.default)(data.activeTooltipIndex)) {
            var chartX = data.chartX, chartY = data.chartY;
            var activeTooltipIndex = data.activeTooltipIndex;
            var _this$state13 = this.state, offset = _this$state13.offset, tooltipTicks = _this$state13.tooltipTicks;
            if (!offset) {
              return;
            }
            if (typeof syncMethod === "function") {
              activeTooltipIndex = syncMethod(tooltipTicks, data);
            } else if (syncMethod === "value") {
              activeTooltipIndex = -1;
              for (var i3 = 0; i3 < tooltipTicks.length; i3++) {
                if (tooltipTicks[i3].value === data.activeLabel) {
                  activeTooltipIndex = i3;
                  break;
                }
              }
            }
            var viewBox = _objectSpread24(_objectSpread24({}, offset), {}, {
              x: offset.left,
              y: offset.top
            });
            var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);
            var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);
            var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;
            var activePayload = getTooltipContent(this.state, this.props.data, activeTooltipIndex);
            var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {
              x: layout === "horizontal" ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,
              y: layout === "horizontal" ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate
            } : originCoordinate;
            this.setState(_objectSpread24(_objectSpread24({}, data), {}, {
              activeLabel,
              activeCoordinate,
              activePayload,
              activeTooltipIndex
            }));
          } else {
            this.setState(data);
          }
        }
      }, {
        key: "filterFormatItem",
        value: function filterFormatItem(item, displayName, childIndex) {
          var formattedGraphicalItems = this.state.formattedGraphicalItems;
          for (var i3 = 0, len = formattedGraphicalItems.length; i3 < len; i3++) {
            var entry = formattedGraphicalItems[i3];
            if (entry.item === item || entry.props.key === item.key || displayName === getDisplayName(entry.item.type) && childIndex === entry.childIndex) {
              return entry;
            }
          }
          return null;
        }
      }, {
        key: "renderAxis",
        value: function renderAxis(axisOptions, element2, displayName, index2) {
          var _this$props5 = this.props, width = _this$props5.width, height = _this$props5.height;
          return /* @__PURE__ */ import_react45.default.createElement(CartesianAxis, _extends22({}, axisOptions, {
            className: "recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType),
            key: element2.key || "".concat(displayName, "-").concat(index2),
            viewBox: {
              x: 0,
              y: 0,
              width,
              height
            },
            ticksGenerator: this.axesTicksGenerator
          }));
        }
      }, {
        key: "renderClipPath",
        value: function renderClipPath() {
          var clipPathId = this.clipPathId;
          var _this$state$offset = this.state.offset, left = _this$state$offset.left, top = _this$state$offset.top, height = _this$state$offset.height, width = _this$state$offset.width;
          return /* @__PURE__ */ import_react45.default.createElement("defs", null, /* @__PURE__ */ import_react45.default.createElement("clipPath", {
            id: clipPathId
          }, /* @__PURE__ */ import_react45.default.createElement("rect", {
            x: left,
            y: top,
            height,
            width
          })));
        }
      }, {
        key: "getXScales",
        value: function getXScales() {
          var xAxisMap = this.state.xAxisMap;
          return xAxisMap ? Object.entries(xAxisMap).reduce(function(res, _ref13) {
            var _ref14 = _slicedToArray8(_ref13, 2), axisId = _ref14[0], axisProps = _ref14[1];
            return _objectSpread24(_objectSpread24({}, res), {}, _defineProperty24({}, axisId, axisProps.scale));
          }, {}) : null;
        }
      }, {
        key: "getYScales",
        value: function getYScales() {
          var yAxisMap = this.state.yAxisMap;
          return yAxisMap ? Object.entries(yAxisMap).reduce(function(res, _ref15) {
            var _ref16 = _slicedToArray8(_ref15, 2), axisId = _ref16[0], axisProps = _ref16[1];
            return _objectSpread24(_objectSpread24({}, res), {}, _defineProperty24({}, axisId, axisProps.scale));
          }, {}) : null;
        }
      }, {
        key: "getXScaleByAxisId",
        value: function getXScaleByAxisId(axisId) {
          var _this$state$xAxisMap, _this$state$xAxisMap$;
          return (_this$state$xAxisMap = this.state.xAxisMap) === null || _this$state$xAxisMap === void 0 ? void 0 : (_this$state$xAxisMap$ = _this$state$xAxisMap[axisId]) === null || _this$state$xAxisMap$ === void 0 ? void 0 : _this$state$xAxisMap$.scale;
        }
      }, {
        key: "getYScaleByAxisId",
        value: function getYScaleByAxisId(axisId) {
          var _this$state$yAxisMap, _this$state$yAxisMap$;
          return (_this$state$yAxisMap = this.state.yAxisMap) === null || _this$state$yAxisMap === void 0 ? void 0 : (_this$state$yAxisMap$ = _this$state$yAxisMap[axisId]) === null || _this$state$yAxisMap$ === void 0 ? void 0 : _this$state$yAxisMap$.scale;
        }
      }, {
        key: "getItemByXY",
        value: function getItemByXY(chartXY) {
          var formattedGraphicalItems = this.state.formattedGraphicalItems;
          if (formattedGraphicalItems && formattedGraphicalItems.length) {
            for (var i3 = 0, len = formattedGraphicalItems.length; i3 < len; i3++) {
              var graphicalItem = formattedGraphicalItems[i3];
              var props = graphicalItem.props, item = graphicalItem.item;
              var itemDisplayName = getDisplayName(item.type);
              if (itemDisplayName === "Bar") {
                var activeBarItem = (props.data || []).find(function(entry) {
                  return isInRectangle(chartXY, entry);
                });
                if (activeBarItem) {
                  return {
                    graphicalItem,
                    payload: activeBarItem
                  };
                }
              } else if (itemDisplayName === "RadialBar") {
                var _activeBarItem = (props.data || []).find(function(entry) {
                  return inRangeOfSector(chartXY, entry);
                });
                if (_activeBarItem) {
                  return {
                    graphicalItem,
                    payload: _activeBarItem
                  };
                }
              }
            }
          }
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          if (!validateWidthHeight(this)) {
            return null;
          }
          var _this$props6 = this.props, children = _this$props6.children, className = _this$props6.className, width = _this$props6.width, height = _this$props6.height, style = _this$props6.style, compact = _this$props6.compact, others = _objectWithoutProperties11(_this$props6, ["children", "className", "width", "height", "style", "compact"]);
          var attrs = filterProps(others);
          var map4 = {
            CartesianGrid: {
              handler: this.renderGrid,
              once: true
            },
            ReferenceArea: {
              handler: this.renderReferenceElement
            },
            ReferenceLine: {
              handler: this.renderReferenceElement
            },
            ReferenceDot: {
              handler: this.renderReferenceElement
            },
            XAxis: {
              handler: this.renderXAxis
            },
            YAxis: {
              handler: this.renderYAxis
            },
            Brush: {
              handler: this.renderBrush,
              once: true
            },
            Bar: {
              handler: this.renderGraphicChild
            },
            Line: {
              handler: this.renderGraphicChild
            },
            Area: {
              handler: this.renderGraphicChild
            },
            Radar: {
              handler: this.renderGraphicChild
            },
            RadialBar: {
              handler: this.renderGraphicChild
            },
            Scatter: {
              handler: this.renderGraphicChild
            },
            Pie: {
              handler: this.renderGraphicChild
            },
            Funnel: {
              handler: this.renderGraphicChild
            },
            Tooltip: {
              handler: this.renderCursor,
              once: true
            },
            PolarGrid: {
              handler: this.renderPolarGrid,
              once: true
            },
            PolarAngleAxis: {
              handler: this.renderPolarAxis
            },
            PolarRadiusAxis: {
              handler: this.renderPolarAxis
            },
            Customized: {
              handler: this.renderCustomized
            }
          };
          if (compact) {
            return /* @__PURE__ */ import_react45.default.createElement(Surface, _extends22({}, attrs, {
              width,
              height
            }), this.renderClipPath(), renderByOrder(children, map4));
          }
          var events = this.parseEventsOfWrapper();
          return /* @__PURE__ */ import_react45.default.createElement("div", _extends22({
            className: (0, import_classnames23.default)("recharts-wrapper", className),
            style: _objectSpread24({
              position: "relative",
              cursor: "default",
              width,
              height
            }, style)
          }, events, {
            ref: function ref(node) {
              _this2.container = node;
            }
          }), /* @__PURE__ */ import_react45.default.createElement(Surface, _extends22({}, attrs, {
            width,
            height
          }), this.renderClipPath(), renderByOrder(children, map4)), this.renderLegend(), this.renderTooltip());
        }
      }]);
      return CategoricalChartWrapper;
    }(import_react45.Component), _class.displayName = chartName, _class.defaultProps = _objectSpread24({
      layout: "horizontal",
      stackOffset: "none",
      barCategoryGap: "10%",
      barGap: 4,
      margin: {
        top: 5,
        right: 5,
        bottom: 5,
        left: 5
      },
      reverseStackOrder: false,
      syncMethod: "index"
    }, defaultProps3), _class.getDerivedStateFromProps = function(nextProps, prevState) {
      var data = nextProps.data, children = nextProps.children, width = nextProps.width, height = nextProps.height, layout = nextProps.layout, stackOffset = nextProps.stackOffset, margin = nextProps.margin;
      if ((0, import_isNil10.default)(prevState.updateId)) {
        var defaultState = createDefaultState(nextProps);
        return _objectSpread24(_objectSpread24(_objectSpread24({}, defaultState), {}, {
          updateId: 0
        }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread24(_objectSpread24({
          props: nextProps
        }, defaultState), {}, {
          updateId: 0
        }), prevState)), {}, {
          prevData: data,
          prevWidth: width,
          prevHeight: height,
          prevLayout: layout,
          prevStackOffset: stackOffset,
          prevMargin: margin,
          prevChildren: children
        });
      }
      if (data !== prevState.prevData || width !== prevState.prevWidth || height !== prevState.prevHeight || layout !== prevState.prevLayout || stackOffset !== prevState.prevStackOffset || !shallowEqual(margin, prevState.prevMargin)) {
        var _defaultState = createDefaultState(nextProps);
        var keepFromPrevState = {
          chartX: prevState.chartX,
          chartY: prevState.chartY,
          isTooltipActive: prevState.isTooltipActive
        };
        var updatesToState = _objectSpread24(_objectSpread24({}, getTooltipData(prevState, data, layout)), {}, {
          updateId: prevState.updateId + 1
        });
        var newState = _objectSpread24(_objectSpread24(_objectSpread24({}, _defaultState), keepFromPrevState), updatesToState);
        return _objectSpread24(_objectSpread24(_objectSpread24({}, newState), updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread24({
          props: nextProps
        }, newState), prevState)), {}, {
          prevData: data,
          prevWidth: width,
          prevHeight: height,
          prevLayout: layout,
          prevStackOffset: stackOffset,
          prevMargin: margin,
          prevChildren: children
        });
      }
      if (!isChildrenEqual(children, prevState.prevChildren)) {
        var hasGlobalData = !(0, import_isNil10.default)(data);
        var newUpdateId = hasGlobalData ? prevState.updateId : prevState.updateId + 1;
        return _objectSpread24(_objectSpread24({
          updateId: newUpdateId
        }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread24(_objectSpread24({
          props: nextProps
        }, prevState), {}, {
          updateId: newUpdateId
        }), prevState)), {}, {
          prevChildren: children
        });
      }
      return null;
    }, _class.renderActiveDot = function(option, props) {
      var dot;
      if (/* @__PURE__ */ (0, import_react45.isValidElement)(option)) {
        dot = /* @__PURE__ */ (0, import_react45.cloneElement)(option, props);
      } else if ((0, import_isFunction13.default)(option)) {
        dot = option(props);
      } else {
        dot = /* @__PURE__ */ import_react45.default.createElement(Dot, props);
      }
      return /* @__PURE__ */ import_react45.default.createElement(Layer, {
        className: "recharts-active-dot",
        key: props.key
      }, dot);
    }, _temp;
  };

  // node_modules/recharts/es6/chart/AreaChart.js
  var AreaChart = generateCategoricalChart({
    chartName: "AreaChart",
    GraphicalChild: Area,
    axisComponents: [{
      axisType: "xAxis",
      AxisComp: XAxis
    }, {
      axisType: "yAxis",
      AxisComp: YAxis
    }],
    formatAxisMap
  });

  // src/components/primitives/Stats.tsx
  function ProgressBar({ count, total, status }) {
    let percent = `${count === 0 && total === 0 && status === "done" ? 100 : Math.min(100, count / total * 100).toFixed(0)}%`;
    if (status === "inprogress" && count === 0 && total === 0)
      percent = `0%`;
    return /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-gray-300 rounded-lg flex-1 h-2 overflow-hidden border-b border-purple-600",
      title: percent
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-purple-600 h-full",
      style: { width: percent }
    }));
  }
  function StatusIcon({ status, lastUpdated }) {
    const title = lastUpdated ? `Last updated: ${format(lastUpdated, "dd/MM hh:mm")}` : "";
    return status === "done" ? /* @__PURE__ */ import_react46.default.createElement(FaCheckCircle, {
      title,
      className: "text-green-600"
    }) : status === "error" ? /* @__PURE__ */ import_react46.default.createElement(FaExclamationCircle, {
      title,
      className: "text-red-600"
    }) : /* @__PURE__ */ import_react46.default.createElement(FaSpinner, {
      title,
      className: "animate-spin"
    });
  }
  function Stats({ stats, cacheHistory }) {
    const [fullView, setFullView] = import_react46.default.useState(false);
    return /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, null, fullView ? /* @__PURE__ */ import_react46.default.createElement(FullView, {
      stats,
      cacheHistory
    }) : null, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: `flex flex-row gap-6 mt-2 mx-3 text-xs justify-center items-center ${fullView ? "opacity-100" : "opacity-60"} hover:opacity-100 transition-opacity`
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-purple-600 rounded-md text-center px-2 py-0.5"
    }, "Followers"), /* @__PURE__ */ import_react46.default.createElement(ProgressBar, __spreadValues({}, stats.followers)), /* @__PURE__ */ import_react46.default.createElement(StatusIcon, {
      status: stats.followers.status,
      lastUpdated: stats.followers.lastUpdated
    })), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-purple-600 rounded-md text-center px-2 py-0.5"
    }, "Subscribers"), /* @__PURE__ */ import_react46.default.createElement(ProgressBar, __spreadValues({}, stats.subs)), /* @__PURE__ */ import_react46.default.createElement(StatusIcon, {
      status: stats.subs.status,
      lastUpdated: stats.subs.lastUpdated
    })), /* @__PURE__ */ import_react46.default.createElement("button", {
      className: "bg-purple-600 p-1 rounded-md",
      onClick: () => setFullView((v2) => !v2)
    }, fullView ? /* @__PURE__ */ import_react46.default.createElement(FaAngleDown, null) : /* @__PURE__ */ import_react46.default.createElement(FaAngleUp, null))));
  }
  function FullView({ stats, cacheHistory }) {
    return /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-gray-700 flex-3 mt-2 rounded-md px-3 pt-3 flex flex-col gap-2"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "text-sm flex flex-row justify-center items-center gap-2"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-purple-600 rounded-md text-center px-2 py-0.5"
    }, Intl.NumberFormat().format(stats.followers.count), " /", " ", Intl.NumberFormat().format(Math.max(stats.followers.total, stats.followers.count)), " Followers")), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "bg-purple-600 rounded-md text-center px-2 py-0.5"
    }, Intl.NumberFormat().format(stats.subs.count), " /", " ", Intl.NumberFormat().format(Math.max(stats.subs.total, stats.subs.count)), " Subscribers"))), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "opacity-60 flex flex-row text-xs -mt-1 justify-center items-center gap-2"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "rounded-md text-center"
    }, "Last Updated: ", stats.followers.lastUpdated ? format(stats.followers.lastUpdated, "dd/MM/yy hh:mm") : "")), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "rounded-md text-center"
    }, "Last Updated: ", stats.subs.lastUpdated ? format(stats.subs.lastUpdated, "dd/MM/yy hh:mm") : ""))), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex-1 flex flex-row justify-center items-center gap-2"
    }, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex-1 h-full"
    }, /* @__PURE__ */ import_react46.default.createElement(ResponsiveContainer, {
      width: "100%",
      height: "100%"
    }, /* @__PURE__ */ import_react46.default.createElement(AreaChart, {
      data: cacheHistory.followers.slice(-30)
    }, /* @__PURE__ */ import_react46.default.createElement(XAxis, {
      dataKey: "time"
    }), /* @__PURE__ */ import_react46.default.createElement(YAxis, null), /* @__PURE__ */ import_react46.default.createElement(Tooltip, {
      content: /* @__PURE__ */ import_react46.default.createElement(CustomTooltip, null)
    }), /* @__PURE__ */ import_react46.default.createElement(Area, {
      dataKey: "count",
      stroke: "#7c3aed",
      fill: "#7c3aed",
      fillOpacity: 0.1
    })))), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "flex-1 h-full"
    }, /* @__PURE__ */ import_react46.default.createElement(ResponsiveContainer, {
      width: "100%",
      height: "100%"
    }, /* @__PURE__ */ import_react46.default.createElement(AreaChart, {
      data: cacheHistory.subs.slice(-30)
    }, /* @__PURE__ */ import_react46.default.createElement(XAxis, {
      dataKey: "time"
    }), /* @__PURE__ */ import_react46.default.createElement(YAxis, null), /* @__PURE__ */ import_react46.default.createElement(Tooltip, {
      content: /* @__PURE__ */ import_react46.default.createElement(CustomTooltip, null)
    }), /* @__PURE__ */ import_react46.default.createElement(Area, {
      dataKey: "count",
      stroke: "#7c3aed",
      fill: "#7c3aed",
      fillOpacity: 0.1
    }))))), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "text-xs opacity-40 text-center relative -top-2 -mt-2"
    }, "These numbers may appear high, as unfollows/unsubs aren't tracked"));
  }
  function CustomTooltip({ payload, active }) {
    var _a, _b, _c, _d;
    if (!active || !payload || !payload[0])
      return null;
    return /* @__PURE__ */ import_react46.default.createElement("div", null, /* @__PURE__ */ import_react46.default.createElement("div", null, (_b = (_a = payload[0]) == null ? void 0 : _a.payload) == null ? void 0 : _b.fullTime), /* @__PURE__ */ import_react46.default.createElement("div", null, "Count: ", (((_d = (_c = payload[0]) == null ? void 0 : _c.payload) == null ? void 0 : _d.count) || 0).toFixed(0)));
  }

  // src/components/screens/Main.tsx
  function MainScreen({
    chatEvents,
    discordSettings,
    settings,
    setSettings,
    channelInfo,
    client,
    chatPaused,
    setChatPaused,
    resetChat,
    winners,
    setWinners,
    setPastGiveaways,
    forfeits,
    stats,
    cacheHistory
  }) {
    const messageDelay = import_react47.default.useMemo(() => {
      const mostRecent = chatEvents[chatEvents.length - 1];
      if (!mostRecent)
        return "0s delay";
      return `~${formatDuration({
        seconds: Number(((mostRecent.receivedTs - mostRecent.tmiTs) / 1e3).toFixed(2))
      }).replace(" seconds", "s")} delay`;
    }, [chatEvents]);
    return /* @__PURE__ */ import_react47.default.createElement("div", {
      className: "flex flex-col flex-1",
      style: { height: "100vh" }
    }, /* @__PURE__ */ import_react47.default.createElement(Winner, {
      winners,
      onClear: (idx) => setWinners((w2) => removeIdx(w2, idx)),
      chatClient: client,
      settings,
      discordSettings,
      channelInfo
    }), /* @__PURE__ */ import_react47.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react47.default.createElement(InstantGiveaway, {
      discordSettings,
      settings,
      channelInfo,
      setWinners,
      client,
      setPastGiveaways,
      forfeits
    }), /* @__PURE__ */ import_react47.default.createElement(ChatGiveaway, {
      discordSettings,
      settings,
      channelInfo,
      chatEvents,
      setWinners,
      client,
      setPastGiveaways,
      forfeits
    })), /* @__PURE__ */ import_react47.default.createElement(SettingsComponent, {
      channelId: channelInfo.userId,
      settings,
      setSettings,
      setChatPaused,
      resetChat,
      discordSettings
    }), settings.performanceMode && !winners.length ? /* @__PURE__ */ import_react47.default.createElement("div", {
      className: "h-full flex-1 gap-2 flex flex-col justify-center items-center"
    }, /* @__PURE__ */ import_react47.default.createElement("div", {
      className: "flex justify-center items-center gap-2 flex-row"
    }, /* @__PURE__ */ import_react47.default.createElement("div", null, chatEvents.length, " messages"), /* @__PURE__ */ import_react47.default.createElement(ChatControls, {
      chatEvents,
      paused: chatPaused,
      setPaused: setChatPaused,
      clear: resetChat
    })), /* @__PURE__ */ import_react47.default.createElement("div", null, messageDelay)) : /* @__PURE__ */ import_react47.default.createElement(ChatBox, {
      messageDelay,
      chatEvents,
      winners,
      paused: chatPaused,
      setPaused: setChatPaused,
      clear: resetChat,
      settings,
      setSettings
    }), /* @__PURE__ */ import_react47.default.createElement(Stats, {
      stats,
      cacheHistory
    }));
  }

  // src/components/screens/Setup.tsx
  var import_react48 = __toModule(require_react());
  function Setup({
    resetChat,
    setClient,
    channel,
    setChannel
  }) {
    const history = useHistory();
    import_react48.default.useEffect(() => {
      if (channel.login) {
        history.push("/");
      }
    }, [channel.login]);
    return /* @__PURE__ */ import_react48.default.createElement("div", {
      className: "flex flex-col justify-center items-center h-full gap-3 -mt-10"
    }, /* @__PURE__ */ import_react48.default.createElement("div", {
      className: "text-3xl"
    }, "First Time Setup"), /* @__PURE__ */ import_react48.default.createElement("p", {
      className: "max-w-md text-center opacity-70"
    }, "Click below to open a browser and log in with your Twitch account, to get the tokens needed below."), /* @__PURE__ */ import_react48.default.createElement("button", {
      className: "bg-purple-600 text-white py-1 px-3 rounded-md transform hover:scale-105 transition-transform shadow-md flex flex-row items-center gap-2 justify-center",
      onClick: () => Neutralino.os.open("https://giveaway-o-tron.vercel.app"),
      title: "Go to Twitch"
    }, "Authenticate with Twitch to get tokens \u2192"), /* @__PURE__ */ import_react48.default.createElement("p", {
      className: "max-w-lg text-center opacity-70 mt-4"
    }, "Once you have the tokens, you can post them below."), /* @__PURE__ */ import_react48.default.createElement("form", {
      className: "flex flex-col gap-2 justify-center items-center",
      onSubmit: async (e3) => {
        e3.preventDefault();
        const accessToken = e3.currentTarget.elements.accessToken.value.trim();
        const refreshToken = e3.currentTarget.elements.refreshToken.value.trim();
        if (!accessToken || !refreshToken)
          return;
        const data = await validateToken(accessToken, refreshToken);
        if (!data)
          return;
        resetChat();
        console.info("[setup][client]", data);
        if (data.login)
          setClient((cl) => cl ? cl : init3(data));
        setChannel(data);
        history.push("/");
      }
    }, /* @__PURE__ */ import_react48.default.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-md border-b border-purple-500 overflow-ellipsis",
      placeholder: "Access Token...",
      name: "accessToken",
      type: "password"
    }), /* @__PURE__ */ import_react48.default.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-md border-b border-purple-500 overflow-ellipsis",
      placeholder: "Refresh Token...",
      name: "refreshToken",
      type: "password"
    }), /* @__PURE__ */ import_react48.default.createElement("button", {
      className: "bg-purple-600 text-white py-1 px-5 rounded-md transform hover:scale-105 transition-transform shadow-md flex flex-row items-center gap-2 justify-center text-xl mt-2",
      title: "Setup connection"
    }, /* @__PURE__ */ import_react48.default.createElement(FaTwitch, null), /* @__PURE__ */ import_react48.default.createElement("span", {
      className: "relative -top-0.5"
    }, "Finish Setup"))));
  }

  // src/components/screens/PastGiveaways.tsx
  var import_react49 = __toModule(require_react());
  var typeNameMap = {
    [GiveawayType.Chat]: "Active Chatter Giveaway",
    [GiveawayType.Instant]: "Viewers Instant Giveaway"
  };
  function SettingItem({ label, value: value2 }) {
    return /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "flex flex-row justify-center items-center flex-1"
    }, /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md"
    }, label), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "bg-gray-600 px-2 py-1 rounded-r-md border-b border-purple-500 flex-1 overflow-ellipsis h-full max-w-full flex justify-center items-center"
    }, typeof value2 === "boolean" ? value2 ? /* @__PURE__ */ import_react49.default.createElement(FaCheck, null) : /* @__PURE__ */ import_react49.default.createElement(FaTimes, null) : value2));
  }
  var LIMIT_GIVEAWAY_LIST = 10;
  function PastGiveaways({
    giveaways,
    setPastGiveaways
  }) {
    return /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "mt-4 flex flex-col gap-5 flex-1 pb-5"
    }, /* @__PURE__ */ import_react49.default.createElement("h1", {
      className: "text-3xl flex items-center"
    }, "Last ", Math.min(giveaways.length, LIMIT_GIVEAWAY_LIST), " of ", giveaways.length, " Total Past Giveaway", giveaways.length === 1 ? "" : "s"), giveaways.slice(0, LIMIT_GIVEAWAY_LIST).map((giveaway, idx) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      return /* @__PURE__ */ import_react49.default.createElement("div", {
        key: idx,
        className: "border border-purple-600 rounded-md px-3 py-2 flex flex-col gap-2 bg-gray-700"
      }, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex flex-row gap-1 justify-between font-bold"
      }, typeNameMap[giveaway.type], /* @__PURE__ */ import_react49.default.createElement("div", {
        title: format(new Date(giveaway.createdAt), "PPPppp"),
        className: "flex flex-row gap-1 justify-center items-center"
      }, /* @__PURE__ */ import_react49.default.createElement(FaClock, {
        className: "text-xs"
      }), formatDistanceToNow(new Date(giveaway.createdAt), { addSuffix: true }))), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex flex-row justify-center items-center flex-1"
      }, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md"
      }, "Notes"), /* @__PURE__ */ import_react49.default.createElement("input", {
        className: "bg-gray-600 px-2 py-1 rounded-r-md border-b border-purple-500 flex-1 overflow-ellipsis h-full max-w-full flex justify-center items-center",
        placeholder: "Notes...",
        value: giveaway.notes || "",
        onChange: (e3) => setPastGiveaways((p2) => {
          const giveawayIdxToChange = p2.findIndex((i3) => i3.createdAt === giveaway.createdAt);
          if (giveawayIdxToChange === -1)
            return p2;
          const clone = JSON.parse(JSON.stringify(p2));
          clone[giveawayIdxToChange].notes = e3.target.value;
          return clone;
        })
      })), /* @__PURE__ */ import_react49.default.createElement("div", null, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "border-b border-purple-600 mb-2"
      }, "Winners"), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex flex-col gap-2 px-2"
      }, giveaway.winners.map((w2, widx) => /* @__PURE__ */ import_react49.default.createElement("div", {
        key: `${idx}-${widx}`,
        className: "border border-purple-600 rounded-md flex flex-row gap-1 flex-1 items-center"
      }, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "bg-purple-600 text-white h-full flex justify-center items-center px-3 py-2"
      }, w2.login), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "px-3 py-2 flex flex-row gap-3 flex-1"
      }, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex flex-row items-center gap-1"
      }, "Sub:", " ", w2.wasSubscriber ? /* @__PURE__ */ import_react49.default.createElement(FaCheck, {
        className: "text-green-600"
      }) : /* @__PURE__ */ import_react49.default.createElement(FaTimes, {
        className: "text-red-600"
      })), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex flex-row items-center gap-1"
      }, "Follower:", " ", w2.wasFollower ? /* @__PURE__ */ import_react49.default.createElement(FaCheck, {
        className: "text-green-600"
      }) : /* @__PURE__ */ import_react49.default.createElement(FaTimes, {
        className: "text-red-600"
      })), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex flex-row justify-center items-center flex-1"
      }, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md"
      }, "Notes"), /* @__PURE__ */ import_react49.default.createElement("input", {
        className: "bg-gray-600 px-2 py-1 rounded-r-md border-b border-purple-500 flex-1 overflow-ellipsis h-full max-w-full flex justify-center items-center",
        placeholder: "Notes...",
        value: w2.notes,
        onChange: (e3) => setPastGiveaways((p2) => {
          const giveawayIdxToChange = p2.findIndex((i3) => i3.createdAt === giveaway.createdAt);
          if (giveawayIdxToChange === -1)
            return p2;
          const winnerIdxToChange = p2[giveawayIdxToChange].winners.findIndex((gw) => gw.login === w2.login);
          if (winnerIdxToChange === -1)
            return p2;
          const clone = JSON.parse(JSON.stringify(p2));
          clone[giveawayIdxToChange].winners[winnerIdxToChange].notes = e3.target.value;
          return clone;
        })
      }))))))), /* @__PURE__ */ import_react49.default.createElement("div", null, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "border-b border-purple-600 mb-2"
      }, "Stats"), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "grid grid-cols-5 gap-2 px-2"
      }, /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Users",
        value: (_b = (_a = giveaway.giveawayStats) == null ? void 0 : _a.users) != null ? _b : "?"
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Entries",
        value: (_d = (_c = giveaway.giveawayStats) == null ? void 0 : _c.entries) != null ? _d : "?"
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Followers",
        value: (_f = (_e = giveaway.giveawayStats) == null ? void 0 : _e.followers) != null ? _f : "?"
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Subs",
        value: (_h = (_g = giveaway.giveawayStats) == null ? void 0 : _g.subs) != null ? _h : "?"
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Final Entries",
        value: (_j = (_i = giveaway.giveawayStats) == null ? void 0 : _i.finalEntries) != null ? _j : "?"
      }))), /* @__PURE__ */ import_react49.default.createElement("div", null, /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "border-b border-purple-600 mb-2"
      }, "Settings"), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "grid grid-cols-4 gap-2 px-2"
      }, /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Sub Luck",
        value: giveaway.settings.subLuck.toString()
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "# Winners",
        value: giveaway.settings.numberOfWinners.toString()
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Followers Only",
        value: giveaway.settings.followersOnly
      }), /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Send Messages",
        value: giveaway.settings.sendMessages
      }), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "grid col-span-4"
      }, /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Chat Command",
        value: giveaway.settings.chatCommand.toString().trim() || "No command"
      })), /* @__PURE__ */ import_react49.default.createElement("div", {
        className: "grid col-span-4"
      }, /* @__PURE__ */ import_react49.default.createElement(SettingItem, {
        label: "Winner Message",
        value: giveaway.settings.winnerMessage.toString()
      })))));
    }));
  }

  // src/components/screens/Settings.tsx
  var React43 = __toModule(require_react());

  // src/utils/updates.tsx
  var import_react50 = __toModule(require_react());
  var APP_VERSION = globalThis.NL_APP_VERSION;
  async function checkForUpdate() {
    try {
      const manifest = await Neutralino.updater.checkForUpdates(`https://giveaway-o-tron.vercel.app/api/version`);
      if (manifest.version != NL_APPVERSION) {
        console.info("[update]", { from: NL_APPVERSION, to: manifest.version });
        Et((t2) => {
          return /* @__PURE__ */ import_react50.default.createElement("div", {
            className: "flex flex-row gap-4 justify-center items-center"
          }, /* @__PURE__ */ import_react50.default.createElement("button", {
            onClick: () => Neutralino.os.open(manifest.data.url),
            className: "underline text-purple-600"
          }, "v", manifest.version, " available \u2192"), "or", /* @__PURE__ */ import_react50.default.createElement("button", {
            className: "bg-purple-600 px-2 py-1 rounded-md text-white hover:scale-105",
            onClick: async () => {
              Et("The app will now install the update and try to reopen, you may need to reopen it manually", {
                position: "bottom-center",
                style: { textAlign: "center" }
              });
              await Promise.all([Neutralino.updater.install(), wait(5e3)]);
              await Neutralino.app.restartProcess();
            }
          }, "Update now"));
        });
      } else {
        console.info("[update]", "No update required");
      }
    } catch (e3) {
      console.warn("[update][error]", e3);
      captureException(e3);
      Et.error("Failed to check for update", {
        position: "bottom-center",
        style: { fontSize: "1rem", padding: "0.2rem" }
      });
    }
  }
  function useUpdateCheck() {
    import_react50.default.useEffect(() => {
      void checkForUpdate();
    }, []);
  }

  // src/components/screens/Settings.tsx
  function SettingsScreen({
    settings,
    setSettings,
    forfeits,
    setForfeits
  }) {
    return /* @__PURE__ */ React43.createElement("div", {
      className: "mt-2 flex flex-col gap-3 flex-1 pb-2"
    }, /* @__PURE__ */ React43.createElement("h1", {
      className: "text-3xl -mb-1"
    }, "Settings"), /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-col gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ React43.createElement("h2", {
      className: "text-xl"
    }, "Blocklist ", /* @__PURE__ */ React43.createElement("small", null, "(", settings.blocklist.length, ")")), /* @__PURE__ */ React43.createElement("small", {
      className: "text-m"
    }, "These users will be excluded from giveaways")), /* @__PURE__ */ React43.createElement("button", {
      className: "border border-purple-600 rounded-md px-3 flex flex-row gap-1 justify-center items-center",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { blocklist: (s3.blocklist || []).concat("") }))
    }, /* @__PURE__ */ React43.createElement(FaPlus, null), " Add Item")), /* @__PURE__ */ React43.createElement("div", {
      className: "grid grid-cols-4 gap-2 text-sm"
    }, (settings.blocklist || []).map((u3, i3) => /* @__PURE__ */ React43.createElement("div", {
      className: "relative flex-1",
      key: i3
    }, /* @__PURE__ */ React43.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-md border-b border-purple-500 w-full overflow-ellipsis",
      placeholder: "Name...",
      value: u3,
      onChange: (e3) => setSettings((s3) => {
        const list = s3.blocklist;
        list[i3] = e3.target.value;
        return __spreadProps(__spreadValues({}, s3), { blocklist: list });
      }),
      title: "Account name to block from winner giveaways"
    }), /* @__PURE__ */ React43.createElement("button", {
      className: "text-red-600 absolute right-1.5 top-1.5 text-xl",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { blocklist: removeIdx(s3.blocklist, i3) }))
    }, /* @__PURE__ */ React43.createElement(FaTimes, null)))))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-col gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ React43.createElement("h2", {
      className: "text-xl"
    }, "Performance Mode"), /* @__PURE__ */ React43.createElement("small", {
      className: "text-m"
    }, "Will hide chat when there are no winners, and disable chat scroll following"))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "If enabled, will send messages tagging winners in Twitch chat"
    }, "Enabled?"), /* @__PURE__ */ React43.createElement("button", {
      className: "flex-1 text-2xl text-center justify-center items-center flex transition-opacity hover:opacity-60",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { performanceMode: !s3.performanceMode }))
    }, settings.performanceMode ? /* @__PURE__ */ React43.createElement(FaCheck, null) : /* @__PURE__ */ React43.createElement(FaTimes, null)))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-col gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ React43.createElement("h2", {
      className: "text-xl"
    }, "Giveaway Forfeit Command"), /* @__PURE__ */ React43.createElement("small", {
      className: "text-m"
    }, "If a user types anything that matchs this command, they will forfeit winner any command, until list is cleared. No spaces."))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row gap-4"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row justify-center items-center flex-1"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md",
      title: "Filters messages to include this"
    }, "Forfeit Command"), /* @__PURE__ */ React43.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-r-md border-b border-purple-500 flex-1",
      placeholder: "Empty means no forfeits...",
      value: settings.forfeitCommand || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { forfeitCommand: e3.target.value.trim() })),
      title: "Forfeit command..."
    })), /* @__PURE__ */ React43.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1 rounded-md flex justify-center items-center"
    }, "Number of forfeits: ", forfeits.length), /* @__PURE__ */ React43.createElement("button", {
      className: "flex-0 bg-red-600 px-2 py-1 rounded-md flex justify-center items-center gap-1",
      onClick: () => setForfeits([])
    }, /* @__PURE__ */ React43.createElement(FaTimes, null), " Reset List"))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-col gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ React43.createElement("h2", {
      className: "text-xl"
    }, "Alert/Message Settings"))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "If enabled, will automatically send the alert and chat message, otherwise you have to manually send them"
    }, "Auto Announce"), /* @__PURE__ */ React43.createElement("button", {
      className: "flex-1 text-2xl text-center justify-center items-center flex transition-opacity hover:opacity-60",
      onClick: () => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { autoAnnounce: s3.autoAnnounce === void 0 ? false : !s3.autoAnnounce }))
    }, settings.autoAnnounce || settings.autoAnnounce === void 0 ? /* @__PURE__ */ React43.createElement(FaCheck, null) : /* @__PURE__ */ React43.createElement(FaTimes, null))))), /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1 flex items-end gap-2"
    }, /* @__PURE__ */ React43.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ React43.createElement("button", {
      className: "text-purple-200 opacity-80 text-xs",
      onClick: () => Neutralino.os.open(`https://github.com/maael/giveaway-o-tron/releases/v${APP_VERSION}`)
    }, "Version: ", APP_VERSION ? `v${APP_VERSION}` : "Unknown Version")), /* @__PURE__ */ React43.createElement("button", {
      className: "bg-purple-600 px-3 py-1 rounded-md opacity-50 hover:opacity-100 flex justify-center items-center gap-1 transition-opacity text-xs",
      onClick: async () => {
        await checkForUpdate();
      }
    }, /* @__PURE__ */ React43.createElement(FaDownload, null), " Check for update"), /* @__PURE__ */ React43.createElement("button", {
      className: "bg-red-600 px-3 py-1 rounded-md opacity-50 hover:opacity-100 flex justify-center items-center gap-1 transition-opacity text-xs",
      onClick: async () => {
        Neutralino.os.open(`https://giveaway-o-tron.vercel.app/api/auth/signout`);
      }
    }, /* @__PURE__ */ React43.createElement(FaExclamationTriangle, null), " Sign Out Token Tool"), /* @__PURE__ */ React43.createElement("button", {
      className: "bg-red-600 px-3 py-1 rounded-md opacity-50 hover:opacity-100 flex justify-center items-center gap-1 transition-opacity text-xs",
      onClick: async () => {
        await Neutralino.storage.setData("main-channelinfo", null);
        window.location.reload();
      }
    }, /* @__PURE__ */ React43.createElement(FaExclamationTriangle, null), " Reset Channel Info")));
  }

  // src/components/primitives/Header.tsx
  var import_react51 = __toModule(require_react());

  // node_modules/react-icons/si/index.esm.js
  function SiObsstudio(props) {
    return GenIcon({ "tag": "svg", "attr": { "role": "img", "viewBox": "0 0 24 24" }, "child": [{ "tag": "title", "attr": {}, "child": [] }, { "tag": "path", "attr": { "d": "M12,24C5.383,24,0,18.617,0,12S5.383,0,12,0s12,5.383,12,12S18.617,24,12,24z M12,1.109 C5.995,1.109,1.11,5.995,1.11,12C1.11,18.005,5.995,22.89,12,22.89S22.89,18.005,22.89,12C22.89,5.995,18.005,1.109,12,1.109z M6.182,5.99c0.352-1.698,1.503-3.229,3.05-3.996c-0.269,0.273-0.595,0.483-0.844,0.78c-1.02,1.1-1.48,2.692-1.199,4.156 c0.355,2.235,2.455,4.06,4.732,4.028c1.765,0.079,3.485-0.937,4.348-2.468c1.848,0.063,3.645,1.017,4.7,2.548 c0.54,0.799,0.962,1.736,0.991,2.711c-0.342-1.295-1.202-2.446-2.375-3.095c-1.135-0.639-2.529-0.802-3.772-0.425 c-1.56,0.448-2.849,1.723-3.293,3.293c-0.377,1.25-0.216,2.628,0.377,3.772c-0.825,1.429-2.315,2.449-3.932,2.756 c-1.244,0.261-2.551,0.059-3.709-0.464c1.036,0.302,2.161,0.355,3.191-0.011c1.381-0.457,2.522-1.567,3.024-2.935 c0.556-1.49,0.345-3.261-0.591-4.54c-0.7-1.007-1.803-1.717-3.002-1.969c-0.38-0.068-0.764-0.098-1.148-0.134 c-0.611-1.231-0.834-2.66-0.528-3.996L6.182,5.99z" } }] })(props);
  }

  // src/components/primitives/Header.tsx
  function Header({
    client,
    resetChat,
    setClient,
    channelInfo
  }) {
    const location2 = useLocation();
    const homeRoute = channelInfo.login ? "/" : "/setup";
    return /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "flex flex-row justify-start gap-2"
    }, /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "flex-1 flex flex-row gap-2 items-center"
    }, /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "inline-block"
    }, /* @__PURE__ */ import_react51.default.createElement(Link, {
      to: homeRoute
    }, /* @__PURE__ */ import_react51.default.createElement("h1", {
      className: "flex flex-row gap-1 items-center text-white bg-purple-600 rounded-md px-3 py-1 transform hover:scale-105 transition-transform shadow-md"
    }, /* @__PURE__ */ import_react51.default.createElement(FaRobot, {
      className: "text-2xl"
    }), " ", /* @__PURE__ */ import_react51.default.createElement("span", {
      className: "hidden sm:block"
    }, location2.pathname === homeRoute ? /* @__PURE__ */ import_react51.default.createElement("span", {
      className: "relative -top-0.5 ml-1"
    }, "Giveaway-o-tron") : /* @__PURE__ */ import_react51.default.createElement(FaAngleLeft, {
      className: "text-xl"
    }))))), location2.pathname === "/setup" ? null : /* @__PURE__ */ import_react51.default.createElement(Link, {
      to: "/settings"
    }, /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "bg-purple-600 p-2 flex justify-center items-center rounded-md",
      title: "Settings (blocklist etc)"
    }, /* @__PURE__ */ import_react51.default.createElement(FaCogs, null))), location2.pathname === "/setup" ? null : /* @__PURE__ */ import_react51.default.createElement(Link, {
      to: "/discord"
    }, /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "bg-purple-600 p-2 flex justify-center items-center rounded-md",
      title: "Discord integration"
    }, /* @__PURE__ */ import_react51.default.createElement(FaDiscord, null))), location2.pathname === "/setup" ? null : /* @__PURE__ */ import_react51.default.createElement(Link, {
      to: "/giveaways"
    }, /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "bg-purple-600 p-2 flex justify-center items-center rounded-md",
      title: "Past giveways"
    }, /* @__PURE__ */ import_react51.default.createElement(FaClock, null))), location2.pathname === "/setup" ? null : /* @__PURE__ */ import_react51.default.createElement(Link, {
      to: "/obs"
    }, /* @__PURE__ */ import_react51.default.createElement("div", {
      className: "bg-purple-600 p-2 flex justify-center items-center rounded-md",
      title: "Past giveways"
    }, /* @__PURE__ */ import_react51.default.createElement(SiObsstudio, null))), location2.pathname === "/setup" ? null : /* @__PURE__ */ import_react51.default.createElement("button", {
      title: "Open FAQ",
      className: "bg-purple-600 p-2 flex justify-center items-center rounded-md",
      onClick: () => {
        Neutralino.os.open("https://giveaway-o-tron.mael.tech/guide#faq");
      }
    }, /* @__PURE__ */ import_react51.default.createElement(FaQuestion, null))), /* @__PURE__ */ import_react51.default.createElement("form", {
      className: "flex flex-row flex-0",
      onSubmit: (e3) => {
        e3.preventDefault();
        if (client) {
          client.disconnect();
          resetChat();
          setClient(null);
        } else {
          setClient(init3(channelInfo));
        }
      }
    }, /* @__PURE__ */ import_react51.default.createElement("input", {
      className: "bg-gray-700 px-2 py-1 rounded-l-md border-b border-l border-purple-500",
      placeholder: "Channel Name",
      value: channelInfo.login || "",
      disabled: true,
      title: !!client ? "Disconnect to change" : "Set channel to connect to"
    }), /* @__PURE__ */ import_react51.default.createElement("button", {
      className: "bg-purple-600 text-white py-1 px-3 rounded-r-md transform hover:scale-105 transition-transform shadow-md flex flex-row items-center gap-2 w-32 justify-center",
      title: "Connect to chat"
    }, /* @__PURE__ */ import_react51.default.createElement(FaTwitch, null), " ", /* @__PURE__ */ import_react51.default.createElement("span", {
      className: "hidden sm:block"
    }, client ? "Disconnect" : "Connect"))));
  }

  // src/components/screens/Discord.tsx
  var import_react54 = __toModule(require_react());

  // src/components/primitives/Checkbox.tsx
  var import_react52 = __toModule(require_react());
  function Checkbox(_a) {
    var _b = _a, {
      value: value2,
      onChange: onChange2,
      name
    } = _b, btnProps = __objRest(_b, [
      "value",
      "onChange",
      "name"
    ]);
    return /* @__PURE__ */ import_react52.default.createElement("button", __spreadValues({
      onClick: () => onChange2((v2) => __spreadProps(__spreadValues({}, v2), { [name]: !v2[name] }))
    }, btnProps), value2 ? /* @__PURE__ */ import_react52.default.createElement(FaCheck, null) : /* @__PURE__ */ import_react52.default.createElement(FaTimes, null));
  }

  // src/components/primitives/Input.tsx
  var import_classnames24 = __toModule(require_classnames());
  var import_react53 = __toModule(require_react());
  function Input(_a) {
    var _b = _a, {
      label,
      title,
      outerClassName
    } = _b, inputProps = __objRest(_b, [
      "label",
      "title",
      "outerClassName"
    ]);
    return /* @__PURE__ */ import_react53.default.createElement("div", {
      className: (0, import_classnames24.default)(outerClassName, "flex flex-row justify-center items-center flex-1")
    }, /* @__PURE__ */ import_react53.default.createElement("div", {
      className: "flex-0 bg-purple-600 px-2 py-1 rounded-l-md h-full",
      title
    }, label), /* @__PURE__ */ import_react53.default.createElement("input", __spreadValues({
      className: "bg-gray-700 px-2 py-1 rounded-r-md border-b border-purple-500 flex-1 h-full overflow-ellipsis"
    }, inputProps)));
  }

  // src/components/screens/Discord.tsx
  function Discord({
    settings,
    setSettings
  }) {
    var _a, _b, _c;
    return /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "mt-2 flex flex-col gap-2 flex-1"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row justify-between items-center"
    }, /* @__PURE__ */ import_react54.default.createElement("h1", {
      className: "text-3xl"
    }, "Discord"), /* @__PURE__ */ import_react54.default.createElement("button", {
      className: "bg-purple-600 text-white py-1 px-5 rounded-md transform hover:scale-105 transition-transform shadow-md flex flex-row items-center gap-2 justify-center text-xl mt-2",
      onClick: () => {
        Neutralino.os.open("https://discord.com/api/oauth2/authorize?client_id=1012331926301974558&permissions=150528&scope=bot");
      }
    }, /* @__PURE__ */ import_react54.default.createElement(FaEnvelope, null), " Invite Bot")), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react54.default.createElement(Input, {
      label: "Server ID",
      placeholder: "ID...",
      value: settings.guildId || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { guildId: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Input, {
      label: "Channel ID",
      placeholder: "ID...",
      value: settings.channelId || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { channelId: e3.target.value }))
    })), /* @__PURE__ */ import_react54.default.createElement("p", {
      className: "text-sm opacity-90 text-center"
    }, "After inviting the bot using the button above, find these IDs by:"), /* @__PURE__ */ import_react54.default.createElement("ol", {
      className: "text-sm list-decimal max-w-md mx-auto opacity-90 -mt-1"
    }, /* @__PURE__ */ import_react54.default.createElement("li", null, "In Discord, go to settings"), /* @__PURE__ */ import_react54.default.createElement("li", null, "Go to Appearance, Advanced, and enable Developer Mode"), /* @__PURE__ */ import_react54.default.createElement("li", null, "Right click on your Discord Server icon in the sidebar, and select Copy ID, and paste above"), /* @__PURE__ */ import_react54.default.createElement("li", null, "Do the same again but for a channel")), /* @__PURE__ */ import_react54.default.createElement("h1", {
      className: "text-xl"
    }, "Message Settings"), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-col gap-2 text-sm"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row justify-center items-center gap-6"
    }, /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-1",
      label: "Message Colour",
      placeholder: "Hex code...",
      value: settings.messageColour || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { messageColour: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(SliderOuter, {
      label: "Giveaway Alert Min Time",
      value: settings.giveawayMinTime || ONE_MIN,
      renderValue: (v2) => /* @__PURE__ */ import_react54.default.createElement(import_react54.default.Fragment, null, formatDistanceStrict(Date.now() + v2, new Date())),
      min: ONE_MIN,
      max: ONE_MIN * 30,
      onChange: (v2) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { giveawayMinTime: v2 }))
    })), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row justify-center items-center gap-2"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex-1 bg-purple-600 px-2 py-1 text-center rounded-md"
    }, "Giveaway Start:"), /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-2",
      label: "Title",
      placeholder: "Title...",
      value: settings.startTitle || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { startTitle: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-3",
      label: "Body",
      placeholder: "Body...",
      value: settings.startBody || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { startBody: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Checkbox, {
      className: "bg-purple-600 rounded-md h-full px-2 py-1",
      value: (_a = settings.startEnabled) != null ? _a : true,
      name: "startEnabled",
      onChange: setSettings,
      title: "Enable Discord messages for starting giveaways"
    })), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row justify-center items-center gap-2"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex-1 bg-purple-600 px-2 py-1 text-center rounded-md"
    }, "Giveaway End:"), /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-2",
      label: "Title",
      placeholder: "Title...",
      value: settings.endTitle || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { endTitle: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-3",
      label: "Body",
      placeholder: "Body...",
      value: settings.endBody || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { endBody: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Checkbox, {
      className: "bg-purple-600 rounded-md h-full px-2 py-1",
      value: (_b = settings.endEnabled) != null ? _b : true,
      name: "endEnabled",
      onChange: setSettings,
      title: "Enable Discord messages for ending giveaways"
    })), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row justify-center items-center gap-2"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex-1 bg-purple-600 px-2 py-1 text-center rounded-md"
    }, "Winner:"), /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-2",
      label: "Title",
      placeholder: "Title...",
      value: settings.winnerTitle || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { winnerTitle: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Input, {
      outerClassName: "flex-3",
      label: "Body",
      placeholder: "Body...",
      value: settings.winnerBody || "",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { winnerBody: e3.target.value }))
    }), /* @__PURE__ */ import_react54.default.createElement(Checkbox, {
      className: "bg-purple-600 rounded-md h-full px-2 py-1",
      value: (_c = settings.winnerEnabled) != null ? _c : true,
      name: "winnerEnabled",
      onChange: setSettings,
      title: "Enable Discord messages for winners"
    })), /* @__PURE__ */ import_react54.default.createElement("p", {
      className: "px-2 mb-3 opacity-90 text-sm"
    }, "You can mention roles with @rolename. Some special keywords you can include are:"), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-col gap-2 -mt-3 text-sm"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row gap-2 relative"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "w-1/5 flex justify-end items-start"
    }, /* @__PURE__ */ import_react54.default.createElement("em", {
      className: "not-italic px-3 py-1 bg-gray-700 text-purple-400 rounded-md"
    }, "$winner")), /* @__PURE__ */ import_react54.default.createElement("p", {
      className: "flex flex-row items-center"
    }, "Will be replaced by the winners username (title and body)")), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "w-1/5 flex justify-end items-start"
    }, /* @__PURE__ */ import_react54.default.createElement("em", {
      className: "not-italic px-3 py-1 bg-gray-700 text-purple-400 rounded-md"
    }, "$prize")), /* @__PURE__ */ import_react54.default.createElement("p", {
      className: "flex flex-row items-center"
    }, "Will be replaced by the giveaway name if there is one (title and body)")), /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react54.default.createElement("div", {
      className: "w-1/5 flex justify-end items-start"
    }, /* @__PURE__ */ import_react54.default.createElement("em", {
      className: "not-italic px-3 py-1 bg-gray-700 text-purple-400 rounded-md"
    }, "[any text]($link)")), /* @__PURE__ */ import_react54.default.createElement("p", {
      className: "flex flex-row items-center"
    }, "Will be replaced by the text between the square brackets, linking to your Twitch (body only)")))));
  }

  // src/components/screens/Obs.tsx
  var import_react61 = __toModule(require_react());

  // src/components/hooks/useCopyToClipboard.ts
  var React48 = __toModule(require_react());
  var useCopyToClipboard = (text, options2 = { resetTimeout: 1e3 }) => {
    const copyToClipboard = (str) => {
      var _a, _b, _c, _d;
      const el = document.createElement("textarea");
      el.value = str;
      el.setAttribute("readonly", "");
      el.style.position = "absolute";
      el.style.left = "-9999px";
      document.body.appendChild(el);
      const rangeCount = ((_a = document.getSelection()) == null ? void 0 : _a.rangeCount) || 0;
      const selected = rangeCount > 0 ? (_b = document.getSelection()) == null ? void 0 : _b.getRangeAt(0) : false;
      el.select();
      const success = document.execCommand("copy");
      document.body.removeChild(el);
      if (selected) {
        (_c = document.getSelection()) == null ? void 0 : _c.removeAllRanges();
        (_d = document.getSelection()) == null ? void 0 : _d.addRange(selected);
      }
      return success;
    };
    const mounted = React48.useRef(false);
    const resetTimer = React48.useRef();
    const [copied, setCopied] = React48.useState(false);
    React48.useEffect(() => {
      mounted.current = true;
      return () => {
        if (resetTimer.current)
          clearTimeout(resetTimer.current);
        mounted.current = false;
      };
    }, []);
    const copy3 = React48.useCallback(() => {
      if (resetTimer.current)
        clearTimeout(resetTimer.current);
      setCopied(copyToClipboard(text));
      resetTimer.current = setTimeout(() => setCopied(false), options2.resetTimeout);
    }, [text, options2.resetTimeout]);
    React48.useEffect(() => () => {
      setCopied(false);
    }, [text]);
    return [copied, copy3];
  };
  var useCopyToClipboard_default = useCopyToClipboard;

  // node_modules/react-select/dist/index-a7690a33.esm.js
  var import_react55 = __toModule(require_emotion_react_cjs());

  // node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js
  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties12(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles10(arr) {
    if (Array.isArray(arr))
      return arr;
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit9(arr, i3) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray17(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray17(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray17(o2, minLen);
    var n3 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n3 === "Object" && o2.constructor)
      n3 = o2.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o2);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray17(o2, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest10() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray9(arr, i3) {
    return _arrayWithHoles10(arr) || _iterableToArrayLimit9(arr, i3) || _unsupportedIterableToArray17(arr, i3) || _nonIterableRest10();
  }

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof20(obj) {
    "@babel/helpers - typeof";
    return _typeof20 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof20(obj);
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck20(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties20(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass20(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties20(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties20(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/inherits.js
  function _inherits19(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty25(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value2,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value2;
    }
    return obj;
  }

  // node_modules/react-select/dist/index-a7690a33.esm.js
  var import_react56 = __toModule(require_react());
  var import_react_dom2 = __toModule(require_react_dom());
  function _defineProperty26(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value2,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value2;
    }
    return obj;
  }
  function ownKeys25(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread25(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys25(Object(source), true).forEach(function(key) {
          _defineProperty26(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys25(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _getPrototypeOf19(o2) {
    _getPrototypeOf19 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf20(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf19(o2);
  }
  function _isNativeReflectConstruct19() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _assertThisInitialized19(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _possibleConstructorReturn19(self2, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized19(self2);
  }
  function _createSuper19(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct19();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf19(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf19(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn19(this, result);
    };
  }
  var _excluded$3 = ["className", "clearValue", "cx", "getStyles", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
  var noop2 = function noop3() {
  };
  function applyPrefixToName(prefix2, name) {
    if (!name) {
      return prefix2;
    } else if (name[0] === "-") {
      return prefix2 + name;
    } else {
      return prefix2 + "__" + name;
    }
  }
  function classNames22(prefix2, state, className) {
    var arr = [className];
    if (state && prefix2) {
      for (var key in state) {
        if (state.hasOwnProperty(key) && state[key]) {
          arr.push("".concat(applyPrefixToName(prefix2, key)));
        }
      }
    }
    return arr.filter(function(i3) {
      return i3;
    }).map(function(i3) {
      return String(i3).trim();
    }).join(" ");
  }
  var cleanValue = function cleanValue2(value2) {
    if (isArray(value2))
      return value2.filter(Boolean);
    if (_typeof20(value2) === "object" && value2 !== null)
      return [value2];
    return [];
  };
  var cleanCommonProps = function cleanCommonProps2(props) {
    props.className;
    props.clearValue;
    props.cx;
    props.getStyles;
    props.getValue;
    props.hasValue;
    props.isMulti;
    props.isRtl;
    props.options;
    props.selectOption;
    props.selectProps;
    props.setValue;
    props.theme;
    var innerProps = _objectWithoutProperties12(props, _excluded$3);
    return _objectSpread25({}, innerProps);
  };
  function isDocumentElement(el) {
    return [document.documentElement, document.body, window].indexOf(el) > -1;
  }
  function normalizedHeight(el) {
    if (isDocumentElement(el)) {
      return window.innerHeight;
    }
    return el.clientHeight;
  }
  function getScrollTop(el) {
    if (isDocumentElement(el)) {
      return window.pageYOffset;
    }
    return el.scrollTop;
  }
  function scrollTo(el, top) {
    if (isDocumentElement(el)) {
      window.scrollTo(0, top);
      return;
    }
    el.scrollTop = top;
  }
  function getScrollParent(element2) {
    var style = getComputedStyle(element2);
    var excludeStaticParent = style.position === "absolute";
    var overflowRx = /(auto|scroll)/;
    if (style.position === "fixed")
      return document.documentElement;
    for (var parent = element2; parent = parent.parentElement; ) {
      style = getComputedStyle(parent);
      if (excludeStaticParent && style.position === "static") {
        continue;
      }
      if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
        return parent;
      }
    }
    return document.documentElement;
  }
  function easeOutCubic(t2, b2, c3, d3) {
    return c3 * ((t2 = t2 / d3 - 1) * t2 * t2 + 1) + b2;
  }
  function animatedScrollTo(element2, to) {
    var duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 200;
    var callback = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop2;
    var start = getScrollTop(element2);
    var change = to - start;
    var increment = 10;
    var currentTime = 0;
    function animateScroll() {
      currentTime += increment;
      var val = easeOutCubic(currentTime, start, change, duration);
      scrollTo(element2, val);
      if (currentTime < duration) {
        window.requestAnimationFrame(animateScroll);
      } else {
        callback(element2);
      }
    }
    animateScroll();
  }
  function scrollIntoView(menuEl, focusedEl) {
    var menuRect = menuEl.getBoundingClientRect();
    var focusedRect = focusedEl.getBoundingClientRect();
    var overScroll = focusedEl.offsetHeight / 3;
    if (focusedRect.bottom + overScroll > menuRect.bottom) {
      scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
    } else if (focusedRect.top - overScroll < menuRect.top) {
      scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
    }
  }
  function getBoundingClientObj(element2) {
    var rect = element2.getBoundingClientRect();
    return {
      bottom: rect.bottom,
      height: rect.height,
      left: rect.left,
      right: rect.right,
      top: rect.top,
      width: rect.width
    };
  }
  function isTouchCapable() {
    try {
      document.createEvent("TouchEvent");
      return true;
    } catch (e3) {
      return false;
    }
  }
  function isMobileDevice() {
    try {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    } catch (e3) {
      return false;
    }
  }
  var passiveOptionAccessed = false;
  var options = {
    get passive() {
      return passiveOptionAccessed = true;
    }
  };
  var w = typeof window !== "undefined" ? window : {};
  if (w.addEventListener && w.removeEventListener) {
    w.addEventListener("p", noop2, options);
    w.removeEventListener("p", noop2, false);
  }
  var supportsPassiveEvents = passiveOptionAccessed;
  function notNullish(item) {
    return item != null;
  }
  function isArray(arg) {
    return Array.isArray(arg);
  }
  function valueTernary(isMulti, multiValue, singleValue) {
    return isMulti ? multiValue : singleValue;
  }
  function singleValueAsValue(singleValue) {
    return singleValue;
  }
  function multiValueAsValue(multiValue) {
    return multiValue;
  }
  var removeProps = function removeProps2(propsObj) {
    for (var _len = arguments.length, properties = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      properties[_key - 1] = arguments[_key];
    }
    var propsMap = Object.entries(propsObj).filter(function(_ref3) {
      var _ref23 = _slicedToArray9(_ref3, 1), key = _ref23[0];
      return !properties.includes(key);
    });
    return propsMap.reduce(function(newProps, _ref3) {
      var _ref4 = _slicedToArray9(_ref3, 2), key = _ref4[0], val = _ref4[1];
      newProps[key] = val;
      return newProps;
    }, {});
  };
  function getMenuPlacement(_ref3) {
    var maxHeight = _ref3.maxHeight, menuEl = _ref3.menuEl, minHeight = _ref3.minHeight, placement = _ref3.placement, shouldScroll = _ref3.shouldScroll, isFixedPosition = _ref3.isFixedPosition, theme = _ref3.theme;
    var spacing2 = theme.spacing;
    var scrollParent = getScrollParent(menuEl);
    var defaultState = {
      placement: "bottom",
      maxHeight
    };
    if (!menuEl || !menuEl.offsetParent)
      return defaultState;
    var _scrollParent$getBoun = scrollParent.getBoundingClientRect(), scrollHeight = _scrollParent$getBoun.height;
    var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(), menuBottom = _menuEl$getBoundingCl.bottom, menuHeight = _menuEl$getBoundingCl.height, menuTop = _menuEl$getBoundingCl.top;
    var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(), containerTop = _menuEl$offsetParent$.top;
    var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
    var scrollTop = getScrollTop(scrollParent);
    var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
    var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
    var viewSpaceAbove = containerTop - marginTop;
    var viewSpaceBelow = viewHeight - menuTop;
    var scrollSpaceAbove = viewSpaceAbove + scrollTop;
    var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
    var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
    var scrollUp = scrollTop + menuTop - marginTop;
    var scrollDuration = 160;
    switch (placement) {
      case "auto":
      case "bottom":
        if (viewSpaceBelow >= menuHeight) {
          return {
            placement: "bottom",
            maxHeight
          };
        }
        if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
          if (shouldScroll) {
            animatedScrollTo(scrollParent, scrollDown, scrollDuration);
          }
          return {
            placement: "bottom",
            maxHeight
          };
        }
        if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
          if (shouldScroll) {
            animatedScrollTo(scrollParent, scrollDown, scrollDuration);
          }
          var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
          return {
            placement: "bottom",
            maxHeight: constrainedHeight
          };
        }
        if (placement === "auto" || isFixedPosition) {
          var _constrainedHeight = maxHeight;
          var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
          if (spaceAbove >= minHeight) {
            _constrainedHeight = Math.min(spaceAbove - marginBottom - spacing2.controlHeight, maxHeight);
          }
          return {
            placement: "top",
            maxHeight: _constrainedHeight
          };
        }
        if (placement === "bottom") {
          if (shouldScroll) {
            scrollTo(scrollParent, scrollDown);
          }
          return {
            placement: "bottom",
            maxHeight
          };
        }
        break;
      case "top":
        if (viewSpaceAbove >= menuHeight) {
          return {
            placement: "top",
            maxHeight
          };
        }
        if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
          if (shouldScroll) {
            animatedScrollTo(scrollParent, scrollUp, scrollDuration);
          }
          return {
            placement: "top",
            maxHeight
          };
        }
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          var _constrainedHeight2 = maxHeight;
          if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
            _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
          }
          if (shouldScroll) {
            animatedScrollTo(scrollParent, scrollUp, scrollDuration);
          }
          return {
            placement: "top",
            maxHeight: _constrainedHeight2
          };
        }
        return {
          placement: "bottom",
          maxHeight
        };
      default:
        throw new Error('Invalid placement provided "'.concat(placement, '".'));
    }
    return defaultState;
  }
  function alignToControl(placement) {
    var placementToCSSProp = {
      bottom: "top",
      top: "bottom"
    };
    return placement ? placementToCSSProp[placement] : "bottom";
  }
  var coercePlacement = function coercePlacement2(p2) {
    return p2 === "auto" ? "bottom" : p2;
  };
  var menuCSS = function menuCSS2(_ref23) {
    var _ref3;
    var placement = _ref23.placement, _ref2$theme = _ref23.theme, borderRadius2 = _ref2$theme.borderRadius, spacing2 = _ref2$theme.spacing, colors2 = _ref2$theme.colors;
    return _ref3 = {
      label: "menu"
    }, _defineProperty25(_ref3, alignToControl(placement), "100%"), _defineProperty25(_ref3, "backgroundColor", colors2.neutral0), _defineProperty25(_ref3, "borderRadius", borderRadius2), _defineProperty25(_ref3, "boxShadow", "0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)"), _defineProperty25(_ref3, "marginBottom", spacing2.menuGutter), _defineProperty25(_ref3, "marginTop", spacing2.menuGutter), _defineProperty25(_ref3, "position", "absolute"), _defineProperty25(_ref3, "width", "100%"), _defineProperty25(_ref3, "zIndex", 1), _ref3;
  };
  var PortalPlacementContext = /* @__PURE__ */ (0, import_react56.createContext)({
    getPortalPlacement: null
  });
  var MenuPlacer = /* @__PURE__ */ function(_Component) {
    _inherits19(MenuPlacer2, _Component);
    var _super = _createSuper19(MenuPlacer2);
    function MenuPlacer2() {
      var _this;
      _classCallCheck20(this, MenuPlacer2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        maxHeight: _this.props.maxMenuHeight,
        placement: null
      };
      _this.context = void 0;
      _this.getPlacement = function(ref) {
        var _this$props = _this.props, minMenuHeight = _this$props.minMenuHeight, maxMenuHeight = _this$props.maxMenuHeight, menuPlacement = _this$props.menuPlacement, menuPosition = _this$props.menuPosition, menuShouldScrollIntoView = _this$props.menuShouldScrollIntoView, theme = _this$props.theme;
        if (!ref)
          return;
        var isFixedPosition = menuPosition === "fixed";
        var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
        var state = getMenuPlacement({
          maxHeight: maxMenuHeight,
          menuEl: ref,
          minHeight: minMenuHeight,
          placement: menuPlacement,
          shouldScroll,
          isFixedPosition,
          theme
        });
        var getPortalPlacement = _this.context.getPortalPlacement;
        if (getPortalPlacement)
          getPortalPlacement(state);
        _this.setState(state);
      };
      _this.getUpdatedProps = function() {
        var menuPlacement = _this.props.menuPlacement;
        var placement = _this.state.placement || coercePlacement(menuPlacement);
        return _objectSpread25(_objectSpread25({}, _this.props), {}, {
          placement,
          maxHeight: _this.state.maxHeight
        });
      };
      return _this;
    }
    _createClass20(MenuPlacer2, [{
      key: "render",
      value: function render() {
        var children = this.props.children;
        return children({
          ref: this.getPlacement,
          placerProps: this.getUpdatedProps()
        });
      }
    }]);
    return MenuPlacer2;
  }(import_react56.Component);
  MenuPlacer.contextType = PortalPlacementContext;
  var Menu = function Menu2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerRef = props.innerRef, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("menu", props),
      className: cx({
        menu: true
      }, className),
      ref: innerRef
    }, innerProps), children);
  };
  var menuListCSS = function menuListCSS2(_ref4) {
    var maxHeight = _ref4.maxHeight, baseUnit2 = _ref4.theme.spacing.baseUnit;
    return {
      maxHeight,
      overflowY: "auto",
      paddingBottom: baseUnit2,
      paddingTop: baseUnit2,
      position: "relative",
      WebkitOverflowScrolling: "touch"
    };
  };
  var MenuList = function MenuList2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps, innerRef = props.innerRef, isMulti = props.isMulti;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("menuList", props),
      className: cx({
        "menu-list": true,
        "menu-list--is-multi": isMulti
      }, className),
      ref: innerRef
    }, innerProps), children);
  };
  var noticeCSS = function noticeCSS2(_ref5) {
    var _ref5$theme = _ref5.theme, baseUnit2 = _ref5$theme.spacing.baseUnit, colors2 = _ref5$theme.colors;
    return {
      color: colors2.neutral40,
      padding: "".concat(baseUnit2 * 2, "px ").concat(baseUnit2 * 3, "px"),
      textAlign: "center"
    };
  };
  var noOptionsMessageCSS = noticeCSS;
  var loadingMessageCSS = noticeCSS;
  var NoOptionsMessage = function NoOptionsMessage2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("noOptionsMessage", props),
      className: cx({
        "menu-notice": true,
        "menu-notice--no-options": true
      }, className)
    }, innerProps), children);
  };
  NoOptionsMessage.defaultProps = {
    children: "No options"
  };
  var LoadingMessage = function LoadingMessage2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("loadingMessage", props),
      className: cx({
        "menu-notice": true,
        "menu-notice--loading": true
      }, className)
    }, innerProps), children);
  };
  LoadingMessage.defaultProps = {
    children: "Loading..."
  };
  var menuPortalCSS = function menuPortalCSS2(_ref6) {
    var rect = _ref6.rect, offset = _ref6.offset, position = _ref6.position;
    return {
      left: rect.left,
      position,
      top: offset,
      width: rect.width,
      zIndex: 1
    };
  };
  var MenuPortal = /* @__PURE__ */ function(_Component2) {
    _inherits19(MenuPortal2, _Component2);
    var _super2 = _createSuper19(MenuPortal2);
    function MenuPortal2() {
      var _this2;
      _classCallCheck20(this, MenuPortal2);
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this2 = _super2.call.apply(_super2, [this].concat(args));
      _this2.state = {
        placement: null
      };
      _this2.getPortalPlacement = function(_ref7) {
        var placement = _ref7.placement;
        var initialPlacement = coercePlacement(_this2.props.menuPlacement);
        if (placement !== initialPlacement) {
          _this2.setState({
            placement
          });
        }
      };
      return _this2;
    }
    _createClass20(MenuPortal2, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props, appendTo = _this$props2.appendTo, children = _this$props2.children, className = _this$props2.className, controlElement = _this$props2.controlElement, cx = _this$props2.cx, innerProps = _this$props2.innerProps, menuPlacement = _this$props2.menuPlacement, position = _this$props2.menuPosition, getStyles = _this$props2.getStyles;
        var isFixed = position === "fixed";
        if (!appendTo && !isFixed || !controlElement) {
          return null;
        }
        var placement = this.state.placement || coercePlacement(menuPlacement);
        var rect = getBoundingClientObj(controlElement);
        var scrollDistance = isFixed ? 0 : window.pageYOffset;
        var offset = rect[placement] + scrollDistance;
        var state = {
          offset,
          position,
          rect
        };
        var menuWrapper = (0, import_react55.jsx)("div", _extends({
          css: getStyles("menuPortal", state),
          className: cx({
            "menu-portal": true
          }, className)
        }, innerProps), children);
        return (0, import_react55.jsx)(PortalPlacementContext.Provider, {
          value: {
            getPortalPlacement: this.getPortalPlacement
          }
        }, appendTo ? /* @__PURE__ */ (0, import_react_dom2.createPortal)(menuWrapper, appendTo) : menuWrapper);
      }
    }]);
    return MenuPortal2;
  }(import_react56.Component);
  var containerCSS = function containerCSS2(_ref3) {
    var isDisabled = _ref3.isDisabled, isRtl = _ref3.isRtl;
    return {
      label: "container",
      direction: isRtl ? "rtl" : void 0,
      pointerEvents: isDisabled ? "none" : void 0,
      position: "relative"
    };
  };
  var SelectContainer = function SelectContainer2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps, isDisabled = props.isDisabled, isRtl = props.isRtl;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("container", props),
      className: cx({
        "--is-disabled": isDisabled,
        "--is-rtl": isRtl
      }, className)
    }, innerProps), children);
  };
  var valueContainerCSS = function valueContainerCSS2(_ref23) {
    var spacing2 = _ref23.theme.spacing, isMulti = _ref23.isMulti, hasValue = _ref23.hasValue, controlShouldRenderValue = _ref23.selectProps.controlShouldRenderValue;
    return {
      alignItems: "center",
      display: isMulti && hasValue && controlShouldRenderValue ? "flex" : "grid",
      flex: 1,
      flexWrap: "wrap",
      padding: "".concat(spacing2.baseUnit / 2, "px ").concat(spacing2.baseUnit * 2, "px"),
      WebkitOverflowScrolling: "touch",
      position: "relative",
      overflow: "hidden"
    };
  };
  var ValueContainer = function ValueContainer2(props) {
    var children = props.children, className = props.className, cx = props.cx, innerProps = props.innerProps, isMulti = props.isMulti, getStyles = props.getStyles, hasValue = props.hasValue;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("valueContainer", props),
      className: cx({
        "value-container": true,
        "value-container--is-multi": isMulti,
        "value-container--has-value": hasValue
      }, className)
    }, innerProps), children);
  };
  var indicatorsContainerCSS = function indicatorsContainerCSS2() {
    return {
      alignItems: "center",
      alignSelf: "stretch",
      display: "flex",
      flexShrink: 0
    };
  };
  var IndicatorsContainer = function IndicatorsContainer2(props) {
    var children = props.children, className = props.className, cx = props.cx, innerProps = props.innerProps, getStyles = props.getStyles;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("indicatorsContainer", props),
      className: cx({
        indicators: true
      }, className)
    }, innerProps), children);
  };
  var _templateObject;
  var _excluded$2 = ["size"];
  function _EMOTION_STRINGIFIED_CSS_ERROR__() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var _ref2 = false ? {
    name: "8mmkcg",
    styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"
  } : {
    name: "tj5bde-Svg",
    styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  };
  var Svg = function Svg2(_ref3) {
    var size = _ref3.size, props = _objectWithoutProperties12(_ref3, _excluded$2);
    return (0, import_react55.jsx)("svg", _extends({
      height: size,
      width: size,
      viewBox: "0 0 20 20",
      "aria-hidden": "true",
      focusable: "false",
      css: _ref2
    }, props));
  };
  var CrossIcon = function CrossIcon2(props) {
    return (0, import_react55.jsx)(Svg, _extends({
      size: 20
    }, props), (0, import_react55.jsx)("path", {
      d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
    }));
  };
  var DownChevron = function DownChevron2(props) {
    return (0, import_react55.jsx)(Svg, _extends({
      size: 20
    }, props), (0, import_react55.jsx)("path", {
      d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
    }));
  };
  var baseCSS = function baseCSS2(_ref3) {
    var isFocused = _ref3.isFocused, _ref3$theme = _ref3.theme, baseUnit2 = _ref3$theme.spacing.baseUnit, colors2 = _ref3$theme.colors;
    return {
      label: "indicatorContainer",
      color: isFocused ? colors2.neutral60 : colors2.neutral20,
      display: "flex",
      padding: baseUnit2 * 2,
      transition: "color 150ms",
      ":hover": {
        color: isFocused ? colors2.neutral80 : colors2.neutral40
      }
    };
  };
  var dropdownIndicatorCSS = baseCSS;
  var DropdownIndicator = function DropdownIndicator2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("dropdownIndicator", props),
      className: cx({
        indicator: true,
        "dropdown-indicator": true
      }, className)
    }, innerProps), children || (0, import_react55.jsx)(DownChevron, null));
  };
  var clearIndicatorCSS = baseCSS;
  var ClearIndicator = function ClearIndicator2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("clearIndicator", props),
      className: cx({
        indicator: true,
        "clear-indicator": true
      }, className)
    }, innerProps), children || (0, import_react55.jsx)(CrossIcon, null));
  };
  var indicatorSeparatorCSS = function indicatorSeparatorCSS2(_ref4) {
    var isDisabled = _ref4.isDisabled, _ref4$theme = _ref4.theme, baseUnit2 = _ref4$theme.spacing.baseUnit, colors2 = _ref4$theme.colors;
    return {
      label: "indicatorSeparator",
      alignSelf: "stretch",
      backgroundColor: isDisabled ? colors2.neutral10 : colors2.neutral20,
      marginBottom: baseUnit2 * 2,
      marginTop: baseUnit2 * 2,
      width: 1
    };
  };
  var IndicatorSeparator = function IndicatorSeparator2(props) {
    var className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps;
    return (0, import_react55.jsx)("span", _extends({}, innerProps, {
      css: getStyles("indicatorSeparator", props),
      className: cx({
        "indicator-separator": true
      }, className)
    }));
  };
  var loadingDotAnimations = (0, import_react55.keyframes)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"])));
  var loadingIndicatorCSS = function loadingIndicatorCSS2(_ref5) {
    var isFocused = _ref5.isFocused, size = _ref5.size, _ref5$theme = _ref5.theme, colors2 = _ref5$theme.colors, baseUnit2 = _ref5$theme.spacing.baseUnit;
    return {
      label: "loadingIndicator",
      color: isFocused ? colors2.neutral60 : colors2.neutral20,
      display: "flex",
      padding: baseUnit2 * 2,
      transition: "color 150ms",
      alignSelf: "center",
      fontSize: size,
      lineHeight: 1,
      marginRight: size,
      textAlign: "center",
      verticalAlign: "middle"
    };
  };
  var LoadingDot = function LoadingDot2(_ref6) {
    var delay = _ref6.delay, offset = _ref6.offset;
    return (0, import_react55.jsx)("span", {
      css: /* @__PURE__ */ (0, import_react55.css)({
        animation: "".concat(loadingDotAnimations, " 1s ease-in-out ").concat(delay, "ms infinite;"),
        backgroundColor: "currentColor",
        borderRadius: "1em",
        display: "inline-block",
        marginLeft: offset ? "1em" : void 0,
        height: "1em",
        verticalAlign: "top",
        width: "1em"
      }, false ? "" : ";label:LoadingDot;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    });
  };
  var LoadingIndicator = function LoadingIndicator2(props) {
    var className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps, isRtl = props.isRtl;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("loadingIndicator", props),
      className: cx({
        indicator: true,
        "loading-indicator": true
      }, className)
    }, innerProps), (0, import_react55.jsx)(LoadingDot, {
      delay: 0,
      offset: isRtl
    }), (0, import_react55.jsx)(LoadingDot, {
      delay: 160,
      offset: true
    }), (0, import_react55.jsx)(LoadingDot, {
      delay: 320,
      offset: !isRtl
    }));
  };
  LoadingIndicator.defaultProps = {
    size: 4
  };
  var css$1 = function css(_ref3) {
    var isDisabled = _ref3.isDisabled, isFocused = _ref3.isFocused, _ref$theme = _ref3.theme, colors2 = _ref$theme.colors, borderRadius2 = _ref$theme.borderRadius, spacing2 = _ref$theme.spacing;
    return {
      label: "control",
      alignItems: "center",
      backgroundColor: isDisabled ? colors2.neutral5 : colors2.neutral0,
      borderColor: isDisabled ? colors2.neutral10 : isFocused ? colors2.primary : colors2.neutral20,
      borderRadius: borderRadius2,
      borderStyle: "solid",
      borderWidth: 1,
      boxShadow: isFocused ? "0 0 0 1px ".concat(colors2.primary) : void 0,
      cursor: "default",
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "space-between",
      minHeight: spacing2.controlHeight,
      outline: "0 !important",
      position: "relative",
      transition: "all 100ms",
      "&:hover": {
        borderColor: isFocused ? colors2.primary : colors2.neutral30
      }
    };
  };
  var Control = function Control2(props) {
    var children = props.children, cx = props.cx, getStyles = props.getStyles, className = props.className, isDisabled = props.isDisabled, isFocused = props.isFocused, innerRef = props.innerRef, innerProps = props.innerProps, menuIsOpen = props.menuIsOpen;
    return (0, import_react55.jsx)("div", _extends({
      ref: innerRef,
      css: getStyles("control", props),
      className: cx({
        control: true,
        "control--is-disabled": isDisabled,
        "control--is-focused": isFocused,
        "control--menu-is-open": menuIsOpen
      }, className)
    }, innerProps), children);
  };
  var _excluded$1 = ["data"];
  var groupCSS = function groupCSS2(_ref3) {
    var spacing2 = _ref3.theme.spacing;
    return {
      paddingBottom: spacing2.baseUnit * 2,
      paddingTop: spacing2.baseUnit * 2
    };
  };
  var Group = function Group2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, Heading = props.Heading, headingProps = props.headingProps, innerProps = props.innerProps, label = props.label, theme = props.theme, selectProps = props.selectProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("group", props),
      className: cx({
        group: true
      }, className)
    }, innerProps), (0, import_react55.jsx)(Heading, _extends({}, headingProps, {
      selectProps,
      theme,
      getStyles,
      cx
    }), label), (0, import_react55.jsx)("div", null, children));
  };
  var groupHeadingCSS = function groupHeadingCSS2(_ref23) {
    var spacing2 = _ref23.theme.spacing;
    return {
      label: "group",
      color: "#999",
      cursor: "default",
      display: "block",
      fontSize: "75%",
      fontWeight: 500,
      marginBottom: "0.25em",
      paddingLeft: spacing2.baseUnit * 3,
      paddingRight: spacing2.baseUnit * 3,
      textTransform: "uppercase"
    };
  };
  var GroupHeading = function GroupHeading2(props) {
    var getStyles = props.getStyles, cx = props.cx, className = props.className;
    var _cleanCommonProps = cleanCommonProps(props);
    _cleanCommonProps.data;
    var innerProps = _objectWithoutProperties12(_cleanCommonProps, _excluded$1);
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("groupHeading", props),
      className: cx({
        "group-heading": true
      }, className)
    }, innerProps));
  };
  var _excluded = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
  var inputCSS = function inputCSS2(_ref3) {
    var isDisabled = _ref3.isDisabled, value2 = _ref3.value, _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
    return _objectSpread25({
      margin: spacing2.baseUnit / 2,
      paddingBottom: spacing2.baseUnit / 2,
      paddingTop: spacing2.baseUnit / 2,
      visibility: isDisabled ? "hidden" : "visible",
      color: colors2.neutral80,
      transform: value2 ? "translateZ(0)" : ""
    }, containerStyle);
  };
  var spacingStyle = {
    gridArea: "1 / 2",
    font: "inherit",
    minWidth: "2px",
    border: 0,
    margin: 0,
    outline: 0,
    padding: 0
  };
  var containerStyle = {
    flex: "1 1 auto",
    display: "inline-grid",
    gridArea: "1 / 1 / 2 / 3",
    gridTemplateColumns: "0 min-content",
    "&:after": _objectSpread25({
      content: 'attr(data-value) " "',
      visibility: "hidden",
      whiteSpace: "pre"
    }, spacingStyle)
  };
  var inputStyle = function inputStyle2(isHidden) {
    return _objectSpread25({
      label: "input",
      color: "inherit",
      background: 0,
      opacity: isHidden ? 0 : 1,
      width: "100%"
    }, spacingStyle);
  };
  var Input2 = function Input3(props) {
    var className = props.className, cx = props.cx, getStyles = props.getStyles, value2 = props.value;
    var _cleanCommonProps = cleanCommonProps(props), innerRef = _cleanCommonProps.innerRef, isDisabled = _cleanCommonProps.isDisabled, isHidden = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, innerProps = _objectWithoutProperties12(_cleanCommonProps, _excluded);
    return (0, import_react55.jsx)("div", {
      className: cx({
        "input-container": true
      }, className),
      css: getStyles("input", props),
      "data-value": value2 || ""
    }, (0, import_react55.jsx)("input", _extends({
      className: cx({
        input: true
      }, inputClassName),
      ref: innerRef,
      style: inputStyle(isHidden),
      disabled: isDisabled
    }, innerProps)));
  };
  var multiValueCSS = function multiValueCSS2(_ref3) {
    var _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, borderRadius2 = _ref$theme.borderRadius, colors2 = _ref$theme.colors;
    return {
      label: "multiValue",
      backgroundColor: colors2.neutral10,
      borderRadius: borderRadius2 / 2,
      display: "flex",
      margin: spacing2.baseUnit / 2,
      minWidth: 0
    };
  };
  var multiValueLabelCSS = function multiValueLabelCSS2(_ref23) {
    var _ref2$theme = _ref23.theme, borderRadius2 = _ref2$theme.borderRadius, colors2 = _ref2$theme.colors, cropWithEllipsis = _ref23.cropWithEllipsis;
    return {
      borderRadius: borderRadius2 / 2,
      color: colors2.neutral80,
      fontSize: "85%",
      overflow: "hidden",
      padding: 3,
      paddingLeft: 6,
      textOverflow: cropWithEllipsis || cropWithEllipsis === void 0 ? "ellipsis" : void 0,
      whiteSpace: "nowrap"
    };
  };
  var multiValueRemoveCSS = function multiValueRemoveCSS2(_ref3) {
    var _ref3$theme = _ref3.theme, spacing2 = _ref3$theme.spacing, borderRadius2 = _ref3$theme.borderRadius, colors2 = _ref3$theme.colors, isFocused = _ref3.isFocused;
    return {
      alignItems: "center",
      borderRadius: borderRadius2 / 2,
      backgroundColor: isFocused ? colors2.dangerLight : void 0,
      display: "flex",
      paddingLeft: spacing2.baseUnit,
      paddingRight: spacing2.baseUnit,
      ":hover": {
        backgroundColor: colors2.dangerLight,
        color: colors2.danger
      }
    };
  };
  var MultiValueGeneric = function MultiValueGeneric2(_ref4) {
    var children = _ref4.children, innerProps = _ref4.innerProps;
    return (0, import_react55.jsx)("div", innerProps, children);
  };
  var MultiValueContainer = MultiValueGeneric;
  var MultiValueLabel = MultiValueGeneric;
  function MultiValueRemove(_ref5) {
    var children = _ref5.children, innerProps = _ref5.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      role: "button"
    }, innerProps), children || (0, import_react55.jsx)(CrossIcon, {
      size: 14
    }));
  }
  var MultiValue = function MultiValue2(props) {
    var children = props.children, className = props.className, components2 = props.components, cx = props.cx, data = props.data, getStyles = props.getStyles, innerProps = props.innerProps, isDisabled = props.isDisabled, removeProps3 = props.removeProps, selectProps = props.selectProps;
    var Container = components2.Container, Label2 = components2.Label, Remove = components2.Remove;
    return (0, import_react55.jsx)(import_react55.ClassNames, null, function(_ref6) {
      var css5 = _ref6.css, emotionCx = _ref6.cx;
      return (0, import_react55.jsx)(Container, {
        data,
        innerProps: _objectSpread25({
          className: emotionCx(css5(getStyles("multiValue", props)), cx({
            "multi-value": true,
            "multi-value--is-disabled": isDisabled
          }, className))
        }, innerProps),
        selectProps
      }, (0, import_react55.jsx)(Label2, {
        data,
        innerProps: {
          className: emotionCx(css5(getStyles("multiValueLabel", props)), cx({
            "multi-value__label": true
          }, className))
        },
        selectProps
      }, children), (0, import_react55.jsx)(Remove, {
        data,
        innerProps: _objectSpread25({
          className: emotionCx(css5(getStyles("multiValueRemove", props)), cx({
            "multi-value__remove": true
          }, className)),
          "aria-label": "Remove ".concat(children || "option")
        }, removeProps3),
        selectProps
      }));
    });
  };
  var optionCSS = function optionCSS2(_ref3) {
    var isDisabled = _ref3.isDisabled, isFocused = _ref3.isFocused, isSelected = _ref3.isSelected, _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
    return {
      label: "option",
      backgroundColor: isSelected ? colors2.primary : isFocused ? colors2.primary25 : "transparent",
      color: isDisabled ? colors2.neutral20 : isSelected ? colors2.neutral0 : "inherit",
      cursor: "default",
      display: "block",
      fontSize: "inherit",
      padding: "".concat(spacing2.baseUnit * 2, "px ").concat(spacing2.baseUnit * 3, "px"),
      width: "100%",
      userSelect: "none",
      WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
      ":active": {
        backgroundColor: !isDisabled ? isSelected ? colors2.primary : colors2.primary50 : void 0
      }
    };
  };
  var Option = function Option2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, isDisabled = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected, innerRef = props.innerRef, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("option", props),
      className: cx({
        option: true,
        "option--is-disabled": isDisabled,
        "option--is-focused": isFocused,
        "option--is-selected": isSelected
      }, className),
      ref: innerRef,
      "aria-disabled": isDisabled
    }, innerProps), children);
  };
  var placeholderCSS = function placeholderCSS2(_ref3) {
    var _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
    return {
      label: "placeholder",
      color: colors2.neutral50,
      gridArea: "1 / 1 / 2 / 3",
      marginLeft: spacing2.baseUnit / 2,
      marginRight: spacing2.baseUnit / 2
    };
  };
  var Placeholder = function Placeholder2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("placeholder", props),
      className: cx({
        placeholder: true
      }, className)
    }, innerProps), children);
  };
  var css2 = function css3(_ref3) {
    var isDisabled = _ref3.isDisabled, _ref$theme = _ref3.theme, spacing2 = _ref$theme.spacing, colors2 = _ref$theme.colors;
    return {
      label: "singleValue",
      color: isDisabled ? colors2.neutral40 : colors2.neutral80,
      gridArea: "1 / 1 / 2 / 3",
      marginLeft: spacing2.baseUnit / 2,
      marginRight: spacing2.baseUnit / 2,
      maxWidth: "100%",
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    };
  };
  var SingleValue = function SingleValue2(props) {
    var children = props.children, className = props.className, cx = props.cx, getStyles = props.getStyles, isDisabled = props.isDisabled, innerProps = props.innerProps;
    return (0, import_react55.jsx)("div", _extends({
      css: getStyles("singleValue", props),
      className: cx({
        "single-value": true,
        "single-value--is-disabled": isDisabled
      }, className)
    }, innerProps), children);
  };
  var components = {
    ClearIndicator,
    Control,
    DropdownIndicator,
    DownChevron,
    CrossIcon,
    Group,
    GroupHeading,
    IndicatorsContainer,
    IndicatorSeparator,
    Input: Input2,
    LoadingIndicator,
    Menu,
    MenuList,
    MenuPortal,
    LoadingMessage,
    NoOptionsMessage,
    MultiValue,
    MultiValueContainer,
    MultiValueLabel,
    MultiValueRemove,
    Option,
    Placeholder,
    SelectContainer,
    SingleValue,
    ValueContainer
  };
  var defaultComponents = function defaultComponents2(props) {
    return _objectSpread25(_objectSpread25({}, components), props.components);
  };

  // node_modules/react-select/dist/useStateManager-68425271.esm.js
  var import_react57 = __toModule(require_react());
  var _excluded2 = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
  function useStateManager(_ref3) {
    var _ref$defaultInputValu = _ref3.defaultInputValue, defaultInputValue = _ref$defaultInputValu === void 0 ? "" : _ref$defaultInputValu, _ref$defaultMenuIsOpe = _ref3.defaultMenuIsOpen, defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe, _ref$defaultValue = _ref3.defaultValue, defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue, propsInputValue = _ref3.inputValue, propsMenuIsOpen = _ref3.menuIsOpen, propsOnChange = _ref3.onChange, propsOnInputChange = _ref3.onInputChange, propsOnMenuClose = _ref3.onMenuClose, propsOnMenuOpen = _ref3.onMenuOpen, propsValue = _ref3.value, restSelectProps = _objectWithoutProperties12(_ref3, _excluded2);
    var _useState = (0, import_react57.useState)(propsInputValue !== void 0 ? propsInputValue : defaultInputValue), _useState2 = _slicedToArray9(_useState, 2), stateInputValue = _useState2[0], setStateInputValue = _useState2[1];
    var _useState3 = (0, import_react57.useState)(propsMenuIsOpen !== void 0 ? propsMenuIsOpen : defaultMenuIsOpen), _useState4 = _slicedToArray9(_useState3, 2), stateMenuIsOpen = _useState4[0], setStateMenuIsOpen = _useState4[1];
    var _useState5 = (0, import_react57.useState)(propsValue !== void 0 ? propsValue : defaultValue), _useState6 = _slicedToArray9(_useState5, 2), stateValue = _useState6[0], setStateValue = _useState6[1];
    var onChange2 = (0, import_react57.useCallback)(function(value3, actionMeta) {
      if (typeof propsOnChange === "function") {
        propsOnChange(value3, actionMeta);
      }
      setStateValue(value3);
    }, [propsOnChange]);
    var onInputChange = (0, import_react57.useCallback)(function(value3, actionMeta) {
      var newValue;
      if (typeof propsOnInputChange === "function") {
        newValue = propsOnInputChange(value3, actionMeta);
      }
      setStateInputValue(newValue !== void 0 ? newValue : value3);
    }, [propsOnInputChange]);
    var onMenuOpen = (0, import_react57.useCallback)(function() {
      if (typeof propsOnMenuOpen === "function") {
        propsOnMenuOpen();
      }
      setStateMenuIsOpen(true);
    }, [propsOnMenuOpen]);
    var onMenuClose = (0, import_react57.useCallback)(function() {
      if (typeof propsOnMenuClose === "function") {
        propsOnMenuClose();
      }
      setStateMenuIsOpen(false);
    }, [propsOnMenuClose]);
    var inputValue = propsInputValue !== void 0 ? propsInputValue : stateInputValue;
    var menuIsOpen = propsMenuIsOpen !== void 0 ? propsMenuIsOpen : stateMenuIsOpen;
    var value2 = propsValue !== void 0 ? propsValue : stateValue;
    return _objectSpread25(_objectSpread25({}, restSelectProps), {}, {
      inputValue,
      menuIsOpen,
      onChange: onChange2,
      onInputChange,
      onMenuClose,
      onMenuOpen,
      value: value2
    });
  }

  // node_modules/react-select/dist/react-select.esm.js
  var React50 = __toModule(require_react());
  var import_react60 = __toModule(require_react());

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles12(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray17(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray13(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread12() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray12(arr) {
    return _arrayWithoutHoles12(arr) || _iterableToArray13(arr) || _unsupportedIterableToArray17(arr) || _nonIterableSpread12();
  }

  // node_modules/react-select/dist/Select-54ac8379.esm.js
  var React49 = __toModule(require_react());
  var import_react58 = __toModule(require_react());
  var import_react59 = __toModule(require_emotion_react_cjs());

  // node_modules/memoize-one/dist/memoize-one.esm.js
  var safeIsNaN = Number.isNaN || function ponyfill(value2) {
    return typeof value2 === "number" && value2 !== value2;
  };
  function isEqual(first, second2) {
    if (first === second2) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second2)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i3 = 0; i3 < newInputs.length; i3++) {
      if (!isEqual(newInputs[i3], lastInputs[i3])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual2) {
    if (isEqual2 === void 0) {
      isEqual2 = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult2;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
        return lastResult2;
      }
      lastResult2 = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult2;
    }
    return memoized;
  }
  var memoize_one_esm_default = memoizeOne;

  // node_modules/react-select/dist/Select-54ac8379.esm.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__$1() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var _ref = false ? {
    name: "7pg0cj-a11yText",
    styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"
  } : {
    name: "1f43avz-a11yText-A11yText",
    styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNSSIsImZpbGUiOiJBMTF5VGV4dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IGpzeCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLy8gQXNzaXN0aXZlIHRleHQgdG8gZGVzY3JpYmUgdmlzdWFsIGVsZW1lbnRzLiBIaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMuXG5jb25zdCBBMTF5VGV4dCA9IChwcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ10pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
  };
  var A11yText = function A11yText2(props) {
    return (0, import_react59.jsx)("span", _extends({
      css: _ref
    }, props));
  };
  var defaultAriaLiveMessages = {
    guidance: function guidance(props) {
      var isSearchable = props.isSearchable, isMulti = props.isMulti, isDisabled = props.isDisabled, tabSelectsValue = props.tabSelectsValue, context2 = props.context;
      switch (context2) {
        case "menu":
          return "Use Up and Down to choose options".concat(isDisabled ? "" : ", press Enter to select the currently focused option", ", press Escape to exit the menu").concat(tabSelectsValue ? ", press Tab to select the option and exit the menu" : "", ".");
        case "input":
          return "".concat(props["aria-label"] || "Select", " is focused ").concat(isSearchable ? ",type to refine list" : "", ", press Down to open the menu, ").concat(isMulti ? " press left to focus selected values" : "");
        case "value":
          return "Use left and right to toggle between focused values, press Backspace to remove the currently focused value";
        default:
          return "";
      }
    },
    onChange: function onChange(props) {
      var action = props.action, _props$label = props.label, label = _props$label === void 0 ? "" : _props$label, labels = props.labels, isDisabled = props.isDisabled;
      switch (action) {
        case "deselect-option":
        case "pop-value":
        case "remove-value":
          return "option ".concat(label, ", deselected.");
        case "clear":
          return "All selected options have been cleared.";
        case "initial-input-focus":
          return "option".concat(labels.length > 1 ? "s" : "", " ").concat(labels.join(","), ", selected.");
        case "select-option":
          return isDisabled ? "option ".concat(label, " is disabled. Select another option.") : "option ".concat(label, ", selected.");
        default:
          return "";
      }
    },
    onFocus: function onFocus(props) {
      var context2 = props.context, focused = props.focused, options2 = props.options, _props$label2 = props.label, label = _props$label2 === void 0 ? "" : _props$label2, selectValue = props.selectValue, isDisabled = props.isDisabled, isSelected = props.isSelected;
      var getArrayIndex = function getArrayIndex2(arr, item) {
        return arr && arr.length ? "".concat(arr.indexOf(item) + 1, " of ").concat(arr.length) : "";
      };
      if (context2 === "value" && selectValue) {
        return "value ".concat(label, " focused, ").concat(getArrayIndex(selectValue, focused), ".");
      }
      if (context2 === "menu") {
        var disabled = isDisabled ? " disabled" : "";
        var status = "".concat(isSelected ? "selected" : "focused").concat(disabled);
        return "option ".concat(label, " ").concat(status, ", ").concat(getArrayIndex(options2, focused), ".");
      }
      return "";
    },
    onFilter: function onFilter(props) {
      var inputValue = props.inputValue, resultsMessage = props.resultsMessage;
      return "".concat(resultsMessage).concat(inputValue ? " for search term " + inputValue : "", ".");
    }
  };
  var LiveRegion = function LiveRegion2(props) {
    var ariaSelection = props.ariaSelection, focusedOption = props.focusedOption, focusedValue = props.focusedValue, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id = props.id;
    var ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel4 = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isMulti = selectProps.isMulti, isOptionDisabled3 = selectProps.isOptionDisabled, isSearchable = selectProps.isSearchable, menuIsOpen = selectProps.menuIsOpen, options2 = selectProps.options, screenReaderStatus2 = selectProps.screenReaderStatus, tabSelectsValue = selectProps.tabSelectsValue;
    var ariaLabel = selectProps["aria-label"];
    var ariaLive = selectProps["aria-live"];
    var messages = (0, import_react58.useMemo)(function() {
      return _objectSpread25(_objectSpread25({}, defaultAriaLiveMessages), ariaLiveMessages || {});
    }, [ariaLiveMessages]);
    var ariaSelected = (0, import_react58.useMemo)(function() {
      var message = "";
      if (ariaSelection && messages.onChange) {
        var option = ariaSelection.option, selectedOptions = ariaSelection.options, removedValue = ariaSelection.removedValue, removedValues = ariaSelection.removedValues, value2 = ariaSelection.value;
        var asOption = function asOption2(val) {
          return !Array.isArray(val) ? val : null;
        };
        var selected = removedValue || option || asOption(value2);
        var label = selected ? getOptionLabel4(selected) : "";
        var multiSelected = selectedOptions || removedValues || void 0;
        var labels = multiSelected ? multiSelected.map(getOptionLabel4) : [];
        var onChangeProps = _objectSpread25({
          isDisabled: selected && isOptionDisabled3(selected, selectValue),
          label,
          labels
        }, ariaSelection);
        message = messages.onChange(onChangeProps);
      }
      return message;
    }, [ariaSelection, messages, isOptionDisabled3, selectValue, getOptionLabel4]);
    var ariaFocused = (0, import_react58.useMemo)(function() {
      var focusMsg = "";
      var focused = focusedOption || focusedValue;
      var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
      if (focused && messages.onFocus) {
        var onFocusProps = {
          focused,
          label: getOptionLabel4(focused),
          isDisabled: isOptionDisabled3(focused, selectValue),
          isSelected,
          options: options2,
          context: focused === focusedOption ? "menu" : "value",
          selectValue
        };
        focusMsg = messages.onFocus(onFocusProps);
      }
      return focusMsg;
    }, [focusedOption, focusedValue, getOptionLabel4, isOptionDisabled3, messages, options2, selectValue]);
    var ariaResults = (0, import_react58.useMemo)(function() {
      var resultsMsg = "";
      if (menuIsOpen && options2.length && messages.onFilter) {
        var resultsMessage = screenReaderStatus2({
          count: focusableOptions.length
        });
        resultsMsg = messages.onFilter({
          inputValue,
          resultsMessage
        });
      }
      return resultsMsg;
    }, [focusableOptions, inputValue, menuIsOpen, messages, options2, screenReaderStatus2]);
    var ariaGuidance = (0, import_react58.useMemo)(function() {
      var guidanceMsg = "";
      if (messages.guidance) {
        var context2 = focusedValue ? "value" : menuIsOpen ? "menu" : "input";
        guidanceMsg = messages.guidance({
          "aria-label": ariaLabel,
          context: context2,
          isDisabled: focusedOption && isOptionDisabled3(focusedOption, selectValue),
          isMulti,
          isSearchable,
          tabSelectsValue
        });
      }
      return guidanceMsg;
    }, [ariaLabel, focusedOption, focusedValue, isMulti, isOptionDisabled3, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue]);
    var ariaContext = "".concat(ariaFocused, " ").concat(ariaResults, " ").concat(ariaGuidance);
    var ScreenReaderText = (0, import_react59.jsx)(import_react58.Fragment, null, (0, import_react59.jsx)("span", {
      id: "aria-selection"
    }, ariaSelected), (0, import_react59.jsx)("span", {
      id: "aria-context"
    }, ariaContext));
    var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus";
    return (0, import_react59.jsx)(import_react58.Fragment, null, (0, import_react59.jsx)(A11yText, {
      id
    }, isInitialFocus && ScreenReaderText), (0, import_react59.jsx)(A11yText, {
      "aria-live": ariaLive,
      "aria-atomic": "false",
      "aria-relevant": "additions text"
    }, isFocused && !isInitialFocus && ScreenReaderText));
  };
  var diacritics = [{
    base: "A",
    letters: "A\u24B6\uFF21\xC0\xC1\xC2\u1EA6\u1EA4\u1EAA\u1EA8\xC3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\xC4\u01DE\u1EA2\xC5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
  }, {
    base: "AA",
    letters: "\uA732"
  }, {
    base: "AE",
    letters: "\xC6\u01FC\u01E2"
  }, {
    base: "AO",
    letters: "\uA734"
  }, {
    base: "AU",
    letters: "\uA736"
  }, {
    base: "AV",
    letters: "\uA738\uA73A"
  }, {
    base: "AY",
    letters: "\uA73C"
  }, {
    base: "B",
    letters: "B\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181"
  }, {
    base: "C",
    letters: "C\u24B8\uFF23\u0106\u0108\u010A\u010C\xC7\u1E08\u0187\u023B\uA73E"
  }, {
    base: "D",
    letters: "D\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779"
  }, {
    base: "DZ",
    letters: "\u01F1\u01C4"
  }, {
    base: "Dz",
    letters: "\u01F2\u01C5"
  }, {
    base: "E",
    letters: "E\u24BA\uFF25\xC8\xC9\xCA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\xCB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E"
  }, {
    base: "F",
    letters: "F\u24BB\uFF26\u1E1E\u0191\uA77B"
  }, {
    base: "G",
    letters: "G\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E"
  }, {
    base: "H",
    letters: "H\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
  }, {
    base: "I",
    letters: "I\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
  }, {
    base: "J",
    letters: "J\u24BF\uFF2A\u0134\u0248"
  }, {
    base: "K",
    letters: "K\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
  }, {
    base: "L",
    letters: "L\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
  }, {
    base: "LJ",
    letters: "\u01C7"
  }, {
    base: "Lj",
    letters: "\u01C8"
  }, {
    base: "M",
    letters: "M\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C"
  }, {
    base: "N",
    letters: "N\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4"
  }, {
    base: "NJ",
    letters: "\u01CA"
  }, {
    base: "Nj",
    letters: "\u01CB"
  }, {
    base: "O",
    letters: "O\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C"
  }, {
    base: "OI",
    letters: "\u01A2"
  }, {
    base: "OO",
    letters: "\uA74E"
  }, {
    base: "OU",
    letters: "\u0222"
  }, {
    base: "P",
    letters: "P\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
  }, {
    base: "Q",
    letters: "Q\u24C6\uFF31\uA756\uA758\u024A"
  }, {
    base: "R",
    letters: "R\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
  }, {
    base: "S",
    letters: "S\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
  }, {
    base: "T",
    letters: "T\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
  }, {
    base: "TZ",
    letters: "\uA728"
  }, {
    base: "U",
    letters: "U\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
  }, {
    base: "V",
    letters: "V\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245"
  }, {
    base: "VY",
    letters: "\uA760"
  }, {
    base: "W",
    letters: "W\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
  }, {
    base: "X",
    letters: "X\u24CD\uFF38\u1E8A\u1E8C"
  }, {
    base: "Y",
    letters: "Y\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
  }, {
    base: "Z",
    letters: "Z\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
  }, {
    base: "a",
    letters: "a\u24D0\uFF41\u1E9A\xE0\xE1\xE2\u1EA7\u1EA5\u1EAB\u1EA9\xE3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\xE4\u01DF\u1EA3\xE5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250"
  }, {
    base: "aa",
    letters: "\uA733"
  }, {
    base: "ae",
    letters: "\xE6\u01FD\u01E3"
  }, {
    base: "ao",
    letters: "\uA735"
  }, {
    base: "au",
    letters: "\uA737"
  }, {
    base: "av",
    letters: "\uA739\uA73B"
  }, {
    base: "ay",
    letters: "\uA73D"
  }, {
    base: "b",
    letters: "b\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253"
  }, {
    base: "c",
    letters: "c\u24D2\uFF43\u0107\u0109\u010B\u010D\xE7\u1E09\u0188\u023C\uA73F\u2184"
  }, {
    base: "d",
    letters: "d\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A"
  }, {
    base: "dz",
    letters: "\u01F3\u01C6"
  }, {
    base: "e",
    letters: "e\u24D4\uFF45\xE8\xE9\xEA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\xEB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD"
  }, {
    base: "f",
    letters: "f\u24D5\uFF46\u1E1F\u0192\uA77C"
  }, {
    base: "g",
    letters: "g\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F"
  }, {
    base: "h",
    letters: "h\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
  }, {
    base: "hv",
    letters: "\u0195"
  }, {
    base: "i",
    letters: "i\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
  }, {
    base: "j",
    letters: "j\u24D9\uFF4A\u0135\u01F0\u0249"
  }, {
    base: "k",
    letters: "k\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
  }, {
    base: "l",
    letters: "l\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747"
  }, {
    base: "lj",
    letters: "\u01C9"
  }, {
    base: "m",
    letters: "m\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F"
  }, {
    base: "n",
    letters: "n\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5"
  }, {
    base: "nj",
    letters: "\u01CC"
  }, {
    base: "o",
    letters: "o\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\u0254\uA74B\uA74D\u0275"
  }, {
    base: "oi",
    letters: "\u01A3"
  }, {
    base: "ou",
    letters: "\u0223"
  }, {
    base: "oo",
    letters: "\uA74F"
  }, {
    base: "p",
    letters: "p\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755"
  }, {
    base: "q",
    letters: "q\u24E0\uFF51\u024B\uA757\uA759"
  }, {
    base: "r",
    letters: "r\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
  }, {
    base: "s",
    letters: "s\u24E2\uFF53\xDF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B"
  }, {
    base: "t",
    letters: "t\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
  }, {
    base: "tz",
    letters: "\uA729"
  }, {
    base: "u",
    letters: "u\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
  }, {
    base: "v",
    letters: "v\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C"
  }, {
    base: "vy",
    letters: "\uA761"
  }, {
    base: "w",
    letters: "w\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
  }, {
    base: "x",
    letters: "x\u24E7\uFF58\u1E8B\u1E8D"
  }, {
    base: "y",
    letters: "y\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
  }, {
    base: "z",
    letters: "z\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
  }];
  var anyDiacritic = new RegExp("[" + diacritics.map(function(d3) {
    return d3.letters;
  }).join("") + "]", "g");
  var diacriticToBase = {};
  for (i3 = 0; i3 < diacritics.length; i3++) {
    diacritic = diacritics[i3];
    for (j3 = 0; j3 < diacritic.letters.length; j3++) {
      diacriticToBase[diacritic.letters[j3]] = diacritic.base;
    }
  }
  var diacritic;
  var j3;
  var i3;
  var stripDiacritics = function stripDiacritics2(str) {
    return str.replace(anyDiacritic, function(match2) {
      return diacriticToBase[match2];
    });
  };
  var memoizedStripDiacriticsForInput = memoize_one_esm_default(stripDiacritics);
  var trimString = function trimString2(str) {
    return str.replace(/^\s+|\s+$/g, "");
  };
  var defaultStringify = function defaultStringify2(option) {
    return "".concat(option.label, " ").concat(option.value);
  };
  var createFilter = function createFilter2(config) {
    return function(option, rawInput) {
      if (option.data.__isNew__)
        return true;
      var _ignoreCase$ignoreAcc = _objectSpread25({
        ignoreCase: true,
        ignoreAccents: true,
        stringify: defaultStringify,
        trim: true,
        matchFrom: "any"
      }, config), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify = _ignoreCase$ignoreAcc.stringify, trim = _ignoreCase$ignoreAcc.trim, matchFrom = _ignoreCase$ignoreAcc.matchFrom;
      var input = trim ? trimString(rawInput) : rawInput;
      var candidate = trim ? trimString(stringify(option)) : stringify(option);
      if (ignoreCase) {
        input = input.toLowerCase();
        candidate = candidate.toLowerCase();
      }
      if (ignoreAccents) {
        input = memoizedStripDiacriticsForInput(input);
        candidate = stripDiacritics(candidate);
      }
      return matchFrom === "start" ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
    };
  };
  var _excluded3 = ["innerRef"];
  function DummyInput(_ref3) {
    var innerRef = _ref3.innerRef, props = _objectWithoutProperties12(_ref3, _excluded3);
    var filteredProps = removeProps(props, "onExited", "in", "enter", "exit", "appear");
    return (0, import_react59.jsx)("input", _extends({
      ref: innerRef
    }, filteredProps, {
      css: /* @__PURE__ */ (0, import_react59.css)({
        label: "dummyInput",
        background: 0,
        border: 0,
        caretColor: "transparent",
        fontSize: "inherit",
        gridArea: "1 / 1 / 2 / 3",
        outline: 0,
        padding: 0,
        width: 1,
        color: "transparent",
        left: -100,
        opacity: 0,
        position: "relative",
        transform: "scale(.01)"
      }, false ? "" : ";label:DummyInput;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkR1bW15SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCTSIsImZpbGUiOiJEdW1teUlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgcmVtb3ZlUHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIER1bW15SW5wdXQoe1xuICBpbm5lclJlZixcbiAgLi4ucHJvcHNcbn06IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmIHtcbiAgcmVhZG9ubHkgaW5uZXJSZWY6IFJlZjxIVE1MSW5wdXRFbGVtZW50Pjtcbn0pIHtcbiAgLy8gUmVtb3ZlIGFuaW1hdGlvbiBwcm9wcyBub3QgbWVhbnQgZm9yIEhUTUwgZWxlbWVudHNcbiAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHJlbW92ZVByb3BzKFxuICAgIHByb3BzLFxuICAgICdvbkV4aXRlZCcsXG4gICAgJ2luJyxcbiAgICAnZW50ZXInLFxuICAgICdleGl0JyxcbiAgICAnYXBwZWFyJ1xuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgey4uLmZpbHRlcmVkUHJvcHN9XG4gICAgICBjc3M9e3tcbiAgICAgICAgbGFiZWw6ICdkdW1teUlucHV0JyxcbiAgICAgICAgLy8gZ2V0IHJpZCBvZiBhbnkgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHRoaXMgaGlkZXMgdGhlIGZsYXNoaW5nIGN1cnNvclxuICAgICAgICBjYXJldENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICBncmlkQXJlYTogJzEgLyAxIC8gMiAvIDMnLFxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHdpdGhvdXQgYHdpZHRoYCBicm93c2VycyB3b24ndCBhbGxvdyBmb2N1c1xuICAgICAgICB3aWR0aDogMSxcblxuICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG5cbiAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBtb2JpbGUgd2hpbHN0IG1haW50YWluaW5nIFwic2Nyb2xsIGludG8gdmlld1wiIGJlaGF2aW91clxuICAgICAgICBsZWZ0OiAtMTAwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoLjAxKScsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0= */")
    }));
  }
  var cancelScroll = function cancelScroll2(event) {
    event.preventDefault();
    event.stopPropagation();
  };
  function useScrollCapture(_ref3) {
    var isEnabled = _ref3.isEnabled, onBottomArrive = _ref3.onBottomArrive, onBottomLeave = _ref3.onBottomLeave, onTopArrive = _ref3.onTopArrive, onTopLeave = _ref3.onTopLeave;
    var isBottom = (0, import_react58.useRef)(false);
    var isTop = (0, import_react58.useRef)(false);
    var touchStart = (0, import_react58.useRef)(0);
    var scrollTarget = (0, import_react58.useRef)(null);
    var handleEventDelta = (0, import_react58.useCallback)(function(event, delta) {
      if (scrollTarget.current === null)
        return;
      var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, clientHeight = _scrollTarget$current.clientHeight;
      var target = scrollTarget.current;
      var isDeltaPositive = delta > 0;
      var availableScroll = scrollHeight - clientHeight - scrollTop;
      var shouldCancelScroll = false;
      if (availableScroll > delta && isBottom.current) {
        if (onBottomLeave)
          onBottomLeave(event);
        isBottom.current = false;
      }
      if (isDeltaPositive && isTop.current) {
        if (onTopLeave)
          onTopLeave(event);
        isTop.current = false;
      }
      if (isDeltaPositive && delta > availableScroll) {
        if (onBottomArrive && !isBottom.current) {
          onBottomArrive(event);
        }
        target.scrollTop = scrollHeight;
        shouldCancelScroll = true;
        isBottom.current = true;
      } else if (!isDeltaPositive && -delta > scrollTop) {
        if (onTopArrive && !isTop.current) {
          onTopArrive(event);
        }
        target.scrollTop = 0;
        shouldCancelScroll = true;
        isTop.current = true;
      }
      if (shouldCancelScroll) {
        cancelScroll(event);
      }
    }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
    var onWheel = (0, import_react58.useCallback)(function(event) {
      handleEventDelta(event, event.deltaY);
    }, [handleEventDelta]);
    var onTouchStart = (0, import_react58.useCallback)(function(event) {
      touchStart.current = event.changedTouches[0].clientY;
    }, []);
    var onTouchMove = (0, import_react58.useCallback)(function(event) {
      var deltaY = touchStart.current - event.changedTouches[0].clientY;
      handleEventDelta(event, deltaY);
    }, [handleEventDelta]);
    var startListening = (0, import_react58.useCallback)(function(el) {
      if (!el)
        return;
      var notPassive = supportsPassiveEvents ? {
        passive: false
      } : false;
      el.addEventListener("wheel", onWheel, notPassive);
      el.addEventListener("touchstart", onTouchStart, notPassive);
      el.addEventListener("touchmove", onTouchMove, notPassive);
    }, [onTouchMove, onTouchStart, onWheel]);
    var stopListening = (0, import_react58.useCallback)(function(el) {
      if (!el)
        return;
      el.removeEventListener("wheel", onWheel, false);
      el.removeEventListener("touchstart", onTouchStart, false);
      el.removeEventListener("touchmove", onTouchMove, false);
    }, [onTouchMove, onTouchStart, onWheel]);
    (0, import_react58.useEffect)(function() {
      if (!isEnabled)
        return;
      var element2 = scrollTarget.current;
      startListening(element2);
      return function() {
        stopListening(element2);
      };
    }, [isEnabled, startListening, stopListening]);
    return function(element2) {
      scrollTarget.current = element2;
    };
  }
  var STYLE_KEYS = ["boxSizing", "height", "overflow", "paddingRight", "position"];
  var LOCK_STYLES = {
    boxSizing: "border-box",
    overflow: "hidden",
    position: "relative",
    height: "100%"
  };
  function preventTouchMove(e3) {
    e3.preventDefault();
  }
  function allowTouchMove(e3) {
    e3.stopPropagation();
  }
  function preventInertiaScroll() {
    var top = this.scrollTop;
    var totalScroll = this.scrollHeight;
    var currentScroll = top + this.offsetHeight;
    if (top === 0) {
      this.scrollTop = 1;
    } else if (currentScroll === totalScroll) {
      this.scrollTop = top - 1;
    }
  }
  function isTouchDevice() {
    return "ontouchstart" in window || navigator.maxTouchPoints;
  }
  var canUseDOM2 = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var activeScrollLocks = 0;
  var listenerOptions = {
    capture: false,
    passive: false
  };
  function useScrollLock(_ref3) {
    var isEnabled = _ref3.isEnabled, _ref$accountForScroll = _ref3.accountForScrollbars, accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
    var originalStyles = (0, import_react58.useRef)({});
    var scrollTarget = (0, import_react58.useRef)(null);
    var addScrollLock = (0, import_react58.useCallback)(function(touchScrollTarget) {
      if (!canUseDOM2)
        return;
      var target = document.body;
      var targetStyle = target && target.style;
      if (accountForScrollbars) {
        STYLE_KEYS.forEach(function(key) {
          var val = targetStyle && targetStyle[key];
          originalStyles.current[key] = val;
        });
      }
      if (accountForScrollbars && activeScrollLocks < 1) {
        var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
        var clientWidth = document.body ? document.body.clientWidth : 0;
        var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
        Object.keys(LOCK_STYLES).forEach(function(key) {
          var val = LOCK_STYLES[key];
          if (targetStyle) {
            targetStyle[key] = val;
          }
        });
        if (targetStyle) {
          targetStyle.paddingRight = "".concat(adjustedPadding, "px");
        }
      }
      if (target && isTouchDevice()) {
        target.addEventListener("touchmove", preventTouchMove, listenerOptions);
        if (touchScrollTarget) {
          touchScrollTarget.addEventListener("touchstart", preventInertiaScroll, listenerOptions);
          touchScrollTarget.addEventListener("touchmove", allowTouchMove, listenerOptions);
        }
      }
      activeScrollLocks += 1;
    }, [accountForScrollbars]);
    var removeScrollLock = (0, import_react58.useCallback)(function(touchScrollTarget) {
      if (!canUseDOM2)
        return;
      var target = document.body;
      var targetStyle = target && target.style;
      activeScrollLocks = Math.max(activeScrollLocks - 1, 0);
      if (accountForScrollbars && activeScrollLocks < 1) {
        STYLE_KEYS.forEach(function(key) {
          var val = originalStyles.current[key];
          if (targetStyle) {
            targetStyle[key] = val;
          }
        });
      }
      if (target && isTouchDevice()) {
        target.removeEventListener("touchmove", preventTouchMove, listenerOptions);
        if (touchScrollTarget) {
          touchScrollTarget.removeEventListener("touchstart", preventInertiaScroll, listenerOptions);
          touchScrollTarget.removeEventListener("touchmove", allowTouchMove, listenerOptions);
        }
      }
    }, [accountForScrollbars]);
    (0, import_react58.useEffect)(function() {
      if (!isEnabled)
        return;
      var element2 = scrollTarget.current;
      addScrollLock(element2);
      return function() {
        removeScrollLock(element2);
      };
    }, [isEnabled, addScrollLock, removeScrollLock]);
    return function(element2) {
      scrollTarget.current = element2;
    };
  }
  function _EMOTION_STRINGIFIED_CSS_ERROR__2() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var blurSelectInput = function blurSelectInput2() {
    return document.activeElement && document.activeElement.blur();
  };
  var _ref22 = false ? {
    name: "1kfdb0e",
    styles: "position:fixed;left:0;bottom:0;right:0;top:0"
  } : {
    name: "bp8cua-ScrollManager",
    styles: "position:fixed;left:0;bottom:0;right:0;top:0;label:ScrollManager;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbE1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStDVSIsImZpbGUiOiJTY3JvbGxNYW5hZ2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVmQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL3VzZVNjcm9sbENhcHR1cmUnO1xuaW1wb3J0IHVzZVNjcm9sbExvY2sgZnJvbSAnLi91c2VTY3JvbGxMb2NrJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVhZG9ubHkgY2hpbGRyZW46IChyZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PikgPT4gUmVhY3RFbGVtZW50O1xuICByZWFkb25seSBsb2NrRW5hYmxlZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FwdHVyZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG9uQm90dG9tQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Cb3R0b21MZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IG9uVG9wQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Ub3BMZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGJsdXJTZWxlY3RJbnB1dCA9ICgpID0+XG4gIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmJsdXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2Nyb2xsTWFuYWdlcih7XG4gIGNoaWxkcmVuLFxuICBsb2NrRW5hYmxlZCxcbiAgY2FwdHVyZUVuYWJsZWQgPSB0cnVlLFxuICBvbkJvdHRvbUFycml2ZSxcbiAgb25Cb3R0b21MZWF2ZSxcbiAgb25Ub3BBcnJpdmUsXG4gIG9uVG9wTGVhdmUsXG59OiBQcm9wcykge1xuICBjb25zdCBzZXRTY3JvbGxDYXB0dXJlVGFyZ2V0ID0gdXNlU2Nyb2xsQ2FwdHVyZSh7XG4gICAgaXNFbmFibGVkOiBjYXB0dXJlRW5hYmxlZCxcbiAgICBvbkJvdHRvbUFycml2ZSxcbiAgICBvbkJvdHRvbUxlYXZlLFxuICAgIG9uVG9wQXJyaXZlLFxuICAgIG9uVG9wTGVhdmUsXG4gIH0pO1xuICBjb25zdCBzZXRTY3JvbGxMb2NrVGFyZ2V0ID0gdXNlU2Nyb2xsTG9jayh7IGlzRW5hYmxlZDogbG9ja0VuYWJsZWQgfSk7XG5cbiAgY29uc3QgdGFyZ2V0UmVmOiBSZWZDYWxsYmFjazxIVE1MRWxlbWVudD4gPSAoZWxlbWVudCkgPT4ge1xuICAgIHNldFNjcm9sbENhcHR1cmVUYXJnZXQoZWxlbWVudCk7XG4gICAgc2V0U2Nyb2xsTG9ja1RhcmdldChlbGVtZW50KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIHtsb2NrRW5hYmxlZCAmJiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBvbkNsaWNrPXtibHVyU2VsZWN0SW5wdXR9XG4gICAgICAgICAgY3NzPXt7IHBvc2l0aW9uOiAnZml4ZWQnLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwLCB0b3A6IDAgfX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICB7Y2hpbGRyZW4odGFyZ2V0UmVmKX1cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__2
  };
  function ScrollManager(_ref3) {
    var children = _ref3.children, lockEnabled = _ref3.lockEnabled, _ref$captureEnabled = _ref3.captureEnabled, captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled, onBottomArrive = _ref3.onBottomArrive, onBottomLeave = _ref3.onBottomLeave, onTopArrive = _ref3.onTopArrive, onTopLeave = _ref3.onTopLeave;
    var setScrollCaptureTarget = useScrollCapture({
      isEnabled: captureEnabled,
      onBottomArrive,
      onBottomLeave,
      onTopArrive,
      onTopLeave
    });
    var setScrollLockTarget = useScrollLock({
      isEnabled: lockEnabled
    });
    var targetRef = function targetRef2(element2) {
      setScrollCaptureTarget(element2);
      setScrollLockTarget(element2);
    };
    return (0, import_react59.jsx)(import_react58.Fragment, null, lockEnabled && (0, import_react59.jsx)("div", {
      onClick: blurSelectInput,
      css: _ref22
    }), children(targetRef));
  }
  var formatGroupLabel = function formatGroupLabel2(group) {
    return group.label;
  };
  var getOptionLabel$1 = function getOptionLabel(option) {
    return option.label;
  };
  var getOptionValue$1 = function getOptionValue(option) {
    return option.value;
  };
  var isOptionDisabled = function isOptionDisabled2(option) {
    return !!option.isDisabled;
  };
  var defaultStyles = {
    clearIndicator: clearIndicatorCSS,
    container: containerCSS,
    control: css$1,
    dropdownIndicator: dropdownIndicatorCSS,
    group: groupCSS,
    groupHeading: groupHeadingCSS,
    indicatorsContainer: indicatorsContainerCSS,
    indicatorSeparator: indicatorSeparatorCSS,
    input: inputCSS,
    loadingIndicator: loadingIndicatorCSS,
    loadingMessage: loadingMessageCSS,
    menu: menuCSS,
    menuList: menuListCSS,
    menuPortal: menuPortalCSS,
    multiValue: multiValueCSS,
    multiValueLabel: multiValueLabelCSS,
    multiValueRemove: multiValueRemoveCSS,
    noOptionsMessage: noOptionsMessageCSS,
    option: optionCSS,
    placeholder: placeholderCSS,
    singleValue: css2,
    valueContainer: valueContainerCSS
  };
  var colors = {
    primary: "#2684FF",
    primary75: "#4C9AFF",
    primary50: "#B2D4FF",
    primary25: "#DEEBFF",
    danger: "#DE350B",
    dangerLight: "#FFBDAD",
    neutral0: "hsl(0, 0%, 100%)",
    neutral5: "hsl(0, 0%, 95%)",
    neutral10: "hsl(0, 0%, 90%)",
    neutral20: "hsl(0, 0%, 80%)",
    neutral30: "hsl(0, 0%, 70%)",
    neutral40: "hsl(0, 0%, 60%)",
    neutral50: "hsl(0, 0%, 50%)",
    neutral60: "hsl(0, 0%, 40%)",
    neutral70: "hsl(0, 0%, 30%)",
    neutral80: "hsl(0, 0%, 20%)",
    neutral90: "hsl(0, 0%, 10%)"
  };
  var borderRadius = 4;
  var baseUnit = 4;
  var controlHeight = 38;
  var menuGutter = baseUnit * 2;
  var spacing = {
    baseUnit,
    controlHeight,
    menuGutter
  };
  var defaultTheme = {
    borderRadius,
    colors,
    spacing
  };
  var defaultProps2 = {
    "aria-live": "polite",
    backspaceRemovesValue: true,
    blurInputOnSelect: isTouchCapable(),
    captureMenuScroll: !isTouchCapable(),
    closeMenuOnSelect: true,
    closeMenuOnScroll: false,
    components: {},
    controlShouldRenderValue: true,
    escapeClearsValue: false,
    filterOption: createFilter(),
    formatGroupLabel,
    getOptionLabel: getOptionLabel$1,
    getOptionValue: getOptionValue$1,
    isDisabled: false,
    isLoading: false,
    isMulti: false,
    isRtl: false,
    isSearchable: true,
    isOptionDisabled,
    loadingMessage: function loadingMessage() {
      return "Loading...";
    },
    maxMenuHeight: 300,
    minMenuHeight: 140,
    menuIsOpen: false,
    menuPlacement: "bottom",
    menuPosition: "absolute",
    menuShouldBlockScroll: false,
    menuShouldScrollIntoView: !isMobileDevice(),
    noOptionsMessage: function noOptionsMessage() {
      return "No options";
    },
    openMenuOnFocus: false,
    openMenuOnClick: true,
    options: [],
    pageSize: 5,
    placeholder: "Select...",
    screenReaderStatus: function screenReaderStatus(_ref3) {
      var count = _ref3.count;
      return "".concat(count, " result").concat(count !== 1 ? "s" : "", " available");
    },
    styles: {},
    tabIndex: 0,
    tabSelectsValue: true
  };
  function toCategorizedOption(props, option, selectValue, index2) {
    var isDisabled = _isOptionDisabled(props, option, selectValue);
    var isSelected = _isOptionSelected(props, option, selectValue);
    var label = getOptionLabel2(props, option);
    var value2 = getOptionValue2(props, option);
    return {
      type: "option",
      data: option,
      isDisabled,
      isSelected,
      label,
      value: value2,
      index: index2
    };
  }
  function buildCategorizedOptions(props, selectValue) {
    return props.options.map(function(groupOrOption, groupOrOptionIndex) {
      if ("options" in groupOrOption) {
        var categorizedOptions = groupOrOption.options.map(function(option, optionIndex) {
          return toCategorizedOption(props, option, selectValue, optionIndex);
        }).filter(function(categorizedOption2) {
          return isFocusable(props, categorizedOption2);
        });
        return categorizedOptions.length > 0 ? {
          type: "group",
          data: groupOrOption,
          options: categorizedOptions,
          index: groupOrOptionIndex
        } : void 0;
      }
      var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
      return isFocusable(props, categorizedOption) ? categorizedOption : void 0;
    }).filter(notNullish);
  }
  function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
    return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
      if (categorizedOption.type === "group") {
        optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray12(categorizedOption.options.map(function(option) {
          return option.data;
        })));
      } else {
        optionsAccumulator.push(categorizedOption.data);
      }
      return optionsAccumulator;
    }, []);
  }
  function buildFocusableOptions(props, selectValue) {
    return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
  }
  function isFocusable(props, categorizedOption) {
    var _props$inputValue = props.inputValue, inputValue = _props$inputValue === void 0 ? "" : _props$inputValue;
    var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label, value2 = categorizedOption.value;
    return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
      label,
      value: value2,
      data
    }, inputValue);
  }
  function getNextFocusedValue(state, nextSelectValue) {
    var focusedValue = state.focusedValue, lastSelectValue = state.selectValue;
    var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
    if (lastFocusedIndex > -1) {
      var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
      if (nextFocusedIndex > -1) {
        return focusedValue;
      } else if (lastFocusedIndex < nextSelectValue.length) {
        return nextSelectValue[lastFocusedIndex];
      }
    }
    return null;
  }
  function getNextFocusedOption(state, options2) {
    var lastFocusedOption = state.focusedOption;
    return lastFocusedOption && options2.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options2[0];
  }
  var getOptionLabel2 = function getOptionLabel3(props, data) {
    return props.getOptionLabel(data);
  };
  var getOptionValue2 = function getOptionValue3(props, data) {
    return props.getOptionValue(data);
  };
  function _isOptionDisabled(props, option, selectValue) {
    return typeof props.isOptionDisabled === "function" ? props.isOptionDisabled(option, selectValue) : false;
  }
  function _isOptionSelected(props, option, selectValue) {
    if (selectValue.indexOf(option) > -1)
      return true;
    if (typeof props.isOptionSelected === "function") {
      return props.isOptionSelected(option, selectValue);
    }
    var candidate = getOptionValue2(props, option);
    return selectValue.some(function(i3) {
      return getOptionValue2(props, i3) === candidate;
    });
  }
  function _filterOption(props, option, inputValue) {
    return props.filterOption ? props.filterOption(option, inputValue) : true;
  }
  var shouldHideSelectedOptions = function shouldHideSelectedOptions2(props) {
    var hideSelectedOptions = props.hideSelectedOptions, isMulti = props.isMulti;
    if (hideSelectedOptions === void 0)
      return isMulti;
    return hideSelectedOptions;
  };
  var instanceId = 1;
  var Select = /* @__PURE__ */ function(_Component) {
    _inherits19(Select2, _Component);
    var _super = _createSuper19(Select2);
    function Select2(_props) {
      var _this;
      _classCallCheck20(this, Select2);
      _this = _super.call(this, _props);
      _this.state = {
        ariaSelection: null,
        focusedOption: null,
        focusedValue: null,
        inputIsHidden: false,
        isFocused: false,
        selectValue: [],
        clearFocusValueOnUpdate: false,
        prevWasFocused: false,
        inputIsHiddenAfterUpdate: void 0,
        prevProps: void 0
      };
      _this.blockOptionHover = false;
      _this.isComposing = false;
      _this.commonProps = void 0;
      _this.initialTouchX = 0;
      _this.initialTouchY = 0;
      _this.instancePrefix = "";
      _this.openAfterFocus = false;
      _this.scrollToFocusedOptionOnUpdate = false;
      _this.userIsDragging = void 0;
      _this.controlRef = null;
      _this.getControlRef = function(ref) {
        _this.controlRef = ref;
      };
      _this.focusedOptionRef = null;
      _this.getFocusedOptionRef = function(ref) {
        _this.focusedOptionRef = ref;
      };
      _this.menuListRef = null;
      _this.getMenuListRef = function(ref) {
        _this.menuListRef = ref;
      };
      _this.inputRef = null;
      _this.getInputRef = function(ref) {
        _this.inputRef = ref;
      };
      _this.focus = _this.focusInput;
      _this.blur = _this.blurInput;
      _this.onChange = function(newValue, actionMeta) {
        var _this$props = _this.props, onChange2 = _this$props.onChange, name = _this$props.name;
        actionMeta.name = name;
        _this.ariaOnChange(newValue, actionMeta);
        onChange2(newValue, actionMeta);
      };
      _this.setValue = function(newValue, action, option) {
        var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti, inputValue = _this$props2.inputValue;
        _this.onInputChange("", {
          action: "set-value",
          prevInputValue: inputValue
        });
        if (closeMenuOnSelect) {
          _this.setState({
            inputIsHiddenAfterUpdate: !isMulti
          });
          _this.onMenuClose();
        }
        _this.setState({
          clearFocusValueOnUpdate: true
        });
        _this.onChange(newValue, {
          action,
          option
        });
      };
      _this.selectOption = function(newValue) {
        var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti, name = _this$props3.name;
        var selectValue = _this.state.selectValue;
        var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
        var isDisabled = _this.isOptionDisabled(newValue, selectValue);
        if (deselected) {
          var candidate = _this.getOptionValue(newValue);
          _this.setValue(multiValueAsValue(selectValue.filter(function(i3) {
            return _this.getOptionValue(i3) !== candidate;
          })), "deselect-option", newValue);
        } else if (!isDisabled) {
          if (isMulti) {
            _this.setValue(multiValueAsValue([].concat(_toConsumableArray12(selectValue), [newValue])), "select-option", newValue);
          } else {
            _this.setValue(singleValueAsValue(newValue), "select-option");
          }
        } else {
          _this.ariaOnChange(singleValueAsValue(newValue), {
            action: "select-option",
            option: newValue,
            name
          });
          return;
        }
        if (blurInputOnSelect) {
          _this.blurInput();
        }
      };
      _this.removeValue = function(removedValue) {
        var isMulti = _this.props.isMulti;
        var selectValue = _this.state.selectValue;
        var candidate = _this.getOptionValue(removedValue);
        var newValueArray = selectValue.filter(function(i3) {
          return _this.getOptionValue(i3) !== candidate;
        });
        var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
        _this.onChange(newValue, {
          action: "remove-value",
          removedValue
        });
        _this.focusInput();
      };
      _this.clearValue = function() {
        var selectValue = _this.state.selectValue;
        _this.onChange(valueTernary(_this.props.isMulti, [], null), {
          action: "clear",
          removedValues: selectValue
        });
      };
      _this.popValue = function() {
        var isMulti = _this.props.isMulti;
        var selectValue = _this.state.selectValue;
        var lastSelectedValue = selectValue[selectValue.length - 1];
        var newValueArray = selectValue.slice(0, selectValue.length - 1);
        var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
        _this.onChange(newValue, {
          action: "pop-value",
          removedValue: lastSelectedValue
        });
      };
      _this.getValue = function() {
        return _this.state.selectValue;
      };
      _this.cx = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return classNames22.apply(void 0, [_this.props.classNamePrefix].concat(args));
      };
      _this.getOptionLabel = function(data) {
        return getOptionLabel2(_this.props, data);
      };
      _this.getOptionValue = function(data) {
        return getOptionValue2(_this.props, data);
      };
      _this.getStyles = function(key, props) {
        var base = defaultStyles[key](props);
        base.boxSizing = "border-box";
        var custom = _this.props.styles[key];
        return custom ? custom(base, props) : base;
      };
      _this.getElementId = function(element2) {
        return "".concat(_this.instancePrefix, "-").concat(element2);
      };
      _this.getComponents = function() {
        return defaultComponents(_this.props);
      };
      _this.buildCategorizedOptions = function() {
        return buildCategorizedOptions(_this.props, _this.state.selectValue);
      };
      _this.getCategorizedOptions = function() {
        return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
      };
      _this.buildFocusableOptions = function() {
        return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
      };
      _this.getFocusableOptions = function() {
        return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
      };
      _this.ariaOnChange = function(value2, actionMeta) {
        _this.setState({
          ariaSelection: _objectSpread25({
            value: value2
          }, actionMeta)
        });
      };
      _this.onMenuMouseDown = function(event) {
        if (event.button !== 0) {
          return;
        }
        event.stopPropagation();
        event.preventDefault();
        _this.focusInput();
      };
      _this.onMenuMouseMove = function(event) {
        _this.blockOptionHover = false;
      };
      _this.onControlMouseDown = function(event) {
        if (event.defaultPrevented) {
          return;
        }
        var openMenuOnClick = _this.props.openMenuOnClick;
        if (!_this.state.isFocused) {
          if (openMenuOnClick) {
            _this.openAfterFocus = true;
          }
          _this.focusInput();
        } else if (!_this.props.menuIsOpen) {
          if (openMenuOnClick) {
            _this.openMenu("first");
          }
        } else {
          if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
            _this.onMenuClose();
          }
        }
        if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
          event.preventDefault();
        }
      };
      _this.onDropdownIndicatorMouseDown = function(event) {
        if (event && event.type === "mousedown" && event.button !== 0) {
          return;
        }
        if (_this.props.isDisabled)
          return;
        var _this$props4 = _this.props, isMulti = _this$props4.isMulti, menuIsOpen = _this$props4.menuIsOpen;
        _this.focusInput();
        if (menuIsOpen) {
          _this.setState({
            inputIsHiddenAfterUpdate: !isMulti
          });
          _this.onMenuClose();
        } else {
          _this.openMenu("first");
        }
        event.preventDefault();
      };
      _this.onClearIndicatorMouseDown = function(event) {
        if (event && event.type === "mousedown" && event.button !== 0) {
          return;
        }
        _this.clearValue();
        event.preventDefault();
        _this.openAfterFocus = false;
        if (event.type === "touchend") {
          _this.focusInput();
        } else {
          setTimeout(function() {
            return _this.focusInput();
          });
        }
      };
      _this.onScroll = function(event) {
        if (typeof _this.props.closeMenuOnScroll === "boolean") {
          if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
            _this.props.onMenuClose();
          }
        } else if (typeof _this.props.closeMenuOnScroll === "function") {
          if (_this.props.closeMenuOnScroll(event)) {
            _this.props.onMenuClose();
          }
        }
      };
      _this.onCompositionStart = function() {
        _this.isComposing = true;
      };
      _this.onCompositionEnd = function() {
        _this.isComposing = false;
      };
      _this.onTouchStart = function(_ref23) {
        var touches = _ref23.touches;
        var touch = touches && touches.item(0);
        if (!touch) {
          return;
        }
        _this.initialTouchX = touch.clientX;
        _this.initialTouchY = touch.clientY;
        _this.userIsDragging = false;
      };
      _this.onTouchMove = function(_ref3) {
        var touches = _ref3.touches;
        var touch = touches && touches.item(0);
        if (!touch) {
          return;
        }
        var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
        var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
        var moveThreshold = 5;
        _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
      };
      _this.onTouchEnd = function(event) {
        if (_this.userIsDragging)
          return;
        if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
          _this.blurInput();
        }
        _this.initialTouchX = 0;
        _this.initialTouchY = 0;
      };
      _this.onControlTouchEnd = function(event) {
        if (_this.userIsDragging)
          return;
        _this.onControlMouseDown(event);
      };
      _this.onClearIndicatorTouchEnd = function(event) {
        if (_this.userIsDragging)
          return;
        _this.onClearIndicatorMouseDown(event);
      };
      _this.onDropdownIndicatorTouchEnd = function(event) {
        if (_this.userIsDragging)
          return;
        _this.onDropdownIndicatorMouseDown(event);
      };
      _this.handleInputChange = function(event) {
        var prevInputValue = _this.props.inputValue;
        var inputValue = event.currentTarget.value;
        _this.setState({
          inputIsHiddenAfterUpdate: false
        });
        _this.onInputChange(inputValue, {
          action: "input-change",
          prevInputValue
        });
        if (!_this.props.menuIsOpen) {
          _this.onMenuOpen();
        }
      };
      _this.onInputFocus = function(event) {
        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
        _this.setState({
          inputIsHiddenAfterUpdate: false,
          isFocused: true
        });
        if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
          _this.openMenu("first");
        }
        _this.openAfterFocus = false;
      };
      _this.onInputBlur = function(event) {
        var prevInputValue = _this.props.inputValue;
        if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
          _this.inputRef.focus();
          return;
        }
        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }
        _this.onInputChange("", {
          action: "input-blur",
          prevInputValue
        });
        _this.onMenuClose();
        _this.setState({
          focusedValue: null,
          isFocused: false
        });
      };
      _this.onOptionHover = function(focusedOption) {
        if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
          return;
        }
        _this.setState({
          focusedOption
        });
      };
      _this.shouldHideSelectedOptions = function() {
        return shouldHideSelectedOptions(_this.props);
      };
      _this.onKeyDown = function(event) {
        var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, isDisabled = _this$props5.isDisabled, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus;
        var _this$state = _this.state, focusedOption = _this$state.focusedOption, focusedValue = _this$state.focusedValue, selectValue = _this$state.selectValue;
        if (isDisabled)
          return;
        if (typeof onKeyDown === "function") {
          onKeyDown(event);
          if (event.defaultPrevented) {
            return;
          }
        }
        _this.blockOptionHover = true;
        switch (event.key) {
          case "ArrowLeft":
            if (!isMulti || inputValue)
              return;
            _this.focusValue("previous");
            break;
          case "ArrowRight":
            if (!isMulti || inputValue)
              return;
            _this.focusValue("next");
            break;
          case "Delete":
          case "Backspace":
            if (inputValue)
              return;
            if (focusedValue) {
              _this.removeValue(focusedValue);
            } else {
              if (!backspaceRemovesValue)
                return;
              if (isMulti) {
                _this.popValue();
              } else if (isClearable) {
                _this.clearValue();
              }
            }
            break;
          case "Tab":
            if (_this.isComposing)
              return;
            if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
              return;
            }
            _this.selectOption(focusedOption);
            break;
          case "Enter":
            if (event.keyCode === 229) {
              break;
            }
            if (menuIsOpen) {
              if (!focusedOption)
                return;
              if (_this.isComposing)
                return;
              _this.selectOption(focusedOption);
              break;
            }
            return;
          case "Escape":
            if (menuIsOpen) {
              _this.setState({
                inputIsHiddenAfterUpdate: false
              });
              _this.onInputChange("", {
                action: "menu-close",
                prevInputValue: inputValue
              });
              _this.onMenuClose();
            } else if (isClearable && escapeClearsValue) {
              _this.clearValue();
            }
            break;
          case " ":
            if (inputValue) {
              return;
            }
            if (!menuIsOpen) {
              _this.openMenu("first");
              break;
            }
            if (!focusedOption)
              return;
            _this.selectOption(focusedOption);
            break;
          case "ArrowUp":
            if (menuIsOpen) {
              _this.focusOption("up");
            } else {
              _this.openMenu("last");
            }
            break;
          case "ArrowDown":
            if (menuIsOpen) {
              _this.focusOption("down");
            } else {
              _this.openMenu("first");
            }
            break;
          case "PageUp":
            if (!menuIsOpen)
              return;
            _this.focusOption("pageup");
            break;
          case "PageDown":
            if (!menuIsOpen)
              return;
            _this.focusOption("pagedown");
            break;
          case "Home":
            if (!menuIsOpen)
              return;
            _this.focusOption("first");
            break;
          case "End":
            if (!menuIsOpen)
              return;
            _this.focusOption("last");
            break;
          default:
            return;
        }
        event.preventDefault();
      };
      _this.instancePrefix = "react-select-" + (_this.props.instanceId || ++instanceId);
      _this.state.selectValue = cleanValue(_props.value);
      return _this;
    }
    _createClass20(Select2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startListeningComposition();
        this.startListeningToTouch();
        if (this.props.closeMenuOnScroll && document && document.addEventListener) {
          document.addEventListener("scroll", this.onScroll, true);
        }
        if (this.props.autoFocus) {
          this.focusInput();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props6 = this.props, isDisabled = _this$props6.isDisabled, menuIsOpen = _this$props6.menuIsOpen;
        var isFocused = this.state.isFocused;
        if (isFocused && !isDisabled && prevProps.isDisabled || isFocused && menuIsOpen && !prevProps.menuIsOpen) {
          this.focusInput();
        }
        if (isFocused && isDisabled && !prevProps.isDisabled) {
          this.setState({
            isFocused: false
          }, this.onMenuClose);
        }
        if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
          scrollIntoView(this.menuListRef, this.focusedOptionRef);
          this.scrollToFocusedOptionOnUpdate = false;
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.stopListeningComposition();
        this.stopListeningToTouch();
        document.removeEventListener("scroll", this.onScroll, true);
      }
    }, {
      key: "onMenuOpen",
      value: function onMenuOpen() {
        this.props.onMenuOpen();
      }
    }, {
      key: "onMenuClose",
      value: function onMenuClose() {
        this.onInputChange("", {
          action: "menu-close",
          prevInputValue: this.props.inputValue
        });
        this.props.onMenuClose();
      }
    }, {
      key: "onInputChange",
      value: function onInputChange(newValue, actionMeta) {
        this.props.onInputChange(newValue, actionMeta);
      }
    }, {
      key: "focusInput",
      value: function focusInput() {
        if (!this.inputRef)
          return;
        this.inputRef.focus();
      }
    }, {
      key: "blurInput",
      value: function blurInput() {
        if (!this.inputRef)
          return;
        this.inputRef.blur();
      }
    }, {
      key: "openMenu",
      value: function openMenu(focusOption) {
        var _this2 = this;
        var _this$state2 = this.state, selectValue = _this$state2.selectValue, isFocused = _this$state2.isFocused;
        var focusableOptions = this.buildFocusableOptions();
        var openAtIndex = focusOption === "first" ? 0 : focusableOptions.length - 1;
        if (!this.props.isMulti) {
          var selectedIndex = focusableOptions.indexOf(selectValue[0]);
          if (selectedIndex > -1) {
            openAtIndex = selectedIndex;
          }
        }
        this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
        this.setState({
          inputIsHiddenAfterUpdate: false,
          focusedValue: null,
          focusedOption: focusableOptions[openAtIndex]
        }, function() {
          return _this2.onMenuOpen();
        });
      }
    }, {
      key: "focusValue",
      value: function focusValue(direction) {
        var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;
        if (!this.props.isMulti)
          return;
        this.setState({
          focusedOption: null
        });
        var focusedIndex = selectValue.indexOf(focusedValue);
        if (!focusedValue) {
          focusedIndex = -1;
        }
        var lastIndex = selectValue.length - 1;
        var nextFocus = -1;
        if (!selectValue.length)
          return;
        switch (direction) {
          case "previous":
            if (focusedIndex === 0) {
              nextFocus = 0;
            } else if (focusedIndex === -1) {
              nextFocus = lastIndex;
            } else {
              nextFocus = focusedIndex - 1;
            }
            break;
          case "next":
            if (focusedIndex > -1 && focusedIndex < lastIndex) {
              nextFocus = focusedIndex + 1;
            }
            break;
        }
        this.setState({
          inputIsHidden: nextFocus !== -1,
          focusedValue: selectValue[nextFocus]
        });
      }
    }, {
      key: "focusOption",
      value: function focusOption() {
        var direction = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "first";
        var pageSize = this.props.pageSize;
        var focusedOption = this.state.focusedOption;
        var options2 = this.getFocusableOptions();
        if (!options2.length)
          return;
        var nextFocus = 0;
        var focusedIndex = options2.indexOf(focusedOption);
        if (!focusedOption) {
          focusedIndex = -1;
        }
        if (direction === "up") {
          nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options2.length - 1;
        } else if (direction === "down") {
          nextFocus = (focusedIndex + 1) % options2.length;
        } else if (direction === "pageup") {
          nextFocus = focusedIndex - pageSize;
          if (nextFocus < 0)
            nextFocus = 0;
        } else if (direction === "pagedown") {
          nextFocus = focusedIndex + pageSize;
          if (nextFocus > options2.length - 1)
            nextFocus = options2.length - 1;
        } else if (direction === "last") {
          nextFocus = options2.length - 1;
        }
        this.scrollToFocusedOptionOnUpdate = true;
        this.setState({
          focusedOption: options2[nextFocus],
          focusedValue: null
        });
      }
    }, {
      key: "getTheme",
      value: function getTheme() {
        if (!this.props.theme) {
          return defaultTheme;
        }
        if (typeof this.props.theme === "function") {
          return this.props.theme(defaultTheme);
        }
        return _objectSpread25(_objectSpread25({}, defaultTheme), this.props.theme);
      }
    }, {
      key: "getCommonProps",
      value: function getCommonProps() {
        var clearValue = this.clearValue, cx = this.cx, getStyles = this.getStyles, getValue = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props;
        var isMulti = props.isMulti, isRtl = props.isRtl, options2 = props.options;
        var hasValue = this.hasValue();
        return {
          clearValue,
          cx,
          getStyles,
          getValue,
          hasValue,
          isMulti,
          isRtl,
          options: options2,
          selectOption,
          selectProps: props,
          setValue,
          theme: this.getTheme()
        };
      }
    }, {
      key: "hasValue",
      value: function hasValue() {
        var selectValue = this.state.selectValue;
        return selectValue.length > 0;
      }
    }, {
      key: "hasOptions",
      value: function hasOptions() {
        return !!this.getFocusableOptions().length;
      }
    }, {
      key: "isClearable",
      value: function isClearable() {
        var _this$props7 = this.props, isClearable2 = _this$props7.isClearable, isMulti = _this$props7.isMulti;
        if (isClearable2 === void 0)
          return isMulti;
        return isClearable2;
      }
    }, {
      key: "isOptionDisabled",
      value: function isOptionDisabled3(option, selectValue) {
        return _isOptionDisabled(this.props, option, selectValue);
      }
    }, {
      key: "isOptionSelected",
      value: function isOptionSelected(option, selectValue) {
        return _isOptionSelected(this.props, option, selectValue);
      }
    }, {
      key: "filterOption",
      value: function filterOption(option, inputValue) {
        return _filterOption(this.props, option, inputValue);
      }
    }, {
      key: "formatOptionLabel",
      value: function formatOptionLabel(data, context2) {
        if (typeof this.props.formatOptionLabel === "function") {
          var _inputValue = this.props.inputValue;
          var _selectValue = this.state.selectValue;
          return this.props.formatOptionLabel(data, {
            context: context2,
            inputValue: _inputValue,
            selectValue: _selectValue
          });
        } else {
          return this.getOptionLabel(data);
        }
      }
    }, {
      key: "formatGroupLabel",
      value: function formatGroupLabel3(data) {
        return this.props.formatGroupLabel(data);
      }
    }, {
      key: "startListeningComposition",
      value: function startListeningComposition() {
        if (document && document.addEventListener) {
          document.addEventListener("compositionstart", this.onCompositionStart, false);
          document.addEventListener("compositionend", this.onCompositionEnd, false);
        }
      }
    }, {
      key: "stopListeningComposition",
      value: function stopListeningComposition() {
        if (document && document.removeEventListener) {
          document.removeEventListener("compositionstart", this.onCompositionStart);
          document.removeEventListener("compositionend", this.onCompositionEnd);
        }
      }
    }, {
      key: "startListeningToTouch",
      value: function startListeningToTouch() {
        if (document && document.addEventListener) {
          document.addEventListener("touchstart", this.onTouchStart, false);
          document.addEventListener("touchmove", this.onTouchMove, false);
          document.addEventListener("touchend", this.onTouchEnd, false);
        }
      }
    }, {
      key: "stopListeningToTouch",
      value: function stopListeningToTouch() {
        if (document && document.removeEventListener) {
          document.removeEventListener("touchstart", this.onTouchStart);
          document.removeEventListener("touchmove", this.onTouchMove);
          document.removeEventListener("touchend", this.onTouchEnd);
        }
      }
    }, {
      key: "renderInput",
      value: function renderInput() {
        var _this$props8 = this.props, isDisabled = _this$props8.isDisabled, isSearchable = _this$props8.isSearchable, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, tabIndex = _this$props8.tabIndex, form = _this$props8.form, menuIsOpen = _this$props8.menuIsOpen;
        var _this$getComponents = this.getComponents(), Input4 = _this$getComponents.Input;
        var _this$state4 = this.state, inputIsHidden = _this$state4.inputIsHidden, ariaSelection = _this$state4.ariaSelection;
        var commonProps = this.commonProps;
        var id = inputId || this.getElementId("input");
        var ariaAttributes = _objectSpread25(_objectSpread25(_objectSpread25({
          "aria-autocomplete": "list",
          "aria-expanded": menuIsOpen,
          "aria-haspopup": true,
          "aria-errormessage": this.props["aria-errormessage"],
          "aria-invalid": this.props["aria-invalid"],
          "aria-label": this.props["aria-label"],
          "aria-labelledby": this.props["aria-labelledby"],
          role: "combobox"
        }, menuIsOpen && {
          "aria-controls": this.getElementId("listbox"),
          "aria-owns": this.getElementId("listbox")
        }), !isSearchable && {
          "aria-readonly": true
        }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus" && {
          "aria-describedby": this.getElementId("live-region")
        } : {
          "aria-describedby": this.getElementId("placeholder")
        });
        if (!isSearchable) {
          return /* @__PURE__ */ React49.createElement(DummyInput, _extends({
            id,
            innerRef: this.getInputRef,
            onBlur: this.onInputBlur,
            onChange: noop2,
            onFocus: this.onInputFocus,
            disabled: isDisabled,
            tabIndex,
            inputMode: "none",
            form,
            value: ""
          }, ariaAttributes));
        }
        return /* @__PURE__ */ React49.createElement(Input4, _extends({}, commonProps, {
          autoCapitalize: "none",
          autoComplete: "off",
          autoCorrect: "off",
          id,
          innerRef: this.getInputRef,
          isDisabled,
          isHidden: inputIsHidden,
          onBlur: this.onInputBlur,
          onChange: this.handleInputChange,
          onFocus: this.onInputFocus,
          spellCheck: "false",
          tabIndex,
          form,
          type: "text",
          value: inputValue
        }, ariaAttributes));
      }
    }, {
      key: "renderPlaceholderOrValue",
      value: function renderPlaceholderOrValue() {
        var _this3 = this;
        var _this$getComponents2 = this.getComponents(), MultiValue3 = _this$getComponents2.MultiValue, MultiValueContainer2 = _this$getComponents2.MultiValueContainer, MultiValueLabel2 = _this$getComponents2.MultiValueLabel, MultiValueRemove2 = _this$getComponents2.MultiValueRemove, SingleValue3 = _this$getComponents2.SingleValue, Placeholder3 = _this$getComponents2.Placeholder;
        var commonProps = this.commonProps;
        var _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue, placeholder = _this$props9.placeholder;
        var _this$state5 = this.state, selectValue = _this$state5.selectValue, focusedValue = _this$state5.focusedValue, isFocused = _this$state5.isFocused;
        if (!this.hasValue() || !controlShouldRenderValue) {
          return inputValue ? null : /* @__PURE__ */ React49.createElement(Placeholder3, _extends({}, commonProps, {
            key: "placeholder",
            isDisabled,
            isFocused,
            innerProps: {
              id: this.getElementId("placeholder")
            }
          }), placeholder);
        }
        if (isMulti) {
          return selectValue.map(function(opt, index2) {
            var isOptionFocused = opt === focusedValue;
            var key = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
            return /* @__PURE__ */ React49.createElement(MultiValue3, _extends({}, commonProps, {
              components: {
                Container: MultiValueContainer2,
                Label: MultiValueLabel2,
                Remove: MultiValueRemove2
              },
              isFocused: isOptionFocused,
              isDisabled,
              key,
              index: index2,
              removeProps: {
                onClick: function onClick() {
                  return _this3.removeValue(opt);
                },
                onTouchEnd: function onTouchEnd() {
                  return _this3.removeValue(opt);
                },
                onMouseDown: function onMouseDown(e3) {
                  e3.preventDefault();
                }
              },
              data: opt
            }), _this3.formatOptionLabel(opt, "value"));
          });
        }
        if (inputValue) {
          return null;
        }
        var singleValue = selectValue[0];
        return /* @__PURE__ */ React49.createElement(SingleValue3, _extends({}, commonProps, {
          data: singleValue,
          isDisabled
        }), this.formatOptionLabel(singleValue, "value"));
      }
    }, {
      key: "renderClearIndicator",
      value: function renderClearIndicator() {
        var _this$getComponents3 = this.getComponents(), ClearIndicator3 = _this$getComponents3.ClearIndicator;
        var commonProps = this.commonProps;
        var _this$props10 = this.props, isDisabled = _this$props10.isDisabled, isLoading = _this$props10.isLoading;
        var isFocused = this.state.isFocused;
        if (!this.isClearable() || !ClearIndicator3 || isDisabled || !this.hasValue() || isLoading) {
          return null;
        }
        var innerProps = {
          onMouseDown: this.onClearIndicatorMouseDown,
          onTouchEnd: this.onClearIndicatorTouchEnd,
          "aria-hidden": "true"
        };
        return /* @__PURE__ */ React49.createElement(ClearIndicator3, _extends({}, commonProps, {
          innerProps,
          isFocused
        }));
      }
    }, {
      key: "renderLoadingIndicator",
      value: function renderLoadingIndicator() {
        var _this$getComponents4 = this.getComponents(), LoadingIndicator3 = _this$getComponents4.LoadingIndicator;
        var commonProps = this.commonProps;
        var _this$props11 = this.props, isDisabled = _this$props11.isDisabled, isLoading = _this$props11.isLoading;
        var isFocused = this.state.isFocused;
        if (!LoadingIndicator3 || !isLoading)
          return null;
        var innerProps = {
          "aria-hidden": "true"
        };
        return /* @__PURE__ */ React49.createElement(LoadingIndicator3, _extends({}, commonProps, {
          innerProps,
          isDisabled,
          isFocused
        }));
      }
    }, {
      key: "renderIndicatorSeparator",
      value: function renderIndicatorSeparator() {
        var _this$getComponents5 = this.getComponents(), DropdownIndicator3 = _this$getComponents5.DropdownIndicator, IndicatorSeparator3 = _this$getComponents5.IndicatorSeparator;
        if (!DropdownIndicator3 || !IndicatorSeparator3)
          return null;
        var commonProps = this.commonProps;
        var isDisabled = this.props.isDisabled;
        var isFocused = this.state.isFocused;
        return /* @__PURE__ */ React49.createElement(IndicatorSeparator3, _extends({}, commonProps, {
          isDisabled,
          isFocused
        }));
      }
    }, {
      key: "renderDropdownIndicator",
      value: function renderDropdownIndicator() {
        var _this$getComponents6 = this.getComponents(), DropdownIndicator3 = _this$getComponents6.DropdownIndicator;
        if (!DropdownIndicator3)
          return null;
        var commonProps = this.commonProps;
        var isDisabled = this.props.isDisabled;
        var isFocused = this.state.isFocused;
        var innerProps = {
          onMouseDown: this.onDropdownIndicatorMouseDown,
          onTouchEnd: this.onDropdownIndicatorTouchEnd,
          "aria-hidden": "true"
        };
        return /* @__PURE__ */ React49.createElement(DropdownIndicator3, _extends({}, commonProps, {
          innerProps,
          isDisabled,
          isFocused
        }));
      }
    }, {
      key: "renderMenu",
      value: function renderMenu() {
        var _this4 = this;
        var _this$getComponents7 = this.getComponents(), Group3 = _this$getComponents7.Group, GroupHeading3 = _this$getComponents7.GroupHeading, Menu3 = _this$getComponents7.Menu, MenuList3 = _this$getComponents7.MenuList, MenuPortal2 = _this$getComponents7.MenuPortal, LoadingMessage3 = _this$getComponents7.LoadingMessage, NoOptionsMessage3 = _this$getComponents7.NoOptionsMessage, Option3 = _this$getComponents7.Option;
        var commonProps = this.commonProps;
        var focusedOption = this.state.focusedOption;
        var _this$props12 = this.props, captureMenuScroll = _this$props12.captureMenuScroll, inputValue = _this$props12.inputValue, isLoading = _this$props12.isLoading, loadingMessage2 = _this$props12.loadingMessage, minMenuHeight = _this$props12.minMenuHeight, maxMenuHeight = _this$props12.maxMenuHeight, menuIsOpen = _this$props12.menuIsOpen, menuPlacement = _this$props12.menuPlacement, menuPosition = _this$props12.menuPosition, menuPortalTarget = _this$props12.menuPortalTarget, menuShouldBlockScroll = _this$props12.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView, noOptionsMessage2 = _this$props12.noOptionsMessage, onMenuScrollToTop = _this$props12.onMenuScrollToTop, onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
        if (!menuIsOpen)
          return null;
        var render = function render2(props, id) {
          var type = props.type, data = props.data, isDisabled = props.isDisabled, isSelected = props.isSelected, label = props.label, value2 = props.value;
          var isFocused = focusedOption === data;
          var onHover = isDisabled ? void 0 : function() {
            return _this4.onOptionHover(data);
          };
          var onSelect = isDisabled ? void 0 : function() {
            return _this4.selectOption(data);
          };
          var optionId = "".concat(_this4.getElementId("option"), "-").concat(id);
          var innerProps = {
            id: optionId,
            onClick: onSelect,
            onMouseMove: onHover,
            onMouseOver: onHover,
            tabIndex: -1
          };
          return /* @__PURE__ */ React49.createElement(Option3, _extends({}, commonProps, {
            innerProps,
            data,
            isDisabled,
            isSelected,
            key: optionId,
            label,
            type,
            value: value2,
            isFocused,
            innerRef: isFocused ? _this4.getFocusedOptionRef : void 0
          }), _this4.formatOptionLabel(props.data, "menu"));
        };
        var menuUI;
        if (this.hasOptions()) {
          menuUI = this.getCategorizedOptions().map(function(item) {
            if (item.type === "group") {
              var _data = item.data, options2 = item.options, groupIndex = item.index;
              var groupId = "".concat(_this4.getElementId("group"), "-").concat(groupIndex);
              var headingId = "".concat(groupId, "-heading");
              return /* @__PURE__ */ React49.createElement(Group3, _extends({}, commonProps, {
                key: groupId,
                data: _data,
                options: options2,
                Heading: GroupHeading3,
                headingProps: {
                  id: headingId,
                  data: item.data
                },
                label: _this4.formatGroupLabel(item.data)
              }), item.options.map(function(option) {
                return render(option, "".concat(groupIndex, "-").concat(option.index));
              }));
            } else if (item.type === "option") {
              return render(item, "".concat(item.index));
            }
          });
        } else if (isLoading) {
          var message = loadingMessage2({
            inputValue
          });
          if (message === null)
            return null;
          menuUI = /* @__PURE__ */ React49.createElement(LoadingMessage3, commonProps, message);
        } else {
          var _message = noOptionsMessage2({
            inputValue
          });
          if (_message === null)
            return null;
          menuUI = /* @__PURE__ */ React49.createElement(NoOptionsMessage3, commonProps, _message);
        }
        var menuPlacementProps = {
          minMenuHeight,
          maxMenuHeight,
          menuPlacement,
          menuPosition,
          menuShouldScrollIntoView
        };
        var menuElement = /* @__PURE__ */ React49.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function(_ref4) {
          var ref = _ref4.ref, _ref4$placerProps = _ref4.placerProps, placement = _ref4$placerProps.placement, maxHeight = _ref4$placerProps.maxHeight;
          return /* @__PURE__ */ React49.createElement(Menu3, _extends({}, commonProps, menuPlacementProps, {
            innerRef: ref,
            innerProps: {
              onMouseDown: _this4.onMenuMouseDown,
              onMouseMove: _this4.onMenuMouseMove,
              id: _this4.getElementId("listbox")
            },
            isLoading,
            placement
          }), /* @__PURE__ */ React49.createElement(ScrollManager, {
            captureEnabled: captureMenuScroll,
            onTopArrive: onMenuScrollToTop,
            onBottomArrive: onMenuScrollToBottom,
            lockEnabled: menuShouldBlockScroll
          }, function(scrollTargetRef) {
            return /* @__PURE__ */ React49.createElement(MenuList3, _extends({}, commonProps, {
              innerRef: function innerRef(instance) {
                _this4.getMenuListRef(instance);
                scrollTargetRef(instance);
              },
              isLoading,
              maxHeight,
              focusedOption
            }), menuUI);
          }));
        });
        return menuPortalTarget || menuPosition === "fixed" ? /* @__PURE__ */ React49.createElement(MenuPortal2, _extends({}, commonProps, {
          appendTo: menuPortalTarget,
          controlElement: this.controlRef,
          menuPlacement,
          menuPosition
        }), menuElement) : menuElement;
      }
    }, {
      key: "renderFormField",
      value: function renderFormField() {
        var _this5 = this;
        var _this$props13 = this.props, delimiter = _this$props13.delimiter, isDisabled = _this$props13.isDisabled, isMulti = _this$props13.isMulti, name = _this$props13.name;
        var selectValue = this.state.selectValue;
        if (!name || isDisabled)
          return;
        if (isMulti) {
          if (delimiter) {
            var value2 = selectValue.map(function(opt) {
              return _this5.getOptionValue(opt);
            }).join(delimiter);
            return /* @__PURE__ */ React49.createElement("input", {
              name,
              type: "hidden",
              value: value2
            });
          } else {
            var input = selectValue.length > 0 ? selectValue.map(function(opt, i3) {
              return /* @__PURE__ */ React49.createElement("input", {
                key: "i-".concat(i3),
                name,
                type: "hidden",
                value: _this5.getOptionValue(opt)
              });
            }) : /* @__PURE__ */ React49.createElement("input", {
              name,
              type: "hidden"
            });
            return /* @__PURE__ */ React49.createElement("div", null, input);
          }
        } else {
          var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : "";
          return /* @__PURE__ */ React49.createElement("input", {
            name,
            type: "hidden",
            value: _value
          });
        }
      }
    }, {
      key: "renderLiveRegion",
      value: function renderLiveRegion() {
        var commonProps = this.commonProps;
        var _this$state6 = this.state, ariaSelection = _this$state6.ariaSelection, focusedOption = _this$state6.focusedOption, focusedValue = _this$state6.focusedValue, isFocused = _this$state6.isFocused, selectValue = _this$state6.selectValue;
        var focusableOptions = this.getFocusableOptions();
        return /* @__PURE__ */ React49.createElement(LiveRegion, _extends({}, commonProps, {
          id: this.getElementId("live-region"),
          ariaSelection,
          focusedOption,
          focusedValue,
          isFocused,
          selectValue,
          focusableOptions
        }));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$getComponents8 = this.getComponents(), Control3 = _this$getComponents8.Control, IndicatorsContainer3 = _this$getComponents8.IndicatorsContainer, SelectContainer3 = _this$getComponents8.SelectContainer, ValueContainer3 = _this$getComponents8.ValueContainer;
        var _this$props14 = this.props, className = _this$props14.className, id = _this$props14.id, isDisabled = _this$props14.isDisabled, menuIsOpen = _this$props14.menuIsOpen;
        var isFocused = this.state.isFocused;
        var commonProps = this.commonProps = this.getCommonProps();
        return /* @__PURE__ */ React49.createElement(SelectContainer3, _extends({}, commonProps, {
          className,
          innerProps: {
            id,
            onKeyDown: this.onKeyDown
          },
          isDisabled,
          isFocused
        }), this.renderLiveRegion(), /* @__PURE__ */ React49.createElement(Control3, _extends({}, commonProps, {
          innerRef: this.getControlRef,
          innerProps: {
            onMouseDown: this.onControlMouseDown,
            onTouchEnd: this.onControlTouchEnd
          },
          isDisabled,
          isFocused,
          menuIsOpen
        }), /* @__PURE__ */ React49.createElement(ValueContainer3, _extends({}, commonProps, {
          isDisabled
        }), this.renderPlaceholderOrValue(), this.renderInput()), /* @__PURE__ */ React49.createElement(IndicatorsContainer3, _extends({}, commonProps, {
          isDisabled
        }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var prevProps = state.prevProps, clearFocusValueOnUpdate = state.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate, ariaSelection = state.ariaSelection, isFocused = state.isFocused, prevWasFocused = state.prevWasFocused;
        var options2 = props.options, value2 = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti;
        var selectValue = cleanValue(value2);
        var newMenuOptionsState = {};
        if (prevProps && (value2 !== prevProps.value || options2 !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
          var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
          var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state, selectValue) : null;
          var focusedOption = getNextFocusedOption(state, focusableOptions);
          newMenuOptionsState = {
            selectValue,
            focusedOption,
            focusedValue,
            clearFocusValueOnUpdate: false
          };
        }
        var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
          inputIsHidden: inputIsHiddenAfterUpdate,
          inputIsHiddenAfterUpdate: void 0
        } : {};
        var newAriaSelection = ariaSelection;
        var hasKeptFocus = isFocused && prevWasFocused;
        if (isFocused && !hasKeptFocus) {
          newAriaSelection = {
            value: valueTernary(isMulti, selectValue, selectValue[0] || null),
            options: selectValue,
            action: "initial-input-focus"
          };
          hasKeptFocus = !prevWasFocused;
        }
        if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus") {
          newAriaSelection = null;
        }
        return _objectSpread25(_objectSpread25(_objectSpread25({}, newMenuOptionsState), newInputIsHiddenState), {}, {
          prevProps: props,
          ariaSelection: newAriaSelection,
          prevWasFocused: hasKeptFocus
        });
      }
    }]);
    return Select2;
  }(import_react58.Component);
  Select.defaultProps = defaultProps2;

  // node_modules/react-select/dist/react-select.esm.js
  var import_cache = __toModule(require_emotion_cache_cjs());
  var import_react_dom3 = __toModule(require_react_dom());
  var StateManagedSelect = /* @__PURE__ */ (0, import_react60.forwardRef)(function(props, ref) {
    var baseSelectProps = useStateManager(props);
    return /* @__PURE__ */ React50.createElement(Select, _extends({
      ref
    }, baseSelectProps));
  });
  var react_select_esm_default = StateManagedSelect;

  // src/components/screens/Obs.tsx
  function Obs({
    channelInfo,
    settings,
    setSettings
  }) {
    const [copiedAlertURL, copyAlertURL] = useCopyToClipboard_default(`https://giveaway-o-tron.vercel.app/alerts/gw2?channel=${channelInfo.userId}`);
    const [copiedStatusURL, copyStatusURL] = useCopyToClipboard_default(`https://giveaway-o-tron.vercel.app/alerts/status?channel=${channelInfo.userId}`);
    return /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "mt-2 flex flex-col gap-3 flex-1 pb-2 max-h-full"
    }, /* @__PURE__ */ import_react61.default.createElement("h1", {
      className: "text-3xl -mb-1"
    }, "OBS Settings"), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react61.default.createElement("button", {
      className: "bg-purple-600 px-2 py-1 flex-1 rounded-md transition-transform hover:scale-110 flex flex-row gap-1 justify-center items-center",
      onClick: () => copyAlertURL()
    }, copiedAlertURL ? /* @__PURE__ */ import_react61.default.createElement(import_react61.default.Fragment, null, /* @__PURE__ */ import_react61.default.createElement(FaCheck, null), " Copied") : /* @__PURE__ */ import_react61.default.createElement(import_react61.default.Fragment, null, /* @__PURE__ */ import_react61.default.createElement(FaTrophy, null), " Copy Winner Alert Source URL")), /* @__PURE__ */ import_react61.default.createElement("button", {
      className: "bg-purple-600 px-2 py-1 flex-1 rounded-md transition-transform hover:scale-110 flex flex-row gap-1 justify-center items-center",
      onClick: () => copyStatusURL()
    }, copiedStatusURL ? /* @__PURE__ */ import_react61.default.createElement(import_react61.default.Fragment, null, /* @__PURE__ */ import_react61.default.createElement(FaCheck, null), " Copied") : /* @__PURE__ */ import_react61.default.createElement(import_react61.default.Fragment, null, /* @__PURE__ */ import_react61.default.createElement(FaTrophy, null), " Copy Giveaway Status Alert Source URL"))), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-col gap-2"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ import_react61.default.createElement("h2", {
      className: "text-xl"
    }, "Alert Settings"))), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-row gap-2 justify-center items-center"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "Will clear chat, and then pause it after the time, to enable a giveaway with cut off"
    }, "Duration"), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "px-2 flex-1 flex justify-center items-center"
    }, /* @__PURE__ */ import_react61.default.createElement(SliderInner, {
      min: ONE_S,
      max: ONE_S * 30,
      value: settings.alertDuration || defaultSettings.alertDuration,
      step: ONE_S,
      onChange: (v2) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { alertDuration: v2 }))
    })), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1 justify-center items-center text-center flex"
    }, formatDistanceStrict(Date.now() + (settings.alertDuration || defaultSettings.alertDuration), new Date()))), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1 border border-purple-600 rounded-md flex relative"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "bg-purple-600 px-2 py-1 flex-0",
      title: "Will clear chat, and then pause it after the time, to enable a giveaway with cut off"
    }, "Theme"), /* @__PURE__ */ import_react61.default.createElement(react_select_esm_default, {
      isSearchable: false,
      isClearable: false,
      onChange: (e3) => {
        setSettings((s3) => __spreadProps(__spreadValues({}, s3), { alertTheme: e3 == null ? void 0 : e3.value }));
      },
      styles: {
        container: (provided) => __spreadProps(__spreadValues({}, provided), {
          flex: 1
        }),
        input: (provided) => __spreadProps(__spreadValues({}, provided), {
          outline: "none"
        }),
        control: (provided) => __spreadProps(__spreadValues({}, provided), {
          backgroundColor: "#1f2937",
          border: 0,
          color: "#FFFFFF",
          borderBottomLeftRadius: 0,
          borderTopLeftRadius: 0,
          height: 32,
          minHeight: 32,
          cursor: "pointer"
        }),
        singleValue: (provided) => __spreadProps(__spreadValues({}, provided), {
          color: "#FFFFFF",
          textAlign: "center"
        }),
        menu: (provided) => __spreadProps(__spreadValues({}, provided), {
          border: "1px solid #7c3aed",
          backgroundColor: "#4b5563"
        }),
        menuList: (provided) => __spreadValues({}, provided),
        option: (provided, state) => __spreadProps(__spreadValues({}, provided), {
          backgroundColor: state.isFocused ? "#7c3aed" : state.isSelected ? "#7c3aed" : void 0,
          cursor: "pointer"
        })
      },
      value: alertOptions.find((i3) => (settings.alertTheme || defaultSettings.alertTheme) === i3.value),
      options: alertOptions
    })))), settings.alertTheme === AlertTheme.Custom ? /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-col gap-2"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ import_react61.default.createElement("h2", {
      className: "text-xl"
    }, "Custom Theme Settings"))), /* @__PURE__ */ import_react61.default.createElement(Input, {
      value: settings.alertCustomImageUrl,
      label: "Image URL",
      placeholder: "URL...",
      onChange: (e3) => setSettings((s3) => __spreadProps(__spreadValues({}, s3), { alertCustomImageUrl: e3.target.value.trim() }))
    })) : null, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-col gap-2 flex-1"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-row gap-2"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ import_react61.default.createElement("h2", {
      className: "text-xl"
    }, "Preview"))), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "bg-gray-600 rounded-md h-full w-full flex py-2 relative"
    }, settings.alertTheme === AlertTheme.Custom ? /* @__PURE__ */ import_react61.default.createElement(CustomPreview, {
      imageUrl: settings.alertCustomImageUrl
    }) : /* @__PURE__ */ import_react61.default.createElement(GW2Preview, null)))));
  }
  function CustomPreview({ imageUrl }) {
    return /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1 flex flex-col justify-center items-center gap-2 text-center"
    }, imageUrl ? /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-1 flex justify-center items-center relative w-full overflow-hidden",
      style: {
        backgroundImage: `url(${imageUrl})`,
        backgroundSize: "contain",
        backgroundRepeat: "no-repeat",
        backgroundPosition: "center"
      }
    }) : null, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex-0 flex justify-center items-center text-2xl uppercase"
    }, "@name won!"));
  }
  function GW2Preview() {
    return /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "relative h-full w-full"
    }, /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "flex flex-1 flex-col justify-center items-center bg-transparent animate-wiggle absolute inset-0",
      style: { scale: "50%" }
    }, /* @__PURE__ */ import_react61.default.createElement("img", {
      src: "https://giveaway-o-tron.vercel.app/images/chest-notification.png"
    }), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "text-white text-4xl uppercasetext-bold left-0 right-0 text-center absolute",
      style: { top: "48%" }
    }, "Giveaway chest!"), /* @__PURE__ */ import_react61.default.createElement("div", {
      className: "text-white text-3xl uppercase px-4 py-2 text-bold text-center absolute break-all",
      style: { top: "75%", left: 50, right: 50 }
    }, "@name won!")));
  }

  // src/App.tsx
  function App() {
    return /* @__PURE__ */ import_react62.default.createElement(MemoryRouter, {
      initialEntries: ["/setup"]
    }, /* @__PURE__ */ import_react62.default.createElement(InnerApp, null));
  }
  function InnerApp() {
    useUpdateCheck();
    const [settings, setSettings] = useStorage("settings", defaultSettings);
    const [discordSettings, setDiscordSettings] = useStorage("discord", defaultDiscordSettings);
    const [winners, setWinners] = import_react62.default.useState([]);
    const [client, setClient] = import_react62.default.useState(null);
    const [channelInfo, setChannelInfo] = useStorage("channelInfo", {}, (c3) => {
      console.info("[client][app]", c3);
      if (!c3.login)
        return null;
      console.info("[client][app][startClient]");
      if (settings.autoConnect)
        setClient((cl) => cl ? cl : init3(c3));
    });
    const updateClientInfo = import_react62.default.useCallback((d3) => {
      console.info("[auth][client][update]", d3);
      setChannelInfo(d3);
      client == null ? void 0 : client.disconnect();
      client == null ? void 0 : client.removeAllListeners();
      setClient(init3(d3));
    }, [client]);
    useAuthEvents(updateClientInfo);
    import_react62.default.useEffect(() => {
      setUser({ username: channelInfo.login });
      if (channelInfo.login) {
        if (settings.autoConnect)
          setClient((cl) => cl ? cl : init3(channelInfo));
      }
    }, [channelInfo.login]);
    const [forfeits, setForfeits] = import_react62.default.useState([]);
    const onNewChat = import_react62.default.useCallback((chat) => {
      if (settings.forfeitCommand && chat.msg.toLowerCase().includes(settings.forfeitCommand.toLowerCase())) {
        setForfeits((f3) => f3.concat(chat.username));
      }
    }, [settings.forfeitCommand]);
    const [chatPaused, setChatPaused] = import_react62.default.useState(false);
    const [chatEvents, resetChat] = useChatEvents(chatPaused, winners, onNewChat);
    import_react62.default.useEffect(() => {
      window["myApp"].setTitle(channelInfo.login, !!client);
    }, [channelInfo.login, client]);
    const [pastGiveaways, setPastGiveaways] = useStorage("past-giveaways", []);
    const stats = useCacheStats();
    const cacheHistory = useCacheHistory(stats);
    return /* @__PURE__ */ import_react62.default.createElement(import_react62.default.Fragment, null, /* @__PURE__ */ import_react62.default.createElement(Header, {
      client,
      resetChat,
      setClient,
      channelInfo
    }), /* @__PURE__ */ import_react62.default.createElement(Switch, null, /* @__PURE__ */ import_react62.default.createElement(Route, {
      path: "/",
      exact: true
    }, /* @__PURE__ */ import_react62.default.createElement(MainScreen, {
      client,
      chatEvents,
      discordSettings,
      settings,
      setSettings,
      isConnected: !!client,
      channelInfo,
      chatPaused,
      setChatPaused,
      resetChat,
      winners,
      setWinners,
      setPastGiveaways,
      forfeits,
      stats,
      cacheHistory
    })), /* @__PURE__ */ import_react62.default.createElement(Route, {
      path: "/setup",
      exact: true
    }, /* @__PURE__ */ import_react62.default.createElement(Setup, {
      resetChat,
      setClient,
      channel: channelInfo,
      setChannel: setChannelInfo
    })), /* @__PURE__ */ import_react62.default.createElement(Route, {
      path: "/giveaways",
      exact: true
    }, /* @__PURE__ */ import_react62.default.createElement(PastGiveaways, {
      giveaways: pastGiveaways,
      setPastGiveaways
    })), /* @__PURE__ */ import_react62.default.createElement(Route, {
      path: "/settings",
      exact: true
    }, /* @__PURE__ */ import_react62.default.createElement(SettingsScreen, {
      settings,
      setSettings,
      forfeits,
      setForfeits
    })), /* @__PURE__ */ import_react62.default.createElement(Route, {
      path: "/discord",
      exact: true
    }, /* @__PURE__ */ import_react62.default.createElement(Discord, {
      settings: discordSettings,
      setSettings: setDiscordSettings
    })), /* @__PURE__ */ import_react62.default.createElement(Route, {
      path: "/obs",
      exact: true
    }, /* @__PURE__ */ import_react62.default.createElement(Obs, {
      channelInfo,
      settings,
      setSettings
    }))), /* @__PURE__ */ import_react62.default.createElement(Oe, null));
  }

  // src/index.tsx
  init2({
    dsn: "https://185864889dcb4a71961b896a59e09846@o304997.ingest.sentry.io/6745310",
    integrations: [new BrowserTracing()],
    tracesSampleRate: 1
  });
  setTag("version", NL_APPVERSION);
  window["myApp"] = {
    onWindowClose: async () => {
      try {
        const channelInfo = JSON.parse(await Neutralino.storage.getData(`main-channelinfo`));
        relay_default.emit("event", { type: "timer-cancel", channelId: channelInfo == null ? void 0 : channelInfo.userId });
      } catch (e3) {
        captureException(e3);
      } finally {
        Neutralino.app.exit();
      }
    },
    setTitle: (channel, isActive) => {
      Neutralino.window.setTitle(["Giveaway-o-tron", channel, isActive ? "[Connected]" : ""].filter(Boolean).join(" - "));
    }
  };
  Neutralino.init();
  Neutralino.events.on("windowClose", window["myApp"].onWindowClose);
  Neutralino.events.on("ready", async () => {
    try {
      const channelInfo = JSON.parse(await Neutralino.storage.getData(`main-channelinfo`));
      setUser({ id: channelInfo == null ? void 0 : channelInfo.userId, username: channelInfo == null ? void 0 : channelInfo.login });
    } catch (e3) {
      captureException(e3);
    } finally {
      void watch();
      import_react_dom4.default.render(/* @__PURE__ */ import_react63.default.createElement(App, null), document.querySelector("#app"));
    }
  });
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.2.3
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
/*!
 *  howler.js v2.2.3
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
